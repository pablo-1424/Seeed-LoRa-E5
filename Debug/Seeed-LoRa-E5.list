
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d178  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  0801d2b0  0801d2b0  0002d2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801e21c  0801e21c  0002e21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801e2dc  0801e2dc  00030158  2**0
                  CONTENTS
  5 .ARM          00000008  0801e2dc  0801e2dc  0002e2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801e2e4  0801e2e4  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801e2e4  0801e2e4  0002e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801e2e8  0801e2e8  0002e2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000158  20000000  0801e2ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000020d4  20000158  0801e444  00030158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000222c  0801e444  0003222c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 13 .debug_info   000452f3  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a422  00000000  00000000  00075475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003498  00000000  00000000  0007f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030c8  00000000  00000000  00082d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a7c  00000000  00000000  00085df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003eef9  00000000  00000000  000ae874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd1c6  00000000  00000000  000ed76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ba933  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d890  00000000  00000000  001ba984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000158 	.word	0x20000158
 8000154:	00000000 	.word	0x00000000
 8000158:	0801d298 	.word	0x0801d298

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000015c 	.word	0x2000015c
 8000174:	0801d298 	.word	0x0801d298

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <MX_ADC_Init+0x98>)
 8000f08:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f10:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f82:	f001 fef5 	bl	8002d70 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fb88 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000174 	.word	0x20000174
 8000f98:	40012400 	.word	0x40012400

08000f9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_ADC_MspInit+0x24>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d103      	bne.n	8000fb6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb2:	f7ff ff7b 	bl	8000eac <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_ADC_MspDeInit+0x24>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d103      	bne.n	8000fde <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f7ff ff7f 	bl	8000edc <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012400 	.word	0x40012400

08000fec <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <SYS_InitMeasurement+0x14>)
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <SYS_InitMeasurement+0x18>)
 8000ff4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000174 	.word	0x20000174
 8001004:	40012400 	.word	0x40012400

08001008 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <SYS_GetBatteryLevel+0x5c>)
 8001018:	f000 f82a 	bl	8001070 <ADC_ReadChannels>
 800101c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	e016      	b.n	8001058 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <SYS_GetBatteryLevel+0x60>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	4293      	cmp	r3, r2
 8001034:	d00b      	beq.n	800104e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <SYS_GetBatteryLevel+0x60>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001040:	fb03 f202 	mul.w	r2, r3, r2
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	80fb      	strh	r3, [r7, #6]
 800104c:	e004      	b.n	8001058 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <SYS_GetBatteryLevel+0x64>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001058:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	b4002000 	.word	0xb4002000
 8001068:	1fff75aa 	.word	0x1fff75aa
 800106c:	004c08d8 	.word	0x004c08d8

08001070 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001088:	f7ff ff3a 	bl	8000f00 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <ADC_ReadChannels+0x88>)
 800108e:	f002 fc9e 	bl	80039ce <HAL_ADCEx_Calibration_Start>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001098:	f000 fb02 	bl	80016a0 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010b0:	f002 f9aa 	bl	8003408 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010ba:	f000 faf1 	bl	80016a0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010c0:	f002 f886 	bl	80031d0 <HAL_ADC_Start>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010ca:	f000 fae9 	bl	80016a0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010ce:	f04f 31ff 	mov.w	r1, #4294967295
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010d4:	f002 f8f4 	bl	80032c0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010da:	f002 f8bf 	bl	800325c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010e0:	f002 f985 	bl	80033ee <HAL_ADC_GetValue>
 80010e4:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010e8:	f001 fff6 	bl	80030d8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80010ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000174 	.word	0x20000174

080010fc <LL_AHB1_GRP1_EnableClock>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800110a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001120:	68fb      	ldr	r3, [r7, #12]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001130:	2004      	movs	r0, #4
 8001132:	f7ff ffe3 	bl	80010fc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ffe0 	bl	80010fc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2102      	movs	r1, #2
 8001140:	200b      	movs	r0, #11
 8001142:	f002 fdea 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001146:	200b      	movs	r0, #11
 8001148:	f002 fe01 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	200c      	movs	r0, #12
 8001152:	f002 fde2 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001156:	200c      	movs	r0, #12
 8001158:	f002 fdf9 	bl	8003d4e <HAL_NVIC_EnableIRQ>

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800116c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001170:	d101      	bne.n	8001176 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001176:	2300      	movs	r3, #0
#endif
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	58004000 	.word	0x58004000

08001184 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800119c:	4b56      	ldr	r3, [pc, #344]	; (80012f8 <FLASH_IF_Write+0x174>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0299      	lsls	r1, r3, #10
 80011a2:	4b56      	ldr	r3, [pc, #344]	; (80012fc <FLASH_IF_Write+0x178>)
 80011a4:	400b      	ands	r3, r1
 80011a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	0adb      	lsrs	r3, r3, #11
 80011b2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80011be:	3b01      	subs	r3, #1
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <FLASH_IF_Write+0x174>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	0291      	lsls	r1, r2, #10
 80011c6:	4a4d      	ldr	r2, [pc, #308]	; (80012fc <FLASH_IF_Write+0x178>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80011ce:	fb01 f202 	mul.w	r2, r1, r2
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	0adb      	lsrs	r3, r3, #11
 80011d6:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d009      	beq.n	80011fe <FLASH_IF_Write+0x7a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d104      	bne.n	80011fe <FLASH_IF_Write+0x7a>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80011fe:	f06f 0304 	mvn.w	r3, #4
 8001202:	e074      	b.n	80012ee <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001204:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <FLASH_IF_Write+0x17c>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da02      	bge.n	8001212 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 800120c:	f06f 0303 	mvn.w	r3, #3
 8001210:	e06d      	b.n	80012ee <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	429a      	cmp	r2, r3
 8001218:	d005      	beq.n	8001226 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001220:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e05b      	b.n	80012e4 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f8f8 	bl	8001426 <FLASH_IF_IsEmpty>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d037      	beq.n	80012ac <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001242:	f06f 0304 	mvn.w	r3, #4
 8001246:	e052      	b.n	80012ee <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800124e:	02db      	lsls	r3, r3, #11
 8001250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001254:	4619      	mov	r1, r3
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f01a fcaa 	bl	801bbb0 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	6a39      	ldr	r1, [r7, #32]
 8001268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800126a:	b292      	uxth	r2, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f01a fc9f 	bl	801bbb0 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001272:	2200      	movs	r2, #0
 8001274:	2101      	movs	r1, #1
 8001276:	69f8      	ldr	r0, [r7, #28]
 8001278:	f000 f865 	bl	8001346 <FLASH_IF_EraseByPages>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001282:	f06f 0301 	mvn.w	r3, #1
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001288:	e030      	b.n	80012ec <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001290:	02db      	lsls	r3, r3, #11
 8001292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001296:	6839      	ldr	r1, [r7, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f88a 	bl	80013b2 <FLASH_IF_Write_Buffer>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d010      	beq.n	80012c6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80012a4:	f06f 0302 	mvn.w	r3, #2
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80012aa:	e01f      	b.n	80012ec <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b0:	4619      	mov	r1, r3
 80012b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012b4:	f000 f87d 	bl	80013b2 <FLASH_IF_Write_Buffer>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80012be:	f06f 0302 	mvn.w	r3, #2
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80012c4:	e012      	b.n	80012ec <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	4413      	add	r3, r2
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80012ce:	6a3a      	ldr	r2, [r7, #32]
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	4413      	add	r3, r2
 80012d4:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d99f      	bls.n	800122c <FLASH_IF_Write+0xa8>
  }

  return status;
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	1fff75e0 	.word	0x1fff75e0
 80012fc:	03fffc00 	.word	0x03fffc00
 8001300:	58004000 	.word	0x58004000

08001304 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001310:	e00b      	b.n	800132a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001312:	bf00      	nop
 8001314:	f7ff ff24 	bl	8001160 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1fa      	bne.n	8001314 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800131e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	2001      	movs	r0, #1
 8001326:	f003 f919 	bl	800455c <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001334:	4299      	cmp	r1, r3
 8001336:	bf08      	it	eq
 8001338:	4290      	cmpeq	r0, r2
 800133a:	d1ea      	bne.n	8001312 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800133c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b08a      	sub	sp, #40	; 0x28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	460b      	mov	r3, r1
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800135c:	897b      	ldrh	r3, [r7, #10]
 800135e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fa94 	bl	8004898 <HAL_FLASHEx_Erase_IT>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001376:	e00a      	b.n	800138e <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001378:	f107 0214 	add.w	r2, r7, #20
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fa30 	bl	80047e8 <HAL_FLASHEx_Erase>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800138e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <FLASH_IF_EraseByPages+0x62>
 8001396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800139a:	2b02      	cmp	r3, #2
 800139c:	d101      	bne.n	80013a2 <FLASH_IF_EraseByPages+0x5c>
 800139e:	2301      	movs	r3, #1
 80013a0:	e003      	b.n	80013aa <FLASH_IF_EraseByPages+0x64>
 80013a2:	f06f 0301 	mvn.w	r3, #1
 80013a6:	e000      	b.n	80013aa <FLASH_IF_EraseByPages+0x64>
 80013a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b08a      	sub	sp, #40	; 0x28
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	e020      	b.n	800140e <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2208      	movs	r2, #8
 80013d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f01a fbeb 	bl	801bbb0 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80013da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e2:	bf08      	it	eq
 80013e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013e8:	d005      	beq.n	80013f6 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80013ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff ff88 	bl	8001304 <FLASH_IF_Write64>
 80013f4:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3308      	adds	r3, #8
 80013fa:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	3308      	adds	r3, #8
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d108      	bne.n	800141a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	3301      	adds	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3d9      	bcc.n	80013cc <FLASH_IF_Write_Buffer+0x1a>
 8001418:	e000      	b.n	800141c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800141a:	bf00      	nop
    }
  }

  return status;
 800141c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800141e:	4618      	mov	r0, r3
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001430:	e00a      	b.n	8001448 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d001      	beq.n	8001442 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800143e:	2301      	movs	r3, #1
 8001440:	e039      	b.n	80014b6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1ef      	bne.n	8001432 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	e010      	b.n	800147e <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f103 0208 	add.w	r2, r3, #8
 8001462:	60fa      	str	r2, [r7, #12]
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	bf08      	it	eq
 800146e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001472:	d001      	beq.n	8001478 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001474:	2301      	movs	r3, #1
 8001476:	e01e      	b.n	80014b6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3301      	adds	r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	429a      	cmp	r2, r3
 8001486:	d3e9      	bcc.n	800145c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001496:	e00a      	b.n	80014ae <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d001      	beq.n	80014a8 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e006      	b.n	80014b6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f1      	bne.n	8001498 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80014b4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <LL_AHB2_GRP1_EnableClock>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014e4:	68fb      	ldr	r3, [r7, #12]
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	2004      	movs	r0, #4
 8001506:	f7ff ffdb 	bl	80014c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2002      	movs	r0, #2
 800150c:	f7ff ffd8 	bl	80014c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff ffd5 	bl	80014c0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <MX_GPIO_Init+0xb4>)
 800151e:	f003 fcad 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2120      	movs	r1, #32
 8001526:	481f      	ldr	r0, [pc, #124]	; (80015a4 <MX_GPIO_Init+0xb4>)
 8001528:	f003 fca8 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2121      	movs	r1, #33	; 0x21
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f003 fca2 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001538:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800153c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <MX_GPIO_Init+0xb4>)
 8001550:	f003 fa66 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL2_Pin;
 8001554:	2321      	movs	r3, #33	; 0x21
 8001556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f003 fa58 	bl	8004a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001574:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001576:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800157a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_GPIO_Init+0xb4>)
 8001586:	f003 fa4b 	bl	8004a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2029      	movs	r0, #41	; 0x29
 8001590:	f002 fbc3 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001594:	2029      	movs	r0, #41	; 0x29
 8001596:	f002 fbda 	bl	8003d4e <HAL_NVIC_EnableIRQ>

}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	48000400 	.word	0x48000400

080015a8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b8:	f023 0218 	bic.w	r2, r3, #24
 80015bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d6:	f001 f9dd 	bl	8002994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f000 f807 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f7ff ff87 	bl	80014f0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015e2:	f008 fbf9 	bl	8009dd8 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80015e6:	f008 fbff 	bl	8009de8 <MX_LoRaWAN_Process>
 80015ea:	e7fc      	b.n	80015e6 <main+0x14>

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09a      	sub	sp, #104	; 0x68
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2248      	movs	r2, #72	; 0x48
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f01b fdc4 	bl	801d188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001612:	f003 fe7d 	bl	8005310 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff ffc6 	bl	80015a8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <SystemClock_Config+0xb0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <SystemClock_Config+0xb0>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <SystemClock_Config+0xb0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001638:	2324      	movs	r3, #36	; 0x24
 800163a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800163c:	2381      	movs	r3, #129	; 0x81
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001644:	2300      	movs	r3, #0
 8001646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001648:	23b0      	movs	r3, #176	; 0xb0
 800164a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	4618      	mov	r0, r3
 8001656:	f004 f9a7 	bl	80059a8 <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001660:	f000 f81e 	bl	80016a0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001664:	234f      	movs	r3, #79	; 0x4f
 8001666:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f004 fd2c 	bl	80060e0 <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800168e:	f000 f807 	bl	80016a0 <Error_Handler>
  }
}
 8001692:	bf00      	nop
 8001694:	3768      	adds	r7, #104	; 0x68
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	58000400 	.word	0x58000400

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>

080016aa <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <LL_APB1_GRP1_EnableClock>:
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4313      	orrs	r3, r2
 80016e0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4013      	ands	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
	...

080016fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	222c      	movs	r2, #44	; 0x2c
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f01b fd3d 	bl	801d188 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_RTC_Init+0x9c>)
 8001710:	4a22      	ldr	r2, [pc, #136]	; (800179c <MX_RTC_Init+0xa0>)
 8001712:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_RTC_Init+0x9c>)
 8001716:	221f      	movs	r2, #31
 8001718:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_RTC_Init+0x9c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_RTC_Init+0x9c>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_RTC_Init+0x9c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_RTC_Init+0x9c>)
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_RTC_Init+0x9c>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_RTC_Init+0x9c>)
 800173c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001742:	4815      	ldr	r0, [pc, #84]	; (8001798 <MX_RTC_Init+0x9c>)
 8001744:	f005 f988 	bl	8006a58 <HAL_RTC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800174e:	f7ff ffa7 	bl	80016a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001752:	4811      	ldr	r0, [pc, #68]	; (8001798 <MX_RTC_Init+0x9c>)
 8001754:	f005 fc76 	bl	8007044 <HAL_RTCEx_SetSSRU_IT>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800175e:	f7ff ff9f 	bl	80016a0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800176e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001772:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_RTC_Init+0x9c>)
 8001782:	f005 f9e3 	bl	8006b4c <HAL_RTC_SetAlarm_IT>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800178c:	f7ff ff88 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200001d8 	.word	0x200001d8
 800179c:	40002800 	.word	0x40002800

080017a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b090      	sub	sp, #64	; 0x40
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	2238      	movs	r2, #56	; 0x38
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f01b fce9 	bl	801d188 <memset>
  if(rtcHandle->Instance==RTC)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <HAL_RTC_MspInit+0x74>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d125      	bne.n	800180c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 f827 	bl	8006824 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017dc:	f7ff ff60 	bl	80016a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017e0:	f7ff ff63 	bl	80016aa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017e8:	f7ff ff6f 	bl	80016ca <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2002      	movs	r0, #2
 80017f2:	f002 fa92 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017f6:	2002      	movs	r0, #2
 80017f8:	f002 faa9 	bl	8003d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	202a      	movs	r0, #42	; 0x2a
 8001802:	f002 fa8a 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001806:	202a      	movs	r0, #42	; 0x2a
 8001808:	f002 faa1 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800180c:	bf00      	nop
 800180e:	3740      	adds	r7, #64	; 0x40
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40002800 	.word	0x40002800

08001818 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800181e:	2201      	movs	r2, #1
 8001820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	58000400 	.word	0x58000400

08001830 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800184c:	f001 f8c2 	bl	80029d4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001850:	f7ff ffe2 	bl	8001818 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001854:	2001      	movs	r0, #1
 8001856:	f003 fded 	bl	8005434 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001862:	f001 f8c5 	bl	80029f0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001866:	f000 ff45 	bl	80026f4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}

0800186e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001872:	f001 f8af 	bl	80029d4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001876:	2101      	movs	r1, #1
 8001878:	2000      	movs	r0, #0
 800187a:	f003 fd57 	bl	800532c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}

08001882 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001886:	f001 f8b3 	bl	80029f0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189e:	e7fe      	b.n	800189e <NMI_Handler+0x4>

080018a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <HardFault_Handler+0x4>

080018a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <MemManage_Handler+0x4>

080018ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <BusFault_Handler+0x4>

080018b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <UsageFault_Handler+0x4>

080018b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80018ee:	f005 fbe5 	bl	80070bc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200001d8 	.word	0x200001d8

080018fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <DMA1_Channel1_IRQHandler+0x10>)
 8001902:	f002 fcbb 	bl	800427c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002fc 	.word	0x200002fc

08001910 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA1_Channel2_IRQHandler+0x10>)
 8001916:	f002 fcb1 	bl	800427c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000035c 	.word	0x2000035c

08001924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_IRDA_IRQHandler(&hirda1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <USART1_IRQHandler+0x10>)
 800192a:	f003 fad7 	bl	8004edc <HAL_IRDA_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000224 	.word	0x20000224

08001938 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <USART2_IRQHandler+0x10>)
 800193e:	f006 fa1d 	bl	8007d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000026c 	.word	0x2000026c

0800194c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001950:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001954:	f003 faaa 	bl	8004eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <RTC_Alarm_IRQHandler+0x10>)
 8001962:	f005 fa5b 	bl	8006e1c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200001d8 	.word	0x200001d8

08001970 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001976:	f005 ff09 	bl	800778c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000210 	.word	0x20000210

08001984 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800198c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001990:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4313      	orrs	r3, r2
 800199a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_SUBGHZ_Init+0x20>)
 80019ba:	2208      	movs	r2, #8
 80019bc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_SUBGHZ_Init+0x20>)
 80019c0:	f005 fc68 	bl	8007294 <HAL_SUBGHZ_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80019ca:	f7ff fe69 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000210 	.word	0x20000210

080019d8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff ffcf 	bl	8001984 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2032      	movs	r0, #50	; 0x32
 80019ec:	f002 f995 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019f0:	2032      	movs	r0, #50	; 0x32
 80019f2:	f002 f9ac 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <LL_RCC_SetClkAfterWakeFromStop>:
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <LL_FLASH_GetUDN+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	1fff7580 	.word	0x1fff7580

08001a38 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <LL_FLASH_GetDeviceID+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	1fff7584 	.word	0x1fff7584

08001a50 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <LL_FLASH_GetSTCompanyID+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0a1b      	lsrs	r3, r3, #8
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	1fff7584 	.word	0x1fff7584

08001a68 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff ffc6 	bl	80019fe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001a72:	f01a fe2f 	bl	801c6d4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <SystemApp_Init+0x48>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001a7c:	f000 f988 	bl	8001d90 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001a80:	f01b f8b8 	bl	801cbf4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <SystemApp_Init+0x4c>)
 8001a86:	f01b f963 	bl	801cd50 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <SystemApp_Init+0x50>)
 8001a8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a90:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f01b f96a 	bl	801cd6c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001a98:	f7ff faa8 	bl	8000fec <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001a9c:	f000 f9fe 	bl	8001e9c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001aa0:	f019 ffe0 	bl	801ba64 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f01a f81c 	bl	801bae4 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000021c 	.word	0x2000021c
 8001ab4:	08001c81 	.word	0x08001c81
 8001ab8:	58004000 	.word	0x58004000

08001abc <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001ac0:	f01a f840 	bl	801bb44 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001ad2:	f7ff fa99 	bl	8001008 <SYS_GetBatteryLevel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d902      	bls.n	8001aea <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001ae4:	23fe      	movs	r3, #254	; 0xfe
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	e014      	b.n	8001b14 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001aea:	88bb      	ldrh	r3, [r7, #4]
 8001aec:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001af0:	d202      	bcs.n	8001af8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	e00d      	b.n	8001b14 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001afe:	461a      	mov	r2, r3
 8001b00:	4613      	mov	r3, r2
 8001b02:	01db      	lsls	r3, r3, #7
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <GetBatteryLevel+0x58>)
 8001b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8001b10:	09db      	lsrs	r3, r3, #7
 8001b12:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001b14:	79fb      	ldrb	r3, [r7, #7]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	1b4e81b5 	.word	0x1b4e81b5

08001b24 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f989 	bl	8001e48 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe ffef 	bl	8000b1c <__aeabi_f2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001b42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001b4e:	b590      	push	{r4, r7, lr}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001b5a:	f7ff ff63 	bl	8001a24 <LL_FLASH_GetUDN>
 8001b5e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d138      	bne.n	8001bda <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b68:	f000 ff50 	bl	8002a0c <HAL_GetUIDw0>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	f000 ff61 	bl	8002a34 <HAL_GetUIDw2>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4423      	add	r3, r4
 8001b76:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b78:	f000 ff52 	bl	8002a20 <HAL_GetUIDw1>
 8001b7c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	0e1a      	lsrs	r2, r3, #24
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3307      	adds	r3, #7
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	0c1a      	lsrs	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3306      	adds	r3, #6
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	0a1a      	lsrs	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3305      	adds	r3, #5
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	0e1a      	lsrs	r2, r3, #24
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	0c1a      	lsrs	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	0a1a      	lsrs	r2, r3, #8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001bd8:	e031      	b.n	8001c3e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3307      	adds	r3, #7
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	0a1a      	lsrs	r2, r3, #8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3306      	adds	r3, #6
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	0c1a      	lsrs	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3305      	adds	r3, #5
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	0e1a      	lsrs	r2, r3, #24
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3304      	adds	r3, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001c08:	f7ff ff16 	bl	8001a38 <LL_FLASH_GetDeviceID>
 8001c0c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3303      	adds	r3, #3
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001c18:	f7ff ff1a 	bl	8001a50 <LL_FLASH_GetSTCompanyID>
 8001c1c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3302      	adds	r3, #2
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	0a1a      	lsrs	r2, r3, #8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	0c1b      	lsrs	r3, r3, #16
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	701a      	strb	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}

08001c46 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001c46:	b590      	push	{r4, r7, lr}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001c50:	f7ff fee8 	bl	8001a24 <LL_FLASH_GetUDN>
 8001c54:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d10b      	bne.n	8001c76 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c5e:	f000 fed5 	bl	8002a0c <HAL_GetUIDw0>
 8001c62:	4604      	mov	r4, r0
 8001c64:	f000 fedc 	bl	8002a20 <HAL_GetUIDw1>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	405c      	eors	r4, r3
 8001c6c:	f000 fee2 	bl	8002a34 <HAL_GetUIDw2>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4063      	eors	r3, r4
 8001c74:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001c76:	687b      	ldr	r3, [r7, #4]

}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f01a f868 	bl	801bd64 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c9a:	9200      	str	r2, [sp, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <TimestampNow+0x3c>)
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f81d 	bl	8001ce0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7fe fa66 	bl	8000178 <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0801d2b0 	.word	0x0801d2b0

08001cc0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f019 fedc 	bl	801ba84 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f019 fed4 	bl	801ba84 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ce0:	b40c      	push	{r2, r3}
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f01a fa05 	bl	801c108 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d08:	b002      	add	sp, #8
 8001d0a:	4770      	bx	lr

08001d0c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_GetTick+0x24>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001d32:	f000 f97f 	bl	8002034 <TIMER_IF_GetTimerValue>
 8001d36:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000021c 	.word	0x2000021c

08001d48 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f9f5 	bl	8002142 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <LL_AHB2_GRP1_EnableClock>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001d96:	f000 fe57 	bl	8002a48 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001d9a:	f000 fe5b 	bl	8002a54 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001d9e:	f000 fe5f 	bl	8002a60 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff ffcf 	bl	8001d60 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff ffcc 	bl	8001d60 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001dc8:	2002      	movs	r0, #2
 8001dca:	f7ff ffc9 	bl	8001d60 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7ff ffc6 	bl	8001d60 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de0:	f002 fe1e 	bl	8004a20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4815      	ldr	r0, [pc, #84]	; (8001e44 <DBG_Init+0xb4>)
 8001df0:	f002 fe16 	bl	8004a20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001df4:	2308      	movs	r3, #8
 8001df6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4811      	ldr	r0, [pc, #68]	; (8001e44 <DBG_Init+0xb4>)
 8001dfe:	f002 fe0f 	bl	8004a20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001e02:	2310      	movs	r3, #16
 8001e04:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480e      	ldr	r0, [pc, #56]	; (8001e44 <DBG_Init+0xb4>)
 8001e0c:	f002 fe08 	bl	8004a20 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2101      	movs	r1, #1
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f003 f830 	bl	8004e7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e22:	4808      	ldr	r0, [pc, #32]	; (8001e44 <DBG_Init+0xb4>)
 8001e24:	f003 f82a 	bl	8004e7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <DBG_Init+0xb4>)
 8001e2e:	f003 f825 	bl	8004e7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2110      	movs	r1, #16
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <DBG_Init+0xb4>)
 8001e38:	f003 f820 	bl	8004e7c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e3c:	bf00      	nop
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	48000400 	.word	0x48000400

08001e48 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <EnvSensors_Read+0x40>)
 8001e52:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <EnvSensors_Read+0x44>)
 8001e56:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <EnvSensors_Read+0x48>)
 8001e5a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <EnvSensors_Read+0x4c>)
 8001e72:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <EnvSensors_Read+0x50>)
 8001e78:	611a      	str	r2, [r3, #16]

  return 0;
 8001e7a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	42480000 	.word	0x42480000
 8001e8c:	41900000 	.word	0x41900000
 8001e90:	447a0000 	.word	0x447a0000
 8001e94:	003e090d 	.word	0x003e090d
 8001e98:	000503ab 	.word	0x000503ab

08001e9c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001ea6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <TIMER_IF_Init+0x5c>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	f083 0301 	eor.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <TIMER_IF_Init+0x60>)
 8001eee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001ef4:	f7ff fc02 	bl	80016fc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001ef8:	f000 f856 	bl	8001fa8 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <TIMER_IF_Init+0x60>)
 8001f02:	f004 ff2f 	bl	8006d64 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <TIMER_IF_Init+0x60>)
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001f0e:	4809      	ldr	r0, [pc, #36]	; (8001f34 <TIMER_IF_Init+0x60>)
 8001f10:	f005 f866 	bl	8006fe0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 f9d3 	bl	80022c0 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001f1a:	f000 f85f 	bl	8001fdc <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <TIMER_IF_Init+0x5c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000021d 	.word	0x2000021d
 8001f34:	200001d8 	.word	0x200001d8

08001f38 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	222c      	movs	r2, #44	; 0x2c
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f01b f91a 	bl	801d188 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f54:	f000 f828 	bl	8001fa8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <TIMER_IF_StartTimer+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f74:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	2201      	movs	r2, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <TIMER_IF_StartTimer+0x6c>)
 8001f86:	f004 fde1 	bl	8006b4c <HAL_RTC_SetAlarm_IT>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001f90:	f7ff fb86 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3738      	adds	r7, #56	; 0x38
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000220 	.word	0x20000220
 8001fa4:	200001d8 	.word	0x200001d8

08001fa8 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <TIMER_IF_StopTimer+0x2c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <TIMER_IF_StopTimer+0x30>)
 8001fbe:	f004 fed1 	bl	8006d64 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <TIMER_IF_StopTimer+0x30>)
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001fca:	79fb      	ldrb	r3, [r7, #7]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40002800 	.word	0x40002800
 8001fd8:	200001d8 	.word	0x200001d8

08001fdc <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001fe0:	f000 f98e 	bl	8002300 <GetTimerTicks>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <TIMER_IF_SetTimerContext+0x18>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fea:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <TIMER_IF_SetTimerContext+0x18>)
 8001fec:	681b      	ldr	r3, [r3, #0]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000220 	.word	0x20000220

08001ff8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	; (8002008 <TIMER_IF_GetTimerContext+0x10>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000220 	.word	0x20000220

0800200c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002016:	f000 f973 	bl	8002300 <GetTimerTicks>
 800201a:	4602      	mov	r2, r0
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <TIMER_IF_GetTimerElapsedTime+0x24>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000220 	.word	0x20000220

08002034 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <TIMER_IF_GetTimerValue+0x24>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002046:	f000 f95b 	bl	8002300 <GetTimerTicks>
 800204a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000021d 	.word	0x2000021d

0800205c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002066:	2303      	movs	r3, #3
 8002068:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002076:	b5b0      	push	{r4, r5, r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800207e:	2100      	movs	r1, #0
 8002080:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	2000      	movs	r0, #0
 8002086:	460a      	mov	r2, r1
 8002088:	4603      	mov	r3, r0
 800208a:	0d95      	lsrs	r5, r2, #22
 800208c:	0294      	lsls	r4, r2, #10
 800208e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	f7fe fd85 	bl	8000ba8 <__aeabi_uldivmod>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4613      	mov	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bdb0      	pop	{r4, r5, r7, pc}

080020b0 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80020b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80020ba:	2100      	movs	r1, #0
 80020bc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	2000      	movs	r0, #0
 80020c2:	460c      	mov	r4, r1
 80020c4:	4605      	mov	r5, r0
 80020c6:	4620      	mov	r0, r4
 80020c8:	4629      	mov	r1, r5
 80020ca:	f04f 0a00 	mov.w	sl, #0
 80020ce:	f04f 0b00 	mov.w	fp, #0
 80020d2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80020d6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80020da:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80020de:	4650      	mov	r0, sl
 80020e0:	4659      	mov	r1, fp
 80020e2:	1b02      	subs	r2, r0, r4
 80020e4:	eb61 0305 	sbc.w	r3, r1, r5
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	0099      	lsls	r1, r3, #2
 80020f2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80020f6:	0090      	lsls	r0, r2, #2
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	eb12 0804 	adds.w	r8, r2, r4
 8002100:	eb43 0905 	adc.w	r9, r3, r5
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002114:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002118:	4690      	mov	r8, r2
 800211a:	4699      	mov	r9, r3
 800211c:	4640      	mov	r0, r8
 800211e:	4649      	mov	r1, r9
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	0a82      	lsrs	r2, r0, #10
 800212a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800212e:	0a8b      	lsrs	r3, r1, #10
 8002130:	4613      	mov	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002140:	4770      	bx	lr

08002142 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ff93 	bl	8002076 <TIMER_IF_Convert_ms2Tick>
 8002150:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002152:	f000 f8d5 	bl	8002300 <GetTimerTicks>
 8002156:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002158:	e000      	b.n	800215c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800215a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800215c:	f000 f8d0 	bl	8002300 <GetTimerTicks>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f6      	bhi.n	800215a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800217e:	f01a fbf7 	bl	801c970 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002192:	f000 f8a5 	bl	80022e0 <TIMER_IF_BkUp_Read_MSBticks>
 8002196:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f88f 	bl	80022c0 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80021aa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80021b8:	f000 f8a2 	bl	8002300 <GetTimerTicks>
 80021bc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80021be:	f000 f88f 	bl	80022e0 <TIMER_IF_BkUp_Read_MSBticks>
 80021c2:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	2200      	movs	r2, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	60fa      	str	r2, [r7, #12]
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	000b      	movs	r3, r1
 80021d8:	2200      	movs	r2, #0
 80021da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021dc:	2000      	movs	r0, #0
 80021de:	460c      	mov	r4, r1
 80021e0:	4605      	mov	r5, r0
 80021e2:	eb12 0804 	adds.w	r8, r2, r4
 80021e6:	eb43 0905 	adc.w	r9, r3, r5
 80021ea:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80021ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	0a82      	lsrs	r2, r0, #10
 80021fc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002200:	0a8b      	lsrs	r3, r1, #10
 8002202:	4613      	mov	r3, r2
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2200      	movs	r2, #0
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002214:	f04f 0b00 	mov.w	fp, #0
 8002218:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff46 	bl	80020b0 <TIMER_IF_Convert_Tick2ms>
 8002224:	4603      	mov	r3, r0
 8002226:	b29a      	uxth	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800222e:	4618      	mov	r0, r3
 8002230:	3730      	adds	r7, #48	; 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002238 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	2100      	movs	r1, #0
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002246:	f004 ff5d 	bl	8007104 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200001d8 	.word	0x200001d8

08002258 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	2101      	movs	r1, #1
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002266:	f004 ff4d 	bl	8007104 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200001d8 	.word	0x200001d8

08002278 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002282:	2100      	movs	r1, #0
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002286:	f004 ff55 	bl	8007134 <HAL_RTCEx_BKUPRead>
 800228a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200001d8 	.word	0x200001d8

0800229c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80022a6:	2101      	movs	r1, #1
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80022aa:	f004 ff43 	bl	8007134 <HAL_RTCEx_BKUPRead>
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80022b0:	687b      	ldr	r3, [r7, #4]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200001d8 	.word	0x200001d8

080022c0 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	2102      	movs	r1, #2
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80022ce:	f004 ff19 	bl	8007104 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200001d8 	.word	0x200001d8

080022e0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80022e6:	2102      	movs	r1, #2
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80022ea:	f004 ff23 	bl	8007134 <HAL_RTCEx_BKUPRead>
 80022ee:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80022f0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200001d8 	.word	0x200001d8

08002300 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002306:	480b      	ldr	r0, [pc, #44]	; (8002334 <GetTimerTicks+0x34>)
 8002308:	f7ff fdd9 	bl	8001ebe <LL_RTC_TIME_GetSubSecond>
 800230c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800230e:	e003      	b.n	8002318 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002310:	4808      	ldr	r0, [pc, #32]	; (8002334 <GetTimerTicks+0x34>)
 8002312:	f7ff fdd4 	bl	8001ebe <LL_RTC_TIME_GetSubSecond>
 8002316:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002318:	4806      	ldr	r0, [pc, #24]	; (8002334 <GetTimerTicks+0x34>)
 800231a:	f7ff fdd0 	bl	8001ebe <LL_RTC_TIME_GetSubSecond>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4293      	cmp	r3, r2
 8002324:	d1f4      	bne.n	8002310 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40002800 	.word	0x40002800

08002338 <LL_AHB2_GRP1_EnableClock>:
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4313      	orrs	r3, r2
 800234e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <LL_APB1_GRP1_EnableClock>:
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4313      	orrs	r3, r2
 800237e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4013      	ands	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238c:	68fb      	ldr	r3, [r7, #12]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <LL_APB1_GRP1_DisableClock>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ae:	4013      	ands	r3, r2
 80023b0:	658b      	str	r3, [r1, #88]	; 0x58
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023c2:	4a23      	ldr	r2, [pc, #140]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023e2:	220c      	movs	r2, #12
 80023e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_USART2_UART_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <MX_USART2_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002404:	4811      	ldr	r0, [pc, #68]	; (800244c <MX_USART2_UART_Init+0x90>)
 8002406:	f005 fb80 	bl	8007b0a <HAL_UART_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002410:	f7ff f946 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002414:	2100      	movs	r1, #0
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <MX_USART2_UART_Init+0x90>)
 8002418:	f007 fbf4 	bl	8009c04 <HAL_UARTEx_SetTxFifoThreshold>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002422:	f7ff f93d 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002426:	2100      	movs	r1, #0
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <MX_USART2_UART_Init+0x90>)
 800242a:	f007 fc29 	bl	8009c80 <HAL_UARTEx_SetRxFifoThreshold>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002434:	f7ff f934 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_USART2_UART_Init+0x90>)
 800243a:	f007 fbab 	bl	8009b94 <HAL_UARTEx_DisableFifoMode>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002444:	f7ff f92c 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2000026c 	.word	0x2000026c
 8002450:	40004400 	.word	0x40004400

08002454 <HAL_UART_MspInit>:
  /* USER CODE END USART1_MspInit 1 */
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b096      	sub	sp, #88	; 0x58
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2238      	movs	r2, #56	; 0x38
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f01a fe87 	bl	801d188 <memset>
  if(uartHandle->Instance==USART2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2f      	ldr	r2, [pc, #188]	; (800253c <HAL_UART_MspInit+0xe8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d157      	bne.n	8002534 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002484:	2302      	movs	r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002488:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800248c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	4618      	mov	r0, r3
 8002494:	f004 f9c6 	bl	8006824 <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800249e:	f7ff f8ff 	bl	80016a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024a6:	f7ff ff5f 	bl	8002368 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7ff ff44 	bl	8002338 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80024b0:	230c      	movs	r3, #12
 80024b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024c0:	2307      	movs	r3, #7
 80024c2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024c8:	4619      	mov	r1, r3
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ce:	f002 faa7 	bl	8004a20 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_UART_MspInit+0xf0>)
 80024d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024da:	2214      	movs	r2, #20
 80024dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024e0:	2210      	movs	r2, #16
 80024e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_UART_MspInit+0xec>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_UART_MspInit+0xec>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002508:	480d      	ldr	r0, [pc, #52]	; (8002540 <HAL_UART_MspInit+0xec>)
 800250a:	f001 fc3d 	bl	8003d88 <HAL_DMA_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002514:	f7ff f8c4 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_UART_MspInit+0xec>)
 800251c:	679a      	str	r2, [r3, #120]	; 0x78
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_UART_MspInit+0xec>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	2025      	movs	r0, #37	; 0x25
 800252a:	f001 fbf6 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800252e:	2025      	movs	r0, #37	; 0x25
 8002530:	f001 fc0d 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002534:	bf00      	nop
 8002536:	3758      	adds	r7, #88	; 0x58
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40004400 	.word	0x40004400
 8002540:	2000035c 	.word	0x2000035c
 8002544:	4002001c 	.word	0x4002001c

08002548 <HAL_UART_MspDeInit>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_UART_MspDeInit+0x3c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d110      	bne.n	800257c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800255a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800255e:	f7ff ff1b 	bl	8002398 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002562:	210c      	movs	r1, #12
 8002564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002568:	f002 fbba 	bl	8004ce0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002570:	4618      	mov	r0, r3
 8002572:	f001 fcb1 	bl	8003ed8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002576:	2025      	movs	r0, #37	; 0x25
 8002578:	f001 fbf7 	bl	8003d6a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40004400 	.word	0x40004400

08002588 <LL_APB1_GRP1_ForceReset>:
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4313      	orrs	r3, r2
 800259e:	638b      	str	r3, [r1, #56]	; 0x38
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <LL_APB1_GRP1_ReleaseReset>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c0:	4013      	ands	r3, r2
 80025c2:	638b      	str	r3, [r1, #56]	; 0x38
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
	...

080025d0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80025da:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80025de:	4905      	ldr	r1, [pc, #20]	; (80025f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	58000800 	.word	0x58000800

080025f8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <vcom_Init+0x28>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002606:	f7fe fd91 	bl	800112c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800260a:	f7ff fed7 	bl	80023bc <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800260e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002612:	f7ff ffdd 	bl	80025d0 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002616:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200003c0 	.word	0x200003c0

08002624 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002628:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800262c:	f7ff ffac 	bl	8002588 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002630:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002634:	f7ff ffb9 	bl	80025aa <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <vcom_DeInit+0x28>)
 800263a:	f7ff ff85 	bl	8002548 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800263e:	200f      	movs	r0, #15
 8002640:	f001 fb93 	bl	8003d6a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002644:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002646:	4618      	mov	r0, r3
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000026c 	.word	0x2000026c

08002650 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	461a      	mov	r2, r3
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4804      	ldr	r0, [pc, #16]	; (8002674 <vcom_Trace_DMA+0x24>)
 8002664:	f005 faf8 	bl	8007c58 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002668:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000026c 	.word	0x2000026c

08002678 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <vcom_ReceiveInit+0x70>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002686:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800268a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002694:	4815      	ldr	r0, [pc, #84]	; (80026ec <vcom_ReceiveInit+0x74>)
 8002696:	f007 f9f0 	bl	8009a7a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800269a:	bf00      	nop
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <vcom_ReceiveInit+0x74>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026aa:	d0f7      	beq.n	800269c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80026ac:	bf00      	nop
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <vcom_ReceiveInit+0x74>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026bc:	d1f7      	bne.n	80026ae <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <vcom_ReceiveInit+0x74>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <vcom_ReceiveInit+0x74>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80026cc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <vcom_ReceiveInit+0x74>)
 80026d0:	f007 fa2e 	bl	8009b30 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80026d4:	2201      	movs	r2, #1
 80026d6:	4906      	ldr	r1, [pc, #24]	; (80026f0 <vcom_ReceiveInit+0x78>)
 80026d8:	4804      	ldr	r0, [pc, #16]	; (80026ec <vcom_ReceiveInit+0x74>)
 80026da:	f005 fa67 	bl	8007bac <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80026de:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200003c4 	.word	0x200003c4
 80026ec:	2000026c 	.word	0x2000026c
 80026f0:	200003bc 	.word	0x200003bc

080026f4 <vcom_Resume>:

void vcom_Resume(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <vcom_Resume+0x28>)
 80026fa:	f005 fa06 	bl	8007b0a <HAL_UART_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002704:	f7fe ffcc 	bl	80016a0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002708:	4805      	ldr	r0, [pc, #20]	; (8002720 <vcom_Resume+0x2c>)
 800270a:	f001 fb3d 	bl	8003d88 <HAL_DMA_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002714:	f7fe ffc4 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000026c 	.word	0x2000026c
 8002720:	2000035c 	.word	0x2000035c

08002724 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a05      	ldr	r2, [pc, #20]	; (8002748 <HAL_UART_TxCpltCallback+0x24>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d103      	bne.n	800273e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_UART_TxCpltCallback+0x28>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2000      	movs	r0, #0
 800273c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40004400 	.word	0x40004400
 800274c:	200003c0 	.word	0x200003c0

08002750 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_UART_RxCpltCallback+0x44>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d113      	bne.n	800278a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_UART_RxCpltCallback+0x48>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_UART_RxCpltCallback+0x30>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_UART_RxCpltCallback+0x48>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	2101      	movs	r1, #1
 800277c:	4807      	ldr	r0, [pc, #28]	; (800279c <HAL_UART_RxCpltCallback+0x4c>)
 800277e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002780:	2201      	movs	r2, #1
 8002782:	4906      	ldr	r1, [pc, #24]	; (800279c <HAL_UART_RxCpltCallback+0x4c>)
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f005 fa11 	bl	8007bac <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40004400 	.word	0x40004400
 8002798:	200003c4 	.word	0x200003c4
 800279c:	200003bc 	.word	0x200003bc

080027a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a0:	480d      	ldr	r0, [pc, #52]	; (80027d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027a4:	f7ff fb85 	bl	8001eb2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a8:	480c      	ldr	r0, [pc, #48]	; (80027dc <LoopForever+0x6>)
  ldr r1, =_edata
 80027aa:	490d      	ldr	r1, [pc, #52]	; (80027e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <LoopForever+0xe>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b0:	e002      	b.n	80027b8 <LoopCopyDataInit>

080027b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b6:	3304      	adds	r3, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027bc:	d3f9      	bcc.n	80027b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c0:	4c0a      	ldr	r4, [pc, #40]	; (80027ec <LoopForever+0x16>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c4:	e001      	b.n	80027ca <LoopFillZerobss>

080027c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c8:	3204      	adds	r2, #4

080027ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027cc:	d3fb      	bcc.n	80027c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027ce:	f01a fcb7 	bl	801d140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027d2:	f7fe fefe 	bl	80015d2 <main>

080027d6 <LoopForever>:

LoopForever:
    b LoopForever
 80027d6:	e7fe      	b.n	80027d6 <LoopForever>
  ldr   r0, =_estack
 80027d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80027e4:	0801e2ec 	.word	0x0801e2ec
  ldr r2, =_sbss
 80027e8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80027ec:	2000222c 	.word	0x2000222c

080027f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC_IRQHandler>

080027f2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002806:	2310      	movs	r3, #16
 8002808:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800280a:	2301      	movs	r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4619      	mov	r1, r3
 800281a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281e:	f002 f8ff 	bl	8004a20 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002822:	2320      	movs	r3, #32
 8002824:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	4619      	mov	r1, r3
 800282a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282e:	f002 f8f7 	bl	8004a20 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002832:	2200      	movs	r2, #0
 8002834:	2120      	movs	r1, #32
 8002836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283a:	f002 fb1f 	bl	8004e7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800283e:	2200      	movs	r2, #0
 8002840:	2110      	movs	r1, #16
 8002842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002846:	f002 fb19 	bl	8004e7c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d83f      	bhi.n	80028e4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	0800287d 	.word	0x0800287d
 8002870:	08002897 	.word	0x08002897
 8002874:	080028b1 	.word	0x080028b1
 8002878:	080028cb 	.word	0x080028cb
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800287c:	2200      	movs	r2, #0
 800287e:	2110      	movs	r1, #16
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f002 fafa 	bl	8004e7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002888:	2200      	movs	r2, #0
 800288a:	2120      	movs	r1, #32
 800288c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002890:	f002 faf4 	bl	8004e7c <HAL_GPIO_WritePin>
      break;      
 8002894:	e027      	b.n	80028e6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002896:	2201      	movs	r2, #1
 8002898:	2110      	movs	r1, #16
 800289a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289e:	f002 faed 	bl	8004e7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80028a2:	2200      	movs	r2, #0
 80028a4:	2120      	movs	r1, #32
 80028a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028aa:	f002 fae7 	bl	8004e7c <HAL_GPIO_WritePin>
      break;
 80028ae:	e01a      	b.n	80028e6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80028b0:	2201      	movs	r2, #1
 80028b2:	2110      	movs	r1, #16
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b8:	f002 fae0 	bl	8004e7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80028bc:	2201      	movs	r2, #1
 80028be:	2120      	movs	r1, #32
 80028c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c4:	f002 fada 	bl	8004e7c <HAL_GPIO_WritePin>
      break;
 80028c8:	e00d      	b.n	80028e6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80028ca:	2200      	movs	r2, #0
 80028cc:	2110      	movs	r1, #16
 80028ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d2:	f002 fad3 	bl	8004e7c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80028d6:	2201      	movs	r2, #1
 80028d8:	2120      	movs	r1, #32
 80028da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028de:	f002 facd 	bl	8004e7c <HAL_GPIO_WritePin>
      break;
 80028e2:	e000      	b.n	80028e6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80028e4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80028f4:	2302      	movs	r3, #2
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002902:	2301      	movs	r3, #1
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002910:	2301      	movs	r3, #1
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800292a:	230f      	movs	r3, #15
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	e001      	b.n	8002934 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002930:	2316      	movs	r3, #22
 8002932:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002934:	68fb      	ldr	r3, [r7, #12]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	6053      	str	r3, [r2, #4]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	e0042000 	.word	0xe0042000

0800295c <LL_DBGMCU_DisableDBGStopMode>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	4a03      	ldr	r2, [pc, #12]	; (8002974 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002966:	f023 0302 	bic.w	r3, r3, #2
 800296a:	6053      	str	r3, [r2, #4]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	e0042000 	.word	0xe0042000

08002978 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a03      	ldr	r2, [pc, #12]	; (8002990 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6053      	str	r3, [r2, #4]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	e0042000 	.word	0xe0042000

08002994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299e:	2003      	movs	r0, #3
 80029a0:	f001 f9b0 	bl	8003d04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029a4:	f003 fd60 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_Init+0x3c>)
 80029ac:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ae:	200f      	movs	r0, #15
 80029b0:	f7ff f9ac 	bl	8001d0c <HAL_InitTick>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	71fb      	strb	r3, [r7, #7]
 80029be:	e001      	b.n	80029c4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029c0:	f7fe ff65 	bl	800188e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029c4:	79fb      	ldrb	r3, [r7, #7]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_SuspendTick+0x18>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a03      	ldr	r2, [pc, #12]	; (80029ec <HAL_SuspendTick+0x18>)
 80029de:	f023 0302 	bic.w	r3, r3, #2
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	e000e010 	.word	0xe000e010

080029f0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <HAL_ResumeTick+0x18>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a03      	ldr	r2, [pc, #12]	; (8002a08 <HAL_ResumeTick+0x18>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <HAL_GetUIDw0+0x10>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	1fff7590 	.word	0x1fff7590

08002a20 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002a24:	4b02      	ldr	r3, [pc, #8]	; (8002a30 <HAL_GetUIDw1+0x10>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	1fff7594 	.word	0x1fff7594

08002a34 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <HAL_GetUIDw2+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	1fff7598 	.word	0x1fff7598

08002a48 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002a4c:	f7ff ff78 	bl	8002940 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a58:	f7ff ff80 	bl	800295c <LL_DBGMCU_DisableDBGStopMode>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a64:	f7ff ff88 	bl	8002978 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2107      	movs	r1, #7
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	401a      	ands	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2107      	movs	r1, #7
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	210f      	movs	r1, #15
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	401a      	ands	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	f003 010f 	and.w	r1, r3, #15
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0219      	lsls	r1, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	400b      	ands	r3, r1
 8002be6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c0e:	f023 0317 	bic.w	r3, r3, #23
 8002c12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c34:	f023 0317 	bic.w	r3, r3, #23
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6093      	str	r3, [r2, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c5a:	d101      	bne.n	8002c60 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c7c:	f023 0317 	bic.w	r3, r3, #23
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ca2:	f023 0317 	bic.w	r3, r3, #23
 8002ca6:	f043 0202 	orr.w	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <LL_ADC_IsEnabled+0x18>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_ADC_IsEnabled+0x1a>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_IsDisableOngoing+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_IsDisableOngoing+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d10:	f023 0317 	bic.w	r3, r3, #23
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d36:	f023 0317 	bic.w	r3, r3, #23
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d101      	bne.n	8002d64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e19e      	b.n	80030d0 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fe f8fb 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff44 	bl	8002c46 <LL_ADC_IsInternalRegulatorEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d115      	bne.n	8002df0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff18 	bl	8002bfe <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dce:	4b99      	ldr	r3, [pc, #612]	; (8003034 <HAL_ADC_Init+0x2c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	4a98      	ldr	r2, [pc, #608]	; (8003038 <HAL_ADC_Init+0x2c8>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	3301      	adds	r3, #1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002de2:	e002      	b.n	8002dea <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f9      	bne.n	8002de4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff26 	bl	8002c46 <LL_ADC_IsInternalRegulatorEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f043 0210 	orr.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff93 	bl	8002d4c <LL_ADC_REG_IsConversionOngoing>
 8002e26:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 8144 	bne.w	80030be <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 8140 	bne.w	80030be <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e46:	f043 0202 	orr.w	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff30 	bl	8002cb8 <LL_ADC_IsEnabled>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 80a7 	bne.w	8002fae <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7e1b      	ldrb	r3, [r3, #24]
 8002e68:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e6a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7e5b      	ldrb	r3, [r3, #25]
 8002e70:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e72:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7e9b      	ldrb	r3, [r3, #26]
 8002e78:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e7a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e80:	2a00      	cmp	r2, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_ADC_Init+0x11a>
 8002e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e88:	e000      	b.n	8002e8c <HAL_ADC_Init+0x11c>
 8002e8a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e8c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e92:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da04      	bge.n	8002ea6 <HAL_ADC_Init+0x136>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ea4:	e001      	b.n	8002eaa <HAL_ADC_Init+0x13a>
 8002ea6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002eaa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002eb2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002eb4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d114      	bne.n	8002ef0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7e9b      	ldrb	r3, [r3, #26]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d104      	bne.n	8002ed8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f04:	4313      	orrs	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002f16:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f30:	4313      	orrs	r3, r2
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d111      	bne.n	8002f66 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f4e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f54:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f5a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_ADC_Init+0x2cc>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	6979      	ldr	r1, [r7, #20]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f82:	d014      	beq.n	8002fae <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d00f      	beq.n	8002fae <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f96:	d00a      	beq.n	8002fae <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002f98:	4b29      	ldr	r3, [pc, #164]	; (8003040 <HAL_ADC_Init+0x2d0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fa8:	4925      	ldr	r1, [pc, #148]	; (8003040 <HAL_ADC_Init+0x2d0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2100      	movs	r1, #0
 8002fba:	f7ff fd76 	bl	8002aaa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	491e      	ldr	r1, [pc, #120]	; (8003044 <HAL_ADC_Init+0x2d4>)
 8002fca:	f7ff fd6e 	bl	8002aaa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f062 020f 	orn	r2, r2, #15
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe6:	e042      	b.n	800306e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff0:	d13d      	bne.n	800306e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e00c      	b.n	8003012 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	2b0f      	cmp	r3, #15
 800300a:	d006      	beq.n	800301a <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3301      	adds	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b07      	cmp	r3, #7
 8003016:	d9ef      	bls.n	8002ff8 <HAL_ADC_Init+0x288>
 8003018:	e000      	b.n	800301c <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 800301a:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d112      	bne.n	8003048 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f062 020f 	orn	r2, r2, #15
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
 8003032:	e01c      	b.n	800306e <HAL_ADC_Init+0x2fe>
 8003034:	20000000 	.word	0x20000000
 8003038:	053e2d63 	.word	0x053e2d63
 800303c:	1ffffc02 	.word	0x1ffffc02
 8003040:	40012708 	.word	0x40012708
 8003044:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	3b01      	subs	r3, #1
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	f003 031c 	and.w	r3, r3, #28
 800305a:	f06f 020f 	mvn.w	r2, #15
 800305e:	fa02 f103 	lsl.w	r1, r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fd36 	bl	8002ae6 <LL_ADC_GetSamplingTimeCommonChannels>
 800307a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003080:	429a      	cmp	r2, r3
 8003082:	d10b      	bne.n	800309c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800309a:	e018      	b.n	80030ce <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	f023 0312 	bic.w	r3, r3, #18
 80030a4:	f043 0210 	orr.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	f043 0201 	orr.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030bc:	e007      	b.n	80030ce <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f043 0210 	orr.w	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06a      	b.n	80031c0 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f043 0202 	orr.w	r2, r3, #2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fabe 	bl	8003678 <ADC_ConversionStop>
 80030fc:	4603      	mov	r3, r0
 80030fe:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb82 	bl	8003810 <ADC_Disable>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fd7f 	bl	8002c24 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003134:	f023 0303 	bic.w	r3, r3, #3
 8003138:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f240 329f 	movw	r2, #927	; 0x39f
 8003142:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_ADC_DeInit+0xf0>)
 8003150:	400b      	ands	r3, r1
 8003152:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003162:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0207 	bic.w	r2, r2, #7
 8003172:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003182:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_ADC_DeInit+0xf4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <HAL_ADC_DeInit+0xf4>)
 8003198:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800319c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd ff10 	bl	8000fc4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80031be:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	833e0200 	.word	0x833e0200
 80031cc:	40012708 	.word	0x40012708

080031d0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fdb5 	bl	8002d4c <LL_ADC_REG_IsConversionOngoing>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d132      	bne.n	800324e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_Start+0x26>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e02e      	b.n	8003254 <HAL_ADC_Start+0x84>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa80 	bl	8003704 <ADC_Enable>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11a      	bne.n	8003244 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	221c      	movs	r2, #28
 800322e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fd5f 	bl	8002d00 <LL_ADC_REG_StartConversion>
 8003242:	e006      	b.n	8003252 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800324c:	e001      	b.n	8003252 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Stop+0x16>
 800326e:	2302      	movs	r3, #2
 8003270:	e022      	b.n	80032b8 <HAL_ADC_Stop+0x5c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9fc 	bl	8003678 <ADC_ConversionStop>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d111      	bne.n	80032ae <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fac0 	bl	8003810 <ADC_Disable>
 8003290:	4603      	mov	r3, r0
 8003292:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d102      	bne.n	80032d8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80032d2:	2308      	movs	r3, #8
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e010      	b.n	80032fa <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e077      	b.n	80033e6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032f6:	2304      	movs	r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032fa:	f7fe fd11 	bl	8001d20 <HAL_GetTick>
 80032fe:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003300:	e021      	b.n	8003346 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d01d      	beq.n	8003346 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800330a:	f7fe fd09 	bl	8001d20 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <HAL_ADC_PollForConversion+0x60>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d112      	bne.n	8003346 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e04f      	b.n	80033e6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0d6      	beq.n	8003302 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fbd6 	bl	8002b16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d031      	beq.n	80033d4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e9b      	ldrb	r3, [r3, #26]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d12d      	bne.n	80033d4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b08      	cmp	r3, #8
 8003384:	d126      	bne.n	80033d4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fcde 	bl	8002d4c <LL_ADC_REG_IsConversionOngoing>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d112      	bne.n	80033bc <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 020c 	bic.w	r2, r2, #12
 80033a4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	659a      	str	r2, [r3, #88]	; 0x58
 80033ba:	e00b      	b.n	80033d4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7e1b      	ldrb	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	220c      	movs	r2, #12
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
	...

08003408 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x28>
 800342c:	2302      	movs	r3, #2
 800342e:	e110      	b.n	8003652 <HAL_ADC_ConfigChannel+0x24a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fc85 	bl	8002d4c <LL_ADC_REG_IsConversionOngoing>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 80f7 	bne.w	8003638 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	f000 80b1 	beq.w	80035b6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800345c:	d004      	beq.n	8003468 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003462:	4a7e      	ldr	r2, [pc, #504]	; (800365c <HAL_ADC_ConfigChannel+0x254>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d108      	bne.n	800347a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f7ff fb82 	bl	8002b7c <LL_ADC_REG_SetSequencerChAdd>
 8003478:	e041      	b.n	80034fe <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	210f      	movs	r1, #15
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0xa0>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	0e9b      	lsrs	r3, r3, #26
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	e011      	b.n	80034cc <HAL_ADC_ConfigChannel+0xc4>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e003      	b.n	80034cc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	6849      	ldr	r1, [r1, #4]
 80034d0:	f001 011f 	and.w	r1, r1, #31
 80034d4:	408b      	lsls	r3, r1
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d808      	bhi.n	80034fe <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f7ff fb1e 	bl	8002b3a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	461a      	mov	r2, r3
 800350c:	f7ff fb5b 	bl	8002bc6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f280 8097 	bge.w	8003648 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800351a:	4851      	ldr	r0, [pc, #324]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 800351c:	f7ff fab8 	bl	8002a90 <LL_ADC_GetCommonPathInternalCh>
 8003520:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a4f      	ldr	r2, [pc, #316]	; (8003664 <HAL_ADC_ConfigChannel+0x25c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d120      	bne.n	800356e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003532:	2b00      	cmp	r3, #0
 8003534:	d11b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800353c:	4619      	mov	r1, r3
 800353e:	4848      	ldr	r0, [pc, #288]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 8003540:	f7ff fa94 	bl	8002a6c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003544:	4b48      	ldr	r3, [pc, #288]	; (8003668 <HAL_ADC_ConfigChannel+0x260>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	4a48      	ldr	r2, [pc, #288]	; (800366c <HAL_ADC_ConfigChannel+0x264>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800355e:	e002      	b.n	8003566 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	3b01      	subs	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800356c:	e06c      	b.n	8003648 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_ADC_ConfigChannel+0x268>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d10c      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x18a>
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003588:	4619      	mov	r1, r3
 800358a:	4835      	ldr	r0, [pc, #212]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 800358c:	f7ff fa6e 	bl	8002a6c <LL_ADC_SetCommonPathInternalCh>
 8003590:	e05a      	b.n	8003648 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a37      	ldr	r2, [pc, #220]	; (8003674 <HAL_ADC_ConfigChannel+0x26c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d155      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d150      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ac:	4619      	mov	r1, r3
 80035ae:	482c      	ldr	r0, [pc, #176]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 80035b0:	f7ff fa5c 	bl	8002a6c <LL_ADC_SetCommonPathInternalCh>
 80035b4:	e048      	b.n	8003648 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035be:	d004      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035c4:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_ADC_ConfigChannel+0x254>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d107      	bne.n	80035da <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7ff fae3 	bl	8002ba0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da32      	bge.n	8003648 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e2:	481f      	ldr	r0, [pc, #124]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 80035e4:	f7ff fa54 	bl	8002a90 <LL_ADC_GetCommonPathInternalCh>
 80035e8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_ADC_ConfigChannel+0x25c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d107      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035fa:	4619      	mov	r1, r3
 80035fc:	4818      	ldr	r0, [pc, #96]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 80035fe:	f7ff fa35 	bl	8002a6c <LL_ADC_SetCommonPathInternalCh>
 8003602:	e021      	b.n	8003648 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_ADC_ConfigChannel+0x268>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d107      	bne.n	800361e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003614:	4619      	mov	r1, r3
 8003616:	4812      	ldr	r0, [pc, #72]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 8003618:	f7ff fa28 	bl	8002a6c <LL_ADC_SetCommonPathInternalCh>
 800361c:	e014      	b.n	8003648 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <HAL_ADC_ConfigChannel+0x26c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10f      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800362e:	4619      	mov	r1, r3
 8003630:	480b      	ldr	r0, [pc, #44]	; (8003660 <HAL_ADC_ConfigChannel+0x258>)
 8003632:	f7ff fa1b 	bl	8002a6c <LL_ADC_SetCommonPathInternalCh>
 8003636:	e007      	b.n	8003648 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003650:	7ffb      	ldrb	r3, [r7, #31]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	80000004 	.word	0x80000004
 8003660:	40012708 	.word	0x40012708
 8003664:	b0001000 	.word	0xb0001000
 8003668:	20000000 	.word	0x20000000
 800366c:	053e2d63 	.word	0x053e2d63
 8003670:	b8004000 	.word	0xb8004000
 8003674:	b4002000 	.word	0xb4002000

08003678 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fb61 	bl	8002d4c <LL_ADC_REG_IsConversionOngoing>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d033      	beq.n	80036f8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fb21 	bl	8002cdc <LL_ADC_IsDisableOngoing>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fb3e 	bl	8002d26 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036aa:	f7fe fb39 	bl	8001d20 <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036b0:	e01b      	b.n	80036ea <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036b2:	f7fe fb35 	bl	8001d20 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d914      	bls.n	80036ea <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e007      	b.n	80036fa <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1dc      	bne.n	80036b2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff facf 	bl	8002cb8 <LL_ADC_IsEnabled>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d169      	bne.n	80037f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <ADC_Enable+0xfc>)
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f043 0210 	orr.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e055      	b.n	80037f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fa8c 	bl	8002c6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003754:	482b      	ldr	r0, [pc, #172]	; (8003804 <ADC_Enable+0x100>)
 8003756:	f7ff f99b 	bl	8002a90 <LL_ADC_GetCommonPathInternalCh>
 800375a:	4603      	mov	r3, r0
 800375c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00f      	beq.n	8003784 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003764:	4b28      	ldr	r3, [pc, #160]	; (8003808 <ADC_Enable+0x104>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	4a28      	ldr	r2, [pc, #160]	; (800380c <ADC_Enable+0x108>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	3301      	adds	r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003776:	e002      	b.n	800377e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	3b01      	subs	r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7e5b      	ldrb	r3, [r3, #25]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d033      	beq.n	80037f4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800378c:	f7fe fac8 	bl	8001d20 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003792:	e028      	b.n	80037e6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fa8d 	bl	8002cb8 <LL_ADC_IsEnabled>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fa5f 	bl	8002c6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037ae:	f7fe fab7 	bl	8001d20 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d914      	bls.n	80037e6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d00d      	beq.n	80037e6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e007      	b.n	80037f6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d1cf      	bne.n	8003794 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	80000017 	.word	0x80000017
 8003804:	40012708 	.word	0x40012708
 8003808:	20000000 	.word	0x20000000
 800380c:	053e2d63 	.word	0x053e2d63

08003810 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fa5d 	bl	8002cdc <LL_ADC_IsDisableOngoing>
 8003822:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fa45 	bl	8002cb8 <LL_ADC_IsEnabled>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d047      	beq.n	80038c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d144      	bne.n	80038c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0305 	and.w	r3, r3, #5
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10c      	bne.n	8003862 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fa20 	bl	8002c92 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2203      	movs	r2, #3
 8003858:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800385a:	f7fe fa61 	bl	8001d20 <HAL_GetTick>
 800385e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003860:	e029      	b.n	80038b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e023      	b.n	80038c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800387e:	f7fe fa4f 	bl	8001d20 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d914      	bls.n	80038b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f043 0210 	orr.w	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e007      	b.n	80038c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1dc      	bne.n	800387e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <LL_ADC_SetCalibrationFactor>:
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038de:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <LL_ADC_GetCalibrationFactor>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <LL_ADC_Enable>:
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003922:	f023 0317 	bic.w	r3, r3, #23
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	609a      	str	r2, [r3, #8]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <LL_ADC_Disable>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003948:	f023 0317 	bic.w	r3, r3, #23
 800394c:	f043 0202 	orr.w	r2, r3, #2
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <LL_ADC_IsEnabled>:
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <LL_ADC_IsEnabled+0x18>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <LL_ADC_IsEnabled+0x1a>
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <LL_ADC_StartCalibration>:
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003992:	f023 0317 	bic.w	r3, r3, #23
 8003996:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039bc:	d101      	bne.n	80039c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b088      	sub	sp, #32
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_ADCEx_Calibration_Start+0x1e>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0b9      	b.n	8003b60 <HAL_ADCEx_Calibration_Start+0x192>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff0b 	bl	8003810 <ADC_Disable>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ffab 	bl	800395e <LL_ADC_IsEnabled>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 809d 	bne.w	8003b4a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a18:	f043 0202 	orr.w	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	f248 0303 	movw	r3, #32771	; 0x8003
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a3c:	f023 0303 	bic.w	r3, r3, #3
 8003a40:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e02e      	b.n	8003aa6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff98 	bl	8003982 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a52:	e014      	b.n	8003a7e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3301      	adds	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003a60:	d30d      	bcc.n	8003a7e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	f023 0312 	bic.w	r3, r3, #18
 8003a6a:	f043 0210 	orr.w	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e070      	b.n	8003b60 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff90 	bl	80039a8 <LL_ADC_IsCalibrationOnGoing>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e2      	bne.n	8003a54 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff2f 	bl	80038f6 <LL_ADC_GetCalibrationFactor>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d9cd      	bls.n	8003a48 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff29 	bl	8003912 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff01 	bl	80038ce <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff31 	bl	8003938 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ad6:	f7fe f923 	bl	8001d20 <HAL_GetTick>
 8003ada:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003adc:	e01c      	b.n	8003b18 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ade:	f7fe f91f 	bl	8001d20 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d915      	bls.n	8003b18 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff34 	bl	800395e <LL_ADC_IsEnabled>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e023      	b.n	8003b60 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff1e 	bl	800395e <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1da      	bne.n	8003ade <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68d9      	ldr	r1, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	659a      	str	r2, [r3, #88]	; 0x58
 8003b48:	e005      	b.n	8003b56 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f043 0210 	orr.w	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b84:	4013      	ands	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60d3      	str	r3, [r2, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 0307 	and.w	r3, r3, #7
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db0b      	blt.n	8003bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4906      	ldr	r1, [pc, #24]	; (8003c00 <__NVIC_EnableIRQ+0x34>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2001      	movs	r0, #1
 8003bee:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	e000e100 	.word	0xe000e100

08003c04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db12      	blt.n	8003c3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	490a      	ldr	r1, [pc, #40]	; (8003c48 <__NVIC_DisableIRQ+0x44>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2001      	movs	r0, #1
 8003c26:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2a:	3320      	adds	r3, #32
 8003c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c30:	f3bf 8f4f 	dsb	sy
}
 8003c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c36:	f3bf 8f6f 	isb	sy
}
 8003c3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100

08003c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db0a      	blt.n	8003c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	490c      	ldr	r1, [pc, #48]	; (8003c98 <__NVIC_SetPriority+0x4c>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c74:	e00a      	b.n	8003c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4908      	ldr	r1, [pc, #32]	; (8003c9c <__NVIC_SetPriority+0x50>)
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	3b04      	subs	r3, #4
 8003c84:	0112      	lsls	r2, r2, #4
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	440b      	add	r3, r1
 8003c8a:	761a      	strb	r2, [r3, #24]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e100 	.word	0xe000e100
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f1c3 0307 	rsb	r3, r3, #7
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	bf28      	it	cs
 8003cbe:	2304      	movcs	r3, #4
 8003cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d902      	bls.n	8003cd0 <NVIC_EncodePriority+0x30>
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3b03      	subs	r3, #3
 8003cce:	e000      	b.n	8003cd2 <NVIC_EncodePriority+0x32>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	43d9      	mvns	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	4313      	orrs	r3, r2
         );
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff2b 	bl	8003b68 <__NVIC_SetPriorityGrouping>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d28:	f7ff ff42 	bl	8003bb0 <__NVIC_GetPriorityGrouping>
 8003d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7ff ffb4 	bl	8003ca0 <NVIC_EncodePriority>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff83 	bl	8003c4c <__NVIC_SetPriority>
}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	4603      	mov	r3, r0
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ff35 	bl	8003bcc <__NVIC_EnableIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ff43 	bl	8003c04 <__NVIC_DisableIRQ>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e08e      	b.n	8003eb8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_DMA_Init+0x138>)
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d80f      	bhi.n	8003dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <HAL_DMA_Init+0x13c>)
 8003dae:	4413      	add	r3, r2
 8003db0:	4a45      	ldr	r2, [pc, #276]	; (8003ec8 <HAL_DMA_Init+0x140>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	009a      	lsls	r2, r3, #2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a42      	ldr	r2, [pc, #264]	; (8003ecc <HAL_DMA_Init+0x144>)
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8003dc4:	e00e      	b.n	8003de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b40      	ldr	r3, [pc, #256]	; (8003ed0 <HAL_DMA_Init+0x148>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	4a3d      	ldr	r2, [pc, #244]	; (8003ec8 <HAL_DMA_Init+0x140>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	009a      	lsls	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <HAL_DMA_Init+0x14c>)
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fb24 	bl	8004484 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e44:	d102      	bne.n	8003e4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e62:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <HAL_DMA_Init+0x106>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d80c      	bhi.n	8003e8e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb4d 	bl	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e008      	b.n	8003ea0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40020407 	.word	0x40020407
 8003ec4:	bffdfff8 	.word	0xbffdfff8
 8003ec8:	cccccccd 	.word	0xcccccccd
 8003ecc:	40020000 	.word	0x40020000
 8003ed0:	bffdfbf8 	.word	0xbffdfbf8
 8003ed4:	40020400 	.word	0x40020400

08003ed8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e07b      	b.n	8003fe2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b3a      	ldr	r3, [pc, #232]	; (8003fec <HAL_DMA_DeInit+0x114>)
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d80f      	bhi.n	8003f26 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_DMA_DeInit+0x118>)
 8003f0e:	4413      	add	r3, r2
 8003f10:	4a38      	ldr	r2, [pc, #224]	; (8003ff4 <HAL_DMA_DeInit+0x11c>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	009a      	lsls	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a35      	ldr	r2, [pc, #212]	; (8003ff8 <HAL_DMA_DeInit+0x120>)
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
 8003f24:	e00e      	b.n	8003f44 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <HAL_DMA_DeInit+0x124>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <HAL_DMA_DeInit+0x11c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	009a      	lsls	r2, r3, #2
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <HAL_DMA_DeInit+0x128>)
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	f003 021c 	and.w	r2, r3, #28
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fa8f 	bl	8004484 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f76:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00f      	beq.n	8003fa0 <HAL_DMA_DeInit+0xc8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d80b      	bhi.n	8003fa0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fac3 	bl	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40020407 	.word	0x40020407
 8003ff0:	bffdfff8 	.word	0xbffdfff8
 8003ff4:	cccccccd 	.word	0xcccccccd
 8003ff8:	40020000 	.word	0x40020000
 8003ffc:	bffdfbf8 	.word	0xbffdfbf8
 8004000:	40020400 	.word	0x40020400

08004004 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_DMA_Start_IT+0x20>
 8004020:	2302      	movs	r3, #2
 8004022:	e069      	b.n	80040f8 <HAL_DMA_Start_IT+0xf4>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d155      	bne.n	80040e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f9d3 	bl	8004408 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 020e 	orr.w	r2, r2, #14
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e00f      	b.n	800409c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 020a 	orr.w	r2, r2, #10
 800409a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e008      	b.n	80040f6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e04f      	b.n	80041b2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d008      	beq.n	8004130 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2204      	movs	r2, #4
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e040      	b.n	80041b2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 020e 	bic.w	r2, r2, #14
 800413e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004164:	f003 021c 	and.w	r2, r3, #28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800417c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004194:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800419e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d005      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	e047      	b.n	8004270 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 020e 	bic.w	r2, r2, #14
 80041ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f003 021c 	and.w	r2, r3, #28
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2101      	movs	r1, #1
 800421e:	fa01 f202 	lsl.w	r2, r1, r2
 8004222:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800422c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00c      	beq.n	8004250 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004244:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800424e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
    }
  }
  return status;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f003 031c 	and.w	r3, r3, #28
 800429c:	2204      	movs	r2, #4
 800429e:	409a      	lsls	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d027      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x7c>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d022      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d107      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	f003 021c 	and.w	r2, r3, #28
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	2104      	movs	r1, #4
 80042de:	fa01 f202 	lsl.w	r2, r1, r2
 80042e2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8081 	beq.w	80043f0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80042f6:	e07b      	b.n	80043f0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f003 031c 	and.w	r3, r3, #28
 8004300:	2202      	movs	r2, #2
 8004302:	409a      	lsls	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d03d      	beq.n	8004388 <HAL_DMA_IRQHandler+0x10c>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d038      	beq.n	8004388 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 020a 	bic.w	r2, r2, #10
 8004332:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_DMA_IRQHandler+0x180>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d909      	bls.n	800435c <HAL_DMA_IRQHandler+0xe0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f003 031c 	and.w	r3, r3, #28
 8004350:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_DMA_IRQHandler+0x184>)
 8004352:	2102      	movs	r1, #2
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	e008      	b.n	800436e <HAL_DMA_IRQHandler+0xf2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	f003 031c 	and.w	r3, r3, #28
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <HAL_DMA_IRQHandler+0x188>)
 8004366:	2102      	movs	r1, #2
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d038      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004386:	e033      	b.n	80043f0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	f003 031c 	and.w	r3, r3, #28
 8004390:	2208      	movs	r2, #8
 8004392:	409a      	lsls	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02a      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x176>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d025      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 020e 	bic.w	r2, r2, #14
 80043b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f003 021c 	and.w	r2, r3, #28
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2101      	movs	r1, #1
 80043c4:	fa01 f202 	lsl.w	r2, r1, r2
 80043c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
}
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40020080 	.word	0x40020080
 8004400:	40020400 	.word	0x40020400
 8004404:	40020000 	.word	0x40020000

08004408 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800441e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004430:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f003 021c 	and.w	r2, r3, #28
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2101      	movs	r1, #1
 8004440:	fa01 f202 	lsl.w	r2, r1, r2
 8004444:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b10      	cmp	r3, #16
 8004454:	d108      	bne.n	8004468 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004466:	e007      	b.n	8004478 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
	...

08004484 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004494:	429a      	cmp	r2, r3
 8004496:	d813      	bhi.n	80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044a4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	3b08      	subs	r3, #8
 80044b4:	4a14      	ldr	r2, [pc, #80]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e011      	b.n	80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	009a      	lsls	r2, r3, #2
 80044c8:	4b10      	ldr	r3, [pc, #64]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80044ca:	4413      	add	r3, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	3b08      	subs	r3, #8
 80044d8:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	3307      	adds	r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80044e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40020407 	.word	0x40020407
 8004508:	cccccccd 	.word	0xcccccccd
 800450c:	4002081c 	.word	0x4002081c
 8004510:	40020880 	.word	0x40020880

08004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004524:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004538:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3b01      	subs	r3, #1
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2201      	movs	r2, #1
 8004544:	409a      	lsls	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	1000823f 	.word	0x1000823f
 8004558:	40020940 	.word	0x40020940

0800455c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <HAL_FLASH_Program+0x80>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_FLASH_Program+0x1a>
 8004572:	2302      	movs	r3, #2
 8004574:	e02d      	b.n	80045d2 <HAL_FLASH_Program+0x76>
 8004576:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_FLASH_Program+0x80>)
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <HAL_FLASH_Program+0x80>)
 800457e:	2200      	movs	r2, #0
 8004580:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004586:	f000 f869 	bl	800465c <FLASH_WaitForLastOperation>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11a      	bne.n	80045ca <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800459a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f000 f8be 	bl	8004720 <FLASH_Program_DoubleWord>
 80045a4:	e004      	b.n	80045b0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	4619      	mov	r1, r3
 80045aa:	68b8      	ldr	r0, [r7, #8]
 80045ac:	f000 f8de 	bl	800476c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b4:	f000 f852 	bl	800465c <FLASH_WaitForLastOperation>
 80045b8:	4603      	mov	r3, r0
 80045ba:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <HAL_FLASH_Program+0x84>)
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	4906      	ldr	r1, [pc, #24]	; (80045e0 <HAL_FLASH_Program+0x84>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <HAL_FLASH_Program+0x80>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200003c8 	.word	0x200003c8
 80045e0:	58004000 	.word	0x58004000

080045e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_FLASH_Unlock+0x38>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da0b      	bge.n	800460e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_FLASH_Unlock+0x38>)
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_FLASH_Unlock+0x3c>)
 80045fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_FLASH_Unlock+0x38>)
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_FLASH_Unlock+0x40>)
 8004600:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_FLASH_Unlock+0x38>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	da01      	bge.n	800460e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800460e:	79fb      	ldrb	r3, [r7, #7]
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	58004000 	.word	0x58004000
 8004620:	45670123 	.word	0x45670123
 8004624:	cdef89ab 	.word	0xcdef89ab

08004628 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_FLASH_Lock+0x30>)
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <HAL_FLASH_Lock+0x30>)
 8004638:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800463c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_FLASH_Lock+0x30>)
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db01      	blt.n	800464a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800464a:	79fb      	ldrb	r3, [r7, #7]
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	58004000 	.word	0x58004000

0800465c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004664:	f7fd fb5c 	bl	8001d20 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800466a:	e009      	b.n	8004680 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800466c:	f7fd fb58 	bl	8001d20 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d801      	bhi.n	8004680 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e047      	b.n	8004710 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <FLASH_WaitForLastOperation+0xbc>)
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d0ee      	beq.n	800466c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800468e:	4b22      	ldr	r3, [pc, #136]	; (8004718 <FLASH_WaitForLastOperation+0xbc>)
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800469e:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <FLASH_WaitForLastOperation+0xbc>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80046aa:	4013      	ands	r3, r2
 80046ac:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <FLASH_WaitForLastOperation+0x6c>
 80046b8:	4b17      	ldr	r3, [pc, #92]	; (8004718 <FLASH_WaitForLastOperation+0xbc>)
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80046c2:	4915      	ldr	r1, [pc, #84]	; (8004718 <FLASH_WaitForLastOperation+0xbc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	618b      	str	r3, [r1, #24]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <FLASH_WaitForLastOperation+0x80>
 80046d2:	4a11      	ldr	r2, [pc, #68]	; (8004718 <FLASH_WaitForLastOperation+0xbc>)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80046da:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80046e2:	4a0e      	ldr	r2, [pc, #56]	; (800471c <FLASH_WaitForLastOperation+0xc0>)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e011      	b.n	8004710 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80046ec:	f7fd fb18 	bl	8001d20 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d801      	bhi.n	8004700 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e007      	b.n	8004710 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <FLASH_WaitForLastOperation+0xbc>)
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800470c:	d0ee      	beq.n	80046ec <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	58004000 	.word	0x58004000
 800471c:	200003c8 	.word	0x200003c8

08004720 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800472c:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <FLASH_Program_DoubleWord+0x48>)
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <FLASH_Program_DoubleWord+0x48>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800473e:	f3bf 8f6f 	isb	sy
}
 8004742:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	000a      	movs	r2, r1
 8004752:	2300      	movs	r3, #0
 8004754:	68f9      	ldr	r1, [r7, #12]
 8004756:	3104      	adds	r1, #4
 8004758:	4613      	mov	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	58004000 	.word	0x58004000

0800476c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004776:	2340      	movs	r3, #64	; 0x40
 8004778:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <FLASH_Program_Fast+0x78>)
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <FLASH_Program_Fast+0x78>)
 8004788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800478c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478e:	f3ef 8310 	mrs	r3, PRIMASK
 8004792:	60fb      	str	r3, [r7, #12]
  return(result);
 8004794:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004798:	b672      	cpsid	i
}
 800479a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	3304      	adds	r3, #4
 80047a8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3304      	adds	r3, #4
 80047ae:	617b      	str	r3, [r7, #20]
    row_index--;
 80047b0:	7ffb      	ldrb	r3, [r7, #31]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ef      	bne.n	800479c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80047bc:	bf00      	nop
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <FLASH_Program_Fast+0x78>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d0f8      	beq.n	80047be <FLASH_Program_Fast+0x52>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f383 8810 	msr	PRIMASK, r3
}
 80047d6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80047d8:	bf00      	nop
 80047da:	3724      	adds	r7, #36	; 0x24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	58004000 	.word	0x58004000

080047e8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047f2:	4b28      	ldr	r3, [pc, #160]	; (8004894 <HAL_FLASHEx_Erase+0xac>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_FLASHEx_Erase+0x16>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e046      	b.n	800488c <HAL_FLASHEx_Erase+0xa4>
 80047fe:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_FLASHEx_Erase+0xac>)
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004804:	4b23      	ldr	r3, [pc, #140]	; (8004894 <HAL_FLASHEx_Erase+0xac>)
 8004806:	2200      	movs	r2, #0
 8004808:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800480a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800480e:	f7ff ff25 	bl	800465c <FLASH_WaitForLastOperation>
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d133      	bne.n	8004884 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d108      	bne.n	8004836 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004824:	f000 f880 	bl	8004928 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800482c:	f7ff ff16 	bl	800465c <FLASH_WaitForLastOperation>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
 8004834:	e024      	b.n	8004880 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	e012      	b.n	800486c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f000 f87e 	bl	8004948 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800484c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004850:	f7ff ff04 	bl	800465c <FLASH_WaitForLastOperation>
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	601a      	str	r2, [r3, #0]
          break;
 8004864:	e00a      	b.n	800487c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3301      	adds	r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4413      	add	r3, r2
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	d3e4      	bcc.n	8004846 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800487c:	f000 f8c0 	bl	8004a00 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004880:	f000 f87a 	bl	8004978 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_FLASHEx_Erase+0xac>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]

  return status;
 800488a:	7bfb      	ldrb	r3, [r7, #15]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200003c8 	.word	0x200003c8

08004898 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_FLASHEx_Erase_IT+0x14>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e034      	b.n	8004916 <HAL_FLASHEx_Erase_IT+0x7e>
 80048ac:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048b2:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 80048be:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048c4:	f7ff feca 	bl	800465c <FLASH_WaitForLastOperation>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e01c      	b.n	8004914 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <HAL_FLASHEx_Erase_IT+0x8c>)
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4a11      	ldr	r2, [pc, #68]	; (8004924 <HAL_FLASHEx_Erase_IT+0x8c>)
 80048e0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80048e4:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d105      	bne.n	80048fa <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80048f4:	f000 f818 	bl	8004928 <FLASH_MassErase>
 80048f8:	e00c      	b.n	8004914 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 8004900:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4a06      	ldr	r2, [pc, #24]	; (8004920 <HAL_FLASHEx_Erase_IT+0x88>)
 8004908:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f81a 	bl	8004948 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	200003c8 	.word	0x200003c8
 8004924:	58004000 	.word	0x58004000

08004928 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <FLASH_MassErase+0x1c>)
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <FLASH_MassErase+0x1c>)
 8004932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	6153      	str	r3, [r2, #20]
#endif
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	58004000 	.word	0x58004000

08004948 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <FLASH_PageErase+0x2c>)
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4313      	orrs	r3, r2
 800495e:	4a05      	ldr	r2, [pc, #20]	; (8004974 <FLASH_PageErase+0x2c>)
 8004960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	6153      	str	r3, [r2, #20]
#endif
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr
 8004974:	58004000 	.word	0x58004000

08004978 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <FLASH_FlushCaches+0x84>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004984:	2b01      	cmp	r3, #1
 8004986:	d117      	bne.n	80049b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004988:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <FLASH_FlushCaches+0x84>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <FLASH_FlushCaches+0x84>)
 800498e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004992:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <FLASH_FlushCaches+0x84>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a18      	ldr	r2, [pc, #96]	; (80049fc <FLASH_FlushCaches+0x84>)
 800499a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b16      	ldr	r3, [pc, #88]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049ac:	4b13      	ldr	r3, [pc, #76]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a12      	ldr	r2, [pc, #72]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b6:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d117      	bne.n	80049f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a09      	ldr	r2, [pc, #36]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a06      	ldr	r2, [pc, #24]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a03      	ldr	r2, [pc, #12]	; (80049fc <FLASH_FlushCaches+0x84>)
 80049ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	58004000 	.word	0x58004000

08004a00 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <FLASH_AcknowledgePageErase+0x1c>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <FLASH_AcknowledgePageErase+0x1c>)
 8004a0a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004a0e:	f023 0302 	bic.w	r3, r3, #2
 8004a12:	6153      	str	r3, [r2, #20]
#endif
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	58004000 	.word	0x58004000

08004a20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a2e:	e140      	b.n	8004cb2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	2101      	movs	r1, #1
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8132 	beq.w	8004cac <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d005      	beq.n	8004a60 <HAL_GPIO_Init+0x40>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d130      	bne.n	8004ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a96:	2201      	movs	r2, #1
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 0201 	and.w	r2, r3, #1
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d017      	beq.n	8004afe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	2203      	movs	r2, #3
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d123      	bne.n	8004b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	08da      	lsrs	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3208      	adds	r2, #8
 8004b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	08da      	lsrs	r2, r3, #3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	6939      	ldr	r1, [r7, #16]
 8004b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0203 	and.w	r2, r3, #3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 808c 	beq.w	8004cac <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b94:	4a4e      	ldr	r2, [pc, #312]	; (8004cd0 <HAL_GPIO_Init+0x2b0>)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	2207      	movs	r2, #7
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bbe:	d00d      	beq.n	8004bdc <HAL_GPIO_Init+0x1bc>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a44      	ldr	r2, [pc, #272]	; (8004cd4 <HAL_GPIO_Init+0x2b4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <HAL_GPIO_Init+0x1b8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a43      	ldr	r2, [pc, #268]	; (8004cd8 <HAL_GPIO_Init+0x2b8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <HAL_GPIO_Init+0x1b4>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e004      	b.n	8004bde <HAL_GPIO_Init+0x1be>
 8004bd4:	2307      	movs	r3, #7
 8004bd6:	e002      	b.n	8004bde <HAL_GPIO_Init+0x1be>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <HAL_GPIO_Init+0x1be>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	f002 0203 	and.w	r2, r2, #3
 8004be4:	0092      	lsls	r2, r2, #2
 8004be6:	4093      	lsls	r3, r2
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bee:	4938      	ldr	r1, [pc, #224]	; (8004cd0 <HAL_GPIO_Init+0x2b0>)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bfc:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c20:	4a2e      	ldr	r2, [pc, #184]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c26:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4013      	ands	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c4a:	4a24      	ldr	r2, [pc, #144]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c50:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c56:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c84:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <HAL_GPIO_Init+0x2bc>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f47f aeb7 	bne.w	8004a30 <HAL_GPIO_Init+0x10>
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	48000400 	.word	0x48000400
 8004cd8:	48000800 	.word	0x48000800
 8004cdc:	58000800 	.word	0x58000800

08004ce0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004cee:	e0af      	b.n	8004e50 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a2 	beq.w	8004e4a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004d06:	4a59      	ldr	r2, [pc, #356]	; (8004e6c <HAL_GPIO_DeInit+0x18c>)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d12:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	2207      	movs	r2, #7
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d2e:	d00d      	beq.n	8004d4c <HAL_GPIO_DeInit+0x6c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a4f      	ldr	r2, [pc, #316]	; (8004e70 <HAL_GPIO_DeInit+0x190>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <HAL_GPIO_DeInit+0x68>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a4e      	ldr	r2, [pc, #312]	; (8004e74 <HAL_GPIO_DeInit+0x194>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_GPIO_DeInit+0x64>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e004      	b.n	8004d4e <HAL_GPIO_DeInit+0x6e>
 8004d44:	2307      	movs	r3, #7
 8004d46:	e002      	b.n	8004d4e <HAL_GPIO_DeInit+0x6e>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <HAL_GPIO_DeInit+0x6e>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	f002 0203 	and.w	r2, r2, #3
 8004d54:	0092      	lsls	r2, r2, #2
 8004d56:	4093      	lsls	r3, r2
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d136      	bne.n	8004dcc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d5e:	4b46      	ldr	r3, [pc, #280]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d60:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	4943      	ldr	r1, [pc, #268]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d70:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	493f      	ldr	r1, [pc, #252]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d82:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	493b      	ldr	r1, [pc, #236]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d90:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	4937      	ldr	r1, [pc, #220]	; (8004e78 <HAL_GPIO_DeInit+0x198>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	2207      	movs	r2, #7
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <HAL_GPIO_DeInit+0x18c>)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	3302      	adds	r3, #2
 8004db6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	43da      	mvns	r2, r3
 8004dbe:	482b      	ldr	r0, [pc, #172]	; (8004e6c <HAL_GPIO_DeInit+0x18c>)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	2103      	movs	r1, #3
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	220f      	movs	r2, #15
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	08d2      	lsrs	r2, r2, #3
 8004e00:	4019      	ands	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3208      	adds	r2, #8
 8004e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2103      	movs	r1, #3
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	2101      	movs	r1, #1
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	401a      	ands	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f af49 	bne.w	8004cf0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	48000400 	.word	0x48000400
 8004e74:	48000800 	.word	0x48000800
 8004e78:	58000800 	.word	0x58000800

08004e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e8c:	787b      	ldrb	r3, [r7, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e92:	887a      	ldrh	r2, [r7, #2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e98:	e002      	b.n	8004ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d006      	beq.n	8004ed0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ec2:	4a05      	ldr	r2, [pc, #20]	; (8004ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ec4:	88fb      	ldrh	r3, [r7, #6]
 8004ec6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f005 f89c 	bl	800a008 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	58000800 	.word	0x58000800

08004edc <HAL_IRDA_IRQHandler>:
  * @param hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(hirda->Instance->ISR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its;
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	617b      	str	r3, [r7, #20]
  if (errorflags == 0U)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10d      	bne.n	8004f1e <HAL_IRDA_IRQHandler+0x42>
  {
    /* IRDA in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_IRDA_IRQHandler+0x42>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_IRDA_IRQHandler+0x42>
    {
      IRDA_Receive_IT(hirda);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f996 	bl	8005248 <IRDA_Receive_IT>
      return;
 8004f1c:	e0df      	b.n	80050de <HAL_IRDA_IRQHandler+0x202>
    }
  }

  /* If some errors occur */
  cr3its = READ_REG(hirda->Instance->CR3);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	613b      	str	r3, [r7, #16]
  if ((errorflags != 0U)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80bb 	beq.w	80050a4 <HAL_IRDA_IRQHandler+0x1c8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <HAL_IRDA_IRQHandler+0x68>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80b0 	beq.w	80050a4 <HAL_IRDA_IRQHandler+0x1c8>
  {
    /* IRDA parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00e      	beq.n	8004f6c <HAL_IRDA_IRQHandler+0x90>
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_IRDA_IRQHandler+0x90>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_PEF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00e      	beq.n	8004f94 <HAL_IRDA_IRQHandler+0xb8>
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_IRDA_IRQHandler+0xb8>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_FEF);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2202      	movs	r2, #2
 8004f86:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00e      	beq.n	8004fbc <HAL_IRDA_IRQHandler+0xe0>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <HAL_IRDA_IRQHandler+0xe0>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_NEF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2204      	movs	r2, #4
 8004fae:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb4:	f043 0202 	orr.w	r2, r3, #2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d013      	beq.n	8004fee <HAL_IRDA_IRQHandler+0x112>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_IRDA_IRQHandler+0xfe>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_IRDA_IRQHandler+0x112>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_OREF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f043 0208 	orr.w	r2, r3, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call IRDA Error Call back function if need be --------------------------*/
    if (hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d072      	beq.n	80050dc <HAL_IRDA_IRQHandler+0x200>
    {
      /* IRDA in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_IRDA_IRQHandler+0x134>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_IRDA_IRQHandler+0x134>
      {
        IRDA_Receive_IT(hirda);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f91c 	bl	8005248 <IRDA_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = hirda->ErrorCode;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d004      	beq.n	800502e <HAL_IRDA_IRQHandler+0x152>
          ((errorcode & HAL_IRDA_ERROR_ORE) != 0U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 800502a:	2b00      	cmp	r3, #0
 800502c:	d031      	beq.n	8005092 <HAL_IRDA_IRQHandler+0x1b6>
      {
        /* Blocking error : transfer is aborted
           Set the IRDA state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        IRDA_EndRxTransfer(hirda);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f875 	bl	800511e <IRDA_EndRxTransfer>

        /* Disable the IRDA DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d123      	bne.n	800508a <HAL_IRDA_IRQHandler+0x1ae>
        {
          CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005050:	609a      	str	r2, [r3, #8]

          /* Abort the IRDA DMA Rx channel */
          if (hirda->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <HAL_IRDA_IRQHandler+0x1a6>
          {
            /* Set the IRDA DMA Abort callback :
               will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
            hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	4a21      	ldr	r2, [pc, #132]	; (80050e4 <HAL_IRDA_IRQHandler+0x208>)
 8005060:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff f8a8 	bl	80041bc <HAL_DMA_Abort_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_IRDA_IRQHandler+0x1c4>
            {
              /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
              hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005080:	e00e      	b.n	80050a0 <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
            /* Call registered user error callback */
            hirda->ErrorCallback(hirda);
#else
            /* Call legacy weak user error callback */
            HAL_IRDA_ErrorCallback(hirda);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f842 	bl	800510c <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005088:	e00a      	b.n	80050a0 <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
          /* Call registered user error callback */
          hirda->ErrorCallback(hirda);
#else
          /* Call legacy weak user error callback */
          HAL_IRDA_ErrorCallback(hirda);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f83e 	bl	800510c <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005090:	e006      	b.n	80050a0 <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
        /* Call registered user error callback */
        hirda->ErrorCallback(hirda);
#else
        /* Call legacy weak user error callback */
        HAL_IRDA_ErrorCallback(hirda);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f83a 	bl	800510c <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800509e:	e01d      	b.n	80050dc <HAL_IRDA_IRQHandler+0x200>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80050a0:	bf00      	nop
    return;
 80050a2:	e01b      	b.n	80050dc <HAL_IRDA_IRQHandler+0x200>

  } /* End if some error occurs */

  /* IRDA in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_IRDA_IRQHandler+0x1e4>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_IRDA_IRQHandler+0x1e4>
  {
    IRDA_Transmit_IT(hirda);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f860 	bl	800517e <IRDA_Transmit_IT>
    return;
 80050be:	e00e      	b.n	80050de <HAL_IRDA_IRQHandler+0x202>
  }

  /* IRDA in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_IRDA_IRQHandler+0x202>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <HAL_IRDA_IRQHandler+0x202>
  {
    IRDA_EndTransmit_IT(hirda);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8a1 	bl	800521c <IRDA_EndTransmit_IT>
    return;
 80050da:	e000      	b.n	80050de <HAL_IRDA_IRQHandler+0x202>
    return;
 80050dc:	bf00      	nop
  }

}
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	08005157 	.word	0x08005157

080050e8 <HAL_IRDA_TxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_TxCpltCallback can be implemented in the user file.
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <HAL_IRDA_RxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_RxCpltCallback can be implemented in the user file.
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <HAL_IRDA_ErrorCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_ErrorCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <IRDA_EndRxTransfer>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005134:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore hirda->RxState to Ready */
  hirda->RxState = HAL_IRDA_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <IRDA_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)(hdma->Parent);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	60fb      	str	r3, [r7, #12]
  hirda->RxXferCount = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	855a      	strh	r2, [r3, #42]	; 0x2a
  hirda->TxXferCount = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	845a      	strh	r2, [r3, #34]	; 0x22
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered user error callback */
  hirda->ErrorCallback(hirda);
#else
  /* Call legacy weak user error callback */
  HAL_IRDA_ErrorCallback(hirda);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff ffcb 	bl	800510c <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <IRDA_Transmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	2b21      	cmp	r3, #33	; 0x21
 800518c:	d141      	bne.n	8005212 <IRDA_Transmit_IT+0x94>
  {
    if (hirda->TxXferCount == 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d110      	bne.n	80051ba <IRDA_Transmit_IT+0x3c>
    {
      /* Disable the IRDA Transmit Data Register Empty Interrupt */
      CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a6:	601a      	str	r2, [r3, #0]

      /* Enable the IRDA Transmit Complete Interrupt */
      SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b6:	601a      	str	r2, [r3, #0]
        hirda->pTxBuffPtr++;
      }
      hirda->TxXferCount--;
    }
  }
}
 80051b8:	e02b      	b.n	8005212 <IRDA_Transmit_IT+0x94>
      if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	d114      	bne.n	80051ee <IRDA_Transmit_IT+0x70>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d110      	bne.n	80051ee <IRDA_Transmit_IT+0x70>
        tmp = (const uint16_t *) hirda->pTxBuffPtr; /* Derogation R.11.3 */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	60fb      	str	r3, [r7, #12]
        hirda->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr += 2U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	1c9a      	adds	r2, r3, #2
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	61da      	str	r2, [r3, #28]
 80051ec:	e00a      	b.n	8005204 <IRDA_Transmit_IT+0x86>
        hirda->Instance->TDR = (uint8_t)(*hirda->pTxBuffPtr & 0xFFU);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	61da      	str	r2, [r3, #28]
      hirda->TxXferCount--;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <IRDA_EndTransmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Disable the IRDA Transmit Complete Interrupt */
  CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005232:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore hirda->gState to Ready */
  hirda->gState = HAL_IRDA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered Tx complete callback */
  hirda->TxCpltCallback(hirda);
#else
  /* Call legacy weak Tx complete callback */
  HAL_IRDA_TxCpltCallback(hirda);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff ff54 	bl	80050e8 <HAL_IRDA_TxCpltCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <IRDA_Receive_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = hirda->Mask;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005254:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	d14c      	bne.n	80052f8 <IRDA_Receive_IT+0xb0>
  {
    uhdata = (uint16_t) READ_REG(hirda->Instance->RDR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	81bb      	strh	r3, [r7, #12]
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526e:	d112      	bne.n	8005296 <IRDA_Receive_IT+0x4e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10e      	bne.n	8005296 <IRDA_Receive_IT+0x4e>
    {
      tmp = (uint16_t *) hirda->pRxBuffPtr; /* Derogation R.11.3 */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800527e:	89ba      	ldrh	r2, [r7, #12]
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	4013      	ands	r3, r2
 8005284:	b29a      	uxth	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	801a      	strh	r2, [r3, #0]
      hirda->pRxBuffPtr  += 2U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
 8005294:	e00d      	b.n	80052b2 <IRDA_Receive_IT+0x6a>
    }
    else
    {
      *hirda->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005296:	89bb      	ldrh	r3, [r7, #12]
 8005298:	b2d9      	uxtb	r1, r3
 800529a:	89fb      	ldrh	r3, [r7, #14]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	400a      	ands	r2, r1
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	701a      	strb	r2, [r3, #0]
      hirda->pRxBuffPtr++;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    hirda->RxXferCount--;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hirda->RxXferCount == 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d11e      	bne.n	8005308 <IRDA_Receive_IT+0xc0>
    {
      /* Disable the IRDA Parity Error Interrupt and RXNE interrupt */
      CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052d8:	601a      	str	r2, [r3, #0]

      /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore hirda->RxState to Ready */
      hirda->RxState = HAL_IRDA_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
      /* Call registered Rx complete callback */
      hirda->RxCpltCallback(hirda);
#else
      /* Call legacy weak Rx complete callback */
      HAL_IRDA_RxCpltCallback(hirda);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff02 	bl	80050fa <HAL_IRDA_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
  }
}
 80052f6:	e007      	b.n	8005308 <IRDA_Receive_IT+0xc0>
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	619a      	str	r2, [r3, #24]
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005314:	4b04      	ldr	r3, [pc, #16]	; (8005328 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a03      	ldr	r2, [pc, #12]	; (8005328 <HAL_PWR_EnableBkUpAccess+0x18>)
 800531a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	58000400 	.word	0x58000400

0800532c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10c      	bne.n	8005358 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <HAL_PWR_EnterSLEEPMode+0x60>)
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534a:	d10d      	bne.n	8005368 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800534c:	f000 f83c 	bl	80053c8 <HAL_PWREx_DisableLowPowerRunMode>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005356:	e015      	b.n	8005384 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <HAL_PWR_EnterSLEEPMode+0x60>)
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005364:	f000 f822 	bl	80053ac <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005368:	4b09      	ldr	r3, [pc, #36]	; (8005390 <HAL_PWR_EnterSLEEPMode+0x64>)
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <HAL_PWR_EnterSLEEPMode+0x64>)
 800536e:	f023 0304 	bic.w	r3, r3, #4
 8005372:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800537a:	bf30      	wfi
 800537c:	e002      	b.n	8005384 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800537e:	bf40      	sev
    __WFE();
 8005380:	bf20      	wfe
    __WFE();
 8005382:	bf20      	wfe
  }
}
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	58000400 	.word	0x58000400
 8005390:	e000ed00 	.word	0xe000ed00

08005394 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <HAL_PWREx_GetVoltageRange+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	58000400 	.word	0x58000400

080053ac <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a03      	ldr	r2, [pc, #12]	; (80053c4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80053b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ba:	6013      	str	r3, [r2, #0]
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr
 80053c4:	58000400 	.word	0x58000400

080053c8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2232      	movs	r2, #50	; 0x32
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	4a12      	ldr	r2, [pc, #72]	; (8005430 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0c9b      	lsrs	r3, r3, #18
 80053ec:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80053ee:	e002      	b.n	80053f6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005402:	d102      	bne.n	800540a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f2      	bne.n	80053f0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005416:	d101      	bne.n	800541c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e000      	b.n	800541e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	58000400 	.word	0x58000400
 800542c:	20000000 	.word	0x20000000
 8005430:	431bde83 	.word	0x431bde83

08005434 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 0307 	bic.w	r3, r3, #7
 8005446:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005448:	f043 0302 	orr.w	r3, r3, #2
 800544c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005454:	f043 0304 	orr.w	r3, r3, #4
 8005458:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005460:	bf30      	wfi
 8005462:	e002      	b.n	800546a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005464:	bf40      	sev
    __WFE();
 8005466:	bf20      	wfe
    __WFE();
 8005468:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800546a:	4b06      	ldr	r3, [pc, #24]	; (8005484 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	4a05      	ldr	r2, [pc, #20]	; (8005484 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	6113      	str	r3, [r2, #16]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	58000400 	.word	0x58000400
 8005484:	e000ed00 	.word	0xe000ed00

08005488 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d101      	bne.n	800549e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	58000400 	.word	0x58000400

080054ac <LL_RCC_HSE_EnableTcxo>:
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054be:	6013      	str	r3, [r2, #0]
}
 80054c0:	bf00      	nop
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <LL_RCC_HSE_DisableTcxo>:
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80054e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f6:	d101      	bne.n	80054fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <LL_RCC_HSE_Enable>:
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005518:	6013      	str	r3, [r2, #0]
}
 800551a:	bf00      	nop
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <LL_RCC_HSE_Disable>:
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <LL_RCC_HSE_IsReady>:
{
 800553e:	b480      	push	{r7}
 8005540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005550:	d101      	bne.n	8005556 <LL_RCC_HSE_IsReady+0x18>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <LL_RCC_HSE_IsReady+0x1a>
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <LL_RCC_HSI_Enable>:
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800556e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005572:	6013      	str	r3, [r2, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <LL_RCC_HSI_Disable>:
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800558a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800558e:	6013      	str	r3, [r2, #0]
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <LL_RCC_HSI_IsReady>:
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800559c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055aa:	d101      	bne.n	80055b0 <LL_RCC_HSI_IsReady+0x18>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <LL_RCC_HSI_IsReady+0x1a>
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <LL_RCC_HSI_SetCalibTrimming>:
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	061b      	lsls	r3, r3, #24
 80055d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d4:	4313      	orrs	r3, r2
 80055d6:	604b      	str	r3, [r1, #4]
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <LL_RCC_LSE_IsReady>:
{
 80055e2:	b480      	push	{r7}
 80055e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80055e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d101      	bne.n	80055fa <LL_RCC_LSE_IsReady+0x18>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <LL_RCC_LSE_IsReady+0x1a>
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <LL_RCC_LSI_Enable>:
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr

08005624 <LL_RCC_LSI_Disable>:
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <LL_RCC_LSI_IsReady>:
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d101      	bne.n	800565c <LL_RCC_LSI_IsReady+0x18>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <LL_RCC_LSI_IsReady+0x1a>
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <LL_RCC_MSI_Enable>:
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6013      	str	r3, [r2, #0]
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <LL_RCC_MSI_Disable>:
{
 8005682:	b480      	push	{r7}
 8005684:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <LL_RCC_MSI_IsReady>:
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d101      	bne.n	80056b4 <LL_RCC_MSI_IsReady+0x16>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <LL_RCC_MSI_IsReady+0x18>
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80056be:	b480      	push	{r7}
 80056c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d101      	bne.n	80056d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr

080056de <LL_RCC_MSI_GetRange>:
{
 80056de:	b480      	push	{r7}
 80056e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80056e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80056f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005700:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005704:	4618      	mov	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <LL_RCC_MSI_SetCalibTrimming>:
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005726:	4313      	orrs	r3, r2
 8005728:	604b      	str	r3, [r1, #4]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <LL_RCC_SetSysClkSource>:
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4313      	orrs	r3, r2
 800574e:	608b      	str	r3, [r1, #8]
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr

0800575a <LL_RCC_GetSysClkSource>:
{
 800575a:	b480      	push	{r7}
 800575c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800575e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 030c 	and.w	r3, r3, #12
}
 8005768:	4618      	mov	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <LL_RCC_SetAHBPrescaler>:
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4313      	orrs	r3, r2
 800578a:	608b      	str	r3, [r1, #8]
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <LL_RCC_SetAHB3Prescaler>:
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057a6:	f023 020f 	bic.w	r2, r3, #15
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <LL_RCC_SetAPB1Prescaler>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <LL_RCC_SetAPB2Prescaler>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4313      	orrs	r3, r2
 8005802:	608b      	str	r3, [r1, #8]
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <LL_RCC_GetAHBPrescaler>:
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <LL_RCC_GetAHB3Prescaler>:
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005836:	4618      	mov	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <LL_RCC_GetAPB1Prescaler>:
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <LL_RCC_GetAPB2Prescaler>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005862:	4618      	mov	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587c:	6013      	str	r3, [r2, #0]
}
 800587e:	bf00      	nop
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005886:	b480      	push	{r7}
 8005888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005898:	6013      	str	r3, [r2, #0]
}
 800589a:	bf00      	nop
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80058a2:	b480      	push	{r7}
 80058a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b4:	d101      	bne.n	80058ba <LL_RCC_PLL_IsReady+0x18>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <LL_RCC_PLL_IsReady+0x1a>
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr

080058c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80058e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0303 	and.w	r3, r3, #3
}
 8005916:	4618      	mov	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800591e:	b480      	push	{r7}
 8005920:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005930:	d101      	bne.n	8005936 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005948:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800594c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d101      	bne.n	800595a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005976:	d101      	bne.n	800597c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005998:	d101      	bne.n	800599e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e38b      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ba:	f7ff fece 	bl	800575a <LL_RCC_GetSysClkSource>
 80059be:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c0:	f7ff ffa2 	bl	8005908 <LL_RCC_PLL_GetMainSource>
 80059c4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80c9 	beq.w	8005b66 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_RCC_OscConfig+0x3e>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d17b      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d178      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059e6:	f7ff fe5a 	bl	800569e <LL_RCC_MSI_IsReady>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_OscConfig+0x54>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e36a      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_RCC_OscConfig+0x72>
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a18:	e006      	b.n	8005a28 <HAL_RCC_OscConfig+0x80>
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d222      	bcs.n	8005a72 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fd51 	bl	80064d8 <RCC_SetFlashLatencyFromMSIRange>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e348      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4a:	f043 0308 	orr.w	r3, r3, #8
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a62:	4313      	orrs	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fe4e 	bl	800570c <LL_RCC_MSI_SetCalibTrimming>
 8005a70:	e021      	b.n	8005ab6 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a7c:	f043 0308 	orr.w	r3, r3, #8
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fe35 	bl	800570c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fd16 	bl	80064d8 <RCC_SetFlashLatencyFromMSIRange>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e30d      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ab6:	f000 fcd7 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8005aba:	4603      	mov	r3, r0
 8005abc:	4aa1      	ldr	r2, [pc, #644]	; (8005d44 <HAL_RCC_OscConfig+0x39c>)
 8005abe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ac0:	4ba1      	ldr	r3, [pc, #644]	; (8005d48 <HAL_RCC_OscConfig+0x3a0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fc f921 	bl	8001d0c <HAL_InitTick>
 8005aca:	4603      	mov	r3, r0
 8005acc:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005ace:	7cfb      	ldrb	r3, [r7, #19]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d047      	beq.n	8005b64 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	e2fc      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02c      	beq.n	8005b3a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ae0:	f7ff fdc1 	bl	8005666 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ae4:	f7fc f91c 	bl	8001d20 <HAL_GetTick>
 8005ae8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005aec:	f7fc f918 	bl	8001d20 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e2e9      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005afe:	f7ff fdce 	bl	800569e <LL_RCC_MSI_IsReady>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f1      	beq.n	8005aec <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b12:	f043 0308 	orr.w	r3, r3, #8
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fdea 	bl	800570c <LL_RCC_MSI_SetCalibTrimming>
 8005b38:	e015      	b.n	8005b66 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b3a:	f7ff fda2 	bl	8005682 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b3e:	f7fc f8ef 	bl	8001d20 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b46:	f7fc f8eb 	bl	8001d20 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e2bc      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b58:	f7ff fda1 	bl	800569e <LL_RCC_MSI_IsReady>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f1      	bne.n	8005b46 <HAL_RCC_OscConfig+0x19e>
 8005b62:	e000      	b.n	8005b66 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b64:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d05f      	beq.n	8005c32 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_OscConfig+0x1dc>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d10d      	bne.n	8005b9a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d10a      	bne.n	8005b9a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b84:	f7ff fcdb 	bl	800553e <LL_RCC_HSE_IsReady>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d050      	beq.n	8005c30 <HAL_RCC_OscConfig+0x288>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d14c      	bne.n	8005c30 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e29b      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x218>
 8005bba:	f7ff fca4 	bl	8005506 <LL_RCC_HSE_Enable>
 8005bbe:	e00d      	b.n	8005bdc <HAL_RCC_OscConfig+0x234>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005bc8:	d104      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x22c>
 8005bca:	f7ff fc6f 	bl	80054ac <LL_RCC_HSE_EnableTcxo>
 8005bce:	f7ff fc9a 	bl	8005506 <LL_RCC_HSE_Enable>
 8005bd2:	e003      	b.n	8005bdc <HAL_RCC_OscConfig+0x234>
 8005bd4:	f7ff fca5 	bl	8005522 <LL_RCC_HSE_Disable>
 8005bd8:	f7ff fc76 	bl	80054c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d012      	beq.n	8005c0a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fc f89c 	bl	8001d20 <HAL_GetTick>
 8005be8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bec:	f7fc f898 	bl	8001d20 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b64      	cmp	r3, #100	; 0x64
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e269      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005bfe:	f7ff fc9e 	bl	800553e <LL_RCC_HSE_IsReady>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f1      	beq.n	8005bec <HAL_RCC_OscConfig+0x244>
 8005c08:	e013      	b.n	8005c32 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fc f889 	bl	8001d20 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c12:	f7fc f885 	bl	8001d20 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b64      	cmp	r3, #100	; 0x64
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e256      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c24:	f7ff fc8b 	bl	800553e <LL_RCC_HSE_IsReady>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f1      	bne.n	8005c12 <HAL_RCC_OscConfig+0x26a>
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c30:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d04b      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_OscConfig+0x2a8>
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2b0c      	cmp	r3, #12
 8005c48:	d113      	bne.n	8005c72 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d110      	bne.n	8005c72 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c50:	f7ff fca2 	bl	8005598 <LL_RCC_HSI_IsReady>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_RCC_OscConfig+0x2be>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e235      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fca5 	bl	80055ba <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c70:	e031      	b.n	8005cd6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d019      	beq.n	8005cae <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c7a:	f7ff fc71 	bl	8005560 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7e:	f7fc f84f 	bl	8001d20 <HAL_GetTick>
 8005c82:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c86:	f7fc f84b 	bl	8001d20 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e21c      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c98:	f7ff fc7e 	bl	8005598 <LL_RCC_HSI_IsReady>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f1      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fc87 	bl	80055ba <LL_RCC_HSI_SetCalibTrimming>
 8005cac:	e013      	b.n	8005cd6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cae:	f7ff fc65 	bl	800557c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fc f835 	bl	8001d20 <HAL_GetTick>
 8005cb6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cba:	f7fc f831 	bl	8001d20 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e202      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ccc:	f7ff fc64 	bl	8005598 <LL_RCC_HSI_IsReady>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f1      	bne.n	8005cba <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d06f      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d057      	beq.n	8005d9a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d036      	beq.n	8005d70 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e1db      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d018      	beq.n	8005d56 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005d24:	f7ff fc7e 	bl	8005624 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d28:	f7fb fffa 	bl	8001d20 <HAL_GetTick>
 8005d2c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d2e:	e00d      	b.n	8005d4c <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d30:	f7fb fff6 	bl	8001d20 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b11      	cmp	r3, #17
 8005d3c:	d906      	bls.n	8005d4c <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e1c7      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
 8005d42:	bf00      	nop
 8005d44:	20000000 	.word	0x20000000
 8005d48:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d4c:	f7ff fc7a 	bl	8005644 <LL_RCC_LSI_IsReady>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ec      	bne.n	8005d30 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d5e:	f023 0210 	bic.w	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d70:	f7ff fc48 	bl	8005604 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fb ffd4 	bl	8001d20 <HAL_GetTick>
 8005d78:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d7c:	f7fb ffd0 	bl	8001d20 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b11      	cmp	r3, #17
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e1a1      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d8e:	f7ff fc59 	bl	8005644 <LL_RCC_LSI_IsReady>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0f1      	beq.n	8005d7c <HAL_RCC_OscConfig+0x3d4>
 8005d98:	e013      	b.n	8005dc2 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d9a:	f7ff fc43 	bl	8005624 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9e:	f7fb ffbf 	bl	8001d20 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005da6:	f7fb ffbb 	bl	8001d20 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b11      	cmp	r3, #17
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e18c      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005db8:	f7ff fc44 	bl	8005644 <LL_RCC_LSI_IsReady>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f1      	bne.n	8005da6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80d8 	beq.w	8005f80 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005dd0:	f7ff fb5a 	bl	8005488 <LL_PWR_IsEnabledBkUpAccess>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d113      	bne.n	8005e02 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005dda:	f7ff fa99 	bl	8005310 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dde:	f7fb ff9f 	bl	8001d20 <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de6:	f7fb ff9b 	bl	8001d20 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e16c      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005df8:	f7ff fb46 	bl	8005488 <LL_PWR_IsEnabledBkUpAccess>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f1      	beq.n	8005de6 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d07b      	beq.n	8005f02 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b85      	cmp	r3, #133	; 0x85
 8005e10:	d003      	beq.n	8005e1a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d109      	bne.n	8005e2e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e26:	f043 0304 	orr.w	r3, r3, #4
 8005e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fb ff77 	bl	8001d20 <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e48:	e00a      	b.n	8005e60 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e4a:	f7fb ff69 	bl	8001d20 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e138      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e60:	f7ff fbbf 	bl	80055e2 <LL_RCC_LSE_IsReady>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ef      	beq.n	8005e4a <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b81      	cmp	r3, #129	; 0x81
 8005e70:	d003      	beq.n	8005e7a <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b85      	cmp	r3, #133	; 0x85
 8005e78:	d121      	bne.n	8005ebe <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7a:	f7fb ff51 	bl	8001d20 <HAL_GetTick>
 8005e7e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e94:	e00a      	b.n	8005eac <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e96:	f7fb ff43 	bl	8001d20 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e112      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0ec      	beq.n	8005e96 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ebc:	e060      	b.n	8005f80 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebe:	f7fb ff2f 	bl	8001d20 <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fb ff21 	bl	8001d20 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e0f0      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1ec      	bne.n	8005eda <HAL_RCC_OscConfig+0x532>
 8005f00:	e03e      	b.n	8005f80 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f02:	f7fb ff0d 	bl	8001d20 <HAL_GetTick>
 8005f06:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f1c:	e00a      	b.n	8005f34 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1e:	f7fb feff 	bl	8001d20 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e0ce      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1ec      	bne.n	8005f1e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f44:	f7fb feec 	bl	8001d20 <HAL_GetTick>
 8005f48:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f60:	f7fb fede 	bl	8001d20 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0ad      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f76:	f7ff fb34 	bl	80055e2 <LL_RCC_LSE_IsReady>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ef      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 80a3 	beq.w	80060d0 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	d076      	beq.n	800607e <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d14b      	bne.n	8006030 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f98:	f7ff fc75 	bl	8005886 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fb fec0 	bl	8001d20 <HAL_GetTick>
 8005fa0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa4:	f7fb febc 	bl	8001d20 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b0a      	cmp	r3, #10
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e08d      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fb6:	f7ff fc74 	bl	80058a2 <LL_RCC_PLL_IsReady>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f1      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	4b45      	ldr	r3, [pc, #276]	; (80060dc <HAL_RCC_OscConfig+0x734>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fd2:	4311      	orrs	r1, r2
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fd8:	0212      	lsls	r2, r2, #8
 8005fda:	4311      	orrs	r1, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fe0:	4311      	orrs	r1, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fe6:	4311      	orrs	r1, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005fec:	430a      	orrs	r2, r1
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ff6:	f7ff fc38 	bl	800586a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006008:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fb fe89 	bl	8001d20 <HAL_GetTick>
 800600e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006012:	f7fb fe85 	bl	8001d20 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b0a      	cmp	r3, #10
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e056      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006024:	f7ff fc3d 	bl	80058a2 <LL_RCC_PLL_IsReady>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f1      	beq.n	8006012 <HAL_RCC_OscConfig+0x66a>
 800602e:	e04f      	b.n	80060d0 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006030:	f7ff fc29 	bl	8005886 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800603e:	f023 0303 	bic.w	r3, r3, #3
 8006042:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800604e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006056:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fb fe62 	bl	8001d20 <HAL_GetTick>
 800605c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006060:	f7fb fe5e 	bl	8001d20 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b0a      	cmp	r3, #10
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e02f      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006072:	f7ff fc16 	bl	80058a2 <LL_RCC_PLL_IsReady>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f1      	bne.n	8006060 <HAL_RCC_OscConfig+0x6b8>
 800607c:	e028      	b.n	80060d0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e023      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f003 0203 	and.w	r2, r3, #3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	429a      	cmp	r2, r3
 800609e:	d115      	bne.n	80060cc <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d10e      	bne.n	80060cc <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d106      	bne.n	80060cc <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d001      	beq.n	80060d0 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	11c1808c 	.word	0x11c1808c

080060e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e10f      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060f4:	4b89      	ldr	r3, [pc, #548]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d91b      	bls.n	800613a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006102:	4b86      	ldr	r3, [pc, #536]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 0207 	bic.w	r2, r3, #7
 800610a:	4984      	ldr	r1, [pc, #528]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006112:	f7fb fe05 	bl	8001d20 <HAL_GetTick>
 8006116:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006118:	e008      	b.n	800612c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800611a:	f7fb fe01 	bl	8001d20 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e0f3      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612c:	4b7b      	ldr	r3, [pc, #492]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d1ef      	bne.n	800611a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fb10 	bl	8005770 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006150:	f7fb fde6 	bl	8001d20 <HAL_GetTick>
 8006154:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006158:	f7fb fde2 	bl	8001d20 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e0d4      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800616a:	f7ff fbd8 	bl	800591e <LL_RCC_IsActiveFlag_HPRE>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f1      	beq.n	8006158 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d016      	beq.n	80061ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fb06 	bl	8005796 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800618a:	f7fb fdc9 	bl	8001d20 <HAL_GetTick>
 800618e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006192:	f7fb fdc5 	bl	8001d20 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e0b7      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80061a4:	f7ff fbcc 	bl	8005940 <LL_RCC_IsActiveFlag_SHDHPRE>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f1      	beq.n	8006192 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff faff 	bl	80057c2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061c4:	f7fb fdac 	bl	8001d20 <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061ca:	e008      	b.n	80061de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061cc:	f7fb fda8 	bl	8001d20 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e09a      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061de:	f7ff fbc1 	bl	8005964 <LL_RCC_IsActiveFlag_PPRE1>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f1      	beq.n	80061cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d017      	beq.n	8006224 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff faf4 	bl	80057e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006200:	f7fb fd8e 	bl	8001d20 <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006208:	f7fb fd8a 	bl	8001d20 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e07c      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800621a:	f7ff fbb4 	bl	8005986 <LL_RCC_IsActiveFlag_PPRE2>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0f1      	beq.n	8006208 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d043      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d106      	bne.n	8006246 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006238:	f7ff f981 	bl	800553e <LL_RCC_HSE_IsReady>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11e      	bne.n	8006280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e066      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d106      	bne.n	800625c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800624e:	f7ff fb28 	bl	80058a2 <LL_RCC_PLL_IsReady>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d113      	bne.n	8006280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e05b      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006264:	f7ff fa1b 	bl	800569e <LL_RCC_MSI_IsReady>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d108      	bne.n	8006280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e050      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006272:	f7ff f991 	bl	8005598 <LL_RCC_HSI_IsReady>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e049      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fa55 	bl	8005734 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628a:	f7fb fd49 	bl	8001d20 <HAL_GetTick>
 800628e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006290:	e00a      	b.n	80062a8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006292:	f7fb fd45 	bl	8001d20 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e035      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a8:	f7ff fa57 	bl	800575a <LL_RCC_GetSysClkSource>
 80062ac:	4602      	mov	r2, r0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d1ec      	bne.n	8006292 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d21b      	bcs.n	80062fe <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c6:	4b15      	ldr	r3, [pc, #84]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f023 0207 	bic.w	r2, r3, #7
 80062ce:	4913      	ldr	r1, [pc, #76]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d6:	f7fb fd23 	bl	8001d20 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062de:	f7fb fd1f 	bl	8001d20 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e011      	b.n	8006314 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <HAL_RCC_ClockConfig+0x23c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d1ef      	bne.n	80062de <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062fe:	f000 f8b3 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006302:	4603      	mov	r3, r0
 8006304:	4a06      	ldr	r2, [pc, #24]	; (8006320 <HAL_RCC_ClockConfig+0x240>)
 8006306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <HAL_RCC_ClockConfig+0x244>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f7fb fcfd 	bl	8001d0c <HAL_InitTick>
 8006312:	4603      	mov	r3, r0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	58004000 	.word	0x58004000
 8006320:	20000000 	.word	0x20000000
 8006324:	20000004 	.word	0x20000004

08006328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006336:	f7ff fa10 	bl	800575a <LL_RCC_GetSysClkSource>
 800633a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800633c:	f7ff fae4 	bl	8005908 <LL_RCC_PLL_GetMainSource>
 8006340:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x2c>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b0c      	cmp	r3, #12
 800634c:	d139      	bne.n	80063c2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d136      	bne.n	80063c2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006354:	f7ff f9b3 	bl	80056be <LL_RCC_MSI_IsEnabledRangeSelect>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d115      	bne.n	800638a <HAL_RCC_GetSysClockFreq+0x62>
 800635e:	f7ff f9ae 	bl	80056be <LL_RCC_MSI_IsEnabledRangeSelect>
 8006362:	4603      	mov	r3, r0
 8006364:	2b01      	cmp	r3, #1
 8006366:	d106      	bne.n	8006376 <HAL_RCC_GetSysClockFreq+0x4e>
 8006368:	f7ff f9b9 	bl	80056de <LL_RCC_MSI_GetRange>
 800636c:	4603      	mov	r3, r0
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	e005      	b.n	8006382 <HAL_RCC_GetSysClockFreq+0x5a>
 8006376:	f7ff f9bd 	bl	80056f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800637a:	4603      	mov	r3, r0
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	4a36      	ldr	r2, [pc, #216]	; (800645c <HAL_RCC_GetSysClockFreq+0x134>)
 8006384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006388:	e014      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x8c>
 800638a:	f7ff f998 	bl	80056be <LL_RCC_MSI_IsEnabledRangeSelect>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d106      	bne.n	80063a2 <HAL_RCC_GetSysClockFreq+0x7a>
 8006394:	f7ff f9a3 	bl	80056de <LL_RCC_MSI_GetRange>
 8006398:	4603      	mov	r3, r0
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	e005      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x86>
 80063a2:	f7ff f9a7 	bl	80056f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80063a6:	4603      	mov	r3, r0
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_RCC_GetSysClockFreq+0x134>)
 80063b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d115      	bne.n	80063e8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063c0:	e012      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d102      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063c8:	4b25      	ldr	r3, [pc, #148]	; (8006460 <HAL_RCC_GetSysClockFreq+0x138>)
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e00c      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d109      	bne.n	80063e8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80063d4:	f7ff f886 	bl	80054e4 <LL_RCC_HSE_IsEnabledDiv2>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d102      	bne.n	80063e4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80063de:	4b20      	ldr	r3, [pc, #128]	; (8006460 <HAL_RCC_GetSysClockFreq+0x138>)
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e001      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80063e4:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063e6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063e8:	f7ff f9b7 	bl	800575a <LL_RCC_GetSysClkSource>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d12f      	bne.n	8006452 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80063f2:	f7ff fa89 	bl	8005908 <LL_RCC_PLL_GetMainSource>
 80063f6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d003      	beq.n	8006406 <HAL_RCC_GetSysClockFreq+0xde>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b03      	cmp	r3, #3
 8006402:	d003      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0xe4>
 8006404:	e00d      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006406:	4b16      	ldr	r3, [pc, #88]	; (8006460 <HAL_RCC_GetSysClockFreq+0x138>)
 8006408:	60fb      	str	r3, [r7, #12]
        break;
 800640a:	e00d      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800640c:	f7ff f86a 	bl	80054e4 <LL_RCC_HSE_IsEnabledDiv2>
 8006410:	4603      	mov	r3, r0
 8006412:	2b01      	cmp	r3, #1
 8006414:	d102      	bne.n	800641c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <HAL_RCC_GetSysClockFreq+0x138>)
 8006418:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800641a:	e005      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800641c:	4b11      	ldr	r3, [pc, #68]	; (8006464 <HAL_RCC_GetSysClockFreq+0x13c>)
 800641e:	60fb      	str	r3, [r7, #12]
        break;
 8006420:	e002      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	60fb      	str	r3, [r7, #12]
        break;
 8006426:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006428:	f7ff fa4c 	bl	80058c4 <LL_RCC_PLL_GetN>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	fb03 f402 	mul.w	r4, r3, r2
 8006434:	f7ff fa5d 	bl	80058f2 <LL_RCC_PLL_GetDivider>
 8006438:	4603      	mov	r3, r0
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	3301      	adds	r3, #1
 800643e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006442:	f7ff fa4b 	bl	80058dc <LL_RCC_PLL_GetR>
 8006446:	4603      	mov	r3, r0
 8006448:	0f5b      	lsrs	r3, r3, #29
 800644a:	3301      	adds	r3, #1
 800644c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006450:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006452:	697b      	ldr	r3, [r7, #20]
}
 8006454:	4618      	mov	r0, r3
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	bd90      	pop	{r4, r7, pc}
 800645c:	0801dc50 	.word	0x0801dc50
 8006460:	00f42400 	.word	0x00f42400
 8006464:	01e84800 	.word	0x01e84800

08006468 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b598      	push	{r3, r4, r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800646c:	f7ff ff5c 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 8006470:	4604      	mov	r4, r0
 8006472:	f7ff f9cc 	bl	800580e <LL_RCC_GetAHBPrescaler>
 8006476:	4603      	mov	r3, r0
 8006478:	091b      	lsrs	r3, r3, #4
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	4a03      	ldr	r2, [pc, #12]	; (800648c <HAL_RCC_GetHCLKFreq+0x24>)
 8006480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006484:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd98      	pop	{r3, r4, r7, pc}
 800648c:	0801dbf0 	.word	0x0801dbf0

08006490 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006490:	b598      	push	{r3, r4, r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006494:	f7ff ffe8 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006498:	4604      	mov	r4, r0
 800649a:	f7ff f9d0 	bl	800583e <LL_RCC_GetAPB1Prescaler>
 800649e:	4603      	mov	r3, r0
 80064a0:	0a1b      	lsrs	r3, r3, #8
 80064a2:	4a03      	ldr	r2, [pc, #12]	; (80064b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd98      	pop	{r3, r4, r7, pc}
 80064b0:	0801dc30 	.word	0x0801dc30

080064b4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b4:	b598      	push	{r3, r4, r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80064b8:	f7ff ffd6 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064bc:	4604      	mov	r4, r0
 80064be:	f7ff f9c9 	bl	8005854 <LL_RCC_GetAPB2Prescaler>
 80064c2:	4603      	mov	r3, r0
 80064c4:	0adb      	lsrs	r3, r3, #11
 80064c6:	4a03      	ldr	r2, [pc, #12]	; (80064d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	bd98      	pop	{r3, r4, r7, pc}
 80064d4:	0801dc30 	.word	0x0801dc30

080064d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	4a10      	ldr	r2, [pc, #64]	; (800652c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80064f0:	f7ff f998 	bl	8005824 <LL_RCC_GetAHB3Prescaler>
 80064f4:	4603      	mov	r3, r0
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	4a0c      	ldr	r2, [pc, #48]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4a09      	ldr	r2, [pc, #36]	; (8006534 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	0c9c      	lsrs	r4, r3, #18
 8006514:	f7fe ff3e 	bl	8005394 <HAL_PWREx_GetVoltageRange>
 8006518:	4603      	mov	r3, r0
 800651a:	4619      	mov	r1, r3
 800651c:	4620      	mov	r0, r4
 800651e:	f000 f80b 	bl	8006538 <RCC_SetFlashLatency>
 8006522:	4603      	mov	r3, r0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	bd90      	pop	{r4, r7, pc}
 800652c:	0801dc50 	.word	0x0801dc50
 8006530:	0801dbf0 	.word	0x0801dbf0
 8006534:	431bde83 	.word	0x431bde83

08006538 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08e      	sub	sp, #56	; 0x38
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006542:	4a3a      	ldr	r2, [pc, #232]	; (800662c <RCC_SetFlashLatency+0xf4>)
 8006544:	f107 0320 	add.w	r3, r7, #32
 8006548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800654c:	6018      	str	r0, [r3, #0]
 800654e:	3304      	adds	r3, #4
 8006550:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006552:	4a37      	ldr	r2, [pc, #220]	; (8006630 <RCC_SetFlashLatency+0xf8>)
 8006554:	f107 0318 	add.w	r3, r7, #24
 8006558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800655c:	6018      	str	r0, [r3, #0]
 800655e:	3304      	adds	r3, #4
 8006560:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006562:	4a34      	ldr	r2, [pc, #208]	; (8006634 <RCC_SetFlashLatency+0xfc>)
 8006564:	f107 030c 	add.w	r3, r7, #12
 8006568:	ca07      	ldmia	r2, {r0, r1, r2}
 800656a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800656e:	2300      	movs	r3, #0
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	d11b      	bne.n	80065b2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800657a:	2300      	movs	r3, #0
 800657c:	633b      	str	r3, [r7, #48]	; 0x30
 800657e:	e014      	b.n	80065aa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	3338      	adds	r3, #56	; 0x38
 8006586:	443b      	add	r3, r7
 8006588:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800658c:	461a      	mov	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4293      	cmp	r3, r2
 8006592:	d807      	bhi.n	80065a4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	3338      	adds	r3, #56	; 0x38
 800659a:	443b      	add	r3, r7
 800659c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a2:	e021      	b.n	80065e8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	3301      	adds	r3, #1
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d9e7      	bls.n	8006580 <RCC_SetFlashLatency+0x48>
 80065b0:	e01a      	b.n	80065e8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065b2:	2300      	movs	r3, #0
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b6:	e014      	b.n	80065e2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	3338      	adds	r3, #56	; 0x38
 80065be:	443b      	add	r3, r7
 80065c0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d807      	bhi.n	80065dc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	3338      	adds	r3, #56	; 0x38
 80065d2:	443b      	add	r3, r7
 80065d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065da:	e005      	b.n	80065e8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	3301      	adds	r3, #1
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d9e7      	bls.n	80065b8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065e8:	4b13      	ldr	r3, [pc, #76]	; (8006638 <RCC_SetFlashLatency+0x100>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f023 0207 	bic.w	r2, r3, #7
 80065f0:	4911      	ldr	r1, [pc, #68]	; (8006638 <RCC_SetFlashLatency+0x100>)
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	4313      	orrs	r3, r2
 80065f6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065f8:	f7fb fb92 	bl	8001d20 <HAL_GetTick>
 80065fc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80065fe:	e008      	b.n	8006612 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006600:	f7fb fb8e 	bl	8001d20 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e007      	b.n	8006622 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <RCC_SetFlashLatency+0x100>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661c:	429a      	cmp	r2, r3
 800661e:	d1ef      	bne.n	8006600 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3738      	adds	r7, #56	; 0x38
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	0801d2bc 	.word	0x0801d2bc
 8006630:	0801d2c4 	.word	0x0801d2c4
 8006634:	0801d2cc 	.word	0x0801d2cc
 8006638:	58004000 	.word	0x58004000

0800663c <LL_RCC_LSE_IsReady>:
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b02      	cmp	r3, #2
 800664e:	d101      	bne.n	8006654 <LL_RCC_LSE_IsReady+0x18>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <LL_RCC_LSE_IsReady+0x1a>
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr

0800665e <LL_RCC_SetUSARTClockSource>:
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	43db      	mvns	r3, r3
 8006674:	401a      	ands	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <LL_RCC_SetI2SClockSource>:
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <LL_RCC_SetLPUARTClockSource>:
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80066c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <LL_RCC_SetI2CClockSource>:
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80066ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80066fa:	43db      	mvns	r3, r3
 80066fc:	401a      	ands	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <LL_RCC_SetLPTIMClockSource>:
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006726:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <LL_RCC_SetRNGClockSource>:
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <LL_RCC_SetADCClockSource>:
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800677e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800678a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <LL_RCC_SetRTCClockSource>:
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80067a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr

080067ca <LL_RCC_GetRTCClockSource>:
{
 80067ca:	b480      	push	{r7}
 80067cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80067ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80067da:	4618      	mov	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <LL_RCC_ForceBackupDomainReset>:
{
 80067e2:	b480      	push	{r7}
 80067e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80067e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006802:	b480      	push	{r7}
 8006804:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800681a:	bf00      	nop
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr
	...

08006824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006830:	2300      	movs	r3, #0
 8006832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006834:	2300      	movs	r3, #0
 8006836:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d058      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006844:	f7fe fd64 	bl	8005310 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006848:	f7fb fa6a 	bl	8001d20 <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800684e:	e009      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006850:	f7fb fa66 	bl	8001d20 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d902      	bls.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	74fb      	strb	r3, [r7, #19]
        break;
 8006862:	e006      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006864:	4b7b      	ldr	r3, [pc, #492]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006870:	d1ee      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006872:	7cfb      	ldrb	r3, [r7, #19]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d13c      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006878:	f7ff ffa7 	bl	80067ca <LL_RCC_GetRTCClockSource>
 800687c:	4602      	mov	r2, r0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	429a      	cmp	r2, r3
 8006884:	d00f      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006892:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006894:	f7ff ffa5 	bl	80067e2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006898:	f7ff ffb3 	bl	8006802 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800689c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d014      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fb fa36 	bl	8001d20 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80068b6:	e00b      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b8:	f7fb fa32 	bl	8001d20 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d902      	bls.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	74fb      	strb	r3, [r7, #19]
            break;
 80068ce:	e004      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80068d0:	f7ff feb4 	bl	800663c <LL_RCC_LSE_IsReady>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d1ee      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80068da:	7cfb      	ldrb	r3, [r7, #19]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d105      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ff5b 	bl	80067a0 <LL_RCC_SetRTCClockSource>
 80068ea:	e004      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ec:	7cfb      	ldrb	r3, [r7, #19]
 80068ee:	74bb      	strb	r3, [r7, #18]
 80068f0:	e001      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fea9 	bl	800665e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fe9e 	bl	800665e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff fec0 	bl	80066b8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fee6 	bl	800671a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fedb 	bl	800671a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff fed0 	bl	800671a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fea9 	bl	80066e2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fe9e 	bl	80066e2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fe93 	bl	80066e2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d011      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff fe5e 	bl	800668e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d107      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80069dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff fea5 	bl	800674c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d107      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a18:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d011      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fea3 	bl	8006776 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a38:	d107      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a48:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006a4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	58000400 	.word	0x58000400

08006a58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d068      	beq.n	8006b3c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fa fe8e 	bl	80017a0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a8c:	4b2e      	ldr	r3, [pc, #184]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006a8e:	22ca      	movs	r2, #202	; 0xca
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24
 8006a92:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006a94:	2253      	movs	r2, #83	; 0x53
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fa0f 	bl	8006ebc <RTC_EnterInitMode>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d13f      	bne.n	8006b28 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006aa8:	4b27      	ldr	r3, [pc, #156]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	4a26      	ldr	r2, [pc, #152]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006aae:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006ab8:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006aba:	699a      	ldr	r2, [r3, #24]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6859      	ldr	r1, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	4319      	orrs	r1, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	430b      	orrs	r3, r1
 8006acc:	491e      	ldr	r1, [pc, #120]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	491a      	ldr	r1, [pc, #104]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006ae2:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	430b      	orrs	r3, r1
 8006af4:	4914      	ldr	r1, [pc, #80]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa12 	bl	8006f24 <RTC_ExitInitMode>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10e      	bne.n	8006b28 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a19      	ldr	r1, [r3, #32]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	4319      	orrs	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	430b      	orrs	r3, r1
 8006b22:	4909      	ldr	r1, [pc, #36]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <HAL_RTC_Init+0xf0>)
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40002800 	.word	0x40002800

08006b4c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006b4c:	b590      	push	{r4, r7, lr}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_RTC_SetAlarm_IT+0x1e>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e0f3      	b.n	8006d52 <HAL_RTC_SetAlarm_IT+0x206>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006b7a:	4b78      	ldr	r3, [pc, #480]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b82:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8a:	d06a      	beq.n	8006c62 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d13a      	bne.n	8006c08 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006b92:	4b72      	ldr	r3, [pc, #456]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f9f5 	bl	8006fa0 <RTC_ByteToBcd2>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 f9ee 	bl	8006fa0 <RTC_ByteToBcd2>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bc8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	789b      	ldrb	r3, [r3, #2]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f9e6 	bl	8006fa0 <RTC_ByteToBcd2>
 8006bd4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bd6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	78db      	ldrb	r3, [r3, #3]
 8006bde:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006be0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 f9d8 	bl	8006fa0 <RTC_ByteToBcd2>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bf4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006bfc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e02c      	b.n	8006c62 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006c10:	d00d      	beq.n	8006c2e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c1a:	d008      	beq.n	8006c2e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c1c:	4b4f      	ldr	r3, [pc, #316]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c3a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c40:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	78db      	ldrb	r3, [r3, #3]
 8006c46:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c48:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c50:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c52:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c58:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c62:	4b3e      	ldr	r3, [pc, #248]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c64:	22ca      	movs	r2, #202	; 0xca
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24
 8006c68:	4b3c      	ldr	r3, [pc, #240]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c6a:	2253      	movs	r2, #83	; 0x53
 8006c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c76:	d12c      	bne.n	8006cd2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c78:	4b38      	ldr	r3, [pc, #224]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	4a37      	ldr	r2, [pc, #220]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c82:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c84:	4b35      	ldr	r3, [pc, #212]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c90:	d107      	bne.n	8006ca2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	4930      	ldr	r1, [pc, #192]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	644b      	str	r3, [r1, #68]	; 0x44
 8006ca0:	e006      	b.n	8006cb0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006ca2:	4a2e      	ldr	r2, [pc, #184]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006ca8:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006cb0:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cca:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006cce:	6193      	str	r3, [r2, #24]
 8006cd0:	e02b      	b.n	8006d2a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006cd2:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cd8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006cdc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006cde:	4b1f      	ldr	r3, [pc, #124]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cea:	d107      	bne.n	8006cfc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4919      	ldr	r1, [pc, #100]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cfa:	e006      	b.n	8006d0a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006cfc:	4a17      	ldr	r2, [pc, #92]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006d02:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006d0a:	4a14      	ldr	r2, [pc, #80]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f043 0202 	orr.w	r2, r3, #2
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	4a0e      	ldr	r2, [pc, #56]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d24:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006d28:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d30:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d36:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d3c:	22ff      	movs	r2, #255	; 0xff
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd90      	pop	{r4, r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40002800 	.word	0x40002800
 8006d60:	58000800 	.word	0x58000800

08006d64 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_RTC_DeactivateAlarm+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e048      	b.n	8006e0e <HAL_RTC_DeactivateAlarm+0xaa>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d8c:	4b22      	ldr	r3, [pc, #136]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d8e:	22ca      	movs	r2, #202	; 0xca
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
 8006d92:	4b21      	ldr	r3, [pc, #132]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d94:	2253      	movs	r2, #83	; 0x53
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9e:	d115      	bne.n	8006dcc <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006da0:	4b1d      	ldr	r3, [pc, #116]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	4a1c      	ldr	r2, [pc, #112]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006daa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db0:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006db2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006db6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	f023 0201 	bic.w	r2, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006dc4:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dca:	e014      	b.n	8006df6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006dcc:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	4a11      	ldr	r2, [pc, #68]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dd2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006dd6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006dd8:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ddc:	4a0e      	ldr	r2, [pc, #56]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de8:	f023 0202 	bic.w	r2, r3, #2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006df0:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006df2:	2202      	movs	r2, #2
 8006df4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006df6:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006df8:	22ff      	movs	r2, #255	; 0xff
 8006dfa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr
 8006e18:	40002800 	.word	0x40002800

08006e1c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006e24:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fb f998 	bl	8002176 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e52:	2202      	movs	r2, #2
 8006e54:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f94a 	bl	80070f0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40002800 	.word	0x40002800

08006e70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <HAL_RTC_WaitForSynchro+0x48>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <HAL_RTC_WaitForSynchro+0x48>)
 8006e7e:	f023 0320 	bic.w	r3, r3, #32
 8006e82:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006e84:	f7fa ff4c 	bl	8001d20 <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e8a:	e009      	b.n	8006ea0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e8c:	f7fa ff48 	bl	8001d20 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e006      	b.n	8006eae <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <HAL_RTC_WaitForSynchro+0x48>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0ef      	beq.n	8006e8c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40002800 	.word	0x40002800

08006ebc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ec8:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <RTC_EnterInitMode+0x64>)
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d120      	bne.n	8006f16 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ed4:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <RTC_EnterInitMode+0x64>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4a11      	ldr	r2, [pc, #68]	; (8006f20 <RTC_EnterInitMode+0x64>)
 8006eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ede:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006ee0:	f7fa ff1e 	bl	8001d20 <HAL_GetTick>
 8006ee4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ee6:	e00d      	b.n	8006f04 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ee8:	f7fa ff1a 	bl	8001d20 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ef6:	d905      	bls.n	8006f04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2203      	movs	r2, #3
 8006f00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <RTC_EnterInitMode+0x64>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <RTC_EnterInitMode+0x5a>
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d1e8      	bne.n	8006ee8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40002800 	.word	0x40002800

08006f24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f30:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <RTC_ExitInitMode+0x78>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a19      	ldr	r2, [pc, #100]	; (8006f9c <RTC_ExitInitMode+0x78>)
 8006f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f3a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006f3c:	4b17      	ldr	r3, [pc, #92]	; (8006f9c <RTC_ExitInitMode+0x78>)
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10c      	bne.n	8006f62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff91 	bl	8006e70 <HAL_RTC_WaitForSynchro>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01e      	beq.n	8006f92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2203      	movs	r2, #3
 8006f58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	73fb      	strb	r3, [r7, #15]
 8006f60:	e017      	b.n	8006f92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <RTC_ExitInitMode+0x78>)
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	4a0d      	ldr	r2, [pc, #52]	; (8006f9c <RTC_ExitInitMode+0x78>)
 8006f68:	f023 0320 	bic.w	r3, r3, #32
 8006f6c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff ff7e 	bl	8006e70 <HAL_RTC_WaitForSynchro>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <RTC_ExitInitMode+0x78>)
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	4a04      	ldr	r2, [pc, #16]	; (8006f9c <RTC_ExitInitMode+0x78>)
 8006f8c:	f043 0320 	orr.w	r3, r3, #32
 8006f90:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40002800 	.word	0x40002800

08006fa0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006fb2:	e005      	b.n	8006fc0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	3b0a      	subs	r3, #10
 8006fbe:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	2b09      	cmp	r3, #9
 8006fc4:	d8f6      	bhi.n	8006fb4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	b2db      	uxtb	r3, r3
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
	...

08006fe0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e01f      	b.n	8007036 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2202      	movs	r2, #2
 8007002:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007006:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007008:	22ca      	movs	r2, #202	; 0xca
 800700a:	625a      	str	r2, [r3, #36]	; 0x24
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800700e:	2253      	movs	r2, #83	; 0x53
 8007010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007012:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007018:	f043 0320 	orr.w	r3, r3, #32
 800701c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800701e:	4b08      	ldr	r3, [pc, #32]	; (8007040 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007020:	22ff      	movs	r2, #255	; 0xff
 8007022:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr
 8007040:	40002800 	.word	0x40002800

08007044 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_RTCEx_SetSSRU_IT+0x16>
 8007056:	2302      	movs	r3, #2
 8007058:	e027      	b.n	80070aa <HAL_RTCEx_SetSSRU_IT+0x66>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800706c:	22ca      	movs	r2, #202	; 0xca
 800706e:	625a      	str	r2, [r3, #36]	; 0x24
 8007070:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007072:	2253      	movs	r2, #83	; 0x53
 8007074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	4a0e      	ldr	r2, [pc, #56]	; (80070b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007088:	4a0b      	ldr	r2, [pc, #44]	; (80070b8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800708a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800708e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007094:	22ff      	movs	r2, #255	; 0xff
 8007096:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	40002800 	.word	0x40002800
 80070b8:	58000800 	.word	0x58000800

080070bc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80070d0:	4b06      	ldr	r3, [pc, #24]	; (80070ec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070d2:	2240      	movs	r2, #64	; 0x40
 80070d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fb f857 	bl	800218a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	40002800 	.word	0x40002800

080070f0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr
	...

08007104 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007110:	4b07      	ldr	r3, [pc, #28]	; (8007130 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007112:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4413      	add	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	bc80      	pop	{r7}
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	4000b100 	.word	0x4000b100

08007134 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800713e:	4b07      	ldr	r3, [pc, #28]	; (800715c <HAL_RTCEx_BKUPRead+0x28>)
 8007140:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	4000b100 	.word	0x4000b100

08007160 <LL_PWR_SetRadioBusyTrigger>:
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007170:	4904      	ldr	r1, [pc, #16]	; (8007184 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4313      	orrs	r3, r2
 8007176:	608b      	str	r3, [r1, #8]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	58000400 	.word	0x58000400

08007188 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800719c:	bf00      	nop
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	58000400 	.word	0x58000400

080071a8 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b2:	4a04      	ldr	r2, [pc, #16]	; (80071c4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr
 80071c4:	58000400 	.word	0x58000400

080071c8 <LL_PWR_ClearFlag_RFBUSY>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80071ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d2:	619a      	str	r2, [r3, #24]
}
 80071d4:	bf00      	nop
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr
 80071dc:	58000400 	.word	0x58000400

080071e0 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d101      	bne.n	80071f4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	58000400 	.word	0x58000400

08007204 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b04      	cmp	r3, #4
 8007212:	d101      	bne.n	8007218 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007214:	2301      	movs	r3, #1
 8007216:	e000      	b.n	800721a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	58000400 	.word	0x58000400

08007228 <LL_RCC_RF_DisableReset>:
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800722c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007238:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800723c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <LL_RCC_IsRFUnderReset>:
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800724c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725c:	d101      	bne.n	8007262 <LL_RCC_IsRFUnderReset+0x1a>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <LL_RCC_IsRFUnderReset+0x1c>
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <LL_EXTI_EnableIT_32_63+0x24>)
 8007276:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800727a:	4905      	ldr	r1, [pc, #20]	; (8007290 <LL_EXTI_EnableIT_32_63+0x24>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	58000800 	.word	0x58000800

08007294 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d103      	bne.n	80072aa <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
    return status;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	e04b      	b.n	8007342 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	799b      	ldrb	r3, [r3, #6]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d105      	bne.n	80072c4 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fa fb8a 	bl	80019d8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80072ca:	f7ff ffad 	bl	8007228 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80072ce:	4b1f      	ldr	r3, [pc, #124]	; (800734c <HAL_SUBGHZ_Init+0xb8>)
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4613      	mov	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	0cdb      	lsrs	r3, r3, #19
 80072dc:	2264      	movs	r2, #100	; 0x64
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d105      	bne.n	80072f6 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	609a      	str	r2, [r3, #8]
      break;
 80072f4:	e007      	b.n	8007306 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80072fc:	f7ff ffa4 	bl	8007248 <LL_RCC_IsRFUnderReset>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1ee      	bne.n	80072e4 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007306:	f7ff ff3f 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800730a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800730e:	f7ff ffad 	bl	800726c <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007312:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007316:	f7ff ff23 	bl	8007160 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800731a:	f7ff ff55 	bl	80071c8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 faad 	bl	8007888 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	719a      	strb	r2, [r3, #6]

  return status;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000000 	.word	0x20000000

08007350 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	607a      	str	r2, [r7, #4]
 800735a:	461a      	mov	r2, r3
 800735c:	460b      	mov	r3, r1
 800735e:	817b      	strh	r3, [r7, #10]
 8007360:	4613      	mov	r3, r2
 8007362:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	799b      	ldrb	r3, [r3, #6]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d14a      	bne.n	8007404 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	795b      	ldrb	r3, [r3, #5]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007376:	2302      	movs	r3, #2
 8007378:	e045      	b.n	8007406 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2202      	movs	r2, #2
 8007384:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fb4c 	bl	8007a24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800738c:	f7ff ff0c 	bl	80071a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007390:	210d      	movs	r1, #13
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fa98 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007398:	897b      	ldrh	r3, [r7, #10]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	b29b      	uxth	r3, r3
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	4619      	mov	r1, r3
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fa90 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80073a8:	897b      	ldrh	r3, [r7, #10]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	4619      	mov	r1, r3
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 fa8a 	bl	80078c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80073b4:	2300      	movs	r3, #0
 80073b6:	82bb      	strh	r3, [r7, #20]
 80073b8:	e00a      	b.n	80073d0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80073ba:	8abb      	ldrh	r3, [r7, #20]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	4413      	add	r3, r2
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	4619      	mov	r1, r3
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fa7f 	bl	80078c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80073ca:	8abb      	ldrh	r3, [r7, #20]
 80073cc:	3301      	adds	r3, #1
 80073ce:	82bb      	strh	r3, [r7, #20]
 80073d0:	8aba      	ldrh	r2, [r7, #20]
 80073d2:	893b      	ldrh	r3, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d3f0      	bcc.n	80073ba <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073d8:	f7ff fed6 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fb45 	bl	8007a6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
 80073ee:	e001      	b.n	80073f4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	715a      	strb	r2, [r3, #5]

    return status;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	e000      	b.n	8007406 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007404:	2302      	movs	r3, #2
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b088      	sub	sp, #32
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	461a      	mov	r2, r3
 800741a:	460b      	mov	r3, r1
 800741c:	817b      	strh	r3, [r7, #10]
 800741e:	4613      	mov	r3, r2
 8007420:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	799b      	ldrb	r3, [r3, #6]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d14a      	bne.n	80074c6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	795b      	ldrb	r3, [r3, #5]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007438:	2302      	movs	r3, #2
 800743a:	e045      	b.n	80074c8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 faee 	bl	8007a24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007448:	f7ff feae 	bl	80071a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800744c:	211d      	movs	r1, #29
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fa3a 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007454:	897b      	ldrh	r3, [r7, #10]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	b29b      	uxth	r3, r3
 800745a:	b2db      	uxtb	r3, r3
 800745c:	4619      	mov	r1, r3
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fa32 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007464:	897b      	ldrh	r3, [r7, #10]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 fa2c 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007470:	2100      	movs	r1, #0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fa28 	bl	80078c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007478:	2300      	movs	r3, #0
 800747a:	82fb      	strh	r3, [r7, #22]
 800747c:	e009      	b.n	8007492 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800747e:	69b9      	ldr	r1, [r7, #24]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fa77 	bl	8007974 <SUBGHZSPI_Receive>
      pData++;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	3301      	adds	r3, #1
 800748a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800748c:	8afb      	ldrh	r3, [r7, #22]
 800748e:	3301      	adds	r3, #1
 8007490:	82fb      	strh	r3, [r7, #22]
 8007492:	8afa      	ldrh	r2, [r7, #22]
 8007494:	893b      	ldrh	r3, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	d3f1      	bcc.n	800747e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800749a:	f7ff fe75 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fae4 	bl	8007a6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e001      	b.n	80074b6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	715a      	strb	r2, [r3, #5]

    return status;
 80074c2:	7ffb      	ldrb	r3, [r7, #31]
 80074c4:	e000      	b.n	80074c8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80074c6:	2302      	movs	r3, #2
  }
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3720      	adds	r7, #32
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	461a      	mov	r2, r3
 80074dc:	460b      	mov	r3, r1
 80074de:	72fb      	strb	r3, [r7, #11]
 80074e0:	4613      	mov	r3, r2
 80074e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	799b      	ldrb	r3, [r3, #6]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d14a      	bne.n	8007584 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	795b      	ldrb	r3, [r3, #5]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e045      	b.n	8007586 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fa8f 	bl	8007a24 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	2b84      	cmp	r3, #132	; 0x84
 800750a:	d002      	beq.n	8007512 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	2b94      	cmp	r3, #148	; 0x94
 8007510:	d103      	bne.n	800751a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	711a      	strb	r2, [r3, #4]
 8007518:	e002      	b.n	8007520 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007520:	f7ff fe42 	bl	80071a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	4619      	mov	r1, r3
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f9cd 	bl	80078c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800752e:	2300      	movs	r3, #0
 8007530:	82bb      	strh	r3, [r7, #20]
 8007532:	e00a      	b.n	800754a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007534:	8abb      	ldrh	r3, [r7, #20]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	4619      	mov	r1, r3
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f9c2 	bl	80078c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007544:	8abb      	ldrh	r3, [r7, #20]
 8007546:	3301      	adds	r3, #1
 8007548:	82bb      	strh	r3, [r7, #20]
 800754a:	8aba      	ldrh	r2, [r7, #20]
 800754c:	893b      	ldrh	r3, [r7, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	d3f0      	bcc.n	8007534 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007552:	f7ff fe19 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	2b84      	cmp	r3, #132	; 0x84
 800755a:	d002      	beq.n	8007562 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fa85 	bl	8007a6c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
 800756e:	e001      	b.n	8007574 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	715a      	strb	r2, [r3, #5]

    return status;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	e000      	b.n	8007586 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007584:	2302      	movs	r3, #2
  }
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b088      	sub	sp, #32
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	461a      	mov	r2, r3
 800759a:	460b      	mov	r3, r1
 800759c:	72fb      	strb	r3, [r7, #11]
 800759e:	4613      	mov	r3, r2
 80075a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	799b      	ldrb	r3, [r3, #6]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d13d      	bne.n	800762c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	795b      	ldrb	r3, [r3, #5]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e038      	b.n	800762e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fa2e 	bl	8007a24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075c8:	f7ff fdee 	bl	80071a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	4619      	mov	r1, r3
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f979 	bl	80078c8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80075d6:	2100      	movs	r1, #0
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f975 	bl	80078c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80075de:	2300      	movs	r3, #0
 80075e0:	82fb      	strh	r3, [r7, #22]
 80075e2:	e009      	b.n	80075f8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80075e4:	69b9      	ldr	r1, [r7, #24]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 f9c4 	bl	8007974 <SUBGHZSPI_Receive>
      pData++;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	3301      	adds	r3, #1
 80075f0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80075f2:	8afb      	ldrh	r3, [r7, #22]
 80075f4:	3301      	adds	r3, #1
 80075f6:	82fb      	strh	r3, [r7, #22]
 80075f8:	8afa      	ldrh	r2, [r7, #22]
 80075fa:	893b      	ldrh	r3, [r7, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d3f1      	bcc.n	80075e4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007600:	f7ff fdc2 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fa31 	bl	8007a6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e001      	b.n	800761c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	715a      	strb	r2, [r3, #5]

    return status;
 8007628:	7ffb      	ldrb	r3, [r7, #31]
 800762a:	e000      	b.n	800762e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	461a      	mov	r2, r3
 8007642:	460b      	mov	r3, r1
 8007644:	72fb      	strb	r3, [r7, #11]
 8007646:	4613      	mov	r3, r2
 8007648:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	799b      	ldrb	r3, [r3, #6]
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b01      	cmp	r3, #1
 8007652:	d13e      	bne.n	80076d2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	795b      	ldrb	r3, [r3, #5]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800765c:	2302      	movs	r3, #2
 800765e:	e039      	b.n	80076d4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 f9dc 	bl	8007a24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800766c:	f7ff fd9c 	bl	80071a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007670:	210e      	movs	r1, #14
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 f928 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007678:	7afb      	ldrb	r3, [r7, #11]
 800767a:	4619      	mov	r1, r3
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f923 	bl	80078c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007682:	2300      	movs	r3, #0
 8007684:	82bb      	strh	r3, [r7, #20]
 8007686:	e00a      	b.n	800769e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007688:	8abb      	ldrh	r3, [r7, #20]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	4413      	add	r3, r2
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	4619      	mov	r1, r3
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f918 	bl	80078c8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007698:	8abb      	ldrh	r3, [r7, #20]
 800769a:	3301      	adds	r3, #1
 800769c:	82bb      	strh	r3, [r7, #20]
 800769e:	8aba      	ldrh	r2, [r7, #20]
 80076a0:	893b      	ldrh	r3, [r7, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d3f0      	bcc.n	8007688 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076a6:	f7ff fd6f 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 f9de 	bl	8007a6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	75fb      	strb	r3, [r7, #23]
 80076bc:	e001      	b.n	80076c2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	715a      	strb	r2, [r3, #5]

    return status;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	e000      	b.n	80076d4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	461a      	mov	r2, r3
 80076e8:	460b      	mov	r3, r1
 80076ea:	72fb      	strb	r3, [r7, #11]
 80076ec:	4613      	mov	r3, r2
 80076ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	799b      	ldrb	r3, [r3, #6]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d141      	bne.n	8007782 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	795b      	ldrb	r3, [r3, #5]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007706:	2302      	movs	r3, #2
 8007708:	e03c      	b.n	8007784 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f987 	bl	8007a24 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007716:	f7ff fd47 	bl	80071a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800771a:	211e      	movs	r1, #30
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f8d3 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	4619      	mov	r1, r3
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f8ce 	bl	80078c8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800772c:	2100      	movs	r1, #0
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 f8ca 	bl	80078c8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007734:	2300      	movs	r3, #0
 8007736:	82fb      	strh	r3, [r7, #22]
 8007738:	e009      	b.n	800774e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800773a:	69b9      	ldr	r1, [r7, #24]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f919 	bl	8007974 <SUBGHZSPI_Receive>
      pData++;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	3301      	adds	r3, #1
 8007746:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007748:	8afb      	ldrh	r3, [r7, #22]
 800774a:	3301      	adds	r3, #1
 800774c:	82fb      	strh	r3, [r7, #22]
 800774e:	8afa      	ldrh	r2, [r7, #22]
 8007750:	893b      	ldrh	r3, [r7, #8]
 8007752:	429a      	cmp	r2, r3
 8007754:	d3f1      	bcc.n	800773a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007756:	f7ff fd17 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 f986 	bl	8007a6c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	e001      	b.n	8007772 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	715a      	strb	r2, [r3, #5]

    return status;
 800777e:	7ffb      	ldrb	r3, [r7, #31]
 8007780:	e000      	b.n	8007784 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007782:	2302      	movs	r3, #2
  }
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007794:	2300      	movs	r3, #0
 8007796:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007798:	f107 020c 	add.w	r2, r7, #12
 800779c:	2302      	movs	r3, #2
 800779e:	2112      	movs	r1, #18
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff fef4 	bl	800758e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80077a6:	7b3b      	ldrb	r3, [r7, #12]
 80077a8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80077aa:	89fb      	ldrh	r3, [r7, #14]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	b21a      	sxth	r2, r3
 80077b0:	7b7b      	ldrb	r3, [r7, #13]
 80077b2:	b21b      	sxth	r3, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	b21b      	sxth	r3, r3
 80077b8:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80077ba:	89fb      	ldrh	r3, [r7, #14]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f013 ff81 	bl	801b6cc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80077ca:	89fb      	ldrh	r3, [r7, #14]
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f013 ff86 	bl	801b6e8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80077dc:	89fb      	ldrh	r3, [r7, #14]
 80077de:	089b      	lsrs	r3, r3, #2
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f013 ffd5 	bl	801b798 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80077ee:	89fb      	ldrh	r3, [r7, #14]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f013 ffda 	bl	801b7b4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007800:	89fb      	ldrh	r3, [r7, #14]
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f013 ffdf 	bl	801b7d0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007812:	89fb      	ldrh	r3, [r7, #14]
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f013 ffac 	bl	801b77c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007824:	89fb      	ldrh	r3, [r7, #14]
 8007826:	099b      	lsrs	r3, r3, #6
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f013 ff67 	bl	801b704 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007836:	89fb      	ldrh	r3, [r7, #14]
 8007838:	09db      	lsrs	r3, r3, #7
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00e      	beq.n	8007860 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007842:	89fb      	ldrh	r3, [r7, #14]
 8007844:	0a1b      	lsrs	r3, r3, #8
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800784e:	2101      	movs	r1, #1
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f013 ff65 	bl	801b720 <HAL_SUBGHZ_CADStatusCallback>
 8007856:	e003      	b.n	8007860 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f013 ff60 	bl	801b720 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007860:	89fb      	ldrh	r3, [r7, #14]
 8007862:	0a5b      	lsrs	r3, r3, #9
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f013 ff75 	bl	801b75c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007872:	f107 020c 	add.w	r2, r7, #12
 8007876:	2302      	movs	r3, #2
 8007878:	2102      	movs	r1, #2
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fe28 	bl	80074d0 <HAL_SUBGHZ_ExecSetCmd>
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <SUBGHZSPI_Init+0x3c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a0b      	ldr	r2, [pc, #44]	; (80078c4 <SUBGHZSPI_Init+0x3c>)
 8007896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800789c:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <SUBGHZSPI_Init+0x3c>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80078a4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80078a6:	4b07      	ldr	r3, [pc, #28]	; (80078c4 <SUBGHZSPI_Init+0x3c>)
 80078a8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80078ac:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <SUBGHZSPI_Init+0x3c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a04      	ldr	r2, [pc, #16]	; (80078c4 <SUBGHZSPI_Init+0x3c>)
 80078b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b8:	6013      	str	r3, [r2, #0]
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr
 80078c4:	58010000 	.word	0x58010000

080078c8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80078d8:	4b23      	ldr	r3, [pc, #140]	; (8007968 <SUBGHZSPI_Transmit+0xa0>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	0cdb      	lsrs	r3, r3, #19
 80078e6:	2264      	movs	r2, #100	; 0x64
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	609a      	str	r2, [r3, #8]
      break;
 80078fe:	e008      	b.n	8007912 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b01      	subs	r3, #1
 8007904:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007906:	4b19      	ldr	r3, [pc, #100]	; (800796c <SUBGHZSPI_Transmit+0xa4>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d1ed      	bne.n	80078ee <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007912:	4b17      	ldr	r3, [pc, #92]	; (8007970 <SUBGHZSPI_Transmit+0xa8>)
 8007914:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	78fa      	ldrb	r2, [r7, #3]
 800791a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800791c:	4b12      	ldr	r3, [pc, #72]	; (8007968 <SUBGHZSPI_Transmit+0xa0>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	0cdb      	lsrs	r3, r3, #19
 800792a:	2264      	movs	r2, #100	; 0x64
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	609a      	str	r2, [r3, #8]
      break;
 8007942:	e008      	b.n	8007956 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3b01      	subs	r3, #1
 8007948:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800794a:	4b08      	ldr	r3, [pc, #32]	; (800796c <SUBGHZSPI_Transmit+0xa4>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d1ed      	bne.n	8007932 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007956:	4b05      	ldr	r3, [pc, #20]	; (800796c <SUBGHZSPI_Transmit+0xa4>)
 8007958:	68db      	ldr	r3, [r3, #12]

  return status;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
}
 800795c:	4618      	mov	r0, r3
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20000000 	.word	0x20000000
 800796c:	58010000 	.word	0x58010000
 8007970:	5801000c 	.word	0x5801000c

08007974 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007982:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <SUBGHZSPI_Receive+0xa4>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	0cdb      	lsrs	r3, r3, #19
 8007990:	2264      	movs	r2, #100	; 0x64
 8007992:	fb02 f303 	mul.w	r3, r2, r3
 8007996:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	609a      	str	r2, [r3, #8]
      break;
 80079a8:	e008      	b.n	80079bc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <SUBGHZSPI_Receive+0xa8>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d1ed      	bne.n	8007998 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80079bc:	4b18      	ldr	r3, [pc, #96]	; (8007a20 <SUBGHZSPI_Receive+0xac>)
 80079be:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	22ff      	movs	r2, #255	; 0xff
 80079c4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079c6:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <SUBGHZSPI_Receive+0xa4>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	0cdb      	lsrs	r3, r3, #19
 80079d4:	2264      	movs	r2, #100	; 0x64
 80079d6:	fb02 f303 	mul.w	r3, r2, r3
 80079da:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d105      	bne.n	80079ee <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	609a      	str	r2, [r3, #8]
      break;
 80079ec:	e008      	b.n	8007a00 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80079f4:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <SUBGHZSPI_Receive+0xa8>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d1ed      	bne.n	80079dc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <SUBGHZSPI_Receive+0xa8>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	701a      	strb	r2, [r3, #0]

  return status;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	20000000 	.word	0x20000000
 8007a1c:	58010000 	.word	0x58010000
 8007a20:	5801000c 	.word	0x5801000c

08007a24 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	791b      	ldrb	r3, [r3, #4]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d111      	bne.n	8007a58 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <SUBGHZ_CheckDeviceReady+0x44>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a44:	f7ff fbb0 	bl	80071a8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1f9      	bne.n	8007a48 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a54:	f7ff fb98 	bl	8007188 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f807 	bl	8007a6c <SUBGHZ_WaitOnBusy>
 8007a5e:	4603      	mov	r3, r0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20000000 	.word	0x20000000

08007a6c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <SUBGHZ_WaitOnBusy+0x58>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	4413      	add	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	0d1b      	lsrs	r3, r3, #20
 8007a86:	2264      	movs	r2, #100	; 0x64
 8007a88:	fb02 f303 	mul.w	r3, r2, r3
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007a8e:	f7ff fbb9 	bl	8007204 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007a92:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	609a      	str	r2, [r3, #8]
      break;
 8007aa4:	e009      	b.n	8007aba <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007aac:	f7ff fb98 	bl	80071e0 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d0e9      	beq.n	8007a8e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000000 	.word	0x20000000

08007ac8 <LL_RCC_GetUSARTClockSource>:
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	401a      	ands	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	041b      	lsls	r3, r3, #16
 8007ae0:	4313      	orrs	r3, r2
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <LL_RCC_GetLPUARTClockSource>:
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4013      	ands	r3, r2
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr

08007b0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e042      	b.n	8007ba2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fa fc90 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2224      	movs	r2, #36	; 0x24
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc4b 	bl	80083e8 <UART_SetConfig>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e022      	b.n	8007ba2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 feb3 	bl	80088d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0201 	orr.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 ff39 	bl	8008a12 <UART_CheckIdleState>
 8007ba0:	4603      	mov	r3, r0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d142      	bne.n	8007c4a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <HAL_UART_Receive_IT+0x24>
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e03b      	b.n	8007c4c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_UART_Receive_IT+0x36>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e034      	b.n	8007c4c <HAL_UART_Receive_IT+0xa0>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <HAL_UART_Receive_IT+0xa8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d01f      	beq.n	8007c3a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d018      	beq.n	8007c3a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	613b      	str	r3, [r7, #16]
   return(result);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	623b      	str	r3, [r7, #32]
 8007c28:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	69f9      	ldr	r1, [r7, #28]
 8007c2c:	6a3a      	ldr	r2, [r7, #32]
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	68b9      	ldr	r1, [r7, #8]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 fff9 	bl	8008c38 <UART_Start_Receive_IT>
 8007c46:	4603      	mov	r3, r0
 8007c48:	e000      	b.n	8007c4c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c4a:	2302      	movs	r3, #2
  }
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3728      	adds	r7, #40	; 0x28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	40008000 	.word	0x40008000

08007c58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d17a      	bne.n	8007d66 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <HAL_UART_Transmit_DMA+0x24>
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e073      	b.n	8007d68 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Transmit_DMA+0x36>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e06c      	b.n	8007d68 <HAL_UART_Transmit_DMA+0x110>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	88fa      	ldrh	r2, [r7, #6]
 8007ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	88fa      	ldrh	r2, [r7, #6]
 8007ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2221      	movs	r2, #33	; 0x21
 8007cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d02c      	beq.n	8007d1e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc8:	4a29      	ldr	r2, [pc, #164]	; (8007d70 <HAL_UART_Transmit_DMA+0x118>)
 8007cca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd0:	4a28      	ldr	r2, [pc, #160]	; (8007d74 <HAL_UART_Transmit_DMA+0x11c>)
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd8:	4a27      	ldr	r2, [pc, #156]	; (8007d78 <HAL_UART_Transmit_DMA+0x120>)
 8007cda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cec:	4619      	mov	r1, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3328      	adds	r3, #40	; 0x28
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	f7fc f984 	bl	8004004 <HAL_DMA_Start_IT>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00d      	beq.n	8007d1e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2210      	movs	r2, #16
 8007d06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e024      	b.n	8007d68 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2240      	movs	r2, #64	; 0x40
 8007d24:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3308      	adds	r3, #8
 8007d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4e:	623a      	str	r2, [r7, #32]
 8007d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	69f9      	ldr	r1, [r7, #28]
 8007d54:	6a3a      	ldr	r2, [r7, #32]
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e5      	bne.n	8007d2e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e000      	b.n	8007d68 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
  }
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3728      	adds	r7, #40	; 0x28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08008fd3 	.word	0x08008fd3
 8007d74:	0800906d 	.word	0x0800906d
 8007d78:	08009089 	.word	0x08009089

08007d7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b0ba      	sub	sp, #232	; 0xe8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007da2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007da6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007daa:	4013      	ands	r3, r2
 8007dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11b      	bne.n	8007df0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d015      	beq.n	8007df0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d105      	bne.n	8007ddc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d009      	beq.n	8007df0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 82d6 	beq.w	8008392 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
      }
      return;
 8007dee:	e2d0      	b.n	8008392 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 811f 	beq.w	8008038 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007dfe:	4b8b      	ldr	r3, [pc, #556]	; (800802c <HAL_UART_IRQHandler+0x2b0>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e0a:	4b89      	ldr	r3, [pc, #548]	; (8008030 <HAL_UART_IRQHandler+0x2b4>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8112 	beq.w	8008038 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d011      	beq.n	8007e44 <HAL_UART_IRQHandler+0xc8>
 8007e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e3a:	f043 0201 	orr.w	r2, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d011      	beq.n	8007e74 <HAL_UART_IRQHandler+0xf8>
 8007e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2202      	movs	r2, #2
 8007e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6a:	f043 0204 	orr.w	r2, r3, #4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d011      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x128>
 8007e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2204      	movs	r2, #4
 8007e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e9a:	f043 0202 	orr.w	r2, r3, #2
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d017      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ebc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ec0:	4b5a      	ldr	r3, [pc, #360]	; (800802c <HAL_UART_IRQHandler+0x2b0>)
 8007ec2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed6:	f043 0208 	orr.w	r2, r3, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d012      	beq.n	8007f12 <HAL_UART_IRQHandler+0x196>
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00c      	beq.n	8007f12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f08:	f043 0220 	orr.w	r2, r3, #32
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 823c 	beq.w	8008396 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d013      	beq.n	8007f52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d105      	bne.n	8007f42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	d005      	beq.n	8007f76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d04f      	beq.n	8008016 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 ffc6 	bl	8008f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d141      	bne.n	800800e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1d9      	bne.n	8007f8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d013      	beq.n	8008006 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe2:	4a14      	ldr	r2, [pc, #80]	; (8008034 <HAL_UART_IRQHandler+0x2b8>)
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fc f8e6 	bl	80041bc <HAL_DMA_Abort_IT>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d017      	beq.n	8008026 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008004:	e00f      	b.n	8008026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9d9 	bl	80083be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	e00b      	b.n	8008026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f9d5 	bl	80083be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	e007      	b.n	8008026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f9d1 	bl	80083be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008024:	e1b7      	b.n	8008396 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008026:	bf00      	nop
    return;
 8008028:	e1b5      	b.n	8008396 <HAL_UART_IRQHandler+0x61a>
 800802a:	bf00      	nop
 800802c:	10000001 	.word	0x10000001
 8008030:	04000120 	.word	0x04000120
 8008034:	08009109 	.word	0x08009109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803c:	2b01      	cmp	r3, #1
 800803e:	f040 814a 	bne.w	80082d6 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8143 	beq.w	80082d6 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008054:	f003 0310 	and.w	r3, r3, #16
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 813c 	beq.w	80082d6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2210      	movs	r2, #16
 8008064:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008070:	2b40      	cmp	r3, #64	; 0x40
 8008072:	f040 80b5 	bne.w	80081e0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008082:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8187 	beq.w	800839a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008096:	429a      	cmp	r2, r3
 8008098:	f080 817f 	bcs.w	800839a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f040 8086 	bne.w	80081c4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1da      	bne.n	80080b8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008126:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800812a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800812e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e1      	bne.n	8008102 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800814e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008162:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e3      	bne.n	800813e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008194:	f023 0310 	bic.w	r3, r3, #16
 8008198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e4      	bne.n	8008184 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fb ff9e 	bl	8004100 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f8f9 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081de:	e0dc      	b.n	800839a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 80ce 	beq.w	800839e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80c9 	beq.w	800839e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800821a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800822e:	647b      	str	r3, [r7, #68]	; 0x44
 8008230:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e4      	bne.n	800820c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	623b      	str	r3, [r7, #32]
   return(result);
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3308      	adds	r3, #8
 8008266:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800826a:	633a      	str	r2, [r7, #48]	; 0x30
 800826c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e1      	bne.n	8008242 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	60fb      	str	r3, [r7, #12]
   return(result);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0310 	bic.w	r3, r3, #16
 80082a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	69b9      	ldr	r1, [r7, #24]
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	617b      	str	r3, [r7, #20]
   return(result);
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e4      	bne.n	8008292 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f87e 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082d4:	e063      	b.n	800839e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00e      	beq.n	8008300 <HAL_UART_IRQHandler+0x584>
 80082e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d008      	beq.n	8008300 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 fba3 	bl	8009a44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082fe:	e051      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008308:	2b00      	cmp	r3, #0
 800830a:	d014      	beq.n	8008336 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800830c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800831c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008328:	2b00      	cmp	r3, #0
 800832a:	d03a      	beq.n	80083a2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
    }
    return;
 8008334:	e035      	b.n	80083a2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <HAL_UART_IRQHandler+0x5da>
 8008342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fef0 	bl	8009134 <UART_EndTransmit_IT>
    return;
 8008354:	e026      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_UART_IRQHandler+0x5fa>
 8008362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008366:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f001 fb7a 	bl	8009a68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008374:	e016      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <HAL_UART_IRQHandler+0x628>
 8008382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008386:	2b00      	cmp	r3, #0
 8008388:	da0c      	bge.n	80083a4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fb63 	bl	8009a56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008390:	e008      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
      return;
 8008392:	bf00      	nop
 8008394:	e006      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
    return;
 8008396:	bf00      	nop
 8008398:	e004      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
      return;
 800839a:	bf00      	nop
 800839c:	e002      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
      return;
 800839e:	bf00      	nop
 80083a0:	e000      	b.n	80083a4 <HAL_UART_IRQHandler+0x628>
    return;
 80083a2:	bf00      	nop
  }
}
 80083a4:	37e8      	adds	r7, #232	; 0xe8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop

080083ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr
	...

080083e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083ec:	b08c      	sub	sp, #48	; 0x30
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	431a      	orrs	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	431a      	orrs	r2, r3
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	4313      	orrs	r3, r2
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b94      	ldr	r3, [pc, #592]	; (8008668 <UART_SetConfig+0x280>)
 8008418:	4013      	ands	r3, r2
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	6812      	ldr	r2, [r2, #0]
 800841e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008420:	430b      	orrs	r3, r1
 8008422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a89      	ldr	r2, [pc, #548]	; (800866c <UART_SetConfig+0x284>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d004      	beq.n	8008454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008450:	4313      	orrs	r3, r2
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800845e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008468:	430b      	orrs	r3, r1
 800846a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	f023 010f 	bic.w	r1, r3, #15
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a7a      	ldr	r2, [pc, #488]	; (8008670 <UART_SetConfig+0x288>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d127      	bne.n	80084dc <UART_SetConfig+0xf4>
 800848c:	2003      	movs	r0, #3
 800848e:	f7ff fb1b 	bl	8007ac8 <LL_RCC_GetUSARTClockSource>
 8008492:	4603      	mov	r3, r0
 8008494:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008498:	2b03      	cmp	r3, #3
 800849a:	d81b      	bhi.n	80084d4 <UART_SetConfig+0xec>
 800849c:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0xbc>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084c5 	.word	0x080084c5
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ba:	e080      	b.n	80085be <UART_SetConfig+0x1d6>
 80084bc:	2302      	movs	r3, #2
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e07c      	b.n	80085be <UART_SetConfig+0x1d6>
 80084c4:	2304      	movs	r3, #4
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e078      	b.n	80085be <UART_SetConfig+0x1d6>
 80084cc:	2308      	movs	r3, #8
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d2:	e074      	b.n	80085be <UART_SetConfig+0x1d6>
 80084d4:	2310      	movs	r3, #16
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084da:	e070      	b.n	80085be <UART_SetConfig+0x1d6>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a64      	ldr	r2, [pc, #400]	; (8008674 <UART_SetConfig+0x28c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d138      	bne.n	8008558 <UART_SetConfig+0x170>
 80084e6:	200c      	movs	r0, #12
 80084e8:	f7ff faee 	bl	8007ac8 <LL_RCC_GetUSARTClockSource>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80084f2:	2b0c      	cmp	r3, #12
 80084f4:	d82c      	bhi.n	8008550 <UART_SetConfig+0x168>
 80084f6:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <UART_SetConfig+0x114>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008551 	.word	0x08008551
 8008504:	08008551 	.word	0x08008551
 8008508:	08008551 	.word	0x08008551
 800850c:	08008541 	.word	0x08008541
 8008510:	08008551 	.word	0x08008551
 8008514:	08008551 	.word	0x08008551
 8008518:	08008551 	.word	0x08008551
 800851c:	08008539 	.word	0x08008539
 8008520:	08008551 	.word	0x08008551
 8008524:	08008551 	.word	0x08008551
 8008528:	08008551 	.word	0x08008551
 800852c:	08008549 	.word	0x08008549
 8008530:	2300      	movs	r3, #0
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008536:	e042      	b.n	80085be <UART_SetConfig+0x1d6>
 8008538:	2302      	movs	r3, #2
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853e:	e03e      	b.n	80085be <UART_SetConfig+0x1d6>
 8008540:	2304      	movs	r3, #4
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008546:	e03a      	b.n	80085be <UART_SetConfig+0x1d6>
 8008548:	2308      	movs	r3, #8
 800854a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800854e:	e036      	b.n	80085be <UART_SetConfig+0x1d6>
 8008550:	2310      	movs	r3, #16
 8008552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008556:	e032      	b.n	80085be <UART_SetConfig+0x1d6>
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a43      	ldr	r2, [pc, #268]	; (800866c <UART_SetConfig+0x284>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d12a      	bne.n	80085b8 <UART_SetConfig+0x1d0>
 8008562:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008566:	f7ff fac1 	bl	8007aec <LL_RCC_GetLPUARTClockSource>
 800856a:	4603      	mov	r3, r0
 800856c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008570:	d01a      	beq.n	80085a8 <UART_SetConfig+0x1c0>
 8008572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008576:	d81b      	bhi.n	80085b0 <UART_SetConfig+0x1c8>
 8008578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800857c:	d00c      	beq.n	8008598 <UART_SetConfig+0x1b0>
 800857e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008582:	d815      	bhi.n	80085b0 <UART_SetConfig+0x1c8>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <UART_SetConfig+0x1a8>
 8008588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800858c:	d008      	beq.n	80085a0 <UART_SetConfig+0x1b8>
 800858e:	e00f      	b.n	80085b0 <UART_SetConfig+0x1c8>
 8008590:	2300      	movs	r3, #0
 8008592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008596:	e012      	b.n	80085be <UART_SetConfig+0x1d6>
 8008598:	2302      	movs	r3, #2
 800859a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859e:	e00e      	b.n	80085be <UART_SetConfig+0x1d6>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a6:	e00a      	b.n	80085be <UART_SetConfig+0x1d6>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ae:	e006      	b.n	80085be <UART_SetConfig+0x1d6>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b6:	e002      	b.n	80085be <UART_SetConfig+0x1d6>
 80085b8:	2310      	movs	r3, #16
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2a      	ldr	r2, [pc, #168]	; (800866c <UART_SetConfig+0x284>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	f040 80a4 	bne.w	8008712 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d823      	bhi.n	800861a <UART_SetConfig+0x232>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <UART_SetConfig+0x1f0>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085fd 	.word	0x080085fd
 80085dc:	0800861b 	.word	0x0800861b
 80085e0:	08008605 	.word	0x08008605
 80085e4:	0800861b 	.word	0x0800861b
 80085e8:	0800860b 	.word	0x0800860b
 80085ec:	0800861b 	.word	0x0800861b
 80085f0:	0800861b 	.word	0x0800861b
 80085f4:	0800861b 	.word	0x0800861b
 80085f8:	08008613 	.word	0x08008613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085fc:	f7fd ff48 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8008600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008602:	e010      	b.n	8008626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008604:	4b1c      	ldr	r3, [pc, #112]	; (8008678 <UART_SetConfig+0x290>)
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008608:	e00d      	b.n	8008626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800860a:	f7fd fe8d 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 800860e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008610:	e009      	b.n	8008626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008618:	e005      	b.n	8008626 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 8137 	beq.w	800889c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	4a12      	ldr	r2, [pc, #72]	; (800867c <UART_SetConfig+0x294>)
 8008634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008638:	461a      	mov	r2, r3
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008640:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	4413      	add	r3, r2
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	429a      	cmp	r2, r3
 8008650:	d305      	bcc.n	800865e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	429a      	cmp	r2, r3
 800865c:	d910      	bls.n	8008680 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008664:	e11a      	b.n	800889c <UART_SetConfig+0x4b4>
 8008666:	bf00      	nop
 8008668:	cfff69f3 	.word	0xcfff69f3
 800866c:	40008000 	.word	0x40008000
 8008670:	40013800 	.word	0x40013800
 8008674:	40004400 	.word	0x40004400
 8008678:	00f42400 	.word	0x00f42400
 800867c:	0801dce0 	.word	0x0801dce0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	2200      	movs	r2, #0
 8008684:	60bb      	str	r3, [r7, #8]
 8008686:	60fa      	str	r2, [r7, #12]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	4a8e      	ldr	r2, [pc, #568]	; (80088c8 <UART_SetConfig+0x4e0>)
 800868e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008692:	b29b      	uxth	r3, r3
 8008694:	2200      	movs	r2, #0
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	607a      	str	r2, [r7, #4]
 800869a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086a2:	f7f8 fa81 	bl	8000ba8 <__aeabi_uldivmod>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4610      	mov	r0, r2
 80086ac:	4619      	mov	r1, r3
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	020b      	lsls	r3, r1, #8
 80086b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086bc:	0202      	lsls	r2, r0, #8
 80086be:	6979      	ldr	r1, [r7, #20]
 80086c0:	6849      	ldr	r1, [r1, #4]
 80086c2:	0849      	lsrs	r1, r1, #1
 80086c4:	2000      	movs	r0, #0
 80086c6:	460c      	mov	r4, r1
 80086c8:	4605      	mov	r5, r0
 80086ca:	eb12 0804 	adds.w	r8, r2, r4
 80086ce:	eb43 0905 	adc.w	r9, r3, r5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	469a      	mov	sl, r3
 80086da:	4693      	mov	fp, r2
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	f7f8 fa60 	bl	8000ba8 <__aeabi_uldivmod>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4613      	mov	r3, r2
 80086ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086f6:	d308      	bcc.n	800870a <UART_SetConfig+0x322>
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086fe:	d204      	bcs.n	800870a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6a3a      	ldr	r2, [r7, #32]
 8008706:	60da      	str	r2, [r3, #12]
 8008708:	e0c8      	b.n	800889c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008710:	e0c4      	b.n	800889c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871a:	d168      	bne.n	80087ee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800871c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008720:	2b08      	cmp	r3, #8
 8008722:	d828      	bhi.n	8008776 <UART_SetConfig+0x38e>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0x344>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	08008777 	.word	0x08008777
 800873c:	08008767 	.word	0x08008767
 8008740:	08008777 	.word	0x08008777
 8008744:	08008777 	.word	0x08008777
 8008748:	08008777 	.word	0x08008777
 800874c:	0800876f 	.word	0x0800876f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008750:	f7fd fe9e 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8008754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008756:	e014      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008758:	f7fd feac 	bl	80064b4 <HAL_RCC_GetPCLK2Freq>
 800875c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800875e:	e010      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008760:	4b5a      	ldr	r3, [pc, #360]	; (80088cc <UART_SetConfig+0x4e4>)
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008764:	e00d      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008766:	f7fd fddf 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 800876a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800876c:	e009      	b.n	8008782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008774:	e005      	b.n	8008782 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8089 	beq.w	800889c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	4a4e      	ldr	r2, [pc, #312]	; (80088c8 <UART_SetConfig+0x4e0>)
 8008790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008794:	461a      	mov	r2, r3
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	fbb3 f3f2 	udiv	r3, r3, r2
 800879c:	005a      	lsls	r2, r3, #1
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	441a      	add	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	2b0f      	cmp	r3, #15
 80087b6:	d916      	bls.n	80087e6 <UART_SetConfig+0x3fe>
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087be:	d212      	bcs.n	80087e6 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	f023 030f 	bic.w	r3, r3, #15
 80087c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f003 0307 	and.w	r3, r3, #7
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	8bfb      	ldrh	r3, [r7, #30]
 80087d8:	4313      	orrs	r3, r2
 80087da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	8bfa      	ldrh	r2, [r7, #30]
 80087e2:	60da      	str	r2, [r3, #12]
 80087e4:	e05a      	b.n	800889c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087ec:	e056      	b.n	800889c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d827      	bhi.n	8008846 <UART_SetConfig+0x45e>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <UART_SetConfig+0x414>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008821 	.word	0x08008821
 8008800:	08008829 	.word	0x08008829
 8008804:	08008831 	.word	0x08008831
 8008808:	08008847 	.word	0x08008847
 800880c:	08008837 	.word	0x08008837
 8008810:	08008847 	.word	0x08008847
 8008814:	08008847 	.word	0x08008847
 8008818:	08008847 	.word	0x08008847
 800881c:	0800883f 	.word	0x0800883f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008820:	f7fd fe36 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8008824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008826:	e014      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008828:	f7fd fe44 	bl	80064b4 <HAL_RCC_GetPCLK2Freq>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800882e:	e010      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008830:	4b26      	ldr	r3, [pc, #152]	; (80088cc <UART_SetConfig+0x4e4>)
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008834:	e00d      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008836:	f7fd fd77 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800883c:	e009      	b.n	8008852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800883e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008844:	e005      	b.n	8008852 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008850:	bf00      	nop
    }

    if (pclk != 0U)
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d021      	beq.n	800889c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	4a1a      	ldr	r2, [pc, #104]	; (80088c8 <UART_SetConfig+0x4e0>)
 800885e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008862:	461a      	mov	r2, r3
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	fbb3 f2f2 	udiv	r2, r3, r2
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	441a      	add	r2, r3
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	fbb2 f3f3 	udiv	r3, r2, r3
 800887a:	b29b      	uxth	r3, r3
 800887c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d908      	bls.n	8008896 <UART_SetConfig+0x4ae>
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d204      	bcs.n	8008896 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6a3a      	ldr	r2, [r7, #32]
 8008892:	60da      	str	r2, [r3, #12]
 8008894:	e002      	b.n	800889c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2200      	movs	r2, #0
 80088b0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2200      	movs	r2, #0
 80088b6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3730      	adds	r7, #48	; 0x30
 80088c0:	46bd      	mov	sp, r7
 80088c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088c6:	bf00      	nop
 80088c8:	0801dce0 	.word	0x0801dce0
 80088cc:	00f42400 	.word	0x00f42400

080088d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00a      	beq.n	80088fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f003 0308 	and.w	r3, r3, #8
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01a      	beq.n	80089e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ce:	d10a      	bne.n	80089e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr

08008a12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b086      	sub	sp, #24
 8008a16:	af02      	add	r7, sp, #8
 8008a18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a22:	f7f9 f97d 	bl	8001d20 <HAL_GetTick>
 8008a26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d10e      	bne.n	8008a54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f82f 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e025      	b.n	8008aa0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d10e      	bne.n	8008a80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f819 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e00f      	b.n	8008aa0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b09c      	sub	sp, #112	; 0x70
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab8:	e0a9      	b.n	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	f000 80a5 	beq.w	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac4:	f7f9 f92c 	bl	8001d20 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d302      	bcc.n	8008ada <UART_WaitOnFlagUntilTimeout+0x32>
 8008ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d140      	bne.n	8008b5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008aee:	667b      	str	r3, [r7, #100]	; 0x64
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	461a      	mov	r2, r3
 8008af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008afa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008afe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e6      	bne.n	8008ada <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3308      	adds	r3, #8
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e5      	bne.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e069      	b.n	8008c30 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0304 	and.w	r3, r3, #4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d051      	beq.n	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b78:	d149      	bne.n	8008c0e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bd6:	623a      	str	r2, [r7, #32]
 8008bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	69f9      	ldr	r1, [r7, #28]
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e010      	b.n	8008c30 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69da      	ldr	r2, [r3, #28]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	4013      	ands	r3, r2
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2301      	moveq	r3, #1
 8008c20:	2300      	movne	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	f43f af46 	beq.w	8008aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3770      	adds	r7, #112	; 0x70
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b0a3      	sub	sp, #140	; 0x8c
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6a:	d10e      	bne.n	8008c8a <UART_Start_Receive_IT+0x52>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d105      	bne.n	8008c80 <UART_Start_Receive_IT+0x48>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c7e:	e02d      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	22ff      	movs	r2, #255	; 0xff
 8008c84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c88:	e028      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10d      	bne.n	8008cae <UART_Start_Receive_IT+0x76>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <UART_Start_Receive_IT+0x6c>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	22ff      	movs	r2, #255	; 0xff
 8008c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ca2:	e01b      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	227f      	movs	r2, #127	; 0x7f
 8008ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cac:	e016      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb6:	d10d      	bne.n	8008cd4 <UART_Start_Receive_IT+0x9c>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <UART_Start_Receive_IT+0x92>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	227f      	movs	r2, #127	; 0x7f
 8008cc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc8:	e008      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	223f      	movs	r2, #63	; 0x3f
 8008cce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cd2:	e003      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2222      	movs	r2, #34	; 0x22
 8008ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d10:	673a      	str	r2, [r7, #112]	; 0x70
 8008d12:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e3      	bne.n	8008cec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2c:	d153      	bne.n	8008dd6 <UART_Start_Receive_IT+0x19e>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d34d      	bcc.n	8008dd6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d42:	d107      	bne.n	8008d54 <UART_Start_Receive_IT+0x11c>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a4a      	ldr	r2, [pc, #296]	; (8008e78 <UART_Start_Receive_IT+0x240>)
 8008d50:	671a      	str	r2, [r3, #112]	; 0x70
 8008d52:	e002      	b.n	8008d5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4a49      	ldr	r2, [pc, #292]	; (8008e7c <UART_Start_Receive_IT+0x244>)
 8008d58:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d01a      	beq.n	8008da0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e4      	bne.n	8008d6a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008db6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008dc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_Start_Receive_IT+0x168>
 8008dd4:	e04a      	b.n	8008e6c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dde:	d107      	bne.n	8008df0 <UART_Start_Receive_IT+0x1b8>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a25      	ldr	r2, [pc, #148]	; (8008e80 <UART_Start_Receive_IT+0x248>)
 8008dec:	671a      	str	r2, [r3, #112]	; 0x70
 8008dee:	e002      	b.n	8008df6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4a24      	ldr	r2, [pc, #144]	; (8008e84 <UART_Start_Receive_IT+0x24c>)
 8008df4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d019      	beq.n	8008e3a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e1a:	677b      	str	r3, [r7, #116]	; 0x74
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
 8008e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e6      	bne.n	8008e06 <UART_Start_Receive_IT+0x1ce>
 8008e38:	e018      	b.n	8008e6c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	613b      	str	r3, [r7, #16]
   return(result);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f043 0320 	orr.w	r3, r3, #32
 8008e4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	69f9      	ldr	r1, [r7, #28]
 8008e5e:	6a3a      	ldr	r2, [r7, #32]
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e6      	bne.n	8008e3a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	378c      	adds	r7, #140	; 0x8c
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr
 8008e78:	08009745 	.word	0x08009745
 8008e7c:	0800944d 	.word	0x0800944d
 8008e80:	080092eb 	.word	0x080092eb
 8008e84:	0800918b 	.word	0x0800918b

08008e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b08f      	sub	sp, #60	; 0x3c
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e6      	bne.n	8008e90 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee2:	61ba      	str	r2, [r7, #24]
 8008ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	6979      	ldr	r1, [r7, #20]
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e5      	bne.n	8008ec2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008efe:	bf00      	nop
 8008f00:	373c      	adds	r7, #60	; 0x3c
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr

08008f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b095      	sub	sp, #84	; 0x54
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e6      	bne.n	8008f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e3      	bne.n	8008f42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d118      	bne.n	8008fb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	e853 3f00 	ldrex	r3, [r3]
 8008f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f023 0310 	bic.w	r3, r3, #16
 8008f96:	647b      	str	r3, [r7, #68]	; 0x44
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa0:	61bb      	str	r3, [r7, #24]
 8008fa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6979      	ldr	r1, [r7, #20]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	613b      	str	r3, [r7, #16]
   return(result);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e6      	bne.n	8008f82 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008fc8:	bf00      	nop
 8008fca:	3754      	adds	r7, #84	; 0x54
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr

08008fd2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b090      	sub	sp, #64	; 0x40
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d137      	bne.n	800905e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	623b      	str	r3, [r7, #32]
   return(result);
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800900c:	63bb      	str	r3, [r7, #56]	; 0x38
 800900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009016:	633a      	str	r2, [r7, #48]	; 0x30
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800901c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e5      	bne.n	8008ff6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800902a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	60fb      	str	r3, [r7, #12]
   return(result);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903e:	637b      	str	r3, [r7, #52]	; 0x34
 8009040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	61fb      	str	r3, [r7, #28]
 800904a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904c:	69b9      	ldr	r1, [r7, #24]
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	e841 2300 	strex	r3, r2, [r1]
 8009054:	617b      	str	r3, [r7, #20]
   return(result);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e6      	bne.n	800902a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800905c:	e002      	b.n	8009064 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800905e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009060:	f7f9 fb60 	bl	8002724 <HAL_UART_TxCpltCallback>
}
 8009064:	bf00      	nop
 8009066:	3740      	adds	r7, #64	; 0x40
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f7ff f996 	bl	80083ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009080:	bf00      	nop
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800909c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b0:	2b80      	cmp	r3, #128	; 0x80
 80090b2:	d109      	bne.n	80090c8 <UART_DMAError+0x40>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b21      	cmp	r3, #33	; 0x21
 80090b8:	d106      	bne.n	80090c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	f7ff fee0 	bl	8008e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d109      	bne.n	80090ea <UART_DMAError+0x62>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b22      	cmp	r3, #34	; 0x22
 80090da:	d106      	bne.n	80090ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80090e4:	6978      	ldr	r0, [r7, #20]
 80090e6:	f7ff ff0f 	bl	8008f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f0:	f043 0210 	orr.w	r2, r3, #16
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090fa:	6978      	ldr	r0, [r7, #20]
 80090fc:	f7ff f95f 	bl	80083be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009100:	bf00      	nop
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff f949 	bl	80083be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	60bb      	str	r3, [r7, #8]
   return(result);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009150:	61fb      	str	r3, [r7, #28]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6979      	ldr	r1, [r7, #20]
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	613b      	str	r3, [r7, #16]
   return(result);
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e6      	bne.n	800913c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7f9 fad1 	bl	8002724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009182:	bf00      	nop
 8009184:	3720      	adds	r7, #32
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b096      	sub	sp, #88	; 0x58
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009198:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a2:	2b22      	cmp	r3, #34	; 0x22
 80091a4:	f040 8095 	bne.w	80092d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80091b6:	b2d9      	uxtb	r1, r3
 80091b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c2:	400a      	ands	r2, r1
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d178      	bne.n	80092e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009204:	653b      	str	r3, [r7, #80]	; 0x50
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800920e:	647b      	str	r3, [r7, #68]	; 0x44
 8009210:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800921c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e6      	bne.n	80091f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	623b      	str	r3, [r7, #32]
   return(result);
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009242:	633a      	str	r2, [r7, #48]	; 0x30
 8009244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e5      	bne.n	8009222 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2220      	movs	r2, #32
 800925a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009268:	2b01      	cmp	r3, #1
 800926a:	d12e      	bne.n	80092ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0310 	bic.w	r3, r3, #16
 8009286:	64bb      	str	r3, [r7, #72]	; 0x48
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009290:	61fb      	str	r3, [r7, #28]
 8009292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	69b9      	ldr	r1, [r7, #24]
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	617b      	str	r3, [r7, #20]
   return(result);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e6      	bne.n	8009272 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	f003 0310 	and.w	r3, r3, #16
 80092ae:	2b10      	cmp	r3, #16
 80092b0:	d103      	bne.n	80092ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2210      	movs	r2, #16
 80092b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff f884 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092c8:	e00b      	b.n	80092e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7f9 fa40 	bl	8002750 <HAL_UART_RxCpltCallback>
}
 80092d0:	e007      	b.n	80092e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	699a      	ldr	r2, [r3, #24]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f042 0208 	orr.w	r2, r2, #8
 80092e0:	619a      	str	r2, [r3, #24]
}
 80092e2:	bf00      	nop
 80092e4:	3758      	adds	r7, #88	; 0x58
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b096      	sub	sp, #88	; 0x58
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009302:	2b22      	cmp	r3, #34	; 0x22
 8009304:	f040 8095 	bne.w	8009432 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009316:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009318:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800931c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009320:	4013      	ands	r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009326:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932c:	1c9a      	adds	r2, r3, #2
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009338:	b29b      	uxth	r3, r3
 800933a:	3b01      	subs	r3, #1
 800933c:	b29a      	uxth	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800934a:	b29b      	uxth	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	d178      	bne.n	8009442 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936e:	643b      	str	r3, [r7, #64]	; 0x40
 8009370:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e6      	bne.n	8009350 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	61fb      	str	r3, [r7, #28]
   return(result);
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	f023 0301 	bic.w	r3, r3, #1
 8009398:	64bb      	str	r3, [r7, #72]	; 0x48
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3308      	adds	r3, #8
 80093a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e5      	bne.n	8009382 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d12e      	bne.n	800942a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f023 0310 	bic.w	r3, r3, #16
 80093e6:	647b      	str	r3, [r7, #68]	; 0x44
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	613b      	str	r3, [r7, #16]
   return(result);
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e6      	bne.n	80093d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	2b10      	cmp	r3, #16
 8009410:	d103      	bne.n	800941a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2210      	movs	r2, #16
 8009418:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7fe ffd4 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009428:	e00b      	b.n	8009442 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f9 f990 	bl	8002750 <HAL_UART_RxCpltCallback>
}
 8009430:	e007      	b.n	8009442 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0208 	orr.w	r2, r2, #8
 8009440:	619a      	str	r2, [r3, #24]
}
 8009442:	bf00      	nop
 8009444:	3758      	adds	r7, #88	; 0x58
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b0a6      	sub	sp, #152	; 0x98
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800945a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009482:	2b22      	cmp	r3, #34	; 0x22
 8009484:	f040 814f 	bne.w	8009726 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800948e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009492:	e0f6      	b.n	8009682 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800949e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80094a2:	b2d9      	uxtb	r1, r3
 80094a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ae:	400a      	ands	r2, r1
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d053      	beq.n	800958e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d011      	beq.n	8009516 <UART_RxISR_8BIT_FIFOEN+0xca>
 80094f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00b      	beq.n	8009516 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2201      	movs	r2, #1
 8009504:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800950c:	f043 0201 	orr.w	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d011      	beq.n	8009546 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2202      	movs	r2, #2
 8009534:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800953c:	f043 0204 	orr.w	r2, r3, #4
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d011      	beq.n	8009576 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2204      	movs	r2, #4
 8009564:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800956c:	f043 0202 	orr.w	r2, r3, #2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d006      	beq.n	800958e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fe ff1c 	bl	80083be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d173      	bne.n	8009682 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80095a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80095be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80095c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80095ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e4      	bne.n	800959a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3308      	adds	r3, #8
 80095d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095e6:	f023 0301 	bic.w	r3, r3, #1
 80095ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3308      	adds	r3, #8
 80095f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095f4:	657a      	str	r2, [r7, #84]	; 0x54
 80095f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095fc:	e841 2300 	strex	r3, r2, [r1]
 8009600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e3      	bne.n	80095d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d12e      	bne.n	800967c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	f023 0310 	bic.w	r3, r3, #16
 8009638:	67bb      	str	r3, [r7, #120]	; 0x78
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009642:	643b      	str	r3, [r7, #64]	; 0x40
 8009644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e6      	bne.n	8009624 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f003 0310 	and.w	r3, r3, #16
 8009660:	2b10      	cmp	r3, #16
 8009662:	d103      	bne.n	800966c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2210      	movs	r2, #16
 800966a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7fe feab 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
 800967a:	e002      	b.n	8009682 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7f9 f867 	bl	8002750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009686:	2b00      	cmp	r3, #0
 8009688:	d006      	beq.n	8009698 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800968a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	f47f aefe 	bne.w	8009494 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800969e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d045      	beq.n	8009736 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d23e      	bcs.n	8009736 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096ce:	673b      	str	r3, [r7, #112]	; 0x70
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3308      	adds	r3, #8
 80096d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e5      	bne.n	80096b8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a14      	ldr	r2, [pc, #80]	; (8009740 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80096f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f043 0320 	orr.w	r3, r3, #32
 8009706:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6979      	ldr	r1, [r7, #20]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	e841 2300 	strex	r3, r2, [r1]
 800971c:	613b      	str	r3, [r7, #16]
   return(result);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e6      	bne.n	80096f2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009724:	e007      	b.n	8009736 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0208 	orr.w	r2, r2, #8
 8009734:	619a      	str	r2, [r3, #24]
}
 8009736:	bf00      	nop
 8009738:	3798      	adds	r7, #152	; 0x98
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	0800918b 	.word	0x0800918b

08009744 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b0a8      	sub	sp, #160	; 0xa0
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009752:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977a:	2b22      	cmp	r3, #34	; 0x22
 800977c:	f040 8153 	bne.w	8009a26 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009786:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800978a:	e0fa      	b.n	8009982 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800979e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80097a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80097a6:	4013      	ands	r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b4:	1c9a      	adds	r2, r3, #2
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d053      	beq.n	800988a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d011      	beq.n	8009812 <UART_RxISR_16BIT_FIFOEN+0xce>
 80097ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00b      	beq.n	8009812 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2201      	movs	r2, #1
 8009800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009808:	f043 0201 	orr.w	r2, r3, #1
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d011      	beq.n	8009842 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800981e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2202      	movs	r2, #2
 8009830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009838:	f043 0204 	orr.w	r2, r3, #4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	d011      	beq.n	8009872 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800984e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2204      	movs	r2, #4
 8009860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009868:	f043 0202 	orr.w	r2, r3, #2
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009878:	2b00      	cmp	r3, #0
 800987a:	d006      	beq.n	800988a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7fe fd9e 	bl	80083be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009890:	b29b      	uxth	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d175      	bne.n	8009982 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098ba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e4      	bne.n	8009896 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3308      	adds	r3, #8
 80098d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d6:	e853 3f00 	ldrex	r3, [r3]
 80098da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80098f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e1      	bne.n	80098cc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800991a:	2b01      	cmp	r3, #1
 800991c:	d12e      	bne.n	800997c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009934:	f023 0310 	bic.w	r3, r3, #16
 8009938:	67fb      	str	r3, [r7, #124]	; 0x7c
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009942:	647b      	str	r3, [r7, #68]	; 0x44
 8009944:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e6      	bne.n	8009924 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b10      	cmp	r3, #16
 8009962:	d103      	bne.n	800996c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2210      	movs	r2, #16
 800996a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fe fd2b 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
 800997a:	e002      	b.n	8009982 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7f8 fee7 	bl	8002750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009982:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009986:	2b00      	cmp	r3, #0
 8009988:	d006      	beq.n	8009998 <UART_RxISR_16BIT_FIFOEN+0x254>
 800998a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	f47f aefa 	bne.w	800978c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800999e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099a2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d045      	beq.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099b0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d23e      	bcs.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3308      	adds	r3, #8
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	623b      	str	r3, [r7, #32]
   return(result);
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ce:	677b      	str	r3, [r7, #116]	; 0x74
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3308      	adds	r3, #8
 80099d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80099d8:	633a      	str	r2, [r7, #48]	; 0x30
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e5      	bne.n	80099b8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a14      	ldr	r2, [pc, #80]	; (8009a40 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80099f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f043 0320 	orr.w	r3, r3, #32
 8009a06:	673b      	str	r3, [r7, #112]	; 0x70
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	69b9      	ldr	r1, [r7, #24]
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e6      	bne.n	80099f2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a24:	e007      	b.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699a      	ldr	r2, [r3, #24]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0208 	orr.w	r2, r2, #8
 8009a34:	619a      	str	r2, [r3, #24]
}
 8009a36:	bf00      	nop
 8009a38:	37a0      	adds	r7, #160	; 0xa0
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	080092eb 	.word	0x080092eb

08009a44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr

08009a56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bc80      	pop	{r7}
 8009a66:	4770      	bx	lr

08009a68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc80      	pop	{r7}
 8009a78:	4770      	bx	lr

08009a7a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b088      	sub	sp, #32
 8009a7e:	af02      	add	r7, sp, #8
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	1d3b      	adds	r3, r7, #4
 8009a84:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e046      	b.n	8009b28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2224      	movs	r2, #36	; 0x24
 8009aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0201 	bic.w	r2, r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	430a      	orrs	r2, r1
 8009acc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d105      	bne.n	8009ae0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009ad4:	1d3b      	adds	r3, r7, #4
 8009ad6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 f90e 	bl	8009cfc <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f042 0201 	orr.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009af0:	f7f8 f916 	bl	8001d20 <HAL_GetTick>
 8009af4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009af6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f7fe ffcf 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	75fb      	strb	r3, [r7, #23]
 8009b14:	e003      	b.n	8009b1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b089      	sub	sp, #36	; 0x24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <HAL_UARTEx_EnableStopMode+0x16>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e021      	b.n	8009b8a <HAL_UARTEx_EnableStopMode+0x5a>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f043 0302 	orr.w	r3, r3, #2
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6979      	ldr	r1, [r7, #20]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	613b      	str	r3, [r7, #16]
   return(result);
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e6      	bne.n	8009b4e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3724      	adds	r7, #36	; 0x24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr

08009b94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_UARTEx_DisableFifoMode+0x16>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e027      	b.n	8009bfa <HAL_UARTEx_DisableFifoMode+0x66>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2224      	movs	r2, #36	; 0x24
 8009bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0201 	bic.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009bd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr

08009c04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e02d      	b.n	8009c78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2224      	movs	r2, #36	; 0x24
 8009c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0201 	bic.w	r2, r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f871 	bl	8009d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d101      	bne.n	8009c98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e02d      	b.n	8009cf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2224      	movs	r2, #36	; 0x24
 8009ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 0201 	bic.w	r2, r2, #1
 8009cbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f833 	bl	8009d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	1d3b      	adds	r3, r7, #4
 8009d06:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	f023 0210 	bic.w	r2, r3, #16
 8009d14:	893b      	ldrh	r3, [r7, #8]
 8009d16:	4619      	mov	r1, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009d2a:	7abb      	ldrb	r3, [r7, #10]
 8009d2c:	061a      	lsls	r2, r3, #24
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	605a      	str	r2, [r3, #4]
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bc80      	pop	{r7}
 8009d3e:	4770      	bx	lr

08009d40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d108      	bne.n	8009d62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d60:	e031      	b.n	8009dc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d62:	2308      	movs	r3, #8
 8009d64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d66:	2308      	movs	r3, #8
 8009d68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	0e5b      	lsrs	r3, r3, #25
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	f003 0307 	and.w	r3, r3, #7
 8009d78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	0f5b      	lsrs	r3, r3, #29
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 0307 	and.w	r3, r3, #7
 8009d88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	7b3a      	ldrb	r2, [r7, #12]
 8009d8e:	4910      	ldr	r1, [pc, #64]	; (8009dd0 <UARTEx_SetNbDataToProcess+0x90>)
 8009d90:	5c8a      	ldrb	r2, [r1, r2]
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d96:	7b3a      	ldrb	r2, [r7, #12]
 8009d98:	490e      	ldr	r1, [pc, #56]	; (8009dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8009d9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	7b7a      	ldrb	r2, [r7, #13]
 8009dac:	4908      	ldr	r1, [pc, #32]	; (8009dd0 <UARTEx_SetNbDataToProcess+0x90>)
 8009dae:	5c8a      	ldrb	r2, [r1, r2]
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009db4:	7b7a      	ldrb	r2, [r7, #13]
 8009db6:	4907      	ldr	r1, [pc, #28]	; (8009dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8009db8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dba:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr
 8009dd0:	0801dcf8 	.word	0x0801dcf8
 8009dd4:	0801dd00 	.word	0x0801dd00

08009dd8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009ddc:	f7f7 fe44 	bl	8001a68 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009de0:	f000 f820 	bl	8009e24 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009de4:	bf00      	nop
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	f012 fae0 	bl	801c3b4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009df4:	bf00      	nop
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009dfc:	f3bf 8f4f 	dsb	sy
}
 8009e00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009e02:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <__NVIC_SystemReset+0x24>)
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009e0a:	4904      	ldr	r1, [pc, #16]	; (8009e1c <__NVIC_SystemReset+0x24>)
 8009e0c:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <__NVIC_SystemReset+0x28>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009e12:	f3bf 8f4f 	dsb	sy
}
 8009e16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009e18:	bf00      	nop
 8009e1a:	e7fd      	b.n	8009e18 <__NVIC_SystemReset+0x20>
 8009e1c:	e000ed00 	.word	0xe000ed00
 8009e20:	05fa0004 	.word	0x05fa0004

08009e24 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9302      	str	r3, [sp, #8]
 8009e32:	2302      	movs	r3, #2
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	2301      	movs	r3, #1
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	4b5a      	ldr	r3, [pc, #360]	; (8009fa4 <LoRaWAN_Init+0x180>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2100      	movs	r1, #0
 8009e40:	2002      	movs	r0, #2
 8009e42:	f012 ff05 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8009e46:	2300      	movs	r3, #0
 8009e48:	9302      	str	r3, [sp, #8]
 8009e4a:	2304      	movs	r3, #4
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	2302      	movs	r3, #2
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	4b55      	ldr	r3, [pc, #340]	; (8009fa8 <LoRaWAN_Init+0x184>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	2100      	movs	r1, #0
 8009e58:	2002      	movs	r0, #2
 8009e5a:	f012 fef9 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8009e5e:	2300      	movs	r3, #0
 8009e60:	9302      	str	r3, [sp, #8]
 8009e62:	2302      	movs	r3, #2
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	2301      	movs	r3, #1
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4b50      	ldr	r3, [pc, #320]	; (8009fac <LoRaWAN_Init+0x188>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2100      	movs	r1, #0
 8009e70:	2002      	movs	r0, #2
 8009e72:	f012 feed 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009e76:	1d3b      	adds	r3, r7, #4
 8009e78:	4619      	mov	r1, r3
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f003 f98a 	bl	800d194 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	0e1b      	lsrs	r3, r3, #24
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	0c1b      	lsrs	r3, r3, #16
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	4619      	mov	r1, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	0a1b      	lsrs	r3, r3, #8
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	9302      	str	r3, [sp, #8]
 8009e98:	9101      	str	r1, [sp, #4]
 8009e9a:	9200      	str	r2, [sp, #0]
 8009e9c:	4b44      	ldr	r3, [pc, #272]	; (8009fb0 <LoRaWAN_Init+0x18c>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	2002      	movs	r0, #2
 8009ea4:	f012 fed4 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009ea8:	1d3b      	adds	r3, r7, #4
 8009eaa:	4619      	mov	r1, r3
 8009eac:	2001      	movs	r0, #1
 8009eae:	f003 f971 	bl	800d194 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	0e1b      	lsrs	r3, r3, #24
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	0a1b      	lsrs	r3, r3, #8
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	b2c0      	uxtb	r0, r0
 8009ecc:	9003      	str	r0, [sp, #12]
 8009ece:	9302      	str	r3, [sp, #8]
 8009ed0:	9101      	str	r1, [sp, #4]
 8009ed2:	9200      	str	r2, [sp, #0]
 8009ed4:	4b37      	ldr	r3, [pc, #220]	; (8009fb4 <LoRaWAN_Init+0x190>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2100      	movs	r1, #0
 8009eda:	2002      	movs	r0, #2
 8009edc:	f012 feb8 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	4b34      	ldr	r3, [pc, #208]	; (8009fb8 <LoRaWAN_Init+0x194>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009eec:	4833      	ldr	r0, [pc, #204]	; (8009fbc <LoRaWAN_Init+0x198>)
 8009eee:	f012 fc01 	bl	801c6f4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	4b32      	ldr	r3, [pc, #200]	; (8009fc0 <LoRaWAN_Init+0x19c>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009efe:	4831      	ldr	r0, [pc, #196]	; (8009fc4 <LoRaWAN_Init+0x1a0>)
 8009f00:	f012 fbf8 	bl	801c6f4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009f04:	2300      	movs	r3, #0
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	4b2f      	ldr	r3, [pc, #188]	; (8009fc8 <LoRaWAN_Init+0x1a4>)
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009f10:	482e      	ldr	r0, [pc, #184]	; (8009fcc <LoRaWAN_Init+0x1a8>)
 8009f12:	f012 fbef 	bl	801c6f4 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009f16:	2300      	movs	r3, #0
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	4b2d      	ldr	r3, [pc, #180]	; (8009fd0 <LoRaWAN_Init+0x1ac>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009f22:	482c      	ldr	r0, [pc, #176]	; (8009fd4 <LoRaWAN_Init+0x1b0>)
 8009f24:	f012 fbe6 	bl	801c6f4 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009f28:	4a2b      	ldr	r2, [pc, #172]	; (8009fd8 <LoRaWAN_Init+0x1b4>)
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	f012 fb3d 	bl	801c5ac <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009f32:	4a2a      	ldr	r2, [pc, #168]	; (8009fdc <LoRaWAN_Init+0x1b8>)
 8009f34:	2100      	movs	r1, #0
 8009f36:	2002      	movs	r0, #2
 8009f38:	f012 fb38 	bl	801c5ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009f3c:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <LoRaWAN_Init+0x1bc>)
 8009f3e:	2100      	movs	r1, #0
 8009f40:	2004      	movs	r0, #4
 8009f42:	f012 fb33 	bl	801c5ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009f46:	4a27      	ldr	r2, [pc, #156]	; (8009fe4 <LoRaWAN_Init+0x1c0>)
 8009f48:	2100      	movs	r1, #0
 8009f4a:	2008      	movs	r0, #8
 8009f4c:	f012 fb2e 	bl	801c5ac <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009f50:	f000 fd3c 	bl	800a9cc <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009f54:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8009f58:	4823      	ldr	r0, [pc, #140]	; (8009fe8 <LoRaWAN_Init+0x1c4>)
 8009f5a:	f002 f9ff 	bl	800c35c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009f5e:	4823      	ldr	r0, [pc, #140]	; (8009fec <LoRaWAN_Init+0x1c8>)
 8009f60:	f002 fa5a 	bl	800c418 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009f64:	4819      	ldr	r0, [pc, #100]	; (8009fcc <LoRaWAN_Init+0x1a8>)
 8009f66:	f012 fbfb 	bl	801c760 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009f6a:	4b21      	ldr	r3, [pc, #132]	; (8009ff0 <LoRaWAN_Init+0x1cc>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	4a21      	ldr	r2, [pc, #132]	; (8009ff4 <LoRaWAN_Init+0x1d0>)
 8009f70:	7812      	ldrb	r2, [r2, #0]
 8009f72:	4611      	mov	r1, r2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f002 fbc9 	bl	800c70c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009f7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ff8 <LoRaWAN_Init+0x1d4>)
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10b      	bne.n	8009f9a <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009f82:	4b1e      	ldr	r3, [pc, #120]	; (8009ffc <LoRaWAN_Init+0x1d8>)
 8009f84:	6819      	ldr	r1, [r3, #0]
 8009f86:	2300      	movs	r3, #0
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <LoRaWAN_Init+0x1dc>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	481d      	ldr	r0, [pc, #116]	; (800a004 <LoRaWAN_Init+0x1e0>)
 8009f90:	f012 fbb0 	bl	801c6f4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009f94:	481b      	ldr	r0, [pc, #108]	; (800a004 <LoRaWAN_Init+0x1e0>)
 8009f96:	f012 fbe3 	bl	801c760 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	0801d2f8 	.word	0x0801d2f8
 8009fa8:	0801d31c 	.word	0x0801d31c
 8009fac:	0801d340 	.word	0x0801d340
 8009fb0:	0801d364 	.word	0x0801d364
 8009fb4:	0801d388 	.word	0x0801d388
 8009fb8:	0800a4bd 	.word	0x0800a4bd
 8009fbc:	20000508 	.word	0x20000508
 8009fc0:	0800a4cf 	.word	0x0800a4cf
 8009fc4:	20000520 	.word	0x20000520
 8009fc8:	0800a4e1 	.word	0x0800a4e1
 8009fcc:	20000538 	.word	0x20000538
 8009fd0:	0800a895 	.word	0x0800a895
 8009fd4:	200003fc 	.word	0x200003fc
 8009fd8:	0800c6a1 	.word	0x0800c6a1
 8009fdc:	0800a17d 	.word	0x0800a17d
 8009fe0:	0800a8b9 	.word	0x0800a8b9
 8009fe4:	0800a815 	.word	0x0800a815
 8009fe8:	20000024 	.word	0x20000024
 8009fec:	20000070 	.word	0x20000070
 8009ff0:	20000020 	.word	0x20000020
 8009ff4:	20000021 	.word	0x20000021
 8009ff8:	200003e0 	.word	0x200003e0
 8009ffc:	20000084 	.word	0x20000084
 800a000:	0800a499 	.word	0x0800a499
 800a004:	200003e4 	.word	0x200003e4

0800a008 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a012:	88fb      	ldrh	r3, [r7, #6]
 800a014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a018:	d104      	bne.n	800a024 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a01a:	2100      	movs	r1, #0
 800a01c:	2002      	movs	r0, #2
 800a01e:	f012 fae7 	bl	801c5f0 <UTIL_SEQ_SetTask>
      }
      break;
 800a022:	e000      	b.n	800a026 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a024:	bf00      	nop
  }
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a030:	b5b0      	push	{r4, r5, r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af06      	add	r7, sp, #24
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8088 	beq.w	800a156 <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a046:	4846      	ldr	r0, [pc, #280]	; (800a160 <OnRxData+0x130>)
 800a048:	f012 fb8a 	bl	801c760 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d057      	beq.n	800a104 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d054      	beq.n	800a104 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d04d      	beq.n	800a104 <OnRxData+0xd4>
        {
          switch (appData->Port)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d021      	beq.n	800a0b4 <OnRxData+0x84>
 800a070:	2b03      	cmp	r3, #3
 800a072:	d149      	bne.n	800a108 <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	785b      	ldrb	r3, [r3, #1]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d117      	bne.n	800a0ac <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d00e      	beq.n	800a0a4 <OnRxData+0x74>
 800a086:	2b02      	cmp	r3, #2
 800a088:	dc12      	bgt.n	800a0b0 <OnRxData+0x80>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <OnRxData+0x64>
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d004      	beq.n	800a09c <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a092:	e00d      	b.n	800a0b0 <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 800a094:	2000      	movs	r0, #0
 800a096:	f002 fcc5 	bl	800ca24 <LmHandlerRequestClass>
                    break;
 800a09a:	e00a      	b.n	800a0b2 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 800a09c:	2001      	movs	r0, #1
 800a09e:	f002 fcc1 	bl	800ca24 <LmHandlerRequestClass>
                    break;
 800a0a2:	e006      	b.n	800a0b2 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 800a0a4:	2002      	movs	r0, #2
 800a0a6:	f002 fcbd 	bl	800ca24 <LmHandlerRequestClass>
                    break;
 800a0aa:	e002      	b.n	800a0b2 <OnRxData+0x82>
                }
              }
 800a0ac:	bf00      	nop
 800a0ae:	e02e      	b.n	800a10e <OnRxData+0xde>
                    break;
 800a0b0:	bf00      	nop
              break;
 800a0b2:	e02c      	b.n	800a10e <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	785b      	ldrb	r3, [r3, #1]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d127      	bne.n	800a10c <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	4b26      	ldr	r3, [pc, #152]	; (800a164 <OnRxData+0x134>)
 800a0ca:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a0cc:	4b25      	ldr	r3, [pc, #148]	; (800a164 <OnRxData+0x134>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10b      	bne.n	800a0ec <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a0d4:	4b24      	ldr	r3, [pc, #144]	; (800a168 <OnRxData+0x138>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2100      	movs	r1, #0
 800a0da:	2003      	movs	r0, #3
 800a0dc:	f012 fdb8 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	2120      	movs	r1, #32
 800a0e4:	4821      	ldr	r0, [pc, #132]	; (800a16c <OnRxData+0x13c>)
 800a0e6:	f7fa fec9 	bl	8004e7c <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800a0ea:	e00f      	b.n	800a10c <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a0ec:	4b20      	ldr	r3, [pc, #128]	; (800a170 <OnRxData+0x140>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	2003      	movs	r0, #3
 800a0f4:	f012 fdac 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2120      	movs	r1, #32
 800a0fc:	481b      	ldr	r0, [pc, #108]	; (800a16c <OnRxData+0x13c>)
 800a0fe:	f7fa febd 	bl	8004e7c <HAL_GPIO_WritePin>
              break;
 800a102:	e003      	b.n	800a10c <OnRxData+0xdc>

            default:

              break;
          }
        }
 800a104:	bf00      	nop
 800a106:	e002      	b.n	800a10e <OnRxData+0xde>
              break;
 800a108:	bf00      	nop
 800a10a:	e000      	b.n	800a10e <OnRxData+0xde>
              break;
 800a10c:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	7c1b      	ldrb	r3, [r3, #16]
 800a112:	2b05      	cmp	r3, #5
 800a114:	d81f      	bhi.n	800a156 <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	7bfa      	ldrb	r2, [r7, #15]
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a122:	460c      	mov	r4, r1
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	7c09      	ldrb	r1, [r1, #16]
 800a128:	4608      	mov	r0, r1
 800a12a:	4912      	ldr	r1, [pc, #72]	; (800a174 <OnRxData+0x144>)
 800a12c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a130:	6838      	ldr	r0, [r7, #0]
 800a132:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a136:	4605      	mov	r5, r0
 800a138:	6838      	ldr	r0, [r7, #0]
 800a13a:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a13e:	9005      	str	r0, [sp, #20]
 800a140:	9504      	str	r5, [sp, #16]
 800a142:	9103      	str	r1, [sp, #12]
 800a144:	9402      	str	r4, [sp, #8]
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <OnRxData+0x148>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	2100      	movs	r1, #0
 800a150:	2003      	movs	r0, #3
 800a152:	f012 fd7d 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a156:	bf00      	nop
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bdb0      	pop	{r4, r5, r7, pc}
 800a15e:	bf00      	nop
 800a160:	20000520 	.word	0x20000520
 800a164:	20000506 	.word	0x20000506
 800a168:	0801d3ac 	.word	0x0801d3ac
 800a16c:	48000400 	.word	0x48000400
 800a170:	0801d3b8 	.word	0x0801d3b8
 800a174:	20000008 	.word	0x20000008
 800a178:	0801d3c4 	.word	0x0801d3c4

0800a17c <SendTxData>:

static void SendTxData(void)
{
 800a17c:	b590      	push	{r4, r7, lr}
 800a17e:	b091      	sub	sp, #68	; 0x44
 800a180:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a182:	23ff      	movs	r3, #255	; 0xff
 800a184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a188:	f7f7 fc9e 	bl	8001ac8 <GetBatteryLevel>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a1b2:	1d3b      	adds	r3, r7, #4
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7f7 fe47 	bl	8001e48 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a1ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	4b8f      	ldr	r3, [pc, #572]	; (800a400 <SendTxData+0x284>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	2002      	movs	r0, #2
 800a1c8:	f012 fd42 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7f6 fca4 	bl	8000b1c <__aeabi_f2iz>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	b21b      	sxth	r3, r3
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	4b8a      	ldr	r3, [pc, #552]	; (800a404 <SendTxData+0x288>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	2100      	movs	r1, #0
 800a1e0:	2002      	movs	r0, #2
 800a1e2:	f012 fd35 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a1e6:	4b88      	ldr	r3, [pc, #544]	; (800a408 <SendTxData+0x28c>)
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4987      	ldr	r1, [pc, #540]	; (800a40c <SendTxData+0x290>)
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7f6 fb43 	bl	800087c <__aeabi_fmul>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f6 fcb5 	bl	8000b68 <__aeabi_f2uiz>
 800a1fe:	4603      	mov	r3, r0
 800a200:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4618      	mov	r0, r3
 800a206:	f7f6 fc89 	bl	8000b1c <__aeabi_f2iz>
 800a20a:	4603      	mov	r3, r0
 800a20c:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	497f      	ldr	r1, [pc, #508]	; (800a410 <SendTxData+0x294>)
 800a212:	4618      	mov	r0, r3
 800a214:	f7f6 fb32 	bl	800087c <__aeabi_fmul>
 800a218:	4603      	mov	r3, r0
 800a21a:	497c      	ldr	r1, [pc, #496]	; (800a40c <SendTxData+0x290>)
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f6 fbe1 	bl	80009e4 <__aeabi_fdiv>
 800a222:	4603      	mov	r3, r0
 800a224:	4618      	mov	r0, r3
 800a226:	f7f6 fc9f 	bl	8000b68 <__aeabi_f2uiz>
 800a22a:	4603      	mov	r3, r0
 800a22c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a22e:	4b76      	ldr	r3, [pc, #472]	; (800a408 <SendTxData+0x28c>)
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	1c59      	adds	r1, r3, #1
 800a236:	6339      	str	r1, [r7, #48]	; 0x30
 800a238:	4413      	add	r3, r2
 800a23a:	4a76      	ldr	r2, [pc, #472]	; (800a414 <SendTxData+0x298>)
 800a23c:	7812      	ldrb	r2, [r2, #0]
 800a23e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a240:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a242:	0a1b      	lsrs	r3, r3, #8
 800a244:	b298      	uxth	r0, r3
 800a246:	4b70      	ldr	r3, [pc, #448]	; (800a408 <SendTxData+0x28c>)
 800a248:	685a      	ldr	r2, [r3, #4]
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	1c59      	adds	r1, r3, #1
 800a24e:	6339      	str	r1, [r7, #48]	; 0x30
 800a250:	4413      	add	r3, r2
 800a252:	b2c2      	uxtb	r2, r0
 800a254:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a256:	4b6c      	ldr	r3, [pc, #432]	; (800a408 <SendTxData+0x28c>)
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	1c59      	adds	r1, r3, #1
 800a25e:	6339      	str	r1, [r7, #48]	; 0x30
 800a260:	4413      	add	r3, r2
 800a262:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a264:	b2d2      	uxtb	r2, r2
 800a266:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a268:	4b67      	ldr	r3, [pc, #412]	; (800a408 <SendTxData+0x28c>)
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	1c59      	adds	r1, r3, #1
 800a270:	6339      	str	r1, [r7, #48]	; 0x30
 800a272:	4413      	add	r3, r2
 800a274:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a276:	b2d2      	uxtb	r2, r2
 800a278:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a27a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a27c:	0a1b      	lsrs	r3, r3, #8
 800a27e:	b298      	uxth	r0, r3
 800a280:	4b61      	ldr	r3, [pc, #388]	; (800a408 <SendTxData+0x28c>)
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	1c59      	adds	r1, r3, #1
 800a288:	6339      	str	r1, [r7, #48]	; 0x30
 800a28a:	4413      	add	r3, r2
 800a28c:	b2c2      	uxtb	r2, r0
 800a28e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a290:	4b5d      	ldr	r3, [pc, #372]	; (800a408 <SendTxData+0x28c>)
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	1c59      	adds	r1, r3, #1
 800a298:	6339      	str	r1, [r7, #48]	; 0x30
 800a29a:	4413      	add	r3, r2
 800a29c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a29e:	b2d2      	uxtb	r2, r2
 800a2a0:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a2a2:	4b5d      	ldr	r3, [pc, #372]	; (800a418 <SendTxData+0x29c>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b08      	cmp	r3, #8
 800a2a8:	d007      	beq.n	800a2ba <SendTxData+0x13e>
 800a2aa:	4b5b      	ldr	r3, [pc, #364]	; (800a418 <SendTxData+0x29c>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d003      	beq.n	800a2ba <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a2b2:	4b59      	ldr	r3, [pc, #356]	; (800a418 <SendTxData+0x29c>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d120      	bne.n	800a2fc <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800a2ba:	4b53      	ldr	r3, [pc, #332]	; (800a408 <SendTxData+0x28c>)
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	1c59      	adds	r1, r3, #1
 800a2c2:	6339      	str	r1, [r7, #48]	; 0x30
 800a2c4:	4413      	add	r3, r2
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a2ca:	4b4f      	ldr	r3, [pc, #316]	; (800a408 <SendTxData+0x28c>)
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	1c59      	adds	r1, r3, #1
 800a2d2:	6339      	str	r1, [r7, #48]	; 0x30
 800a2d4:	4413      	add	r3, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a2da:	4b4b      	ldr	r3, [pc, #300]	; (800a408 <SendTxData+0x28c>)
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	1c59      	adds	r1, r3, #1
 800a2e2:	6339      	str	r1, [r7, #48]	; 0x30
 800a2e4:	4413      	add	r3, r2
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a2ea:	4b47      	ldr	r3, [pc, #284]	; (800a408 <SendTxData+0x28c>)
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	1c59      	adds	r1, r3, #1
 800a2f2:	6339      	str	r1, [r7, #48]	; 0x30
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	701a      	strb	r2, [r3, #0]
 800a2fa:	e05b      	b.n	800a3b4 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a304:	4b40      	ldr	r3, [pc, #256]	; (800a408 <SendTxData+0x28c>)
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	1c59      	adds	r1, r3, #1
 800a30c:	6339      	str	r1, [r7, #48]	; 0x30
 800a30e:	18d4      	adds	r4, r2, r3
 800a310:	f7f7 fbda 	bl	8001ac8 <GetBatteryLevel>
 800a314:	4603      	mov	r3, r0
 800a316:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	1418      	asrs	r0, r3, #16
 800a31c:	4b3a      	ldr	r3, [pc, #232]	; (800a408 <SendTxData+0x28c>)
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	1c59      	adds	r1, r3, #1
 800a324:	6339      	str	r1, [r7, #48]	; 0x30
 800a326:	4413      	add	r3, r2
 800a328:	b2c2      	uxtb	r2, r0
 800a32a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	1218      	asrs	r0, r3, #8
 800a330:	4b35      	ldr	r3, [pc, #212]	; (800a408 <SendTxData+0x28c>)
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	1c59      	adds	r1, r3, #1
 800a338:	6339      	str	r1, [r7, #48]	; 0x30
 800a33a:	4413      	add	r3, r2
 800a33c:	b2c2      	uxtb	r2, r0
 800a33e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a340:	4b31      	ldr	r3, [pc, #196]	; (800a408 <SendTxData+0x28c>)
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	1c59      	adds	r1, r3, #1
 800a348:	6339      	str	r1, [r7, #48]	; 0x30
 800a34a:	4413      	add	r3, r2
 800a34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	1418      	asrs	r0, r3, #16
 800a356:	4b2c      	ldr	r3, [pc, #176]	; (800a408 <SendTxData+0x28c>)
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	1c59      	adds	r1, r3, #1
 800a35e:	6339      	str	r1, [r7, #48]	; 0x30
 800a360:	4413      	add	r3, r2
 800a362:	b2c2      	uxtb	r2, r0
 800a364:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	1218      	asrs	r0, r3, #8
 800a36a:	4b27      	ldr	r3, [pc, #156]	; (800a408 <SendTxData+0x28c>)
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	1c59      	adds	r1, r3, #1
 800a372:	6339      	str	r1, [r7, #48]	; 0x30
 800a374:	4413      	add	r3, r2
 800a376:	b2c2      	uxtb	r2, r0
 800a378:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a37a:	4b23      	ldr	r3, [pc, #140]	; (800a408 <SendTxData+0x28c>)
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	1c59      	adds	r1, r3, #1
 800a382:	6339      	str	r1, [r7, #48]	; 0x30
 800a384:	4413      	add	r3, r2
 800a386:	6a3a      	ldr	r2, [r7, #32]
 800a388:	b2d2      	uxtb	r2, r2
 800a38a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a38c:	8bfb      	ldrh	r3, [r7, #30]
 800a38e:	0a1b      	lsrs	r3, r3, #8
 800a390:	b298      	uxth	r0, r3
 800a392:	4b1d      	ldr	r3, [pc, #116]	; (800a408 <SendTxData+0x28c>)
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	1c59      	adds	r1, r3, #1
 800a39a:	6339      	str	r1, [r7, #48]	; 0x30
 800a39c:	4413      	add	r3, r2
 800a39e:	b2c2      	uxtb	r2, r0
 800a3a0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a3a2:	4b19      	ldr	r3, [pc, #100]	; (800a408 <SendTxData+0x28c>)
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	1c59      	adds	r1, r3, #1
 800a3aa:	6339      	str	r1, [r7, #48]	; 0x30
 800a3ac:	4413      	add	r3, r2
 800a3ae:	8bfa      	ldrh	r2, [r7, #30]
 800a3b0:	b2d2      	uxtb	r2, r2
 800a3b2:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	4b13      	ldr	r3, [pc, #76]	; (800a408 <SendTxData+0x28c>)
 800a3ba:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a3bc:	4b17      	ldr	r3, [pc, #92]	; (800a41c <SendTxData+0x2a0>)
 800a3be:	7a5b      	ldrb	r3, [r3, #9]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d007      	beq.n	800a3d4 <SendTxData+0x258>
 800a3c4:	f002 fa24 	bl	800c810 <LmHandlerJoinStatus>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d102      	bne.n	800a3d4 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a3ce:	4813      	ldr	r0, [pc, #76]	; (800a41c <SendTxData+0x2a0>)
 800a3d0:	f012 fa34 	bl	801c83c <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a3d4:	4b10      	ldr	r3, [pc, #64]	; (800a418 <SendTxData+0x29c>)
 800a3d6:	78db      	ldrb	r3, [r3, #3]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4619      	mov	r1, r3
 800a3dc:	480a      	ldr	r0, [pc, #40]	; (800a408 <SendTxData+0x28c>)
 800a3de:	f002 fa33 	bl	800c848 <LmHandlerSend>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a3e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d119      	bne.n	800a424 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <SendTxData+0x2a4>)
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	f012 fc2a 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800a3fc:	e029      	b.n	800a452 <SendTxData+0x2d6>
 800a3fe:	bf00      	nop
 800a400:	0801d40c 	.word	0x0801d40c
 800a404:	0801d418 	.word	0x0801d418
 800a408:	20000088 	.word	0x20000088
 800a40c:	41200000 	.word	0x41200000
 800a410:	42c80000 	.word	0x42c80000
 800a414:	20000506 	.word	0x20000506
 800a418:	20000070 	.word	0x20000070
 800a41c:	20000538 	.word	0x20000538
 800a420:	0801d424 	.word	0x0801d424
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a424:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a428:	f113 0f06 	cmn.w	r3, #6
 800a42c:	d111      	bne.n	800a452 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a42e:	f002 f963 	bl	800c6f8 <LmHandlerGetDutyCycleWaitTime>
 800a432:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00b      	beq.n	800a452 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43c:	4a11      	ldr	r2, [pc, #68]	; (800a484 <SendTxData+0x308>)
 800a43e:	fba2 2303 	umull	r2, r3, r2, r3
 800a442:	099b      	lsrs	r3, r3, #6
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	4b10      	ldr	r3, [pc, #64]	; (800a488 <SendTxData+0x30c>)
 800a448:	2201      	movs	r2, #1
 800a44a:	2100      	movs	r1, #0
 800a44c:	2001      	movs	r0, #1
 800a44e:	f012 fbff 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a452:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <SendTxData+0x310>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10f      	bne.n	800a47a <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a45a:	480d      	ldr	r0, [pc, #52]	; (800a490 <SendTxData+0x314>)
 800a45c:	f012 f9ee 	bl	801c83c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a460:	4b0c      	ldr	r3, [pc, #48]	; (800a494 <SendTxData+0x318>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a466:	4293      	cmp	r3, r2
 800a468:	bf38      	it	cc
 800a46a:	4613      	movcc	r3, r2
 800a46c:	4619      	mov	r1, r3
 800a46e:	4808      	ldr	r0, [pc, #32]	; (800a490 <SendTxData+0x314>)
 800a470:	f012 fa54 	bl	801c91c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a474:	4806      	ldr	r0, [pc, #24]	; (800a490 <SendTxData+0x314>)
 800a476:	f012 f973 	bl	801c760 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a47a:	bf00      	nop
 800a47c:	373c      	adds	r7, #60	; 0x3c
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd90      	pop	{r4, r7, pc}
 800a482:	bf00      	nop
 800a484:	10624dd3 	.word	0x10624dd3
 800a488:	0801d434 	.word	0x0801d434
 800a48c:	200003e0 	.word	0x200003e0
 800a490:	200003e4 	.word	0x200003e4
 800a494:	20000084 	.word	0x20000084

0800a498 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	2002      	movs	r0, #2
 800a4a4:	f012 f8a4 	bl	801c5f0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a4a8:	4803      	ldr	r0, [pc, #12]	; (800a4b8 <OnTxTimerEvent+0x20>)
 800a4aa:	f012 f959 	bl	801c760 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a4ae:	bf00      	nop
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	200003e4 	.word	0x200003e4

0800a4bc <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr

0800a4ce <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bc80      	pop	{r7}
 800a4de:	4770      	bx	lr

0800a4e0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af04      	add	r7, sp, #16
 800a4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d041      	beq.n	800a586 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d03d      	beq.n	800a586 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a50a:	4821      	ldr	r0, [pc, #132]	; (800a590 <OnTxData+0x9c>)
 800a50c:	f012 f928 	bl	801c760 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a510:	4b20      	ldr	r3, [pc, #128]	; (800a594 <OnTxData+0xa0>)
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	2002      	movs	r0, #2
 800a518:	f012 fb9a 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	7c12      	ldrb	r2, [r2, #16]
 800a524:	4611      	mov	r1, r2
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a52c:	4610      	mov	r0, r2
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a534:	9203      	str	r2, [sp, #12]
 800a536:	9002      	str	r0, [sp, #8]
 800a538:	9101      	str	r1, [sp, #4]
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	4b16      	ldr	r3, [pc, #88]	; (800a598 <OnTxData+0xa4>)
 800a53e:	2200      	movs	r2, #0
 800a540:	2100      	movs	r1, #0
 800a542:	2003      	movs	r0, #3
 800a544:	f012 fb84 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a548:	4b14      	ldr	r3, [pc, #80]	; (800a59c <OnTxData+0xa8>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	2003      	movs	r0, #3
 800a550:	f012 fb7e 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	7a1b      	ldrb	r3, [r3, #8]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d10e      	bne.n	800a57a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	7a5b      	ldrb	r3, [r3, #9]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <OnTxData+0x74>
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <OnTxData+0xac>)
 800a566:	e000      	b.n	800a56a <OnTxData+0x76>
 800a568:	4b0e      	ldr	r3, [pc, #56]	; (800a5a4 <OnTxData+0xb0>)
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	4b0e      	ldr	r3, [pc, #56]	; (800a5a8 <OnTxData+0xb4>)
 800a56e:	2200      	movs	r2, #0
 800a570:	2100      	movs	r1, #0
 800a572:	2003      	movs	r0, #3
 800a574:	f012 fb6c 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a578:	e005      	b.n	800a586 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a57a:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <OnTxData+0xb8>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	2100      	movs	r1, #0
 800a580:	2003      	movs	r0, #3
 800a582:	f012 fb65 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20000508 	.word	0x20000508
 800a594:	0801d454 	.word	0x0801d454
 800a598:	0801d488 	.word	0x0801d488
 800a59c:	0801d4bc 	.word	0x0801d4bc
 800a5a0:	0801d4cc 	.word	0x0801d4cc
 800a5a4:	0801d4d0 	.word	0x0801d4d0
 800a5a8:	0801d4d8 	.word	0x0801d4d8
 800a5ac:	0801d4ec 	.word	0x0801d4ec

0800a5b0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d039      	beq.n	800a632 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d11e      	bne.n	800a606 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	2004      	movs	r0, #4
 800a5cc:	f012 f810 	bl	801c5f0 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a5d0:	481a      	ldr	r0, [pc, #104]	; (800a63c <OnJoinRequest+0x8c>)
 800a5d2:	f012 f933 	bl	801c83c <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a5d6:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <OnJoinRequest+0x90>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2002      	movs	r0, #2
 800a5de:	f012 fb37 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	799b      	ldrb	r3, [r3, #6]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d106      	bne.n	800a5f8 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a5ea:	4b16      	ldr	r3, [pc, #88]	; (800a644 <OnJoinRequest+0x94>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	2002      	movs	r0, #2
 800a5f2:	f012 fb2d 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a5f6:	e01c      	b.n	800a632 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a5f8:	4b13      	ldr	r3, [pc, #76]	; (800a648 <OnJoinRequest+0x98>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	2002      	movs	r0, #2
 800a600:	f012 fb26 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800a604:	e015      	b.n	800a632 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a606:	4b11      	ldr	r3, [pc, #68]	; (800a64c <OnJoinRequest+0x9c>)
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	2002      	movs	r0, #2
 800a60e:	f012 fb1f 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	799b      	ldrb	r3, [r3, #6]
 800a616:	2b02      	cmp	r3, #2
 800a618:	d10b      	bne.n	800a632 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800a61a:	4b0d      	ldr	r3, [pc, #52]	; (800a650 <OnJoinRequest+0xa0>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	2100      	movs	r1, #0
 800a620:	2002      	movs	r0, #2
 800a622:	f012 fb15 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a626:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <OnJoinRequest+0xa4>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2101      	movs	r1, #1
 800a62c:	4618      	mov	r0, r3
 800a62e:	f002 f86d 	bl	800c70c <LmHandlerJoin>
}
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000538 	.word	0x20000538
 800a640:	0801d4fc 	.word	0x0801d4fc
 800a644:	0801d514 	.word	0x0801d514
 800a648:	0801d534 	.word	0x0801d534
 800a64c:	0801d554 	.word	0x0801d554
 800a650:	0801d570 	.word	0x0801d570
 800a654:	20000020 	.word	0x20000020

0800a658 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65a:	b093      	sub	sp, #76	; 0x4c
 800a65c:	af0c      	add	r7, sp, #48	; 0x30
 800a65e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d056      	beq.n	800a714 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d008      	beq.n	800a680 <OnBeaconStatusChange+0x28>
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d049      	beq.n	800a706 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a672:	4b2b      	ldr	r3, [pc, #172]	; (800a720 <OnBeaconStatusChange+0xc8>)
 800a674:	2200      	movs	r2, #0
 800a676:	2100      	movs	r1, #0
 800a678:	2002      	movs	r0, #2
 800a67a:	f012 fae9 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a67e:	e04a      	b.n	800a716 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	7c1b      	ldrb	r3, [r3, #16]
 800a684:	4618      	mov	r0, r3
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a68c:	461c      	mov	r4, r3
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a694:	461d      	mov	r5, r3
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	6852      	ldr	r2, [r2, #4]
 800a69e:	6979      	ldr	r1, [r7, #20]
 800a6a0:	7d89      	ldrb	r1, [r1, #22]
 800a6a2:	460e      	mov	r6, r1
 800a6a4:	6979      	ldr	r1, [r7, #20]
 800a6a6:	7dc9      	ldrb	r1, [r1, #23]
 800a6a8:	6139      	str	r1, [r7, #16]
 800a6aa:	6979      	ldr	r1, [r7, #20]
 800a6ac:	7e09      	ldrb	r1, [r1, #24]
 800a6ae:	60f9      	str	r1, [r7, #12]
 800a6b0:	6979      	ldr	r1, [r7, #20]
 800a6b2:	7e49      	ldrb	r1, [r1, #25]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	6979      	ldr	r1, [r7, #20]
 800a6b8:	7e89      	ldrb	r1, [r1, #26]
 800a6ba:	6079      	str	r1, [r7, #4]
 800a6bc:	6979      	ldr	r1, [r7, #20]
 800a6be:	7ec9      	ldrb	r1, [r1, #27]
 800a6c0:	6039      	str	r1, [r7, #0]
 800a6c2:	6979      	ldr	r1, [r7, #20]
 800a6c4:	7f09      	ldrb	r1, [r1, #28]
 800a6c6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6c8:	f8d7 c000 	ldr.w	ip, [r7]
 800a6cc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800a6d0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a6d4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800a6d8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a6dc:	f8cd c020 	str.w	ip, [sp, #32]
 800a6e0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a6e4:	f8cd c01c 	str.w	ip, [sp, #28]
 800a6e8:	6939      	ldr	r1, [r7, #16]
 800a6ea:	9106      	str	r1, [sp, #24]
 800a6ec:	9605      	str	r6, [sp, #20]
 800a6ee:	9204      	str	r2, [sp, #16]
 800a6f0:	9303      	str	r3, [sp, #12]
 800a6f2:	9502      	str	r5, [sp, #8]
 800a6f4:	9401      	str	r4, [sp, #4]
 800a6f6:	9000      	str	r0, [sp, #0]
 800a6f8:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <OnBeaconStatusChange+0xcc>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	2002      	movs	r0, #2
 800a700:	f012 faa6 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a704:	e007      	b.n	800a716 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a706:	4b08      	ldr	r3, [pc, #32]	; (800a728 <OnBeaconStatusChange+0xd0>)
 800a708:	2200      	movs	r2, #0
 800a70a:	2100      	movs	r1, #0
 800a70c:	2002      	movs	r0, #2
 800a70e:	f012 fa9f 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a712:	e000      	b.n	800a716 <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800a714:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a716:	bf00      	nop
 800a718:	371c      	adds	r7, #28
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a71e:	bf00      	nop
 800a720:	0801d594 	.word	0x0801d594
 800a724:	0801d5ac 	.word	0x0801d5ac
 800a728:	0801d620 	.word	0x0801d620

0800a72c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af02      	add	r7, sp, #8
 800a732:	4603      	mov	r3, r0
 800a734:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a736:	79fb      	ldrb	r3, [r7, #7]
 800a738:	4a06      	ldr	r2, [pc, #24]	; (800a754 <OnClassChange+0x28>)
 800a73a:	5cd3      	ldrb	r3, [r2, r3]
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	4b06      	ldr	r3, [pc, #24]	; (800a758 <OnClassChange+0x2c>)
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	2002      	movs	r0, #2
 800a746:	f012 fa83 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	0801d65c 	.word	0x0801d65c
 800a758:	0801d640 	.word	0x0801d640

0800a75c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a760:	2100      	movs	r1, #0
 800a762:	2001      	movs	r0, #1
 800a764:	f011 ff44 	bl	801c5f0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a768:	bf00      	nop
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a774:	4a0d      	ldr	r2, [pc, #52]	; (800a7ac <OnTxPeriodicityChanged+0x40>)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <OnTxPeriodicityChanged+0x40>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d103      	bne.n	800a78a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a782:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <OnTxPeriodicityChanged+0x40>)
 800a784:	f242 7210 	movw	r2, #10000	; 0x2710
 800a788:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a78a:	4809      	ldr	r0, [pc, #36]	; (800a7b0 <OnTxPeriodicityChanged+0x44>)
 800a78c:	f012 f856 	bl	801c83c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <OnTxPeriodicityChanged+0x40>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4619      	mov	r1, r3
 800a796:	4806      	ldr	r0, [pc, #24]	; (800a7b0 <OnTxPeriodicityChanged+0x44>)
 800a798:	f012 f8c0 	bl	801c91c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a79c:	4804      	ldr	r0, [pc, #16]	; (800a7b0 <OnTxPeriodicityChanged+0x44>)
 800a79e:	f011 ffdf 	bl	801c760 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a7a2:	bf00      	nop
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20000084 	.word	0x20000084
 800a7b0:	200003e4 	.word	0x200003e4

0800a7b4 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a7be:	4a04      	ldr	r2, [pc, #16]	; (800a7d0 <OnTxFrameCtrlChanged+0x1c>)
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bc80      	pop	{r7}
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	20000070 	.word	0x20000070

0800a7d4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a7de:	4a04      	ldr	r2, [pc, #16]	; (800a7f0 <OnPingSlotPeriodicityChanged+0x1c>)
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	20000070 	.word	0x20000070

0800a7f4 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a7f8:	f002 fcfd 	bl	800d1f6 <LmHandlerHalt>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d106      	bne.n	800a810 <OnSystemReset+0x1c>
 800a802:	f002 f805 	bl	800c810 <LmHandlerJoinStatus>
 800a806:	4603      	mov	r3, r0
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d101      	bne.n	800a810 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a80c:	f7ff faf4 	bl	8009df8 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a810:	bf00      	nop
 800a812:	bd80      	pop	{r7, pc}

0800a814 <StopJoin>:

static void StopJoin(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a818:	4817      	ldr	r0, [pc, #92]	; (800a878 <StopJoin+0x64>)
 800a81a:	f012 f80f 	bl	801c83c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a81e:	f002 fcdd 	bl	800d1dc <LmHandlerStop>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d006      	beq.n	800a836 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a828:	4b14      	ldr	r3, [pc, #80]	; (800a87c <StopJoin+0x68>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	2002      	movs	r0, #2
 800a830:	f012 fa0e 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800a834:	e01a      	b.n	800a86c <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a836:	4b12      	ldr	r3, [pc, #72]	; (800a880 <StopJoin+0x6c>)
 800a838:	2200      	movs	r2, #0
 800a83a:	2100      	movs	r1, #0
 800a83c:	2002      	movs	r0, #2
 800a83e:	f012 fa07 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a842:	4b10      	ldr	r3, [pc, #64]	; (800a884 <StopJoin+0x70>)
 800a844:	2201      	movs	r2, #1
 800a846:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a848:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <StopJoin+0x74>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	2002      	movs	r0, #2
 800a850:	f012 f9fe 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a854:	480d      	ldr	r0, [pc, #52]	; (800a88c <StopJoin+0x78>)
 800a856:	f001 fddf 	bl	800c418 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a85a:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <StopJoin+0x70>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2101      	movs	r1, #1
 800a860:	4618      	mov	r0, r3
 800a862:	f001 ff53 	bl	800c70c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a866:	4804      	ldr	r0, [pc, #16]	; (800a878 <StopJoin+0x64>)
 800a868:	f011 ff7a 	bl	801c760 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a86c:	4808      	ldr	r0, [pc, #32]	; (800a890 <StopJoin+0x7c>)
 800a86e:	f011 ff77 	bl	801c760 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a872:	bf00      	nop
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200003e4 	.word	0x200003e4
 800a87c:	0801d660 	.word	0x0801d660
 800a880:	0801d680 	.word	0x0801d680
 800a884:	20000020 	.word	0x20000020
 800a888:	0801d694 	.word	0x0801d694
 800a88c:	20000070 	.word	0x20000070
 800a890:	200003fc 	.word	0x200003fc

0800a894 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a89c:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <OnStopJoinTimerEvent+0x20>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d103      	bne.n	800a8ac <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	2008      	movs	r0, #8
 800a8a8:	f011 fea2 	bl	801c5f0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a8ac:	bf00      	nop
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	20000020 	.word	0x20000020

0800a8b8 <StoreContext>:

static void StoreContext(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a8be:	23ff      	movs	r3, #255	; 0xff
 800a8c0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a8c2:	f002 fca5 	bl	800d210 <LmHandlerNvmDataStore>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a8ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ce:	f113 0f08 	cmn.w	r3, #8
 800a8d2:	d106      	bne.n	800a8e2 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a8d4:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <StoreContext+0x48>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2002      	movs	r0, #2
 800a8dc:	f012 f9b8 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a8e0:	e00a      	b.n	800a8f8 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a8e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ea:	d105      	bne.n	800a8f8 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <StoreContext+0x4c>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	2002      	movs	r0, #2
 800a8f4:	f012 f9ac 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8f8:	bf00      	nop
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	0801d6b4 	.word	0x0801d6b4
 800a904:	0801d6cc 	.word	0x0801d6cc

0800a908 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d106      	bne.n	800a926 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a918:	4b08      	ldr	r3, [pc, #32]	; (800a93c <OnNvmDataChange+0x34>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	2100      	movs	r1, #0
 800a91e:	2002      	movs	r0, #2
 800a920:	f012 f996 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a924:	e005      	b.n	800a932 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <OnNvmDataChange+0x38>)
 800a928:	2200      	movs	r2, #0
 800a92a:	2100      	movs	r1, #0
 800a92c:	2002      	movs	r0, #2
 800a92e:	f012 f98f 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800a932:	bf00      	nop
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0801d6e4 	.word	0x0801d6e4
 800a940:	0801d6f8 	.word	0x0801d6f8

0800a944 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a94e:	f7f9 fe49 	bl	80045e4 <HAL_FLASH_Unlock>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d11c      	bne.n	800a992 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a958:	4b10      	ldr	r3, [pc, #64]	; (800a99c <OnStoreContextRequest+0x58>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	029a      	lsls	r2, r3, #10
 800a95e:	4b10      	ldr	r3, [pc, #64]	; (800a9a0 <OnStoreContextRequest+0x5c>)
 800a960:	4013      	ands	r3, r2
 800a962:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800a966:	fbb2 f1f3 	udiv	r1, r2, r3
 800a96a:	fb01 f303 	mul.w	r3, r1, r3
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	0adb      	lsrs	r3, r3, #11
 800a972:	2200      	movs	r2, #0
 800a974:	2101      	movs	r1, #1
 800a976:	4618      	mov	r0, r3
 800a978:	f7f6 fce5 	bl	8001346 <FLASH_IF_EraseByPages>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d105      	bne.n	800a98e <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a982:	2300      	movs	r3, #0
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	4806      	ldr	r0, [pc, #24]	; (800a9a4 <OnStoreContextRequest+0x60>)
 800a98a:	f7f6 fbfb 	bl	8001184 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a98e:	f7f9 fe4b 	bl	8004628 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	1fff75e0 	.word	0x1fff75e0
 800a9a0:	03fffc00 	.word	0x03fffc00
 800a9a4:	0803f000 	.word	0x0803f000

0800a9a8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4903      	ldr	r1, [pc, #12]	; (800a9c8 <OnRestoreContextRequest+0x20>)
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f011 f8f8 	bl	801bbb0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a9c0:	bf00      	nop
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	0803f000 	.word	0x0803f000

0800a9cc <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a9d0:	4b18      	ldr	r3, [pc, #96]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a9d6:	4b17      	ldr	r3, [pc, #92]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a9dc:	4b15      	ldr	r3, [pc, #84]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a9e2:	4b14      	ldr	r3, [pc, #80]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800a9e8:	4b12      	ldr	r3, [pc, #72]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f043 0320 	orr.w	r3, r3, #32
 800a9f0:	4a10      	ldr	r2, [pc, #64]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9f2:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800a9f4:	4b0f      	ldr	r3, [pc, #60]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9fc:	4a0d      	ldr	r2, [pc, #52]	; (800aa34 <LoraInfo_Init+0x68>)
 800a9fe:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800aa00:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <LoraInfo_Init+0x68>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10c      	bne.n	800aa22 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800aa08:	4b0b      	ldr	r3, [pc, #44]	; (800aa38 <LoraInfo_Init+0x6c>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f012 f91e 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800aa14:	bf00      	nop
 800aa16:	f012 f909 	bl	801cc2c <UTIL_ADV_TRACE_IsBufferEmpty>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d1fa      	bne.n	800aa16 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800aa20:	e7fe      	b.n	800aa20 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800aa22:	4b04      	ldr	r3, [pc, #16]	; (800aa34 <LoraInfo_Init+0x68>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800aa28:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <LoraInfo_Init+0x68>)
 800aa2a:	2203      	movs	r2, #3
 800aa2c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800aa2e:	bf00      	nop
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000550 	.word	0x20000550
 800aa38:	0801d70c 	.word	0x0801d70c

0800aa3c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800aa40:	4b02      	ldr	r3, [pc, #8]	; (800aa4c <LoraInfo_GetPtr+0x10>)
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bc80      	pop	{r7}
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20000550 	.word	0x20000550

0800aa50 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800aa54:	f7f7 fecd 	bl	80027f2 <BSP_RADIO_Init>
 800aa58:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	4603      	mov	r3, r0
 800aa66:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7f7 fef2 	bl	8002854 <BSP_RADIO_ConfigRFSwitch>
 800aa70:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800aa7e:	f7f7 ff37 	bl	80028f0 <BSP_RADIO_GetTxConfig>
 800aa82:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800aa8c:	f7f7 ff37 	bl	80028fe <BSP_RADIO_IsTCXO>
 800aa90:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800aa9a:	f7f7 ff37 	bl	800290c <BSP_RADIO_IsDCDC>
 800aa9e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f7 ff32 	bl	800291a <BSP_RADIO_GetRFOMaxPowerConfig>
 800aab6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	33f1      	adds	r3, #241	; 0xf1
 800aacc:	2210      	movs	r2, #16
 800aace:	2100      	movs	r1, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f00d fda3 	bl	801861c <memset1>
    ctx->M_n = 0;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	22f0      	movs	r2, #240	; 0xf0
 800aae2:	2100      	movs	r1, #0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f00d fd99 	bl	801861c <memset1>
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	461a      	mov	r2, r3
 800ab00:	2110      	movs	r1, #16
 800ab02:	6838      	ldr	r0, [r7, #0]
 800ab04:	f000 fe5c 	bl	800b7c0 <lorawan_aes_set_key>
}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08c      	sub	sp, #48	; 0x30
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f000 80a1 	beq.w	800ac6a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab2e:	f1c3 0310 	rsb	r3, r3, #16
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	4293      	cmp	r3, r2
 800ab36:	bf28      	it	cs
 800ab38:	4613      	movcs	r3, r2
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab48:	4413      	add	r3, r2
 800ab4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab4c:	b292      	uxth	r2, r2
 800ab4e:	68b9      	ldr	r1, [r7, #8]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f00d fd28 	bl	80185a6 <memcpy1>
        ctx->M_n += mlen;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	441a      	add	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab6c:	2b0f      	cmp	r3, #15
 800ab6e:	f240 808d 	bls.w	800ac8c <AES_CMAC_Update+0x17c>
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	429a      	cmp	r2, r3
 800ab78:	f000 8088 	beq.w	800ac8c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab80:	e015      	b.n	800abae <AES_CMAC_Update+0x9e>
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	4413      	add	r3, r2
 800ab88:	33f1      	adds	r3, #241	; 0xf1
 800ab8a:	781a      	ldrb	r2, [r3, #0]
 800ab8c:	68f9      	ldr	r1, [r7, #12]
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	440b      	add	r3, r1
 800ab92:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	4053      	eors	r3, r2
 800ab9a:	b2d9      	uxtb	r1, r3
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	4413      	add	r3, r2
 800aba2:	33f1      	adds	r3, #241	; 0xf1
 800aba4:	460a      	mov	r2, r1
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	3301      	adds	r3, #1
 800abac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	2b0f      	cmp	r3, #15
 800abb2:	dde6      	ble.n	800ab82 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800abba:	f107 0314 	add.w	r3, r7, #20
 800abbe:	2210      	movs	r2, #16
 800abc0:	4618      	mov	r0, r3
 800abc2:	f00d fcf0 	bl	80185a6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	f107 0114 	add.w	r1, r7, #20
 800abcc:	f107 0314 	add.w	r3, r7, #20
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 fed3 	bl	800b97c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	33f1      	adds	r3, #241	; 0xf1
 800abda:	f107 0114 	add.w	r1, r7, #20
 800abde:	2210      	movs	r2, #16
 800abe0:	4618      	mov	r0, r3
 800abe2:	f00d fce0 	bl	80185a6 <memcpy1>

        data += mlen;
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	4413      	add	r3, r2
 800abec:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800abf6:	e038      	b.n	800ac6a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800abf8:	2300      	movs	r3, #0
 800abfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800abfc:	e013      	b.n	800ac26 <AES_CMAC_Update+0x116>
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	4413      	add	r3, r2
 800ac04:	33f1      	adds	r3, #241	; 0xf1
 800ac06:	781a      	ldrb	r2, [r3, #0]
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	68b9      	ldr	r1, [r7, #8]
 800ac0c:	440b      	add	r3, r1
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	4053      	eors	r3, r2
 800ac12:	b2d9      	uxtb	r1, r3
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	4413      	add	r3, r2
 800ac1a:	33f1      	adds	r3, #241	; 0xf1
 800ac1c:	460a      	mov	r2, r1
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	3301      	adds	r3, #1
 800ac24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	2b0f      	cmp	r3, #15
 800ac2a:	dde8      	ble.n	800abfe <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ac32:	f107 0314 	add.w	r3, r7, #20
 800ac36:	2210      	movs	r2, #16
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f00d fcb4 	bl	80185a6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	f107 0114 	add.w	r1, r7, #20
 800ac44:	f107 0314 	add.w	r3, r7, #20
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 fe97 	bl	800b97c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	33f1      	adds	r3, #241	; 0xf1
 800ac52:	f107 0114 	add.w	r1, r7, #20
 800ac56:	2210      	movs	r2, #16
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f00d fca4 	bl	80185a6 <memcpy1>

        data += 16;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3310      	adds	r3, #16
 800ac62:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3b10      	subs	r3, #16
 800ac68:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b10      	cmp	r3, #16
 800ac6e:	d8c3      	bhi.n	800abf8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	68b9      	ldr	r1, [r7, #8]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f00d fc92 	bl	80185a6 <memcpy1>
    ctx->M_n = len;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ac8a:	e000      	b.n	800ac8e <AES_CMAC_Update+0x17e>
            return;
 800ac8c:	bf00      	nop
}
 800ac8e:	3730      	adds	r7, #48	; 0x30
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b092      	sub	sp, #72	; 0x48
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ac9e:	f107 031c 	add.w	r3, r7, #28
 800aca2:	2210      	movs	r2, #16
 800aca4:	2100      	movs	r1, #0
 800aca6:	4618      	mov	r0, r3
 800aca8:	f00d fcb8 	bl	801861c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	f107 011c 	add.w	r1, r7, #28
 800acb2:	f107 031c 	add.w	r3, r7, #28
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 fe60 	bl	800b97c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800acbc:	7f3b      	ldrb	r3, [r7, #28]
 800acbe:	b25b      	sxtb	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	da30      	bge.n	800ad26 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800acc4:	2300      	movs	r3, #0
 800acc6:	647b      	str	r3, [r7, #68]	; 0x44
 800acc8:	e01b      	b.n	800ad02 <AES_CMAC_Final+0x6e>
 800acca:	f107 021c 	add.w	r2, r7, #28
 800acce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acd0:	4413      	add	r3, r2
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	b25a      	sxtb	r2, r3
 800acd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acda:	3301      	adds	r3, #1
 800acdc:	3348      	adds	r3, #72	; 0x48
 800acde:	443b      	add	r3, r7
 800ace0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ace4:	09db      	lsrs	r3, r3, #7
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	b25b      	sxtb	r3, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	b25b      	sxtb	r3, r3
 800acee:	b2d9      	uxtb	r1, r3
 800acf0:	f107 021c 	add.w	r2, r7, #28
 800acf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf6:	4413      	add	r3, r2
 800acf8:	460a      	mov	r2, r1
 800acfa:	701a      	strb	r2, [r3, #0]
 800acfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acfe:	3301      	adds	r3, #1
 800ad00:	647b      	str	r3, [r7, #68]	; 0x44
 800ad02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad04:	2b0e      	cmp	r3, #14
 800ad06:	dde0      	ble.n	800acca <AES_CMAC_Final+0x36>
 800ad08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ad14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad18:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ad1c:	43db      	mvns	r3, r3
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad24:	e027      	b.n	800ad76 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800ad26:	2300      	movs	r3, #0
 800ad28:	643b      	str	r3, [r7, #64]	; 0x40
 800ad2a:	e01b      	b.n	800ad64 <AES_CMAC_Final+0xd0>
 800ad2c:	f107 021c 	add.w	r2, r7, #28
 800ad30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad32:	4413      	add	r3, r2
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	b25a      	sxtb	r2, r3
 800ad3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	3348      	adds	r3, #72	; 0x48
 800ad40:	443b      	add	r3, r7
 800ad42:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad46:	09db      	lsrs	r3, r3, #7
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	b25b      	sxtb	r3, r3
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	b25b      	sxtb	r3, r3
 800ad50:	b2d9      	uxtb	r1, r3
 800ad52:	f107 021c 	add.w	r2, r7, #28
 800ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad58:	4413      	add	r3, r2
 800ad5a:	460a      	mov	r2, r1
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad60:	3301      	adds	r3, #1
 800ad62:	643b      	str	r3, [r7, #64]	; 0x40
 800ad64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad66:	2b0e      	cmp	r3, #14
 800ad68:	dde0      	ble.n	800ad2c <AES_CMAC_Final+0x98>
 800ad6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad7c:	2b10      	cmp	r3, #16
 800ad7e:	d11d      	bne.n	800adbc <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ad80:	2300      	movs	r3, #0
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad84:	e016      	b.n	800adb4 <AES_CMAC_Final+0x120>
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad90:	781a      	ldrb	r2, [r3, #0]
 800ad92:	f107 011c 	add.w	r1, r7, #28
 800ad96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad98:	440b      	add	r3, r1
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	4053      	eors	r3, r2
 800ad9e:	b2d9      	uxtb	r1, r3
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada4:	4413      	add	r3, r2
 800ada6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800adaa:	460a      	mov	r2, r1
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb0:	3301      	adds	r3, #1
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb6:	2b0f      	cmp	r3, #15
 800adb8:	dde5      	ble.n	800ad86 <AES_CMAC_Final+0xf2>
 800adba:	e096      	b.n	800aeea <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800adbc:	7f3b      	ldrb	r3, [r7, #28]
 800adbe:	b25b      	sxtb	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da30      	bge.n	800ae26 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800adc4:	2300      	movs	r3, #0
 800adc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800adc8:	e01b      	b.n	800ae02 <AES_CMAC_Final+0x16e>
 800adca:	f107 021c 	add.w	r2, r7, #28
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	4413      	add	r3, r2
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	b25a      	sxtb	r2, r3
 800add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adda:	3301      	adds	r3, #1
 800addc:	3348      	adds	r3, #72	; 0x48
 800adde:	443b      	add	r3, r7
 800ade0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ade4:	09db      	lsrs	r3, r3, #7
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	b25b      	sxtb	r3, r3
 800adea:	4313      	orrs	r3, r2
 800adec:	b25b      	sxtb	r3, r3
 800adee:	b2d9      	uxtb	r1, r3
 800adf0:	f107 021c 	add.w	r2, r7, #28
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	4413      	add	r3, r2
 800adf8:	460a      	mov	r2, r1
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	3301      	adds	r3, #1
 800ae00:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	2b0e      	cmp	r3, #14
 800ae06:	dde0      	ble.n	800adca <AES_CMAC_Final+0x136>
 800ae08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ae14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae18:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ae1c:	43db      	mvns	r3, r3
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae24:	e027      	b.n	800ae76 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800ae26:	2300      	movs	r3, #0
 800ae28:	637b      	str	r3, [r7, #52]	; 0x34
 800ae2a:	e01b      	b.n	800ae64 <AES_CMAC_Final+0x1d0>
 800ae2c:	f107 021c 	add.w	r2, r7, #28
 800ae30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae32:	4413      	add	r3, r2
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	b25a      	sxtb	r2, r3
 800ae3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	3348      	adds	r3, #72	; 0x48
 800ae40:	443b      	add	r3, r7
 800ae42:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ae46:	09db      	lsrs	r3, r3, #7
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	b25b      	sxtb	r3, r3
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	b25b      	sxtb	r3, r3
 800ae50:	b2d9      	uxtb	r1, r3
 800ae52:	f107 021c 	add.w	r2, r7, #28
 800ae56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae58:	4413      	add	r3, r2
 800ae5a:	460a      	mov	r2, r1
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae60:	3301      	adds	r3, #1
 800ae62:	637b      	str	r3, [r7, #52]	; 0x34
 800ae64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae66:	2b0e      	cmp	r3, #14
 800ae68:	dde0      	ble.n	800ae2c <AES_CMAC_Final+0x198>
 800ae6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	4413      	add	r3, r2
 800ae80:	2280      	movs	r2, #128	; 0x80
 800ae82:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ae86:	e007      	b.n	800ae98 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	4413      	add	r3, r2
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aeac:	2b0f      	cmp	r3, #15
 800aeae:	d9eb      	bls.n	800ae88 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	633b      	str	r3, [r7, #48]	; 0x30
 800aeb4:	e016      	b.n	800aee4 <AES_CMAC_Final+0x250>
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	4413      	add	r3, r2
 800aebc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aec0:	781a      	ldrb	r2, [r3, #0]
 800aec2:	f107 011c 	add.w	r1, r7, #28
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	440b      	add	r3, r1
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	4053      	eors	r3, r2
 800aece:	b2d9      	uxtb	r1, r3
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed4:	4413      	add	r3, r2
 800aed6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aeda:	460a      	mov	r2, r1
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	3301      	adds	r3, #1
 800aee2:	633b      	str	r3, [r7, #48]	; 0x30
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	2b0f      	cmp	r3, #15
 800aee8:	dde5      	ble.n	800aeb6 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800aeea:	2300      	movs	r3, #0
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeee:	e015      	b.n	800af1c <AES_CMAC_Final+0x288>
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef4:	4413      	add	r3, r2
 800aef6:	33f1      	adds	r3, #241	; 0xf1
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	440b      	add	r3, r1
 800af00:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	4053      	eors	r3, r2
 800af08:	b2d9      	uxtb	r1, r3
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0e:	4413      	add	r3, r2
 800af10:	33f1      	adds	r3, #241	; 0xf1
 800af12:	460a      	mov	r2, r1
 800af14:	701a      	strb	r2, [r3, #0]
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	3301      	adds	r3, #1
 800af1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1e:	2b0f      	cmp	r3, #15
 800af20:	dde6      	ble.n	800aef0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800af28:	f107 030c 	add.w	r3, r7, #12
 800af2c:	2210      	movs	r2, #16
 800af2e:	4618      	mov	r0, r3
 800af30:	f00d fb39 	bl	80185a6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	f107 030c 	add.w	r3, r7, #12
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fd1d 	bl	800b97c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800af42:	f107 031c 	add.w	r3, r7, #28
 800af46:	2210      	movs	r2, #16
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f00d fb66 	bl	801861c <memset1>
}
 800af50:	bf00      	nop
 800af52:	3748      	adds	r7, #72	; 0x48
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	781a      	ldrb	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3301      	adds	r3, #1
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	7852      	ldrb	r2, [r2, #1]
 800af72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3302      	adds	r3, #2
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	7892      	ldrb	r2, [r2, #2]
 800af7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3303      	adds	r3, #3
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	78d2      	ldrb	r2, [r2, #3]
 800af86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3304      	adds	r3, #4
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	7912      	ldrb	r2, [r2, #4]
 800af90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3305      	adds	r3, #5
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	7952      	ldrb	r2, [r2, #5]
 800af9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3306      	adds	r3, #6
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	7992      	ldrb	r2, [r2, #6]
 800afa4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3307      	adds	r3, #7
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	79d2      	ldrb	r2, [r2, #7]
 800afae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3308      	adds	r3, #8
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	7a12      	ldrb	r2, [r2, #8]
 800afb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3309      	adds	r3, #9
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	7a52      	ldrb	r2, [r2, #9]
 800afc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	330a      	adds	r3, #10
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	7a92      	ldrb	r2, [r2, #10]
 800afcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	330b      	adds	r3, #11
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	7ad2      	ldrb	r2, [r2, #11]
 800afd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	330c      	adds	r3, #12
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	7b12      	ldrb	r2, [r2, #12]
 800afe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	330d      	adds	r3, #13
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	7b52      	ldrb	r2, [r2, #13]
 800afea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	330e      	adds	r3, #14
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	7b92      	ldrb	r2, [r2, #14]
 800aff4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	330f      	adds	r3, #15
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	7bd2      	ldrb	r2, [r2, #15]
 800affe:	701a      	strb	r2, [r3, #0]
#endif
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	bc80      	pop	{r7}
 800b008:	4770      	bx	lr

0800b00a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b00a:	b480      	push	{r7}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	4613      	mov	r3, r2
 800b016:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b018:	e007      	b.n	800b02a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	1c53      	adds	r3, r2, #1
 800b01e:	60bb      	str	r3, [r7, #8]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	1c59      	adds	r1, r3, #1
 800b024:	60f9      	str	r1, [r7, #12]
 800b026:	7812      	ldrb	r2, [r2, #0]
 800b028:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	1e5a      	subs	r2, r3, #1
 800b02e:	71fa      	strb	r2, [r7, #7]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f2      	bne.n	800b01a <copy_block_nn+0x10>
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bc80      	pop	{r7}
 800b03e:	4770      	bx	lr

0800b040 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	781a      	ldrb	r2, [r3, #0]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	4053      	eors	r3, r2
 800b054:	b2da      	uxtb	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3301      	adds	r3, #1
 800b05e:	7819      	ldrb	r1, [r3, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	781a      	ldrb	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3301      	adds	r3, #1
 800b06a:	404a      	eors	r2, r1
 800b06c:	b2d2      	uxtb	r2, r2
 800b06e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3302      	adds	r3, #2
 800b074:	7819      	ldrb	r1, [r3, #0]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	3302      	adds	r3, #2
 800b07a:	781a      	ldrb	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3302      	adds	r3, #2
 800b080:	404a      	eors	r2, r1
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3303      	adds	r3, #3
 800b08a:	7819      	ldrb	r1, [r3, #0]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	3303      	adds	r3, #3
 800b090:	781a      	ldrb	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3303      	adds	r3, #3
 800b096:	404a      	eors	r2, r1
 800b098:	b2d2      	uxtb	r2, r2
 800b09a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	7819      	ldrb	r1, [r3, #0]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	404a      	eors	r2, r1
 800b0ae:	b2d2      	uxtb	r2, r2
 800b0b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3305      	adds	r3, #5
 800b0b6:	7819      	ldrb	r1, [r3, #0]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	3305      	adds	r3, #5
 800b0bc:	781a      	ldrb	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3305      	adds	r3, #5
 800b0c2:	404a      	eors	r2, r1
 800b0c4:	b2d2      	uxtb	r2, r2
 800b0c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3306      	adds	r3, #6
 800b0cc:	7819      	ldrb	r1, [r3, #0]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	3306      	adds	r3, #6
 800b0d2:	781a      	ldrb	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3306      	adds	r3, #6
 800b0d8:	404a      	eors	r2, r1
 800b0da:	b2d2      	uxtb	r2, r2
 800b0dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	3307      	adds	r3, #7
 800b0e2:	7819      	ldrb	r1, [r3, #0]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	3307      	adds	r3, #7
 800b0e8:	781a      	ldrb	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3307      	adds	r3, #7
 800b0ee:	404a      	eors	r2, r1
 800b0f0:	b2d2      	uxtb	r2, r2
 800b0f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	7819      	ldrb	r1, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	781a      	ldrb	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3308      	adds	r3, #8
 800b104:	404a      	eors	r2, r1
 800b106:	b2d2      	uxtb	r2, r2
 800b108:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3309      	adds	r3, #9
 800b10e:	7819      	ldrb	r1, [r3, #0]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	3309      	adds	r3, #9
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3309      	adds	r3, #9
 800b11a:	404a      	eors	r2, r1
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	330a      	adds	r3, #10
 800b124:	7819      	ldrb	r1, [r3, #0]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	330a      	adds	r3, #10
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	330a      	adds	r3, #10
 800b130:	404a      	eors	r2, r1
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	330b      	adds	r3, #11
 800b13a:	7819      	ldrb	r1, [r3, #0]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	330b      	adds	r3, #11
 800b140:	781a      	ldrb	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	330b      	adds	r3, #11
 800b146:	404a      	eors	r2, r1
 800b148:	b2d2      	uxtb	r2, r2
 800b14a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	330c      	adds	r3, #12
 800b150:	7819      	ldrb	r1, [r3, #0]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	330c      	adds	r3, #12
 800b156:	781a      	ldrb	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	330c      	adds	r3, #12
 800b15c:	404a      	eors	r2, r1
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	330d      	adds	r3, #13
 800b166:	7819      	ldrb	r1, [r3, #0]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	330d      	adds	r3, #13
 800b16c:	781a      	ldrb	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	330d      	adds	r3, #13
 800b172:	404a      	eors	r2, r1
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	330e      	adds	r3, #14
 800b17c:	7819      	ldrb	r1, [r3, #0]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	330e      	adds	r3, #14
 800b182:	781a      	ldrb	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	330e      	adds	r3, #14
 800b188:	404a      	eors	r2, r1
 800b18a:	b2d2      	uxtb	r2, r2
 800b18c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	330f      	adds	r3, #15
 800b192:	7819      	ldrb	r1, [r3, #0]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	330f      	adds	r3, #15
 800b198:	781a      	ldrb	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	330f      	adds	r3, #15
 800b19e:	404a      	eors	r2, r1
 800b1a0:	b2d2      	uxtb	r2, r2
 800b1a2:	701a      	strb	r2, [r3, #0]
#endif
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bc80      	pop	{r7}
 800b1ac:	4770      	bx	lr

0800b1ae <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	781a      	ldrb	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	4053      	eors	r3, r2
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	7819      	ldrb	r1, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	404a      	eors	r2, r1
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	3302      	adds	r3, #2
 800b1e4:	7819      	ldrb	r1, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3302      	adds	r3, #2
 800b1f0:	404a      	eors	r2, r1
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	3303      	adds	r3, #3
 800b1fa:	7819      	ldrb	r1, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3303      	adds	r3, #3
 800b200:	781a      	ldrb	r2, [r3, #0]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3303      	adds	r3, #3
 800b206:	404a      	eors	r2, r1
 800b208:	b2d2      	uxtb	r2, r2
 800b20a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	3304      	adds	r3, #4
 800b210:	7819      	ldrb	r1, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3304      	adds	r3, #4
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3304      	adds	r3, #4
 800b21c:	404a      	eors	r2, r1
 800b21e:	b2d2      	uxtb	r2, r2
 800b220:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	3305      	adds	r3, #5
 800b226:	7819      	ldrb	r1, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3305      	adds	r3, #5
 800b22c:	781a      	ldrb	r2, [r3, #0]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3305      	adds	r3, #5
 800b232:	404a      	eors	r2, r1
 800b234:	b2d2      	uxtb	r2, r2
 800b236:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	3306      	adds	r3, #6
 800b23c:	7819      	ldrb	r1, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3306      	adds	r3, #6
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3306      	adds	r3, #6
 800b248:	404a      	eors	r2, r1
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	3307      	adds	r3, #7
 800b252:	7819      	ldrb	r1, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3307      	adds	r3, #7
 800b258:	781a      	ldrb	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3307      	adds	r3, #7
 800b25e:	404a      	eors	r2, r1
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	3308      	adds	r3, #8
 800b268:	7819      	ldrb	r1, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3308      	adds	r3, #8
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3308      	adds	r3, #8
 800b274:	404a      	eors	r2, r1
 800b276:	b2d2      	uxtb	r2, r2
 800b278:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	3309      	adds	r3, #9
 800b27e:	7819      	ldrb	r1, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3309      	adds	r3, #9
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3309      	adds	r3, #9
 800b28a:	404a      	eors	r2, r1
 800b28c:	b2d2      	uxtb	r2, r2
 800b28e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	330a      	adds	r3, #10
 800b294:	7819      	ldrb	r1, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	330a      	adds	r3, #10
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	330a      	adds	r3, #10
 800b2a0:	404a      	eors	r2, r1
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	330b      	adds	r3, #11
 800b2aa:	7819      	ldrb	r1, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	330b      	adds	r3, #11
 800b2b0:	781a      	ldrb	r2, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	330b      	adds	r3, #11
 800b2b6:	404a      	eors	r2, r1
 800b2b8:	b2d2      	uxtb	r2, r2
 800b2ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	330c      	adds	r3, #12
 800b2c0:	7819      	ldrb	r1, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	781a      	ldrb	r2, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	330c      	adds	r3, #12
 800b2cc:	404a      	eors	r2, r1
 800b2ce:	b2d2      	uxtb	r2, r2
 800b2d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	330d      	adds	r3, #13
 800b2d6:	7819      	ldrb	r1, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	330d      	adds	r3, #13
 800b2dc:	781a      	ldrb	r2, [r3, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	330d      	adds	r3, #13
 800b2e2:	404a      	eors	r2, r1
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	330e      	adds	r3, #14
 800b2ec:	7819      	ldrb	r1, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	330e      	adds	r3, #14
 800b2f2:	781a      	ldrb	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	330e      	adds	r3, #14
 800b2f8:	404a      	eors	r2, r1
 800b2fa:	b2d2      	uxtb	r2, r2
 800b2fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	330f      	adds	r3, #15
 800b302:	7819      	ldrb	r1, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	330f      	adds	r3, #15
 800b308:	781a      	ldrb	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	330f      	adds	r3, #15
 800b30e:	404a      	eors	r2, r1
 800b310:	b2d2      	uxtb	r2, r2
 800b312:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	bc80      	pop	{r7}
 800b31c:	4770      	bx	lr

0800b31e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff fe88 	bl	800b040 <xor_block>
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	4b48      	ldr	r3, [pc, #288]	; (800b468 <shift_sub_rows+0x130>)
 800b348:	5c9a      	ldrb	r2, [r3, r2]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3304      	adds	r3, #4
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	4619      	mov	r1, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	3304      	adds	r3, #4
 800b35a:	4a43      	ldr	r2, [pc, #268]	; (800b468 <shift_sub_rows+0x130>)
 800b35c:	5c52      	ldrb	r2, [r2, r1]
 800b35e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3308      	adds	r3, #8
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	4619      	mov	r1, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3308      	adds	r3, #8
 800b36c:	4a3e      	ldr	r2, [pc, #248]	; (800b468 <shift_sub_rows+0x130>)
 800b36e:	5c52      	ldrb	r2, [r2, r1]
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	330c      	adds	r3, #12
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	4619      	mov	r1, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	330c      	adds	r3, #12
 800b37e:	4a3a      	ldr	r2, [pc, #232]	; (800b468 <shift_sub_rows+0x130>)
 800b380:	5c52      	ldrb	r2, [r2, r1]
 800b382:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	73fb      	strb	r3, [r7, #15]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3305      	adds	r3, #5
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	4619      	mov	r1, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3301      	adds	r3, #1
 800b396:	4a34      	ldr	r2, [pc, #208]	; (800b468 <shift_sub_rows+0x130>)
 800b398:	5c52      	ldrb	r2, [r2, r1]
 800b39a:	701a      	strb	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3309      	adds	r3, #9
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3305      	adds	r3, #5
 800b3a8:	4a2f      	ldr	r2, [pc, #188]	; (800b468 <shift_sub_rows+0x130>)
 800b3aa:	5c52      	ldrb	r2, [r2, r1]
 800b3ac:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	330d      	adds	r3, #13
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3309      	adds	r3, #9
 800b3ba:	4a2b      	ldr	r2, [pc, #172]	; (800b468 <shift_sub_rows+0x130>)
 800b3bc:	5c52      	ldrb	r2, [r2, r1]
 800b3be:	701a      	strb	r2, [r3, #0]
 800b3c0:	7bfa      	ldrb	r2, [r7, #15]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	330d      	adds	r3, #13
 800b3c6:	4928      	ldr	r1, [pc, #160]	; (800b468 <shift_sub_rows+0x130>)
 800b3c8:	5c8a      	ldrb	r2, [r1, r2]
 800b3ca:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	789b      	ldrb	r3, [r3, #2]
 800b3d0:	73fb      	strb	r3, [r7, #15]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	330a      	adds	r3, #10
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3302      	adds	r3, #2
 800b3de:	4a22      	ldr	r2, [pc, #136]	; (800b468 <shift_sub_rows+0x130>)
 800b3e0:	5c52      	ldrb	r2, [r2, r1]
 800b3e2:	701a      	strb	r2, [r3, #0]
 800b3e4:	7bfa      	ldrb	r2, [r7, #15]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	330a      	adds	r3, #10
 800b3ea:	491f      	ldr	r1, [pc, #124]	; (800b468 <shift_sub_rows+0x130>)
 800b3ec:	5c8a      	ldrb	r2, [r1, r2]
 800b3ee:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	799b      	ldrb	r3, [r3, #6]
 800b3f4:	73fb      	strb	r3, [r7, #15]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	330e      	adds	r3, #14
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3306      	adds	r3, #6
 800b402:	4a19      	ldr	r2, [pc, #100]	; (800b468 <shift_sub_rows+0x130>)
 800b404:	5c52      	ldrb	r2, [r2, r1]
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	7bfa      	ldrb	r2, [r7, #15]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	330e      	adds	r3, #14
 800b40e:	4916      	ldr	r1, [pc, #88]	; (800b468 <shift_sub_rows+0x130>)
 800b410:	5c8a      	ldrb	r2, [r1, r2]
 800b412:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7bdb      	ldrb	r3, [r3, #15]
 800b418:	73fb      	strb	r3, [r7, #15]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	330b      	adds	r3, #11
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	4619      	mov	r1, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	330f      	adds	r3, #15
 800b426:	4a10      	ldr	r2, [pc, #64]	; (800b468 <shift_sub_rows+0x130>)
 800b428:	5c52      	ldrb	r2, [r2, r1]
 800b42a:	701a      	strb	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3307      	adds	r3, #7
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	4619      	mov	r1, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	330b      	adds	r3, #11
 800b438:	4a0b      	ldr	r2, [pc, #44]	; (800b468 <shift_sub_rows+0x130>)
 800b43a:	5c52      	ldrb	r2, [r2, r1]
 800b43c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3303      	adds	r3, #3
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	4619      	mov	r1, r3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3307      	adds	r3, #7
 800b44a:	4a07      	ldr	r2, [pc, #28]	; (800b468 <shift_sub_rows+0x130>)
 800b44c:	5c52      	ldrb	r2, [r2, r1]
 800b44e:	701a      	strb	r2, [r3, #0]
 800b450:	7bfa      	ldrb	r2, [r7, #15]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3303      	adds	r3, #3
 800b456:	4904      	ldr	r1, [pc, #16]	; (800b468 <shift_sub_rows+0x130>)
 800b458:	5c8a      	ldrb	r2, [r1, r2]
 800b45a:	701a      	strb	r2, [r3, #0]
}
 800b45c:	bf00      	nop
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	0801dd08 	.word	0x0801dd08

0800b46c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b474:	f107 0308 	add.w	r3, r7, #8
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7ff fd6c 	bl	800af58 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b480:	7a3b      	ldrb	r3, [r7, #8]
 800b482:	461a      	mov	r2, r3
 800b484:	4b9a      	ldr	r3, [pc, #616]	; (800b6f0 <mix_sub_columns+0x284>)
 800b486:	5c9a      	ldrb	r2, [r3, r2]
 800b488:	7b7b      	ldrb	r3, [r7, #13]
 800b48a:	4619      	mov	r1, r3
 800b48c:	4b99      	ldr	r3, [pc, #612]	; (800b6f4 <mix_sub_columns+0x288>)
 800b48e:	5c5b      	ldrb	r3, [r3, r1]
 800b490:	4053      	eors	r3, r2
 800b492:	b2da      	uxtb	r2, r3
 800b494:	7cbb      	ldrb	r3, [r7, #18]
 800b496:	4619      	mov	r1, r3
 800b498:	4b97      	ldr	r3, [pc, #604]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b49a:	5c5b      	ldrb	r3, [r3, r1]
 800b49c:	4053      	eors	r3, r2
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4b94      	ldr	r3, [pc, #592]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b4a6:	5c5b      	ldrb	r3, [r3, r1]
 800b4a8:	4053      	eors	r3, r2
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b4b0:	7a3b      	ldrb	r3, [r7, #8]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	4b90      	ldr	r3, [pc, #576]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b4b6:	5c9a      	ldrb	r2, [r3, r2]
 800b4b8:	7b7b      	ldrb	r3, [r7, #13]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4b8c      	ldr	r3, [pc, #560]	; (800b6f0 <mix_sub_columns+0x284>)
 800b4be:	5c5b      	ldrb	r3, [r3, r1]
 800b4c0:	4053      	eors	r3, r2
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	7cbb      	ldrb	r3, [r7, #18]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4b8a      	ldr	r3, [pc, #552]	; (800b6f4 <mix_sub_columns+0x288>)
 800b4ca:	5c5b      	ldrb	r3, [r3, r1]
 800b4cc:	4053      	eors	r3, r2
 800b4ce:	b2d9      	uxtb	r1, r3
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	4b88      	ldr	r3, [pc, #544]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b4d6:	5c9a      	ldrb	r2, [r3, r2]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	404a      	eors	r2, r1
 800b4de:	b2d2      	uxtb	r2, r2
 800b4e0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b4e2:	7a3b      	ldrb	r3, [r7, #8]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	4b84      	ldr	r3, [pc, #528]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b4e8:	5c9a      	ldrb	r2, [r3, r2]
 800b4ea:	7b7b      	ldrb	r3, [r7, #13]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4b82      	ldr	r3, [pc, #520]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b4f0:	5c5b      	ldrb	r3, [r3, r1]
 800b4f2:	4053      	eors	r3, r2
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	7cbb      	ldrb	r3, [r7, #18]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	4b7d      	ldr	r3, [pc, #500]	; (800b6f0 <mix_sub_columns+0x284>)
 800b4fc:	5c5b      	ldrb	r3, [r3, r1]
 800b4fe:	4053      	eors	r3, r2
 800b500:	b2d9      	uxtb	r1, r3
 800b502:	7dfb      	ldrb	r3, [r7, #23]
 800b504:	461a      	mov	r2, r3
 800b506:	4b7b      	ldr	r3, [pc, #492]	; (800b6f4 <mix_sub_columns+0x288>)
 800b508:	5c9a      	ldrb	r2, [r3, r2]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3302      	adds	r3, #2
 800b50e:	404a      	eors	r2, r1
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b514:	7a3b      	ldrb	r3, [r7, #8]
 800b516:	461a      	mov	r2, r3
 800b518:	4b76      	ldr	r3, [pc, #472]	; (800b6f4 <mix_sub_columns+0x288>)
 800b51a:	5c9a      	ldrb	r2, [r3, r2]
 800b51c:	7b7b      	ldrb	r3, [r7, #13]
 800b51e:	4619      	mov	r1, r3
 800b520:	4b75      	ldr	r3, [pc, #468]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b522:	5c5b      	ldrb	r3, [r3, r1]
 800b524:	4053      	eors	r3, r2
 800b526:	b2da      	uxtb	r2, r3
 800b528:	7cbb      	ldrb	r3, [r7, #18]
 800b52a:	4619      	mov	r1, r3
 800b52c:	4b72      	ldr	r3, [pc, #456]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b52e:	5c5b      	ldrb	r3, [r3, r1]
 800b530:	4053      	eors	r3, r2
 800b532:	b2d9      	uxtb	r1, r3
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	461a      	mov	r2, r3
 800b538:	4b6d      	ldr	r3, [pc, #436]	; (800b6f0 <mix_sub_columns+0x284>)
 800b53a:	5c9a      	ldrb	r2, [r3, r2]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	3303      	adds	r3, #3
 800b540:	404a      	eors	r2, r1
 800b542:	b2d2      	uxtb	r2, r2
 800b544:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b546:	7b3b      	ldrb	r3, [r7, #12]
 800b548:	461a      	mov	r2, r3
 800b54a:	4b69      	ldr	r3, [pc, #420]	; (800b6f0 <mix_sub_columns+0x284>)
 800b54c:	5c9a      	ldrb	r2, [r3, r2]
 800b54e:	7c7b      	ldrb	r3, [r7, #17]
 800b550:	4619      	mov	r1, r3
 800b552:	4b68      	ldr	r3, [pc, #416]	; (800b6f4 <mix_sub_columns+0x288>)
 800b554:	5c5b      	ldrb	r3, [r3, r1]
 800b556:	4053      	eors	r3, r2
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	7dbb      	ldrb	r3, [r7, #22]
 800b55c:	4619      	mov	r1, r3
 800b55e:	4b66      	ldr	r3, [pc, #408]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b560:	5c5b      	ldrb	r3, [r3, r1]
 800b562:	4053      	eors	r3, r2
 800b564:	b2d9      	uxtb	r1, r3
 800b566:	7afb      	ldrb	r3, [r7, #11]
 800b568:	461a      	mov	r2, r3
 800b56a:	4b63      	ldr	r3, [pc, #396]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b56c:	5c9a      	ldrb	r2, [r3, r2]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3304      	adds	r3, #4
 800b572:	404a      	eors	r2, r1
 800b574:	b2d2      	uxtb	r2, r2
 800b576:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b578:	7b3b      	ldrb	r3, [r7, #12]
 800b57a:	461a      	mov	r2, r3
 800b57c:	4b5e      	ldr	r3, [pc, #376]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b57e:	5c9a      	ldrb	r2, [r3, r2]
 800b580:	7c7b      	ldrb	r3, [r7, #17]
 800b582:	4619      	mov	r1, r3
 800b584:	4b5a      	ldr	r3, [pc, #360]	; (800b6f0 <mix_sub_columns+0x284>)
 800b586:	5c5b      	ldrb	r3, [r3, r1]
 800b588:	4053      	eors	r3, r2
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	7dbb      	ldrb	r3, [r7, #22]
 800b58e:	4619      	mov	r1, r3
 800b590:	4b58      	ldr	r3, [pc, #352]	; (800b6f4 <mix_sub_columns+0x288>)
 800b592:	5c5b      	ldrb	r3, [r3, r1]
 800b594:	4053      	eors	r3, r2
 800b596:	b2d9      	uxtb	r1, r3
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	461a      	mov	r2, r3
 800b59c:	4b56      	ldr	r3, [pc, #344]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b59e:	5c9a      	ldrb	r2, [r3, r2]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3305      	adds	r3, #5
 800b5a4:	404a      	eors	r2, r1
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b5aa:	7b3b      	ldrb	r3, [r7, #12]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4b52      	ldr	r3, [pc, #328]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b5b0:	5c9a      	ldrb	r2, [r3, r2]
 800b5b2:	7c7b      	ldrb	r3, [r7, #17]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4b50      	ldr	r3, [pc, #320]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b5b8:	5c5b      	ldrb	r3, [r3, r1]
 800b5ba:	4053      	eors	r3, r2
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	7dbb      	ldrb	r3, [r7, #22]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4b4b      	ldr	r3, [pc, #300]	; (800b6f0 <mix_sub_columns+0x284>)
 800b5c4:	5c5b      	ldrb	r3, [r3, r1]
 800b5c6:	4053      	eors	r3, r2
 800b5c8:	b2d9      	uxtb	r1, r3
 800b5ca:	7afb      	ldrb	r3, [r7, #11]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	4b49      	ldr	r3, [pc, #292]	; (800b6f4 <mix_sub_columns+0x288>)
 800b5d0:	5c9a      	ldrb	r2, [r3, r2]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3306      	adds	r3, #6
 800b5d6:	404a      	eors	r2, r1
 800b5d8:	b2d2      	uxtb	r2, r2
 800b5da:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b5dc:	7b3b      	ldrb	r3, [r7, #12]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4b44      	ldr	r3, [pc, #272]	; (800b6f4 <mix_sub_columns+0x288>)
 800b5e2:	5c9a      	ldrb	r2, [r3, r2]
 800b5e4:	7c7b      	ldrb	r3, [r7, #17]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4b43      	ldr	r3, [pc, #268]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b5ea:	5c5b      	ldrb	r3, [r3, r1]
 800b5ec:	4053      	eors	r3, r2
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	7dbb      	ldrb	r3, [r7, #22]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4b40      	ldr	r3, [pc, #256]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b5f6:	5c5b      	ldrb	r3, [r3, r1]
 800b5f8:	4053      	eors	r3, r2
 800b5fa:	b2d9      	uxtb	r1, r3
 800b5fc:	7afb      	ldrb	r3, [r7, #11]
 800b5fe:	461a      	mov	r2, r3
 800b600:	4b3b      	ldr	r3, [pc, #236]	; (800b6f0 <mix_sub_columns+0x284>)
 800b602:	5c9a      	ldrb	r2, [r3, r2]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3307      	adds	r3, #7
 800b608:	404a      	eors	r2, r1
 800b60a:	b2d2      	uxtb	r2, r2
 800b60c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b60e:	7c3b      	ldrb	r3, [r7, #16]
 800b610:	461a      	mov	r2, r3
 800b612:	4b37      	ldr	r3, [pc, #220]	; (800b6f0 <mix_sub_columns+0x284>)
 800b614:	5c9a      	ldrb	r2, [r3, r2]
 800b616:	7d7b      	ldrb	r3, [r7, #21]
 800b618:	4619      	mov	r1, r3
 800b61a:	4b36      	ldr	r3, [pc, #216]	; (800b6f4 <mix_sub_columns+0x288>)
 800b61c:	5c5b      	ldrb	r3, [r3, r1]
 800b61e:	4053      	eors	r3, r2
 800b620:	b2da      	uxtb	r2, r3
 800b622:	7abb      	ldrb	r3, [r7, #10]
 800b624:	4619      	mov	r1, r3
 800b626:	4b34      	ldr	r3, [pc, #208]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b628:	5c5b      	ldrb	r3, [r3, r1]
 800b62a:	4053      	eors	r3, r2
 800b62c:	b2d9      	uxtb	r1, r3
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	461a      	mov	r2, r3
 800b632:	4b31      	ldr	r3, [pc, #196]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b634:	5c9a      	ldrb	r2, [r3, r2]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3308      	adds	r3, #8
 800b63a:	404a      	eors	r2, r1
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b640:	7c3b      	ldrb	r3, [r7, #16]
 800b642:	461a      	mov	r2, r3
 800b644:	4b2c      	ldr	r3, [pc, #176]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b646:	5c9a      	ldrb	r2, [r3, r2]
 800b648:	7d7b      	ldrb	r3, [r7, #21]
 800b64a:	4619      	mov	r1, r3
 800b64c:	4b28      	ldr	r3, [pc, #160]	; (800b6f0 <mix_sub_columns+0x284>)
 800b64e:	5c5b      	ldrb	r3, [r3, r1]
 800b650:	4053      	eors	r3, r2
 800b652:	b2da      	uxtb	r2, r3
 800b654:	7abb      	ldrb	r3, [r7, #10]
 800b656:	4619      	mov	r1, r3
 800b658:	4b26      	ldr	r3, [pc, #152]	; (800b6f4 <mix_sub_columns+0x288>)
 800b65a:	5c5b      	ldrb	r3, [r3, r1]
 800b65c:	4053      	eors	r3, r2
 800b65e:	b2d9      	uxtb	r1, r3
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	461a      	mov	r2, r3
 800b664:	4b24      	ldr	r3, [pc, #144]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b666:	5c9a      	ldrb	r2, [r3, r2]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3309      	adds	r3, #9
 800b66c:	404a      	eors	r2, r1
 800b66e:	b2d2      	uxtb	r2, r2
 800b670:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b672:	7c3b      	ldrb	r3, [r7, #16]
 800b674:	461a      	mov	r2, r3
 800b676:	4b20      	ldr	r3, [pc, #128]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b678:	5c9a      	ldrb	r2, [r3, r2]
 800b67a:	7d7b      	ldrb	r3, [r7, #21]
 800b67c:	4619      	mov	r1, r3
 800b67e:	4b1e      	ldr	r3, [pc, #120]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b680:	5c5b      	ldrb	r3, [r3, r1]
 800b682:	4053      	eors	r3, r2
 800b684:	b2da      	uxtb	r2, r3
 800b686:	7abb      	ldrb	r3, [r7, #10]
 800b688:	4619      	mov	r1, r3
 800b68a:	4b19      	ldr	r3, [pc, #100]	; (800b6f0 <mix_sub_columns+0x284>)
 800b68c:	5c5b      	ldrb	r3, [r3, r1]
 800b68e:	4053      	eors	r3, r2
 800b690:	b2d9      	uxtb	r1, r3
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	461a      	mov	r2, r3
 800b696:	4b17      	ldr	r3, [pc, #92]	; (800b6f4 <mix_sub_columns+0x288>)
 800b698:	5c9a      	ldrb	r2, [r3, r2]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	330a      	adds	r3, #10
 800b69e:	404a      	eors	r2, r1
 800b6a0:	b2d2      	uxtb	r2, r2
 800b6a2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b6a4:	7c3b      	ldrb	r3, [r7, #16]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	4b12      	ldr	r3, [pc, #72]	; (800b6f4 <mix_sub_columns+0x288>)
 800b6aa:	5c9a      	ldrb	r2, [r3, r2]
 800b6ac:	7d7b      	ldrb	r3, [r7, #21]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4b11      	ldr	r3, [pc, #68]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b6b2:	5c5b      	ldrb	r3, [r3, r1]
 800b6b4:	4053      	eors	r3, r2
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	7abb      	ldrb	r3, [r7, #10]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4b0e      	ldr	r3, [pc, #56]	; (800b6f8 <mix_sub_columns+0x28c>)
 800b6be:	5c5b      	ldrb	r3, [r3, r1]
 800b6c0:	4053      	eors	r3, r2
 800b6c2:	b2d9      	uxtb	r1, r3
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	4b09      	ldr	r3, [pc, #36]	; (800b6f0 <mix_sub_columns+0x284>)
 800b6ca:	5c9a      	ldrb	r2, [r3, r2]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	330b      	adds	r3, #11
 800b6d0:	404a      	eors	r2, r1
 800b6d2:	b2d2      	uxtb	r2, r2
 800b6d4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b6d6:	7d3b      	ldrb	r3, [r7, #20]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <mix_sub_columns+0x284>)
 800b6dc:	5c9a      	ldrb	r2, [r3, r2]
 800b6de:	7a7b      	ldrb	r3, [r7, #9]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <mix_sub_columns+0x288>)
 800b6e4:	5c5b      	ldrb	r3, [r3, r1]
 800b6e6:	4053      	eors	r3, r2
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	e005      	b.n	800b6fc <mix_sub_columns+0x290>
 800b6f0:	0801de08 	.word	0x0801de08
 800b6f4:	0801df08 	.word	0x0801df08
 800b6f8:	0801dd08 	.word	0x0801dd08
 800b6fc:	4b2d      	ldr	r3, [pc, #180]	; (800b7b4 <mix_sub_columns+0x348>)
 800b6fe:	5c5b      	ldrb	r3, [r3, r1]
 800b700:	4053      	eors	r3, r2
 800b702:	b2d9      	uxtb	r1, r3
 800b704:	7cfb      	ldrb	r3, [r7, #19]
 800b706:	461a      	mov	r2, r3
 800b708:	4b2a      	ldr	r3, [pc, #168]	; (800b7b4 <mix_sub_columns+0x348>)
 800b70a:	5c9a      	ldrb	r2, [r3, r2]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	330c      	adds	r3, #12
 800b710:	404a      	eors	r2, r1
 800b712:	b2d2      	uxtb	r2, r2
 800b714:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b716:	7d3b      	ldrb	r3, [r7, #20]
 800b718:	461a      	mov	r2, r3
 800b71a:	4b26      	ldr	r3, [pc, #152]	; (800b7b4 <mix_sub_columns+0x348>)
 800b71c:	5c9a      	ldrb	r2, [r3, r2]
 800b71e:	7a7b      	ldrb	r3, [r7, #9]
 800b720:	4619      	mov	r1, r3
 800b722:	4b25      	ldr	r3, [pc, #148]	; (800b7b8 <mix_sub_columns+0x34c>)
 800b724:	5c5b      	ldrb	r3, [r3, r1]
 800b726:	4053      	eors	r3, r2
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	4619      	mov	r1, r3
 800b72e:	4b23      	ldr	r3, [pc, #140]	; (800b7bc <mix_sub_columns+0x350>)
 800b730:	5c5b      	ldrb	r3, [r3, r1]
 800b732:	4053      	eors	r3, r2
 800b734:	b2d9      	uxtb	r1, r3
 800b736:	7cfb      	ldrb	r3, [r7, #19]
 800b738:	461a      	mov	r2, r3
 800b73a:	4b1e      	ldr	r3, [pc, #120]	; (800b7b4 <mix_sub_columns+0x348>)
 800b73c:	5c9a      	ldrb	r2, [r3, r2]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	330d      	adds	r3, #13
 800b742:	404a      	eors	r2, r1
 800b744:	b2d2      	uxtb	r2, r2
 800b746:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b748:	7d3b      	ldrb	r3, [r7, #20]
 800b74a:	461a      	mov	r2, r3
 800b74c:	4b19      	ldr	r3, [pc, #100]	; (800b7b4 <mix_sub_columns+0x348>)
 800b74e:	5c9a      	ldrb	r2, [r3, r2]
 800b750:	7a7b      	ldrb	r3, [r7, #9]
 800b752:	4619      	mov	r1, r3
 800b754:	4b17      	ldr	r3, [pc, #92]	; (800b7b4 <mix_sub_columns+0x348>)
 800b756:	5c5b      	ldrb	r3, [r3, r1]
 800b758:	4053      	eors	r3, r2
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	4619      	mov	r1, r3
 800b760:	4b15      	ldr	r3, [pc, #84]	; (800b7b8 <mix_sub_columns+0x34c>)
 800b762:	5c5b      	ldrb	r3, [r3, r1]
 800b764:	4053      	eors	r3, r2
 800b766:	b2d9      	uxtb	r1, r3
 800b768:	7cfb      	ldrb	r3, [r7, #19]
 800b76a:	461a      	mov	r2, r3
 800b76c:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <mix_sub_columns+0x350>)
 800b76e:	5c9a      	ldrb	r2, [r3, r2]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	330e      	adds	r3, #14
 800b774:	404a      	eors	r2, r1
 800b776:	b2d2      	uxtb	r2, r2
 800b778:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b77a:	7d3b      	ldrb	r3, [r7, #20]
 800b77c:	461a      	mov	r2, r3
 800b77e:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <mix_sub_columns+0x350>)
 800b780:	5c9a      	ldrb	r2, [r3, r2]
 800b782:	7a7b      	ldrb	r3, [r7, #9]
 800b784:	4619      	mov	r1, r3
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <mix_sub_columns+0x348>)
 800b788:	5c5b      	ldrb	r3, [r3, r1]
 800b78a:	4053      	eors	r3, r2
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	7bbb      	ldrb	r3, [r7, #14]
 800b790:	4619      	mov	r1, r3
 800b792:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <mix_sub_columns+0x348>)
 800b794:	5c5b      	ldrb	r3, [r3, r1]
 800b796:	4053      	eors	r3, r2
 800b798:	b2d9      	uxtb	r1, r3
 800b79a:	7cfb      	ldrb	r3, [r7, #19]
 800b79c:	461a      	mov	r2, r3
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <mix_sub_columns+0x34c>)
 800b7a0:	5c9a      	ldrb	r2, [r3, r2]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	330f      	adds	r3, #15
 800b7a6:	404a      	eors	r2, r1
 800b7a8:	b2d2      	uxtb	r2, r2
 800b7aa:	701a      	strb	r2, [r3, #0]
  }
 800b7ac:	bf00      	nop
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	0801dd08 	.word	0x0801dd08
 800b7b8:	0801de08 	.word	0x0801de08
 800b7bc:	0801df08 	.word	0x0801df08

0800b7c0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b7ce:	7afb      	ldrb	r3, [r7, #11]
 800b7d0:	3b10      	subs	r3, #16
 800b7d2:	2b10      	cmp	r3, #16
 800b7d4:	bf8c      	ite	hi
 800b7d6:	2201      	movhi	r2, #1
 800b7d8:	2200      	movls	r2, #0
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	d10d      	bne.n	800b7fc <lorawan_aes_set_key+0x3c>
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b7ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	bf14      	ite	ne
 800b7f2:	2301      	movne	r3, #1
 800b7f4:	2300      	moveq	r3, #0
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d105      	bne.n	800b808 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b804:	23ff      	movs	r3, #255	; 0xff
 800b806:	e0b2      	b.n	800b96e <lorawan_aes_set_key+0x1ae>
        break;
 800b808:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	7afa      	ldrb	r2, [r7, #11]
 800b80e:	68f9      	ldr	r1, [r7, #12]
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff fbfa 	bl	800b00a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b816:	7afb      	ldrb	r3, [r7, #11]
 800b818:	331c      	adds	r3, #28
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b820:	7c7b      	ldrb	r3, [r7, #17]
 800b822:	091b      	lsrs	r3, r3, #4
 800b824:	b2db      	uxtb	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	75fb      	strb	r3, [r7, #23]
 800b834:	2301      	movs	r3, #1
 800b836:	75bb      	strb	r3, [r7, #22]
 800b838:	e093      	b.n	800b962 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	3b04      	subs	r3, #4
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	5cd3      	ldrb	r3, [r2, r3]
 800b842:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b844:	7dfb      	ldrb	r3, [r7, #23]
 800b846:	3b03      	subs	r3, #3
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	5cd3      	ldrb	r3, [r2, r3]
 800b84c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	3b02      	subs	r3, #2
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	5cd3      	ldrb	r3, [r2, r3]
 800b856:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	5cd3      	ldrb	r3, [r2, r3]
 800b860:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	7afa      	ldrb	r2, [r7, #11]
 800b866:	fbb3 f1f2 	udiv	r1, r3, r2
 800b86a:	fb01 f202 	mul.w	r2, r1, r2
 800b86e:	1a9b      	subs	r3, r3, r2
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d127      	bne.n	800b8c6 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b876:	7d7b      	ldrb	r3, [r7, #21]
 800b878:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b87a:	7d3b      	ldrb	r3, [r7, #20]
 800b87c:	4a3e      	ldr	r2, [pc, #248]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b87e:	5cd2      	ldrb	r2, [r2, r3]
 800b880:	7dbb      	ldrb	r3, [r7, #22]
 800b882:	4053      	eors	r3, r2
 800b884:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b886:	7cfb      	ldrb	r3, [r7, #19]
 800b888:	4a3b      	ldr	r2, [pc, #236]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b88a:	5cd3      	ldrb	r3, [r2, r3]
 800b88c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b88e:	7cbb      	ldrb	r3, [r7, #18]
 800b890:	4a39      	ldr	r2, [pc, #228]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b892:	5cd3      	ldrb	r3, [r2, r3]
 800b894:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b896:	7c3b      	ldrb	r3, [r7, #16]
 800b898:	4a37      	ldr	r2, [pc, #220]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b89a:	5cd3      	ldrb	r3, [r2, r3]
 800b89c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b89e:	7dbb      	ldrb	r3, [r7, #22]
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	b25a      	sxtb	r2, r3
 800b8a4:	7dbb      	ldrb	r3, [r7, #22]
 800b8a6:	09db      	lsrs	r3, r3, #7
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	0049      	lsls	r1, r1, #1
 800b8ae:	440b      	add	r3, r1
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	00c8      	lsls	r0, r1, #3
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	440b      	add	r3, r1
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	b25b      	sxtb	r3, r3
 800b8be:	4053      	eors	r3, r2
 800b8c0:	b25b      	sxtb	r3, r3
 800b8c2:	75bb      	strb	r3, [r7, #22]
 800b8c4:	e01c      	b.n	800b900 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b8c6:	7afb      	ldrb	r3, [r7, #11]
 800b8c8:	2b18      	cmp	r3, #24
 800b8ca:	d919      	bls.n	800b900 <lorawan_aes_set_key+0x140>
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	7afa      	ldrb	r2, [r7, #11]
 800b8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8d4:	fb01 f202 	mul.w	r2, r1, r2
 800b8d8:	1a9b      	subs	r3, r3, r2
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b10      	cmp	r3, #16
 800b8de:	d10f      	bne.n	800b900 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b8e0:	7d7b      	ldrb	r3, [r7, #21]
 800b8e2:	4a25      	ldr	r2, [pc, #148]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b8e4:	5cd3      	ldrb	r3, [r2, r3]
 800b8e6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b8e8:	7d3b      	ldrb	r3, [r7, #20]
 800b8ea:	4a23      	ldr	r2, [pc, #140]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b8ec:	5cd3      	ldrb	r3, [r2, r3]
 800b8ee:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b8f0:	7cfb      	ldrb	r3, [r7, #19]
 800b8f2:	4a21      	ldr	r2, [pc, #132]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b8f4:	5cd3      	ldrb	r3, [r2, r3]
 800b8f6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b8f8:	7cbb      	ldrb	r3, [r7, #18]
 800b8fa:	4a1f      	ldr	r2, [pc, #124]	; (800b978 <lorawan_aes_set_key+0x1b8>)
 800b8fc:	5cd3      	ldrb	r3, [r2, r3]
 800b8fe:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b900:	7dfa      	ldrb	r2, [r7, #23]
 800b902:	7afb      	ldrb	r3, [r7, #11]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b908:	7c3b      	ldrb	r3, [r7, #16]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	5cd1      	ldrb	r1, [r2, r3]
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
 800b910:	7d7a      	ldrb	r2, [r7, #21]
 800b912:	404a      	eors	r2, r1
 800b914:	b2d1      	uxtb	r1, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b91a:	7c3b      	ldrb	r3, [r7, #16]
 800b91c:	3301      	adds	r3, #1
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	5cd1      	ldrb	r1, [r2, r3]
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	3301      	adds	r3, #1
 800b926:	7d3a      	ldrb	r2, [r7, #20]
 800b928:	404a      	eors	r2, r1
 800b92a:	b2d1      	uxtb	r1, r2
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b930:	7c3b      	ldrb	r3, [r7, #16]
 800b932:	3302      	adds	r3, #2
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	5cd1      	ldrb	r1, [r2, r3]
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	3302      	adds	r3, #2
 800b93c:	7cfa      	ldrb	r2, [r7, #19]
 800b93e:	404a      	eors	r2, r1
 800b940:	b2d1      	uxtb	r1, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b946:	7c3b      	ldrb	r3, [r7, #16]
 800b948:	3303      	adds	r3, #3
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	5cd1      	ldrb	r1, [r2, r3]
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	3303      	adds	r3, #3
 800b952:	7cba      	ldrb	r2, [r7, #18]
 800b954:	404a      	eors	r2, r1
 800b956:	b2d1      	uxtb	r1, r2
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	3304      	adds	r3, #4
 800b960:	75fb      	strb	r3, [r7, #23]
 800b962:	7dfa      	ldrb	r2, [r7, #23]
 800b964:	7c7b      	ldrb	r3, [r7, #17]
 800b966:	429a      	cmp	r2, r3
 800b968:	f4ff af67 	bcc.w	800b83a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	0801dd08 	.word	0x0801dd08

0800b97c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08a      	sub	sp, #40	; 0x28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d038      	beq.n	800ba04 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	f107 0314 	add.w	r3, r7, #20
 800b998:	68f9      	ldr	r1, [r7, #12]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff fc07 	bl	800b1ae <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9a6:	e014      	b.n	800b9d2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b9a8:	f107 0314 	add.w	r3, r7, #20
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff fd5d 	bl	800b46c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9b8:	0112      	lsls	r2, r2, #4
 800b9ba:	441a      	add	r2, r3
 800b9bc:	f107 0314 	add.w	r3, r7, #20
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff fcab 	bl	800b31e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b9d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d3e3      	bcc.n	800b9a8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b9e0:	f107 0314 	add.w	r3, r7, #20
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff fca7 	bl	800b338 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9f0:	0112      	lsls	r2, r2, #4
 800b9f2:	441a      	add	r2, r3
 800b9f4:	f107 0314 	add.w	r3, r7, #20
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	68b8      	ldr	r0, [r7, #8]
 800b9fc:	f7ff fbd7 	bl	800b1ae <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	e000      	b.n	800ba06 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ba04:	23ff      	movs	r3, #255	; 0xff
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3728      	adds	r7, #40	; 0x28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800ba10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba12:	b09d      	sub	sp, #116	; 0x74
 800ba14:	af10      	add	r7, sp, #64	; 0x40
 800ba16:	4603      	mov	r3, r0
 800ba18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ba1c:	2306      	movs	r3, #6
 800ba1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ba22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ba26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 f9af 	bl	800bd90 <SecureElementGetKeyByID>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ba38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f040 80b0 	bne.w	800bba2 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800ba42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d106      	bne.n	800ba58 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800ba4a:	4b58      	ldr	r3, [pc, #352]	; (800bbac <PrintKey+0x19c>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2100      	movs	r1, #0
 800ba50:	2002      	movs	r0, #2
 800ba52:	f011 f8fd 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800ba56:	e056      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800ba58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d106      	bne.n	800ba6e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800ba60:	4b53      	ldr	r3, [pc, #332]	; (800bbb0 <PrintKey+0x1a0>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	2100      	movs	r1, #0
 800ba66:	2002      	movs	r0, #2
 800ba68:	f011 f8f2 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800ba6c:	e04b      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800ba6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d106      	bne.n	800ba84 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ba76:	4b4f      	ldr	r3, [pc, #316]	; (800bbb4 <PrintKey+0x1a4>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	2002      	movs	r0, #2
 800ba7e:	f011 f8e7 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800ba82:	e040      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ba84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d106      	bne.n	800ba9a <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ba8c:	4b4a      	ldr	r3, [pc, #296]	; (800bbb8 <PrintKey+0x1a8>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2100      	movs	r1, #0
 800ba92:	2002      	movs	r0, #2
 800ba94:	f011 f8dc 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800ba98:	e035      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ba9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d106      	bne.n	800bab0 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800baa2:	4b46      	ldr	r3, [pc, #280]	; (800bbbc <PrintKey+0x1ac>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	2100      	movs	r1, #0
 800baa8:	2002      	movs	r0, #2
 800baaa:	f011 f8d1 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800baae:	e02a      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab4:	2b7f      	cmp	r3, #127	; 0x7f
 800bab6:	d106      	bne.n	800bac6 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bab8:	4b41      	ldr	r3, [pc, #260]	; (800bbc0 <PrintKey+0x1b0>)
 800baba:	2200      	movs	r2, #0
 800babc:	2100      	movs	r1, #0
 800babe:	2002      	movs	r0, #2
 800bac0:	f011 f8c6 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800bac4:	e01f      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baca:	2b80      	cmp	r3, #128	; 0x80
 800bacc:	d106      	bne.n	800badc <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bace:	4b3d      	ldr	r3, [pc, #244]	; (800bbc4 <PrintKey+0x1b4>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	2100      	movs	r1, #0
 800bad4:	2002      	movs	r0, #2
 800bad6:	f011 f8bb 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800bada:	e014      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800badc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bae0:	2b81      	cmp	r3, #129	; 0x81
 800bae2:	d106      	bne.n	800baf2 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bae4:	4b38      	ldr	r3, [pc, #224]	; (800bbc8 <PrintKey+0x1b8>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	2100      	movs	r1, #0
 800baea:	2002      	movs	r0, #2
 800baec:	f011 f8b0 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 800baf0:	e009      	b.n	800bb06 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800baf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baf6:	2b82      	cmp	r3, #130	; 0x82
 800baf8:	d105      	bne.n	800bb06 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bafa:	4b34      	ldr	r3, [pc, #208]	; (800bbcc <PrintKey+0x1bc>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	2100      	movs	r1, #0
 800bb00:	2002      	movs	r0, #2
 800bb02:	f011 f8a5 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	785b      	ldrb	r3, [r3, #1]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	789b      	ldrb	r3, [r3, #2]
 800bb10:	461c      	mov	r4, r3
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	78db      	ldrb	r3, [r3, #3]
 800bb16:	461d      	mov	r5, r3
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	791b      	ldrb	r3, [r3, #4]
 800bb1c:	461e      	mov	r6, r3
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	795b      	ldrb	r3, [r3, #5]
 800bb22:	623b      	str	r3, [r7, #32]
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	799b      	ldrb	r3, [r3, #6]
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	79db      	ldrb	r3, [r3, #7]
 800bb2e:	61bb      	str	r3, [r7, #24]
 800bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb32:	7a1b      	ldrb	r3, [r3, #8]
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	7a5b      	ldrb	r3, [r3, #9]
 800bb3a:	613b      	str	r3, [r7, #16]
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	7a9b      	ldrb	r3, [r3, #10]
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	7adb      	ldrb	r3, [r3, #11]
 800bb46:	60bb      	str	r3, [r7, #8]
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	7b1b      	ldrb	r3, [r3, #12]
 800bb4c:	607b      	str	r3, [r7, #4]
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	7b5b      	ldrb	r3, [r3, #13]
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	7b9b      	ldrb	r3, [r3, #14]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5c:	7bdb      	ldrb	r3, [r3, #15]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb62:	7c1b      	ldrb	r3, [r3, #16]
 800bb64:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb66:	920e      	str	r2, [sp, #56]	; 0x38
 800bb68:	910d      	str	r1, [sp, #52]	; 0x34
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	920c      	str	r2, [sp, #48]	; 0x30
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	920a      	str	r2, [sp, #40]	; 0x28
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	9209      	str	r2, [sp, #36]	; 0x24
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	9208      	str	r2, [sp, #32]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	9207      	str	r2, [sp, #28]
 800bb82:	69ba      	ldr	r2, [r7, #24]
 800bb84:	9206      	str	r2, [sp, #24]
 800bb86:	69fa      	ldr	r2, [r7, #28]
 800bb88:	9205      	str	r2, [sp, #20]
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	9603      	str	r6, [sp, #12]
 800bb90:	9502      	str	r5, [sp, #8]
 800bb92:	9401      	str	r4, [sp, #4]
 800bb94:	9000      	str	r0, [sp, #0]
 800bb96:	4b0e      	ldr	r3, [pc, #56]	; (800bbd0 <PrintKey+0x1c0>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	2002      	movs	r0, #2
 800bb9e:	f011 f857 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800bba2:	bf00      	nop
 800bba4:	3734      	adds	r7, #52	; 0x34
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	0801d75c 	.word	0x0801d75c
 800bbb0:	0801d774 	.word	0x0801d774
 800bbb4:	0801d78c 	.word	0x0801d78c
 800bbb8:	0801d7a4 	.word	0x0801d7a4
 800bbbc:	0801d7bc 	.word	0x0801d7bc
 800bbc0:	0801d7d4 	.word	0x0801d7d4
 800bbc4:	0801d7ec 	.word	0x0801d7ec
 800bbc8:	0801d804 	.word	0x0801d804
 800bbcc:	0801d81c 	.word	0x0801d81c
 800bbd0:	0801d834 	.word	0x0801d834

0800bbd4 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
 800bbe4:	e01a      	b.n	800bc1c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bbe6:	4b12      	ldr	r3, [pc, #72]	; (800bc30 <GetKeyByID+0x5c>)
 800bbe8:	6819      	ldr	r1, [r3, #0]
 800bbea:	7bfa      	ldrb	r2, [r7, #15]
 800bbec:	4613      	mov	r3, r2
 800bbee:	011b      	lsls	r3, r3, #4
 800bbf0:	4413      	add	r3, r2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	3310      	adds	r3, #16
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	79fa      	ldrb	r2, [r7, #7]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d10b      	bne.n	800bc16 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <GetKeyByID+0x5c>)
 800bc00:	6819      	ldr	r1, [r3, #0]
 800bc02:	7bfa      	ldrb	r2, [r7, #15]
 800bc04:	4613      	mov	r3, r2
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	4413      	add	r3, r2
 800bc0a:	3310      	adds	r3, #16
 800bc0c:	18ca      	adds	r2, r1, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bc12:	2300      	movs	r3, #0
 800bc14:	e006      	b.n	800bc24 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	73fb      	strb	r3, [r7, #15]
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	2b09      	cmp	r3, #9
 800bc20:	d9e1      	bls.n	800bbe6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc22:	2303      	movs	r3, #3
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bc80      	pop	{r7}
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	20000560 	.word	0x20000560

0800bc34 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bc34:	b590      	push	{r4, r7, lr}
 800bc36:	b0d1      	sub	sp, #324	; 0x144
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800bc3e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800bc42:	6020      	str	r0, [r4, #0]
 800bc44:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800bc48:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800bc4c:	6001      	str	r1, [r0, #0]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc54:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bc58:	801a      	strh	r2, [r3, #0]
 800bc5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc5e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800bc62:	460a      	mov	r2, r1
 800bc64:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bc66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <ComputeCmac+0x48>
 800bc74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d101      	bne.n	800bc80 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e05c      	b.n	800bd3a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bc80:	f107 0314 	add.w	r3, r7, #20
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fe ff1b 	bl	800aac0 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bc8a:	f107 0210 	add.w	r2, r7, #16
 800bc8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc92:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	4611      	mov	r1, r2
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff ff9a 	bl	800bbd4 <GetKeyByID>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bca6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d143      	bne.n	800bd36 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bcae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	f107 0314 	add.w	r3, r7, #20
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe ff16 	bl	800aaf2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bcc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bcd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcd8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bcdc:	f107 0014 	add.w	r0, r7, #20
 800bce0:	2210      	movs	r2, #16
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	f7fe ff14 	bl	800ab10 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bce8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcec:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bcf0:	881a      	ldrh	r2, [r3, #0]
 800bcf2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bcfa:	f107 0014 	add.w	r0, r7, #20
 800bcfe:	6819      	ldr	r1, [r3, #0]
 800bd00:	f7fe ff06 	bl	800ab10 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bd04:	f107 0214 	add.w	r2, r7, #20
 800bd08:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe ffc0 	bl	800ac94 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bd14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bd18:	061a      	lsls	r2, r3, #24
 800bd1a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bd1e:	041b      	lsls	r3, r3, #16
 800bd20:	431a      	orrs	r2, r3
 800bd22:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bd26:	021b      	lsls	r3, r3, #8
 800bd28:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bd2a:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bd34:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bd36:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd90      	pop	{r4, r7, pc}

0800bd44 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd54:	2302      	movs	r3, #2
 800bd56:	e013      	b.n	800bd80 <SecureElementInit+0x3c>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bd58:	4a0b      	ldr	r2, [pc, #44]	; (800bd88 <SecureElementInit+0x44>)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bd5e:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <SecureElementInit+0x44>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	22c0      	movs	r2, #192	; 0xc0
 800bd64:	4909      	ldr	r1, [pc, #36]	; (800bd8c <SecureElementInit+0x48>)
 800bd66:	4618      	mov	r0, r3
 800bd68:	f00c fc1d 	bl	80185a6 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d005      	beq.n	800bd7e <SecureElementInit+0x3a>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800bd72:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <SecureElementInit+0x44>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	4798      	blx	r3
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20000560 	.word	0x20000560
 800bd8c:	0801e21c 	.word	0x0801e21c

0800bd90 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
 800bda0:	e01a      	b.n	800bdd8 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bda2:	4b12      	ldr	r3, [pc, #72]	; (800bdec <SecureElementGetKeyByID+0x5c>)
 800bda4:	6819      	ldr	r1, [r3, #0]
 800bda6:	7bfa      	ldrb	r2, [r7, #15]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	011b      	lsls	r3, r3, #4
 800bdac:	4413      	add	r3, r2
 800bdae:	440b      	add	r3, r1
 800bdb0:	3310      	adds	r3, #16
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	79fa      	ldrb	r2, [r7, #7]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d10b      	bne.n	800bdd2 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bdba:	4b0c      	ldr	r3, [pc, #48]	; (800bdec <SecureElementGetKeyByID+0x5c>)
 800bdbc:	6819      	ldr	r1, [r3, #0]
 800bdbe:	7bfa      	ldrb	r2, [r7, #15]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	011b      	lsls	r3, r3, #4
 800bdc4:	4413      	add	r3, r2
 800bdc6:	3310      	adds	r3, #16
 800bdc8:	18ca      	adds	r2, r1, r3
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	e006      	b.n	800bde0 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	73fb      	strb	r3, [r7, #15]
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
 800bdda:	2b09      	cmp	r3, #9
 800bddc:	d9e1      	bls.n	800bda2 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bdde:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bc80      	pop	{r7}
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	20000560 	.word	0x20000560

0800bdf0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf2:	b08b      	sub	sp, #44	; 0x2c
 800bdf4:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bdf6:	4b3f      	ldr	r3, [pc, #252]	; (800bef4 <SecureElementPrintKeys+0x104>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	2002      	movs	r0, #2
 800bdfe:	f010 ff27 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800be02:	2000      	movs	r0, #0
 800be04:	f7ff fe04 	bl	800ba10 <PrintKey>
    PrintKey(NWK_KEY);
 800be08:	2001      	movs	r0, #1
 800be0a:	f7ff fe01 	bl	800ba10 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800be0e:	4b3a      	ldr	r3, [pc, #232]	; (800bef8 <SecureElementPrintKeys+0x108>)
 800be10:	2200      	movs	r2, #0
 800be12:	2100      	movs	r1, #0
 800be14:	2002      	movs	r0, #2
 800be16:	f010 ff1b 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800be1a:	2003      	movs	r0, #3
 800be1c:	f7ff fdf8 	bl	800ba10 <PrintKey>
    PrintKey(NWK_S_KEY);
 800be20:	2002      	movs	r0, #2
 800be22:	f7ff fdf5 	bl	800ba10 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800be26:	4b35      	ldr	r3, [pc, #212]	; (800befc <SecureElementPrintKeys+0x10c>)
 800be28:	2200      	movs	r2, #0
 800be2a:	2100      	movs	r1, #0
 800be2c:	2002      	movs	r0, #2
 800be2e:	f010 ff0f 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800be32:	4b33      	ldr	r3, [pc, #204]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	461a      	mov	r2, r3
 800be3a:	4b31      	ldr	r3, [pc, #196]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	785b      	ldrb	r3, [r3, #1]
 800be40:	4619      	mov	r1, r3
 800be42:	4b2f      	ldr	r3, [pc, #188]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	789b      	ldrb	r3, [r3, #2]
 800be48:	4618      	mov	r0, r3
 800be4a:	4b2d      	ldr	r3, [pc, #180]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	78db      	ldrb	r3, [r3, #3]
 800be50:	461c      	mov	r4, r3
 800be52:	4b2b      	ldr	r3, [pc, #172]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	791b      	ldrb	r3, [r3, #4]
 800be58:	461d      	mov	r5, r3
 800be5a:	4b29      	ldr	r3, [pc, #164]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	795b      	ldrb	r3, [r3, #5]
 800be60:	461e      	mov	r6, r3
 800be62:	4b27      	ldr	r3, [pc, #156]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	799b      	ldrb	r3, [r3, #6]
 800be68:	607b      	str	r3, [r7, #4]
 800be6a:	4b25      	ldr	r3, [pc, #148]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	79db      	ldrb	r3, [r3, #7]
 800be70:	9307      	str	r3, [sp, #28]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	9306      	str	r3, [sp, #24]
 800be76:	9605      	str	r6, [sp, #20]
 800be78:	9504      	str	r5, [sp, #16]
 800be7a:	9403      	str	r4, [sp, #12]
 800be7c:	9002      	str	r0, [sp, #8]
 800be7e:	9101      	str	r1, [sp, #4]
 800be80:	9200      	str	r2, [sp, #0]
 800be82:	4b20      	ldr	r3, [pc, #128]	; (800bf04 <SecureElementPrintKeys+0x114>)
 800be84:	2200      	movs	r2, #0
 800be86:	2100      	movs	r1, #0
 800be88:	2002      	movs	r0, #2
 800be8a:	f010 fee1 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800be8e:	4b1c      	ldr	r3, [pc, #112]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	7a1b      	ldrb	r3, [r3, #8]
 800be94:	461a      	mov	r2, r3
 800be96:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	7a5b      	ldrb	r3, [r3, #9]
 800be9c:	4619      	mov	r1, r3
 800be9e:	4b18      	ldr	r3, [pc, #96]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	7a9b      	ldrb	r3, [r3, #10]
 800bea4:	4618      	mov	r0, r3
 800bea6:	4b16      	ldr	r3, [pc, #88]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	7adb      	ldrb	r3, [r3, #11]
 800beac:	461c      	mov	r4, r3
 800beae:	4b14      	ldr	r3, [pc, #80]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	7b1b      	ldrb	r3, [r3, #12]
 800beb4:	461d      	mov	r5, r3
 800beb6:	4b12      	ldr	r3, [pc, #72]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	7b5b      	ldrb	r3, [r3, #13]
 800bebc:	461e      	mov	r6, r3
 800bebe:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	7b9b      	ldrb	r3, [r3, #14]
 800bec4:	607b      	str	r3, [r7, #4]
 800bec6:	4b0e      	ldr	r3, [pc, #56]	; (800bf00 <SecureElementPrintKeys+0x110>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	7bdb      	ldrb	r3, [r3, #15]
 800becc:	9307      	str	r3, [sp, #28]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	9306      	str	r3, [sp, #24]
 800bed2:	9605      	str	r6, [sp, #20]
 800bed4:	9504      	str	r5, [sp, #16]
 800bed6:	9403      	str	r4, [sp, #12]
 800bed8:	9002      	str	r0, [sp, #8]
 800beda:	9101      	str	r1, [sp, #4]
 800bedc:	9200      	str	r2, [sp, #0]
 800bede:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <SecureElementPrintKeys+0x118>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	2100      	movs	r1, #0
 800bee4:	2002      	movs	r0, #2
 800bee6:	f010 feb3 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef4:	0801d888 	.word	0x0801d888
 800bef8:	0801d8a0 	.word	0x0801d8a0
 800befc:	0801d8b8 	.word	0x0801d8b8
 800bf00:	20000560 	.word	0x20000560
 800bf04:	0801d8d0 	.word	0x0801d8d0
 800bf08:	0801d910 	.word	0x0801d910

0800bf0c <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800bf10:	2004      	movs	r0, #4
 800bf12:	f7ff fd7d 	bl	800ba10 <PrintKey>
    PrintKey(MC_KE_KEY);
 800bf16:	207f      	movs	r0, #127	; 0x7f
 800bf18:	f7ff fd7a 	bl	800ba10 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800bf1c:	2002      	movs	r0, #2
 800bf1e:	f7ff fd77 	bl	800ba10 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800bf22:	2003      	movs	r0, #3
 800bf24:	f7ff fd74 	bl	800ba10 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf42:	2302      	movs	r3, #2
 800bf44:	e04c      	b.n	800bfe0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bf46:	2300      	movs	r3, #0
 800bf48:	77fb      	strb	r3, [r7, #31]
 800bf4a:	e045      	b.n	800bfd8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bf4c:	4b26      	ldr	r3, [pc, #152]	; (800bfe8 <SecureElementSetKey+0xb8>)
 800bf4e:	6819      	ldr	r1, [r3, #0]
 800bf50:	7ffa      	ldrb	r2, [r7, #31]
 800bf52:	4613      	mov	r3, r2
 800bf54:	011b      	lsls	r3, r3, #4
 800bf56:	4413      	add	r3, r2
 800bf58:	440b      	add	r3, r1
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	79fa      	ldrb	r2, [r7, #7]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d136      	bne.n	800bfd2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	2b80      	cmp	r3, #128	; 0x80
 800bf68:	d123      	bne.n	800bfb2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bf6a:	2306      	movs	r3, #6
 800bf6c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	f107 0310 	add.w	r3, r7, #16
 800bf76:	2200      	movs	r2, #0
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	605a      	str	r2, [r3, #4]
 800bf7c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bf7e:	f107 030c 	add.w	r3, r7, #12
 800bf82:	227f      	movs	r2, #127	; 0x7f
 800bf84:	2110      	movs	r1, #16
 800bf86:	6838      	ldr	r0, [r7, #0]
 800bf88:	f000 f87d 	bl	800c086 <SecureElementAesEncrypt>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bf90:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <SecureElementSetKey+0xb8>)
 800bf92:	6819      	ldr	r1, [r3, #0]
 800bf94:	7ffa      	ldrb	r2, [r7, #31]
 800bf96:	4613      	mov	r3, r2
 800bf98:	011b      	lsls	r3, r3, #4
 800bf9a:	4413      	add	r3, r2
 800bf9c:	3310      	adds	r3, #16
 800bf9e:	440b      	add	r3, r1
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	f107 010c 	add.w	r1, r7, #12
 800bfa6:	2210      	movs	r2, #16
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f00c fafc 	bl	80185a6 <memcpy1>
                return retval;
 800bfae:	7fbb      	ldrb	r3, [r7, #30]
 800bfb0:	e016      	b.n	800bfe0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <SecureElementSetKey+0xb8>)
 800bfb4:	6819      	ldr	r1, [r3, #0]
 800bfb6:	7ffa      	ldrb	r2, [r7, #31]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	4413      	add	r3, r2
 800bfbe:	3310      	adds	r3, #16
 800bfc0:	440b      	add	r3, r1
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	2210      	movs	r2, #16
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f00c faec 	bl	80185a6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e006      	b.n	800bfe0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bfd2:	7ffb      	ldrb	r3, [r7, #31]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	77fb      	strb	r3, [r7, #31]
 800bfd8:	7ffb      	ldrb	r3, [r7, #31]
 800bfda:	2b09      	cmp	r3, #9
 800bfdc:	d9b6      	bls.n	800bf4c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bfde:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3720      	adds	r7, #32
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20000560 	.word	0x20000560

0800bfec <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af02      	add	r7, sp, #8
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	460b      	mov	r3, r1
 800bffc:	80fb      	strh	r3, [r7, #6]
 800bffe:	4613      	mov	r3, r2
 800c000:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c002:	797b      	ldrb	r3, [r7, #5]
 800c004:	2b7e      	cmp	r3, #126	; 0x7e
 800c006:	d901      	bls.n	800c00c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c008:	2303      	movs	r3, #3
 800c00a:	e009      	b.n	800c020 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c00c:	7979      	ldrb	r1, [r7, #5]
 800c00e:	88fa      	ldrh	r2, [r7, #6]
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	460b      	mov	r3, r1
 800c016:	68b9      	ldr	r1, [r7, #8]
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff fe0b 	bl	800bc34 <ComputeCmac>
 800c01e:	4603      	mov	r3, r0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b088      	sub	sp, #32
 800c02c:	af02      	add	r7, sp, #8
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	607a      	str	r2, [r7, #4]
 800c032:	461a      	mov	r2, r3
 800c034:	460b      	mov	r3, r1
 800c036:	817b      	strh	r3, [r7, #10]
 800c038:	4613      	mov	r3, r2
 800c03a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c042:	2302      	movs	r3, #2
 800c044:	e01b      	b.n	800c07e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c046:	2306      	movs	r3, #6
 800c048:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c04e:	7a79      	ldrb	r1, [r7, #9]
 800c050:	897a      	ldrh	r2, [r7, #10]
 800c052:	f107 0310 	add.w	r3, r7, #16
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	460b      	mov	r3, r1
 800c05a:	68f9      	ldr	r1, [r7, #12]
 800c05c:	2000      	movs	r0, #0
 800c05e:	f7ff fde9 	bl	800bc34 <ComputeCmac>
 800c062:	4603      	mov	r3, r0
 800c064:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c066:	7dfb      	ldrb	r3, [r7, #23]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	e006      	b.n	800c07e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	429a      	cmp	r2, r3
 800c076:	d001      	beq.n	800c07c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c078:	2301      	movs	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b0c2      	sub	sp, #264	; 0x108
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	60f8      	str	r0, [r7, #12]
 800c08e:	4608      	mov	r0, r1
 800c090:	4611      	mov	r1, r2
 800c092:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c096:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	4603      	mov	r3, r0
 800c09e:	817b      	strh	r3, [r7, #10]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d006      	beq.n	800c0b8 <SecureElementAesEncrypt+0x32>
 800c0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d101      	bne.n	800c0bc <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e046      	b.n	800c14a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c0bc:	897b      	ldrh	r3, [r7, #10]
 800c0be:	f003 030f 	and.w	r3, r3, #15
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c0c8:	2305      	movs	r3, #5
 800c0ca:	e03e      	b.n	800c14a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c0cc:	f107 0314 	add.w	r3, r7, #20
 800c0d0:	22f0      	movs	r2, #240	; 0xf0
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f00c faa1 	bl	801861c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c0da:	f107 0210 	add.w	r2, r7, #16
 800c0de:	7a7b      	ldrb	r3, [r7, #9]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff fd76 	bl	800bbd4 <GetKeyByID>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c0ee:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d127      	bne.n	800c146 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	f107 0214 	add.w	r2, r7, #20
 800c0fe:	2110      	movs	r1, #16
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff fb5d 	bl	800b7c0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c10c:	e018      	b.n	800c140 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c10e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	18d0      	adds	r0, r2, r3
 800c116:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c11a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c11e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	4413      	add	r3, r2
 800c126:	f107 0214 	add.w	r2, r7, #20
 800c12a:	4619      	mov	r1, r3
 800c12c:	f7ff fc26 	bl	800b97c <lorawan_aes_encrypt>
            block = block + 16;
 800c130:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c134:	3310      	adds	r3, #16
 800c136:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c13a:	897b      	ldrh	r3, [r7, #10]
 800c13c:	3b10      	subs	r3, #16
 800c13e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c140:	897b      	ldrh	r3, [r7, #10]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1e3      	bne.n	800c10e <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c146:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	460b      	mov	r3, r1
 800c15e:	70fb      	strb	r3, [r7, #3]
 800c160:	4613      	mov	r3, r2
 800c162:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c16a:	2302      	movs	r3, #2
 800c16c:	e02e      	b.n	800c1cc <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c16e:	2306      	movs	r3, #6
 800c170:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c172:	78bb      	ldrb	r3, [r7, #2]
 800c174:	2b7f      	cmp	r3, #127	; 0x7f
 800c176:	d104      	bne.n	800c182 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	d001      	beq.n	800c182 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c17e:	2303      	movs	r3, #3
 800c180:	e024      	b.n	800c1cc <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c182:	2300      	movs	r3, #0
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	f107 0310 	add.w	r3, r7, #16
 800c18a:	2200      	movs	r2, #0
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	605a      	str	r2, [r3, #4]
 800c190:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c192:	f107 030c 	add.w	r3, r7, #12
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	2110      	movs	r1, #16
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff ff73 	bl	800c086 <SecureElementAesEncrypt>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c1a4:	7ffb      	ldrb	r3, [r7, #31]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c1aa:	7ffb      	ldrb	r3, [r7, #31]
 800c1ac:	e00e      	b.n	800c1cc <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c1ae:	f107 020c 	add.w	r2, r7, #12
 800c1b2:	78bb      	ldrb	r3, [r7, #2]
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff feba 	bl	800bf30 <SecureElementSetKey>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c1c0:	7ffb      	ldrb	r3, [r7, #31]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c1c6:	7ffb      	ldrb	r3, [r7, #31]
 800c1c8:	e000      	b.n	800c1cc <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c1ca:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3720      	adds	r7, #32
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607b      	str	r3, [r7, #4]
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73fb      	strb	r3, [r7, #15]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d005      	beq.n	800c1f8 <SecureElementProcessJoinAccept+0x24>
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <SecureElementProcessJoinAccept+0x24>
 800c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	e064      	b.n	800c2c6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c1fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c200:	2b21      	cmp	r3, #33	; 0x21
 800c202:	d901      	bls.n	800c208 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c204:	2305      	movs	r3, #5
 800c206:	e05e      	b.n	800c2c6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c208:	2301      	movs	r3, #1
 800c20a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c20c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c210:	b29b      	uxth	r3, r3
 800c212:	461a      	mov	r2, r3
 800c214:	6879      	ldr	r1, [r7, #4]
 800c216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c218:	f00c f9c5 	bl	80185a6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	1c58      	adds	r0, r3, #1
 800c220:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c224:	b29b      	uxth	r3, r3
 800c226:	3b01      	subs	r3, #1
 800c228:	b299      	uxth	r1, r3
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	3301      	adds	r3, #1
 800c22e:	7dfa      	ldrb	r2, [r7, #23]
 800c230:	f7ff ff29 	bl	800c086 <SecureElementAesEncrypt>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c23a:	2307      	movs	r3, #7
 800c23c:	e043      	b.n	800c2c6 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c240:	330b      	adds	r3, #11
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	09db      	lsrs	r3, r3, #7
 800c246:	b2da      	uxtb	r2, r3
 800c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c250:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c254:	3b04      	subs	r3, #4
 800c256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c258:	4413      	add	r3, r2
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c25e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c262:	3b03      	subs	r3, #3
 800c264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c266:	4413      	add	r3, r2
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	021b      	lsls	r3, r3, #8
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	4313      	orrs	r3, r2
 800c270:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c272:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c276:	3b02      	subs	r3, #2
 800c278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c27a:	4413      	add	r3, r2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	041b      	lsls	r3, r3, #16
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	4313      	orrs	r3, r2
 800c284:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c28e:	4413      	add	r3, r2
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	061b      	lsls	r3, r3, #24
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	4313      	orrs	r3, r2
 800c298:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10e      	bne.n	800c2c0 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c2a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	3b04      	subs	r3, #4
 800c2aa:	b299      	uxth	r1, r3
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2b2:	f7ff feb9 	bl	800c028 <SecureElementVerifyAesCmac>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d003      	beq.n	800c2c4 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e002      	b.n	800c2c6 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c2c0:	2304      	movs	r3, #4
 800c2c2:	e000      	b.n	800c2c6 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2de:	2302      	movs	r3, #2
 800c2e0:	e007      	b.n	800c2f2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c2e2:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <SecureElementSetDevEui+0x2c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2208      	movs	r2, #8
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f00c f95b 	bl	80185a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20000560 	.word	0x20000560

0800c300 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c300:	b480      	push	{r7}
 800c302:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c304:	4b02      	ldr	r3, [pc, #8]	; (800c310 <SecureElementGetDevEui+0x10>)
 800c306:	681b      	ldr	r3, [r3, #0]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bc80      	pop	{r7}
 800c30e:	4770      	bx	lr
 800c310:	20000560 	.word	0x20000560

0800c314 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c322:	2302      	movs	r3, #2
 800c324:	e008      	b.n	800c338 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c326:	4b06      	ldr	r3, [pc, #24]	; (800c340 <SecureElementSetJoinEui+0x2c>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3308      	adds	r3, #8
 800c32c:	2208      	movs	r2, #8
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	4618      	mov	r0, r3
 800c332:	f00c f938 	bl	80185a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	20000560 	.word	0x20000560

0800c344 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c344:	b480      	push	{r7}
 800c346:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c348:	4b03      	ldr	r3, [pc, #12]	; (800c358 <SecureElementGetJoinEui+0x14>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3308      	adds	r3, #8
}
 800c34e:	4618      	mov	r0, r3
 800c350:	46bd      	mov	sp, r7
 800c352:	bc80      	pop	{r7}
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	20000560 	.word	0x20000560

0800c35c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c366:	4a23      	ldr	r2, [pc, #140]	; (800c3f4 <LmHandlerInit+0x98>)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c36c:	4b22      	ldr	r3, [pc, #136]	; (800c3f8 <LmHandlerInit+0x9c>)
 800c36e:	4a23      	ldr	r2, [pc, #140]	; (800c3fc <LmHandlerInit+0xa0>)
 800c370:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c372:	4b21      	ldr	r3, [pc, #132]	; (800c3f8 <LmHandlerInit+0x9c>)
 800c374:	4a22      	ldr	r2, [pc, #136]	; (800c400 <LmHandlerInit+0xa4>)
 800c376:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c378:	4b1f      	ldr	r3, [pc, #124]	; (800c3f8 <LmHandlerInit+0x9c>)
 800c37a:	4a22      	ldr	r2, [pc, #136]	; (800c404 <LmHandlerInit+0xa8>)
 800c37c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c37e:	4b1e      	ldr	r3, [pc, #120]	; (800c3f8 <LmHandlerInit+0x9c>)
 800c380:	4a21      	ldr	r2, [pc, #132]	; (800c408 <LmHandlerInit+0xac>)
 800c382:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c384:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <LmHandlerInit+0x98>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a20      	ldr	r2, [pc, #128]	; (800c40c <LmHandlerInit+0xb0>)
 800c38c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c38e:	4b19      	ldr	r3, [pc, #100]	; (800c3f4 <LmHandlerInit+0x98>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	4a1d      	ldr	r2, [pc, #116]	; (800c40c <LmHandlerInit+0xb0>)
 800c396:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c398:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <LmHandlerInit+0x98>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	4a1b      	ldr	r2, [pc, #108]	; (800c40c <LmHandlerInit+0xb0>)
 800c3a0:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c3a2:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <LmHandlerInit+0xb0>)
 800c3a4:	4a1a      	ldr	r2, [pc, #104]	; (800c410 <LmHandlerInit+0xb4>)
 800c3a6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c3a8:	4b12      	ldr	r3, [pc, #72]	; (800c3f4 <LmHandlerInit+0x98>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	4a17      	ldr	r2, [pc, #92]	; (800c40c <LmHandlerInit+0xb0>)
 800c3b0:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c3b2:	4a18      	ldr	r2, [pc, #96]	; (800c414 <LmHandlerInit+0xb8>)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <LmHandlerInit+0x98>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3be:	4a15      	ldr	r2, [pc, #84]	; (800c414 <LmHandlerInit+0xb8>)
 800c3c0:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800c3c2:	4b0c      	ldr	r3, [pc, #48]	; (800c3f4 <LmHandlerInit+0x98>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c8:	4a12      	ldr	r2, [pc, #72]	; (800c414 <LmHandlerInit+0xb8>)
 800c3ca:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800c3cc:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <LmHandlerInit+0x98>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d2:	4a10      	ldr	r2, [pc, #64]	; (800c414 <LmHandlerInit+0xb8>)
 800c3d4:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c3d6:	490f      	ldr	r1, [pc, #60]	; (800c414 <LmHandlerInit+0xb8>)
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f000 fd87 	bl	800ceec <LmHandlerPackageRegister>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e8:	e000      	b.n	800c3ec <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	2000059c 	.word	0x2000059c
 800c3f8:	200005a0 	.word	0x200005a0
 800c3fc:	0800cbf9 	.word	0x0800cbf9
 800c400:	0800cc61 	.word	0x0800cc61
 800c404:	0800cd2d 	.word	0x0800cd2d
 800c408:	0800ce45 	.word	0x0800ce45
 800c40c:	200005b0 	.word	0x200005b0
 800c410:	0800d2c1 	.word	0x0800d2c1
 800c414:	20000564 	.word	0x20000564

0800c418 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b094      	sub	sp, #80	; 0x50
 800c41c:	af04      	add	r7, sp, #16
 800c41e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c420:	2214      	movs	r2, #20
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	4890      	ldr	r0, [pc, #576]	; (800c668 <LmHandlerConfigure+0x250>)
 800c426:	f00f fbc3 	bl	801bbb0 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800c42a:	4b90      	ldr	r3, [pc, #576]	; (800c66c <LmHandlerConfigure+0x254>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c430:	f7fe fb04 	bl	800aa3c <LoraInfo_GetPtr>
 800c434:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c436:	4b8c      	ldr	r3, [pc, #560]	; (800c668 <LmHandlerConfigure+0x250>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	2301      	movs	r3, #1
 800c43e:	4093      	lsls	r3, r2
 800c440:	461a      	mov	r2, r3
 800c442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	4013      	ands	r3, r2
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d106      	bne.n	800c45a <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c44c:	4b88      	ldr	r3, [pc, #544]	; (800c670 <LmHandlerConfigure+0x258>)
 800c44e:	2201      	movs	r2, #1
 800c450:	2100      	movs	r1, #0
 800c452:	2000      	movs	r0, #0
 800c454:	f010 fbfc 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c458:	e7fe      	b.n	800c458 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c45a:	4b83      	ldr	r3, [pc, #524]	; (800c668 <LmHandlerConfigure+0x250>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	4984      	ldr	r1, [pc, #528]	; (800c674 <LmHandlerConfigure+0x25c>)
 800c462:	4885      	ldr	r0, [pc, #532]	; (800c678 <LmHandlerConfigure+0x260>)
 800c464:	f004 fe8c 	bl	8011180 <LoRaMacInitialization>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800c46e:	f04f 33ff 	mov.w	r3, #4294967295
 800c472:	e0f5      	b.n	800c660 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c474:	2327      	movs	r3, #39	; 0x27
 800c476:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c478:	f107 0318 	add.w	r3, r7, #24
 800c47c:	4618      	mov	r0, r3
 800c47e:	f005 fbcf 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800c488:	4b7c      	ldr	r3, [pc, #496]	; (800c67c <LmHandlerConfigure+0x264>)
 800c48a:	2201      	movs	r2, #1
 800c48c:	701a      	strb	r2, [r3, #0]
 800c48e:	e02a      	b.n	800c4e6 <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c490:	2328      	movs	r3, #40	; 0x28
 800c492:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c494:	4b7a      	ldr	r3, [pc, #488]	; (800c680 <LmHandlerConfigure+0x268>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00c      	beq.n	800c4b8 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c49e:	f107 0318 	add.w	r3, r7, #24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f005 fa16 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c4a8:	4b75      	ldr	r3, [pc, #468]	; (800c680 <LmHandlerConfigure+0x268>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	69fa      	ldr	r2, [r7, #28]
 800c4b0:	f240 518c 	movw	r1, #1420	; 0x58c
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c4b8:	2327      	movs	r3, #39	; 0x27
 800c4ba:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c4bc:	f107 0318 	add.w	r3, r7, #24
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f005 fbad 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10c      	bne.n	800c4e6 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c4d0:	f107 0318 	add.w	r3, r7, #24
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f005 f9fd 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c4da:	7f3b      	ldrb	r3, [r7, #28]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800c4e0:	4b66      	ldr	r3, [pc, #408]	; (800c67c <LmHandlerConfigure+0x264>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c4e6:	4b65      	ldr	r3, [pc, #404]	; (800c67c <LmHandlerConfigure+0x264>)
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d02a      	beq.n	800c544 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c4ee:	4b64      	ldr	r3, [pc, #400]	; (800c680 <LmHandlerConfigure+0x268>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c4f8:	4b61      	ldr	r3, [pc, #388]	; (800c680 <LmHandlerConfigure+0x268>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	2000      	movs	r0, #0
 800c500:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c502:	2306      	movs	r3, #6
 800c504:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c506:	f107 0318 	add.w	r3, r7, #24
 800c50a:	4618      	mov	r0, r3
 800c50c:	f005 f9e2 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	4a5c      	ldr	r2, [pc, #368]	; (800c684 <LmHandlerConfigure+0x26c>)
 800c514:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c516:	2327      	movs	r3, #39	; 0x27
 800c518:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c51a:	f107 0318 	add.w	r3, r7, #24
 800c51e:	4618      	mov	r0, r3
 800c520:	f005 f9d8 	bl	80118d4 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c52a:	4b4f      	ldr	r3, [pc, #316]	; (800c668 <LmHandlerConfigure+0x250>)
 800c52c:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800c534:	4b4c      	ldr	r3, [pc, #304]	; (800c668 <LmHandlerConfigure+0x250>)
 800c536:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800c53e:	4b4a      	ldr	r3, [pc, #296]	; (800c668 <LmHandlerConfigure+0x250>)
 800c540:	709a      	strb	r2, [r3, #2]
 800c542:	e019      	b.n	800c578 <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c544:	2305      	movs	r3, #5
 800c546:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c548:	2300      	movs	r3, #0
 800c54a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c54c:	f107 0318 	add.w	r3, r7, #24
 800c550:	4618      	mov	r0, r3
 800c552:	f005 fb65 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c556:	4b4a      	ldr	r3, [pc, #296]	; (800c680 <LmHandlerConfigure+0x268>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	4798      	blx	r3
 800c55e:	4603      	mov	r3, r0
 800c560:	4a48      	ldr	r2, [pc, #288]	; (800c684 <LmHandlerConfigure+0x26c>)
 800c562:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c564:	2306      	movs	r3, #6
 800c566:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c568:	4b46      	ldr	r3, [pc, #280]	; (800c684 <LmHandlerConfigure+0x26c>)
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c56e:	f107 0318 	add.w	r3, r7, #24
 800c572:	4618      	mov	r0, r3
 800c574:	f005 fb54 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c578:	2302      	movs	r3, #2
 800c57a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c57c:	f107 0318 	add.w	r3, r7, #24
 800c580:	4618      	mov	r0, r3
 800c582:	f005 f9a7 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	2208      	movs	r2, #8
 800c58a:	4619      	mov	r1, r3
 800c58c:	483d      	ldr	r0, [pc, #244]	; (800c684 <LmHandlerConfigure+0x26c>)
 800c58e:	f00c f80a 	bl	80185a6 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c592:	2303      	movs	r3, #3
 800c594:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c596:	f107 0318 	add.w	r3, r7, #24
 800c59a:	4618      	mov	r0, r3
 800c59c:	f005 f99a 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4838      	ldr	r0, [pc, #224]	; (800c688 <LmHandlerConfigure+0x270>)
 800c5a8:	f00b fffd 	bl	80185a6 <memcpy1>

    SecureElementPrintKeys();
 800c5ac:	f7ff fc20 	bl	800bdf0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c5b0:	4b36      	ldr	r3, [pc, #216]	; (800c68c <LmHandlerConfigure+0x274>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	4b36      	ldr	r3, [pc, #216]	; (800c690 <LmHandlerConfigure+0x278>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4b35      	ldr	r3, [pc, #212]	; (800c694 <LmHandlerConfigure+0x27c>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	4b35      	ldr	r3, [pc, #212]	; (800c698 <LmHandlerConfigure+0x280>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	9303      	str	r3, [sp, #12]
 800c5c8:	9002      	str	r0, [sp, #8]
 800c5ca:	9101      	str	r1, [sp, #4]
 800c5cc:	9200      	str	r2, [sp, #0]
 800c5ce:	4b33      	ldr	r3, [pc, #204]	; (800c69c <LmHandlerConfigure+0x284>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	2002      	movs	r0, #2
 800c5d6:	f010 fb3b 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c5da:	230f      	movs	r3, #15
 800c5dc:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c5e2:	f107 0318 	add.w	r3, r7, #24
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f005 fb1a 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c5f4:	f107 0318 	add.w	r3, r7, #24
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f005 fb11 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c5fe:	2304      	movs	r3, #4
 800c600:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c602:	4b19      	ldr	r3, [pc, #100]	; (800c668 <LmHandlerConfigure+0x250>)
 800c604:	789b      	ldrb	r3, [r3, #2]
 800c606:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c608:	f107 0318 	add.w	r3, r7, #24
 800c60c:	4618      	mov	r0, r3
 800c60e:	f005 fb07 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c612:	2338      	movs	r3, #56	; 0x38
 800c614:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <LmHandlerConfigure+0x250>)
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c61c:	f107 0318 	add.w	r3, r7, #24
 800c620:	4618      	mov	r0, r3
 800c622:	f005 fafd 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c626:	230f      	movs	r3, #15
 800c628:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c62a:	4b0f      	ldr	r3, [pc, #60]	; (800c668 <LmHandlerConfigure+0x250>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	f107 0210 	add.w	r2, r7, #16
 800c632:	4611      	mov	r1, r2
 800c634:	4618      	mov	r0, r3
 800c636:	f008 f9b8 	bl	80149aa <RegionGetPhyParam>
 800c63a:	4603      	mov	r3, r0
 800c63c:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	bf14      	ite	ne
 800c644:	2301      	movne	r3, #1
 800c646:	2300      	moveq	r3, #0
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	4b07      	ldr	r3, [pc, #28]	; (800c668 <LmHandlerConfigure+0x250>)
 800c64c:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c64e:	2014      	movs	r0, #20
 800c650:	f000 faba 	bl	800cbc8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c654:	4b04      	ldr	r3, [pc, #16]	; (800c668 <LmHandlerConfigure+0x250>)
 800c656:	799b      	ldrb	r3, [r3, #6]
 800c658:	4618      	mov	r0, r3
 800c65a:	f006 f90f 	bl	801287c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3740      	adds	r7, #64	; 0x40
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	20000588 	.word	0x20000588
 800c66c:	200005c8 	.word	0x200005c8
 800c670:	0801d950 	.word	0x0801d950
 800c674:	200005b0 	.word	0x200005b0
 800c678:	200005a0 	.word	0x200005a0
 800c67c:	200006be 	.word	0x200006be
 800c680:	2000059c 	.word	0x2000059c
 800c684:	20000090 	.word	0x20000090
 800c688:	20000098 	.word	0x20000098
 800c68c:	200000a7 	.word	0x200000a7
 800c690:	200000a6 	.word	0x200000a6
 800c694:	200000a5 	.word	0x200000a5
 800c698:	200000a4 	.word	0x200000a4
 800c69c:	0801d99c 	.word	0x0801d99c

0800c6a0 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c6a6:	f002 fd49 	bl	800f13c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c6aa:	f000 fd3f 	bl	800d12c <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c6ae:	f000 fd13 	bl	800d0d8 <LmHandlerPackageIsTxPending>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d117      	bne.n	800c6e8 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c6b8:	4b0d      	ldr	r3, [pc, #52]	; (800c6f0 <LmHandlerProcess+0x50>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d014      	beq.n	800c6ea <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	703b      	strb	r3, [r7, #0]
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	707b      	strb	r3, [r7, #1]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c6cc:	4b09      	ldr	r3, [pc, #36]	; (800c6f4 <LmHandlerProcess+0x54>)
 800c6ce:	78d9      	ldrb	r1, [r3, #3]
 800c6d0:	463b      	mov	r3, r7
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 f8b7 	bl	800c848 <LmHandlerSend>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c6e0:	4b03      	ldr	r3, [pc, #12]	; (800c6f0 <LmHandlerProcess+0x50>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	e000      	b.n	800c6ea <LmHandlerProcess+0x4a>
        return;
 800c6e8:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	200005c8 	.word	0x200005c8
 800c6f4:	20000588 	.word	0x20000588

0800c6f8 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c6fc:	4b02      	ldr	r3, [pc, #8]	; (800c708 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
}
 800c700:	4618      	mov	r0, r3
 800c702:	46bd      	mov	sp, r7
 800c704:	bc80      	pop	{r7}
 800c706:	4770      	bx	lr
 800c708:	200005c4 	.word	0x200005c4

0800c70c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b090      	sub	sp, #64	; 0x40
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	460a      	mov	r2, r1
 800c716:	71fb      	strb	r3, [r7, #7]
 800c718:	4613      	mov	r3, r2
 800c71a:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c71c:	2301      	movs	r3, #1
 800c71e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c722:	4b36      	ldr	r3, [pc, #216]	; (800c7fc <LmHandlerJoin+0xf0>)
 800c724:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d10b      	bne.n	800c74c <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c734:	2302      	movs	r3, #2
 800c736:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c73a:	4b31      	ldr	r3, [pc, #196]	; (800c800 <LmHandlerJoin+0xf4>)
 800c73c:	2202      	movs	r2, #2
 800c73e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c740:	4a2f      	ldr	r2, [pc, #188]	; (800c800 <LmHandlerJoin+0xf4>)
 800c742:	79bb      	ldrb	r3, [r7, #6]
 800c744:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c746:	f004 ffd3 	bl	80116f0 <LoRaMacStart>
 800c74a:	e041      	b.n	800c7d0 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c74c:	2301      	movs	r3, #1
 800c74e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c752:	4b2b      	ldr	r3, [pc, #172]	; (800c800 <LmHandlerJoin+0xf4>)
 800c754:	2201      	movs	r2, #1
 800c756:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c758:	4b28      	ldr	r3, [pc, #160]	; (800c7fc <LmHandlerJoin+0xf0>)
 800c75a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c75e:	4b28      	ldr	r3, [pc, #160]	; (800c800 <LmHandlerJoin+0xf4>)
 800c760:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c762:	4b27      	ldr	r3, [pc, #156]	; (800c800 <LmHandlerJoin+0xf4>)
 800c764:	2200      	movs	r2, #0
 800c766:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c768:	4a25      	ldr	r2, [pc, #148]	; (800c800 <LmHandlerJoin+0xf4>)
 800c76a:	79bb      	ldrb	r3, [r7, #6]
 800c76c:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c76e:	4b25      	ldr	r3, [pc, #148]	; (800c804 <LmHandlerJoin+0xf8>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	f083 0301 	eor.w	r3, r3, #1
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01e      	beq.n	800c7ba <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c77c:	231f      	movs	r3, #31
 800c77e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c780:	4b1e      	ldr	r3, [pc, #120]	; (800c7fc <LmHandlerJoin+0xf0>)
 800c782:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c786:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c788:	f107 0308 	add.w	r3, r7, #8
 800c78c:	4618      	mov	r0, r3
 800c78e:	f005 fa47 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c792:	2320      	movs	r3, #32
 800c794:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c796:	4b19      	ldr	r3, [pc, #100]	; (800c7fc <LmHandlerJoin+0xf0>)
 800c798:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c79c:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c79e:	f107 0308 	add.w	r3, r7, #8
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f005 fa3c 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c7a8:	2329      	movs	r3, #41	; 0x29
 800c7aa:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c7ac:	4b16      	ldr	r3, [pc, #88]	; (800c808 <LmHandlerJoin+0xfc>)
 800c7ae:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c7b0:	f107 0308 	add.w	r3, r7, #8
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f005 fa33 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c7ba:	f004 ff99 	bl	80116f0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c7c6:	f107 0308 	add.w	r3, r7, #8
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f005 fa28 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c7d0:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <LmHandlerJoin+0xf8>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f083 0301 	eor.w	r3, r3, #1
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <LmHandlerJoin+0xd8>
 800c7de:	79bb      	ldrb	r3, [r7, #6]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d004      	beq.n	800c7ee <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c7e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f005 fd89 	bl	8012300 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f0:	4a06      	ldr	r2, [pc, #24]	; (800c80c <LmHandlerJoin+0x100>)
 800c7f2:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c7f4:	bf00      	nop
 800c7f6:	3740      	adds	r7, #64	; 0x40
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20000588 	.word	0x20000588
 800c800:	200000a8 	.word	0x200000a8
 800c804:	200006be 	.word	0x200006be
 800c808:	01000400 	.word	0x01000400
 800c80c:	200005c4 	.word	0x200005c4

0800c810 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08a      	sub	sp, #40	; 0x28
 800c814:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c816:	2301      	movs	r3, #1
 800c818:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c81a:	463b      	mov	r3, r7
 800c81c:	4618      	mov	r0, r3
 800c81e:	f005 f859 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
 800c822:	4603      	mov	r3, r0
 800c824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d106      	bne.n	800c83e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c830:	793b      	ldrb	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d101      	bne.n	800c83a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c836:	2300      	movs	r3, #0
 800c838:	e002      	b.n	800c840 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c83a:	2301      	movs	r3, #1
 800c83c:	e000      	b.n	800c840 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c83e:	2300      	movs	r3, #0
    }
}
 800c840:	4618      	mov	r0, r3
 800c842:	3728      	adds	r7, #40	; 0x28
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08a      	sub	sp, #40	; 0x28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	460b      	mov	r3, r1
 800c852:	70fb      	strb	r3, [r7, #3]
 800c854:	4613      	mov	r3, r2
 800c856:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c858:	23ff      	movs	r3, #255	; 0xff
 800c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c85e:	f002 f9cd 	bl	800ebfc <LoRaMacIsBusy>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c868:	f06f 0301 	mvn.w	r3, #1
 800c86c:	e0a3      	b.n	800c9b6 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c86e:	f7ff ffcf 	bl	800c810 <LmHandlerJoinStatus>
 800c872:	4603      	mov	r3, r0
 800c874:	2b01      	cmp	r3, #1
 800c876:	d00a      	beq.n	800c88e <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c878:	4b51      	ldr	r3, [pc, #324]	; (800c9c0 <LmHandlerSend+0x178>)
 800c87a:	799b      	ldrb	r3, [r3, #6]
 800c87c:	4a50      	ldr	r2, [pc, #320]	; (800c9c0 <LmHandlerSend+0x178>)
 800c87e:	79d2      	ldrb	r2, [r2, #7]
 800c880:	4611      	mov	r1, r2
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff ff42 	bl	800c70c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c888:	f06f 0302 	mvn.w	r3, #2
 800c88c:	e093      	b.n	800c9b6 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c88e:	4a4d      	ldr	r2, [pc, #308]	; (800c9c4 <LmHandlerSend+0x17c>)
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c894:	78fb      	ldrb	r3, [r7, #3]
 800c896:	2b00      	cmp	r3, #0
 800c898:	bf14      	ite	ne
 800c89a:	2301      	movne	r3, #1
 800c89c:	2300      	moveq	r3, #0
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c8a2:	4b49      	ldr	r3, [pc, #292]	; (800c9c8 <LmHandlerSend+0x180>)
 800c8a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c8a8:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	785b      	ldrb	r3, [r3, #1]
 800c8ae:	f107 020c 	add.w	r2, r7, #12
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f004 ff7d 	bl	80117b4 <LoRaMacQueryTxPossible>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d009      	beq.n	800c8d4 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c8cc:	23f9      	movs	r3, #249	; 0xf9
 800c8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8d2:	e009      	b.n	800c8e8 <LmHandlerSend+0xa0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c8e8:	4b36      	ldr	r3, [pc, #216]	; (800c9c4 <LmHandlerSend+0x17c>)
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	3310      	adds	r3, #16
 800c8ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8f2:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c8f6:	4b34      	ldr	r3, [pc, #208]	; (800c9c8 <LmHandlerSend+0x180>)
 800c8f8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c8fc:	4b31      	ldr	r3, [pc, #196]	; (800c9c4 <LmHandlerSend+0x17c>)
 800c8fe:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c900:	78ba      	ldrb	r2, [r7, #2]
 800c902:	f107 0310 	add.w	r3, r7, #16
 800c906:	4611      	mov	r1, r2
 800c908:	4618      	mov	r0, r3
 800c90a:	f005 fe7f 	bl	801260c <LoRaMacMcpsRequest>
 800c90e:	4603      	mov	r3, r0
 800c910:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	4a2d      	ldr	r2, [pc, #180]	; (800c9cc <LmHandlerSend+0x184>)
 800c918:	6013      	str	r3, [r2, #0]

    switch (status)
 800c91a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c91e:	2b11      	cmp	r3, #17
 800c920:	d842      	bhi.n	800c9a8 <LmHandlerSend+0x160>
 800c922:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <LmHandlerSend+0xe0>)
 800c924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c928:	0800c971 	.word	0x0800c971
 800c92c:	0800c989 	.word	0x0800c989
 800c930:	0800c9a9 	.word	0x0800c9a9
 800c934:	0800c9a9 	.word	0x0800c9a9
 800c938:	0800c9a9 	.word	0x0800c9a9
 800c93c:	0800c9a9 	.word	0x0800c9a9
 800c940:	0800c9a9 	.word	0x0800c9a9
 800c944:	0800c991 	.word	0x0800c991
 800c948:	0800c9a9 	.word	0x0800c9a9
 800c94c:	0800c9a9 	.word	0x0800c9a9
 800c950:	0800c9a9 	.word	0x0800c9a9
 800c954:	0800c9a1 	.word	0x0800c9a1
 800c958:	0800c9a9 	.word	0x0800c9a9
 800c95c:	0800c9a9 	.word	0x0800c9a9
 800c960:	0800c989 	.word	0x0800c989
 800c964:	0800c989 	.word	0x0800c989
 800c968:	0800c989 	.word	0x0800c989
 800c96c:	0800c999 	.word	0x0800c999
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800c970:	4b17      	ldr	r3, [pc, #92]	; (800c9d0 <LmHandlerSend+0x188>)
 800c972:	2200      	movs	r2, #0
 800c974:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c976:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c97a:	f113 0f07 	cmn.w	r3, #7
 800c97e:	d017      	beq.n	800c9b0 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c980:	2300      	movs	r3, #0
 800c982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800c986:	e013      	b.n	800c9b0 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c988:	23fe      	movs	r3, #254	; 0xfe
 800c98a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c98e:	e010      	b.n	800c9b2 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c990:	23fd      	movs	r3, #253	; 0xfd
 800c992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c996:	e00c      	b.n	800c9b2 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c998:	23fb      	movs	r3, #251	; 0xfb
 800c99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c99e:	e008      	b.n	800c9b2 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c9a0:	23fa      	movs	r3, #250	; 0xfa
 800c9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c9a6:	e004      	b.n	800c9b2 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c9a8:	23ff      	movs	r3, #255	; 0xff
 800c9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c9ae:	e000      	b.n	800c9b2 <LmHandlerSend+0x16a>
            break;
 800c9b0:	bf00      	nop
    }

    return lmhStatus;
 800c9b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3728      	adds	r7, #40	; 0x28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	200000a8 	.word	0x200000a8
 800c9c4:	200000b0 	.word	0x200000b0
 800c9c8:	20000588 	.word	0x20000588
 800c9cc:	200005c4 	.word	0x200005c4
 800c9d0:	200005c8 	.word	0x200005c8

0800c9d4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c9da:	2309      	movs	r3, #9
 800c9dc:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c9de:	463b      	mov	r3, r7
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f005 fc8d 	bl	8012300 <LoRaMacMlmeRequest>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	4a06      	ldr	r2, [pc, #24]	; (800ca08 <LmHandlerDeviceTimeReq+0x34>)
 800c9ee:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c9f0:	7dfb      	ldrb	r3, [r7, #23]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	e001      	b.n	800c9fe <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c9fa:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3718      	adds	r7, #24
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	200005c4 	.word	0x200005c4

0800ca0c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ca16:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bc80      	pop	{r7}
 800ca22:	4770      	bx	lr

0800ca24 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08c      	sub	sp, #48	; 0x30
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800ca34:	f002 f8e2 	bl	800ebfc <LoRaMacIsBusy>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d002      	beq.n	800ca44 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca3e:	f06f 0301 	mvn.w	r3, #1
 800ca42:	e073      	b.n	800cb2c <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800ca44:	f7ff fee4 	bl	800c810 <LmHandlerJoinStatus>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d002      	beq.n	800ca54 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca4e:	f06f 0302 	mvn.w	r3, #2
 800ca52:	e06b      	b.n	800cb2c <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ca54:	2300      	movs	r3, #0
 800ca56:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ca58:	f107 0308 	add.w	r3, r7, #8
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f004 ff39 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca68:	f04f 33ff 	mov.w	r3, #4294967295
 800ca6c:	e05e      	b.n	800cb2c <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800ca6e:	7b3b      	ldrb	r3, [r7, #12]
 800ca70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800ca74:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d04d      	beq.n	800cb1a <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d028      	beq.n	800cad6 <LmHandlerRequestClass+0xb2>
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	dc4a      	bgt.n	800cb1e <LmHandlerRequestClass+0xfa>
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <LmHandlerRequestClass+0x6e>
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d01e      	beq.n	800cace <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800ca90:	e045      	b.n	800cb1e <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800ca92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d043      	beq.n	800cb22 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ca9e:	f107 0308 	add.w	r3, r7, #8
 800caa2:	4618      	mov	r0, r3
 800caa4:	f005 f8bc 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10b      	bne.n	800cac6 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800caae:	4b21      	ldr	r3, [pc, #132]	; (800cb34 <LmHandlerRequestClass+0x110>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d034      	beq.n	800cb22 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cab8:	4b1e      	ldr	r3, [pc, #120]	; (800cb34 <LmHandlerRequestClass+0x110>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabe:	79fa      	ldrb	r2, [r7, #7]
 800cac0:	4610      	mov	r0, r2
 800cac2:	4798      	blx	r3
            break;
 800cac4:	e02d      	b.n	800cb22 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cac6:	23ff      	movs	r3, #255	; 0xff
 800cac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cacc:	e029      	b.n	800cb22 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cace:	23ff      	movs	r3, #255	; 0xff
 800cad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cad4:	e028      	b.n	800cb28 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800cad6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cade:	23ff      	movs	r3, #255	; 0xff
 800cae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cae4:	e01f      	b.n	800cb26 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800cae6:	79fb      	ldrb	r3, [r7, #7]
 800cae8:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800caea:	f107 0308 	add.w	r3, r7, #8
 800caee:	4618      	mov	r0, r3
 800caf0:	f005 f896 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10b      	bne.n	800cb12 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cafa:	4b0e      	ldr	r3, [pc, #56]	; (800cb34 <LmHandlerRequestClass+0x110>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d010      	beq.n	800cb26 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb04:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <LmHandlerRequestClass+0x110>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb0a:	79fa      	ldrb	r2, [r7, #7]
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	4798      	blx	r3
            break;
 800cb10:	e009      	b.n	800cb26 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb12:	23ff      	movs	r3, #255	; 0xff
 800cb14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb18:	e005      	b.n	800cb26 <LmHandlerRequestClass+0x102>
        }
    }
 800cb1a:	bf00      	nop
 800cb1c:	e004      	b.n	800cb28 <LmHandlerRequestClass+0x104>
            break;
 800cb1e:	bf00      	nop
 800cb20:	e002      	b.n	800cb28 <LmHandlerRequestClass+0x104>
            break;
 800cb22:	bf00      	nop
 800cb24:	e000      	b.n	800cb28 <LmHandlerRequestClass+0x104>
            break;
 800cb26:	bf00      	nop
    return errorStatus;
 800cb28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3730      	adds	r7, #48	; 0x30
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	2000059c 	.word	0x2000059c

0800cb38 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08c      	sub	sp, #48	; 0x30
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb46:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4a:	e010      	b.n	800cb6e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cb50:	f107 030c 	add.w	r3, r7, #12
 800cb54:	4618      	mov	r0, r3
 800cb56:	f004 febd 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb60:	f04f 33ff 	mov.w	r3, #4294967295
 800cb64:	e003      	b.n	800cb6e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cb66:	7c3a      	ldrb	r2, [r7, #16]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3730      	adds	r7, #48	; 0x30
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
	...

0800cb78 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08c      	sub	sp, #48	; 0x30
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d102      	bne.n	800cb8c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb86:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8a:	e016      	b.n	800cbba <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cb8c:	2320      	movs	r3, #32
 800cb8e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cb90:	f107 030c 	add.w	r3, r7, #12
 800cb94:	4618      	mov	r0, r3
 800cb96:	f004 fe9d 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cba0:	f04f 33ff 	mov.w	r3, #4294967295
 800cba4:	e009      	b.n	800cbba <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cba6:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f993 2000 	ldrsb.w	r2, [r3]
 800cbb4:	4b03      	ldr	r3, [pc, #12]	; (800cbc4 <LmHandlerGetTxDatarate+0x4c>)
 800cbb6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3730      	adds	r7, #48	; 0x30
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20000588 	.word	0x20000588

0800cbc8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08c      	sub	sp, #48	; 0x30
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cbd0:	2323      	movs	r3, #35	; 0x23
 800cbd2:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cbd8:	f107 030c 	add.w	r3, r7, #12
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f005 f81f 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbec:	e000      	b.n	800cbf0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3730      	adds	r7, #48	; 0x30
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cc00:	4b15      	ldr	r3, [pc, #84]	; (800cc58 <McpsConfirm+0x60>)
 800cc02:	2201      	movs	r2, #1
 800cc04:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	785a      	ldrb	r2, [r3, #1]
 800cc0a:	4b13      	ldr	r3, [pc, #76]	; (800cc58 <McpsConfirm+0x60>)
 800cc0c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	789b      	ldrb	r3, [r3, #2]
 800cc12:	b25a      	sxtb	r2, r3
 800cc14:	4b10      	ldr	r3, [pc, #64]	; (800cc58 <McpsConfirm+0x60>)
 800cc16:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	4a0e      	ldr	r2, [pc, #56]	; (800cc58 <McpsConfirm+0x60>)
 800cc1e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cc26:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <McpsConfirm+0x60>)
 800cc28:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	4b09      	ldr	r3, [pc, #36]	; (800cc58 <McpsConfirm+0x60>)
 800cc32:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	791b      	ldrb	r3, [r3, #4]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4b07      	ldr	r3, [pc, #28]	; (800cc58 <McpsConfirm+0x60>)
 800cc3c:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800cc3e:	4b07      	ldr	r3, [pc, #28]	; (800cc5c <McpsConfirm+0x64>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc44:	4804      	ldr	r0, [pc, #16]	; (800cc58 <McpsConfirm+0x60>)
 800cc46:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	2000      	movs	r0, #0
 800cc4c:	f000 f9c6 	bl	800cfdc <LmHandlerPackagesNotify>
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	200000b0 	.word	0x200000b0
 800cc5c:	2000059c 	.word	0x2000059c

0800cc60 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800cc6e:	4b2c      	ldr	r3, [pc, #176]	; (800cd20 <McpsIndication+0xc0>)
 800cc70:	2201      	movs	r2, #1
 800cc72:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	785a      	ldrb	r2, [r3, #1]
 800cc78:	4b29      	ldr	r3, [pc, #164]	; (800cd20 <McpsIndication+0xc0>)
 800cc7a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800cc7c:	4b28      	ldr	r3, [pc, #160]	; (800cd20 <McpsIndication+0xc0>)
 800cc7e:	785b      	ldrb	r3, [r3, #1]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d149      	bne.n	800cd18 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	791b      	ldrb	r3, [r3, #4]
 800cc88:	b25a      	sxtb	r2, r3
 800cc8a:	4b25      	ldr	r3, [pc, #148]	; (800cd20 <McpsIndication+0xc0>)
 800cc8c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc94:	b25a      	sxtb	r2, r3
 800cc96:	4b22      	ldr	r3, [pc, #136]	; (800cd20 <McpsIndication+0xc0>)
 800cc98:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cca0:	4b1f      	ldr	r3, [pc, #124]	; (800cd20 <McpsIndication+0xc0>)
 800cca2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	78da      	ldrb	r2, [r3, #3]
 800cca8:	4b1d      	ldr	r3, [pc, #116]	; (800cd20 <McpsIndication+0xc0>)
 800ccaa:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	4a1b      	ldr	r2, [pc, #108]	; (800cd20 <McpsIndication+0xc0>)
 800ccb2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	78db      	ldrb	r3, [r3, #3]
 800ccb8:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	7b1b      	ldrb	r3, [r3, #12]
 800ccbe:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ccc6:	4b17      	ldr	r3, [pc, #92]	; (800cd24 <McpsIndication+0xc4>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cccc:	f107 0210 	add.w	r2, r7, #16
 800ccd0:	4913      	ldr	r1, [pc, #76]	; (800cd20 <McpsIndication+0xc0>)
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ccd6:	4b13      	ldr	r3, [pc, #76]	; (800cd24 <McpsIndication+0xc4>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d007      	beq.n	800ccf0 <McpsIndication+0x90>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	7e1b      	ldrb	r3, [r3, #24]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d003      	beq.n	800ccf0 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cce8:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <McpsIndication+0xc4>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccee:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	f000 f972 	bl	800cfdc <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ccf8:	f107 030f 	add.w	r3, r7, #15
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7ff ff1b 	bl	800cb38 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	795b      	ldrb	r3, [r3, #5]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d107      	bne.n	800cd1a <McpsIndication+0xba>
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d104      	bne.n	800cd1a <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800cd10:	4b05      	ldr	r3, [pc, #20]	; (800cd28 <McpsIndication+0xc8>)
 800cd12:	2201      	movs	r2, #1
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	e000      	b.n	800cd1a <McpsIndication+0xba>
        return;
 800cd18:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	200000cc 	.word	0x200000cc
 800cd24:	2000059c 	.word	0x2000059c
 800cd28:	200005c8 	.word	0x200005c8

0800cd2c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08c      	sub	sp, #48	; 0x30
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cd34:	4b3c      	ldr	r3, [pc, #240]	; (800ce28 <MlmeConfirm+0xfc>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	785a      	ldrb	r2, [r3, #1]
 800cd3e:	4b3a      	ldr	r3, [pc, #232]	; (800ce28 <MlmeConfirm+0xfc>)
 800cd40:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cd42:	4b3a      	ldr	r3, [pc, #232]	; (800ce2c <MlmeConfirm+0x100>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd48:	4837      	ldr	r0, [pc, #220]	; (800ce28 <MlmeConfirm+0xfc>)
 800cd4a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	2002      	movs	r0, #2
 800cd50:	f000 f944 	bl	800cfdc <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	2b0b      	cmp	r3, #11
 800cd5c:	d85c      	bhi.n	800ce18 <MlmeConfirm+0xec>
 800cd5e:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <MlmeConfirm+0x38>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800cd95 	.word	0x0800cd95
 800cd68:	0800ce19 	.word	0x0800ce19
 800cd6c:	0800ce19 	.word	0x0800ce19
 800cd70:	0800cde7 	.word	0x0800cde7
 800cd74:	0800ce19 	.word	0x0800ce19
 800cd78:	0800ce19 	.word	0x0800ce19
 800cd7c:	0800ce19 	.word	0x0800ce19
 800cd80:	0800ce19 	.word	0x0800ce19
 800cd84:	0800ce19 	.word	0x0800ce19
 800cd88:	0800ce19 	.word	0x0800ce19
 800cd8c:	0800cdff 	.word	0x0800cdff
 800cd90:	0800ce19 	.word	0x0800ce19
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800cd94:	2306      	movs	r3, #6
 800cd96:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cd98:	f107 030c 	add.w	r3, r7, #12
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f004 fd99 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	4a22      	ldr	r2, [pc, #136]	; (800ce30 <MlmeConfirm+0x104>)
 800cda6:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cda8:	4822      	ldr	r0, [pc, #136]	; (800ce34 <MlmeConfirm+0x108>)
 800cdaa:	f7ff fee5 	bl	800cb78 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	785b      	ldrb	r3, [r3, #1]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d108      	bne.n	800cdc8 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cdb6:	4b20      	ldr	r3, [pc, #128]	; (800ce38 <MlmeConfirm+0x10c>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cdbc:	4b1f      	ldr	r3, [pc, #124]	; (800ce3c <MlmeConfirm+0x110>)
 800cdbe:	785b      	ldrb	r3, [r3, #1]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fe2f 	bl	800ca24 <LmHandlerRequestClass>
 800cdc6:	e002      	b.n	800cdce <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cdc8:	4b1b      	ldr	r3, [pc, #108]	; (800ce38 <MlmeConfirm+0x10c>)
 800cdca:	22ff      	movs	r2, #255	; 0xff
 800cdcc:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cdce:	4b17      	ldr	r3, [pc, #92]	; (800ce2c <MlmeConfirm+0x100>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd4:	4818      	ldr	r0, [pc, #96]	; (800ce38 <MlmeConfirm+0x10c>)
 800cdd6:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d11d      	bne.n	800ce1c <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800cde0:	f7ff f894 	bl	800bf0c <SecureElementPrintSessionKeys>
            }
        }
        break;
 800cde4:	e01a      	b.n	800ce1c <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800cde6:	4b16      	ldr	r3, [pc, #88]	; (800ce40 <MlmeConfirm+0x114>)
 800cde8:	2201      	movs	r2, #1
 800cdea:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7a1a      	ldrb	r2, [r3, #8]
 800cdf0:	4b13      	ldr	r3, [pc, #76]	; (800ce40 <MlmeConfirm+0x114>)
 800cdf2:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7a5a      	ldrb	r2, [r3, #9]
 800cdf8:	4b11      	ldr	r3, [pc, #68]	; (800ce40 <MlmeConfirm+0x114>)
 800cdfa:	74da      	strb	r2, [r3, #19]
        }
        break;
 800cdfc:	e00f      	b.n	800ce1e <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	785b      	ldrb	r3, [r3, #1]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d105      	bne.n	800ce12 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800ce06:	4b0d      	ldr	r3, [pc, #52]	; (800ce3c <MlmeConfirm+0x110>)
 800ce08:	7b1b      	ldrb	r3, [r3, #12]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff fdfe 	bl	800ca0c <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800ce10:	e005      	b.n	800ce1e <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800ce12:	f7ff fddf 	bl	800c9d4 <LmHandlerDeviceTimeReq>
        break;
 800ce16:	e002      	b.n	800ce1e <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ce18:	bf00      	nop
 800ce1a:	e000      	b.n	800ce1e <MlmeConfirm+0xf2>
        break;
 800ce1c:	bf00      	nop
    }
}
 800ce1e:	bf00      	nop
 800ce20:	3730      	adds	r7, #48	; 0x30
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	200000b0 	.word	0x200000b0
 800ce2c:	2000059c 	.word	0x2000059c
 800ce30:	20000090 	.word	0x20000090
 800ce34:	200000ac 	.word	0x200000ac
 800ce38:	200000a8 	.word	0x200000a8
 800ce3c:	20000588 	.word	0x20000588
 800ce40:	200000cc 	.word	0x200000cc

0800ce44 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ce4e:	4b24      	ldr	r3, [pc, #144]	; (800cee0 <MlmeIndication+0x9c>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	785a      	ldrb	r2, [r3, #1]
 800ce58:	4b21      	ldr	r3, [pc, #132]	; (800cee0 <MlmeIndication+0x9c>)
 800ce5a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	789b      	ldrb	r3, [r3, #2]
 800ce60:	b25a      	sxtb	r2, r3
 800ce62:	4b1f      	ldr	r3, [pc, #124]	; (800cee0 <MlmeIndication+0x9c>)
 800ce64:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce6c:	b25a      	sxtb	r2, r3
 800ce6e:	4b1c      	ldr	r3, [pc, #112]	; (800cee0 <MlmeIndication+0x9c>)
 800ce70:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ce78:	4b19      	ldr	r3, [pc, #100]	; (800cee0 <MlmeIndication+0x9c>)
 800ce7a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	78da      	ldrb	r2, [r3, #3]
 800ce80:	4b17      	ldr	r3, [pc, #92]	; (800cee0 <MlmeIndication+0x9c>)
 800ce82:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	4a15      	ldr	r2, [pc, #84]	; (800cee0 <MlmeIndication+0x9c>)
 800ce8a:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b0a      	cmp	r3, #10
 800ce92:	d009      	beq.n	800cea8 <MlmeIndication+0x64>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b0e      	cmp	r3, #14
 800ce9a:	d005      	beq.n	800cea8 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ce9c:	4b11      	ldr	r3, [pc, #68]	; (800cee4 <MlmeIndication+0xa0>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea2:	490f      	ldr	r1, [pc, #60]	; (800cee0 <MlmeIndication+0x9c>)
 800cea4:	2000      	movs	r0, #0
 800cea6:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	2003      	movs	r0, #3
 800ceac:	f000 f896 	bl	800cfdc <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b0e      	cmp	r3, #14
 800ceb6:	d00a      	beq.n	800cece <MlmeIndication+0x8a>
 800ceb8:	2b0e      	cmp	r3, #14
 800ceba:	dc0a      	bgt.n	800ced2 <MlmeIndication+0x8e>
 800cebc:	2b06      	cmp	r3, #6
 800cebe:	d002      	beq.n	800cec6 <MlmeIndication+0x82>
 800cec0:	2b0a      	cmp	r3, #10
 800cec2:	d008      	beq.n	800ced6 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cec4:	e005      	b.n	800ced2 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800cec6:	4b08      	ldr	r3, [pc, #32]	; (800cee8 <MlmeIndication+0xa4>)
 800cec8:	2201      	movs	r2, #1
 800ceca:	701a      	strb	r2, [r3, #0]
        break;
 800cecc:	e004      	b.n	800ced8 <MlmeIndication+0x94>
        break;
 800cece:	bf00      	nop
 800ced0:	e002      	b.n	800ced8 <MlmeIndication+0x94>
        break;
 800ced2:	bf00      	nop
 800ced4:	e000      	b.n	800ced8 <MlmeIndication+0x94>
        break;
 800ced6:	bf00      	nop
    }
}
 800ced8:	bf00      	nop
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	200000cc 	.word	0x200000cc
 800cee4:	2000059c 	.word	0x2000059c
 800cee8:	200005c8 	.word	0x200005c8

0800ceec <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	6039      	str	r1, [r7, #0]
 800cef6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cef8:	2300      	movs	r3, #0
 800cefa:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d103      	bne.n	800cf0a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cf02:	f000 fa1f 	bl	800d344 <LmhpCompliancePackageFactory>
 800cf06:	60f8      	str	r0, [r7, #12]
            break;
 800cf08:	e000      	b.n	800cf0c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cf0a:	bf00      	nop
        }
    }
    if( package != NULL )
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d035      	beq.n	800cf7e <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	491d      	ldr	r1, [pc, #116]	; (800cf8c <LmHandlerPackageRegister+0xa0>)
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cf1c:	79fb      	ldrb	r3, [r7, #7]
 800cf1e:	4a1b      	ldr	r2, [pc, #108]	; (800cf8c <LmHandlerPackageRegister+0xa0>)
 800cf20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf24:	4a1a      	ldr	r2, [pc, #104]	; (800cf90 <LmHandlerPackageRegister+0xa4>)
 800cf26:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800cf28:	4b1a      	ldr	r3, [pc, #104]	; (800cf94 <LmHandlerPackageRegister+0xa8>)
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	79fb      	ldrb	r3, [r7, #7]
 800cf2e:	4917      	ldr	r1, [pc, #92]	; (800cf8c <LmHandlerPackageRegister+0xa0>)
 800cf30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800cf38:	4b16      	ldr	r3, [pc, #88]	; (800cf94 <LmHandlerPackageRegister+0xa8>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	79fb      	ldrb	r3, [r7, #7]
 800cf3e:	4913      	ldr	r1, [pc, #76]	; (800cf8c <LmHandlerPackageRegister+0xa0>)
 800cf40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cf46:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cf48:	79fb      	ldrb	r3, [r7, #7]
 800cf4a:	4a10      	ldr	r2, [pc, #64]	; (800cf8c <LmHandlerPackageRegister+0xa0>)
 800cf4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf50:	4a11      	ldr	r2, [pc, #68]	; (800cf98 <LmHandlerPackageRegister+0xac>)
 800cf52:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cf54:	4b0f      	ldr	r3, [pc, #60]	; (800cf94 <LmHandlerPackageRegister+0xa8>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	79fb      	ldrb	r3, [r7, #7]
 800cf5a:	490c      	ldr	r1, [pc, #48]	; (800cf8c <LmHandlerPackageRegister+0xa0>)
 800cf5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf60:	6992      	ldr	r2, [r2, #24]
 800cf62:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cf64:	79fb      	ldrb	r3, [r7, #7]
 800cf66:	4a09      	ldr	r2, [pc, #36]	; (800cf8c <LmHandlerPackageRegister+0xa0>)
 800cf68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	4a0b      	ldr	r2, [pc, #44]	; (800cf9c <LmHandlerPackageRegister+0xb0>)
 800cf70:	6851      	ldr	r1, [r2, #4]
 800cf72:	4a0a      	ldr	r2, [pc, #40]	; (800cf9c <LmHandlerPackageRegister+0xb0>)
 800cf74:	7852      	ldrb	r2, [r2, #1]
 800cf76:	6838      	ldr	r0, [r7, #0]
 800cf78:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e001      	b.n	800cf82 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf7e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000574 	.word	0x20000574
 800cf90:	0800c70d 	.word	0x0800c70d
 800cf94:	2000059c 	.word	0x2000059c
 800cf98:	0800c9d5 	.word	0x0800c9d5
 800cf9c:	200000e0 	.word	0x200000e0

0800cfa0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	d80e      	bhi.n	800cfce <LmHandlerPackageIsInitialized+0x2e>
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	4a09      	ldr	r2, [pc, #36]	; (800cfd8 <LmHandlerPackageIsInitialized+0x38>)
 800cfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d007      	beq.n	800cfce <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cfbe:	79fb      	ldrb	r3, [r7, #7]
 800cfc0:	4a05      	ldr	r2, [pc, #20]	; (800cfd8 <LmHandlerPackageIsInitialized+0x38>)
 800cfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	4798      	blx	r3
 800cfca:	4603      	mov	r3, r0
 800cfcc:	e000      	b.n	800cfd0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cfce:	2300      	movs	r3, #0
    }
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20000574 	.word	0x20000574

0800cfdc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	6039      	str	r1, [r7, #0]
 800cfe6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cfe8:	2300      	movs	r3, #0
 800cfea:	73fb      	strb	r3, [r7, #15]
 800cfec:	e069      	b.n	800d0c2 <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800cfee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cff2:	4a38      	ldr	r2, [pc, #224]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800cff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d051      	beq.n	800d0a0 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cffc:	79fb      	ldrb	r3, [r7, #7]
 800cffe:	2b03      	cmp	r3, #3
 800d000:	d850      	bhi.n	800d0a4 <LmHandlerPackagesNotify+0xc8>
 800d002:	a201      	add	r2, pc, #4	; (adr r2, 800d008 <LmHandlerPackagesNotify+0x2c>)
 800d004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d008:	0800d019 	.word	0x0800d019
 800d00c:	0800d03b 	.word	0x0800d03b
 800d010:	0800d05d 	.word	0x0800d05d
 800d014:	0800d07f 	.word	0x0800d07f
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d01c:	4a2d      	ldr	r2, [pc, #180]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d03f      	beq.n	800d0a8 <LmHandlerPackagesNotify+0xcc>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d02c:	4a29      	ldr	r2, [pc, #164]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	6838      	ldr	r0, [r7, #0]
 800d036:	4798      	blx	r3
                    }
                    break;
 800d038:	e036      	b.n	800d0a8 <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d03e:	4a25      	ldr	r2, [pc, #148]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d030      	beq.n	800d0ac <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d04e:	4a21      	ldr	r2, [pc, #132]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d054:	69db      	ldr	r3, [r3, #28]
 800d056:	6838      	ldr	r0, [r7, #0]
 800d058:	4798      	blx	r3
                    }
                    break;
 800d05a:	e027      	b.n	800d0ac <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d060:	4a1c      	ldr	r2, [pc, #112]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d021      	beq.n	800d0b0 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d070:	4a18      	ldr	r2, [pc, #96]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d076:	6a1b      	ldr	r3, [r3, #32]
 800d078:	6838      	ldr	r0, [r7, #0]
 800d07a:	4798      	blx	r3
                    }
                    break;
 800d07c:	e018      	b.n	800d0b0 <LmHandlerPackagesNotify+0xd4>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d07e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d082:	4a14      	ldr	r2, [pc, #80]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d012      	beq.n	800d0b4 <LmHandlerPackagesNotify+0xd8>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d092:	4a10      	ldr	r2, [pc, #64]	; (800d0d4 <LmHandlerPackagesNotify+0xf8>)
 800d094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09a:	6838      	ldr	r0, [r7, #0]
 800d09c:	4798      	blx	r3
                    }
                    break;
 800d09e:	e009      	b.n	800d0b4 <LmHandlerPackagesNotify+0xd8>
                default:
                {
                    break;
                }
            }
        }
 800d0a0:	bf00      	nop
 800d0a2:	e008      	b.n	800d0b6 <LmHandlerPackagesNotify+0xda>
                    break;
 800d0a4:	bf00      	nop
 800d0a6:	e006      	b.n	800d0b6 <LmHandlerPackagesNotify+0xda>
                    break;
 800d0a8:	bf00      	nop
 800d0aa:	e004      	b.n	800d0b6 <LmHandlerPackagesNotify+0xda>
                    break;
 800d0ac:	bf00      	nop
 800d0ae:	e002      	b.n	800d0b6 <LmHandlerPackagesNotify+0xda>
                    break;
 800d0b0:	bf00      	nop
 800d0b2:	e000      	b.n	800d0b6 <LmHandlerPackagesNotify+0xda>
                    break;
 800d0b4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	3301      	adds	r3, #1
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	73fb      	strb	r3, [r7, #15]
 800d0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0c6:	2b04      	cmp	r3, #4
 800d0c8:	dd91      	ble.n	800cfee <LmHandlerPackagesNotify+0x12>
    }
}
 800d0ca:	bf00      	nop
 800d0cc:	bf00      	nop
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	20000574 	.word	0x20000574

0800d0d8 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0de:	2300      	movs	r3, #0
 800d0e0:	71fb      	strb	r3, [r7, #7]
 800d0e2:	e018      	b.n	800d116 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800d0e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0e8:	4a0f      	ldr	r2, [pc, #60]	; (800d128 <LmHandlerPackageIsTxPending+0x50>)
 800d0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00b      	beq.n	800d10a <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d0f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0f6:	4a0c      	ldr	r2, [pc, #48]	; (800d128 <LmHandlerPackageIsTxPending+0x50>)
 800d0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	4798      	blx	r3
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d106:	2301      	movs	r3, #1
 800d108:	e00a      	b.n	800d120 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d10a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	3301      	adds	r3, #1
 800d112:	b2db      	uxtb	r3, r3
 800d114:	71fb      	strb	r3, [r7, #7]
 800d116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d11a:	2b04      	cmp	r3, #4
 800d11c:	dde2      	ble.n	800d0e4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	20000574 	.word	0x20000574

0800d12c <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d132:	2300      	movs	r3, #0
 800d134:	71fb      	strb	r3, [r7, #7]
 800d136:	e022      	b.n	800d17e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d13c:	4a14      	ldr	r2, [pc, #80]	; (800d190 <LmHandlerPackagesProcess+0x64>)
 800d13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d015      	beq.n	800d172 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d14a:	4a11      	ldr	r2, [pc, #68]	; (800d190 <LmHandlerPackagesProcess+0x64>)
 800d14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d150:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00d      	beq.n	800d172 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d156:	79fb      	ldrb	r3, [r7, #7]
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff ff21 	bl	800cfa0 <LmHandlerPackageIsInitialized>
 800d15e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d160:	2b00      	cmp	r3, #0
 800d162:	d006      	beq.n	800d172 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d168:	4a09      	ldr	r2, [pc, #36]	; (800d190 <LmHandlerPackagesProcess+0x64>)
 800d16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d176:	b2db      	uxtb	r3, r3
 800d178:	3301      	adds	r3, #1
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	71fb      	strb	r3, [r7, #7]
 800d17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d182:	2b04      	cmp	r3, #4
 800d184:	ddd8      	ble.n	800d138 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d186:	bf00      	nop
 800d188:	bf00      	nop
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20000574 	.word	0x20000574

0800d194 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	6039      	str	r1, [r7, #0]
 800d19e:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d102      	bne.n	800d1ac <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1aa:	e00e      	b.n	800d1ca <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <LmHandlerGetVersion+0x24>
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d004      	beq.n	800d1c0 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d1b6:	e007      	b.n	800d1c8 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	4a06      	ldr	r2, [pc, #24]	; (800d1d4 <LmHandlerGetVersion+0x40>)
 800d1bc:	601a      	str	r2, [r3, #0]
            break;
 800d1be:	e003      	b.n	800d1c8 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	4a05      	ldr	r2, [pc, #20]	; (800d1d8 <LmHandlerGetVersion+0x44>)
 800d1c4:	601a      	str	r2, [r3, #0]
            break;
 800d1c6:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bc80      	pop	{r7}
 800d1d2:	4770      	bx	lr
 800d1d4:	01000400 	.word	0x01000400
 800d1d8:	02010001 	.word	0x02010001

0800d1dc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d1e0:	f005 fb6a 	bl	80128b8 <LoRaMacDeInitialization>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e001      	b.n	800d1f2 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d1ee:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d1fa:	f004 faa3 	bl	8011744 <LoRaMacHalt>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d101      	bne.n	800d208 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d204:	2300      	movs	r3, #0
 800d206:	e001      	b.n	800d20c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d208:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b08e      	sub	sp, #56	; 0x38
 800d214:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d216:	2300      	movs	r3, #0
 800d218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d220:	f7ff ffe9 	bl	800d1f6 <LmHandlerHalt>
 800d224:	4603      	mov	r3, r0
 800d226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d22a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d12f      	bne.n	800d292 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d232:	f000 f859 	bl	800d2e8 <NvmDataMgmtStoreBegin>
 800d236:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	f113 0f02 	cmn.w	r3, #2
 800d23e:	d103      	bne.n	800d248 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d240:	23f8      	movs	r3, #248	; 0xf8
 800d242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d246:	e01c      	b.n	800d282 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d104      	bne.n	800d258 <LmHandlerNvmDataStore+0x48>
 800d24e:	4b1b      	ldr	r3, [pc, #108]	; (800d2bc <LmHandlerNvmDataStore+0xac>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d103      	bne.n	800d260 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d258:	23ff      	movs	r3, #255	; 0xff
 800d25a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d25e:	e010      	b.n	800d282 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d260:	2327      	movs	r3, #39	; 0x27
 800d262:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d264:	1d3b      	adds	r3, r7, #4
 800d266:	4618      	mov	r0, r3
 800d268:	f004 fb34 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d270:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 800d274:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d276:	4b11      	ldr	r3, [pc, #68]	; (800d2bc <LmHandlerNvmDataStore+0xac>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d27e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d280:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d282:	f000 f847 	bl	800d314 <NvmDataMgmtStoreEnd>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d28c:	23ff      	movs	r3, #255	; 0xff
 800d28e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d292:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d296:	2b00      	cmp	r3, #0
 800d298:	d109      	bne.n	800d2ae <LmHandlerNvmDataStore+0x9e>
 800d29a:	4b08      	ldr	r3, [pc, #32]	; (800d2bc <LmHandlerNvmDataStore+0xac>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d2a4:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <LmHandlerNvmDataStore+0xac>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	69db      	ldr	r3, [r3, #28]
 800d2aa:	2001      	movs	r0, #1
 800d2ac:	4798      	blx	r3
    }

    return lmhStatus;
 800d2ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3738      	adds	r7, #56	; 0x38
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	2000059c 	.word	0x2000059c

0800d2c0 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d2ca:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <NvmDataMgmtEvent+0x24>)
 800d2cc:	881a      	ldrh	r2, [r3, #0]
 800d2ce:	88fb      	ldrh	r3, [r7, #6]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	4b03      	ldr	r3, [pc, #12]	; (800d2e4 <NvmDataMgmtEvent+0x24>)
 800d2d6:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bc80      	pop	{r7}
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	200006c0 	.word	0x200006c0

0800d2e8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d2ec:	4b08      	ldr	r3, [pc, #32]	; (800d310 <NvmDataMgmtStoreBegin+0x28>)
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800d2f4:	f06f 0301 	mvn.w	r3, #1
 800d2f8:	e008      	b.n	800d30c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d2fa:	f004 fa07 	bl	801170c <LoRaMacStop>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d304:	f06f 0302 	mvn.w	r3, #2
 800d308:	e000      	b.n	800d30c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d30a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	200006c0 	.word	0x200006c0

0800d314 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d318:	4b03      	ldr	r3, [pc, #12]	; (800d328 <NvmDataMgmtStoreEnd+0x14>)
 800d31a:	2200      	movs	r2, #0
 800d31c:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800d31e:	f004 f9e7 	bl	80116f0 <LoRaMacStart>
    return NVM_DATA_OK;
 800d322:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d324:	4618      	mov	r0, r3
 800d326:	bd80      	pop	{r7, pc}
 800d328:	200006c0 	.word	0x200006c0

0800d32c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d330:	2220      	movs	r2, #32
 800d332:	2100      	movs	r1, #0
 800d334:	4802      	ldr	r0, [pc, #8]	; (800d340 <ClassBStatusReset+0x14>)
 800d336:	f00b f971 	bl	801861c <memset1>
}
 800d33a:	bf00      	nop
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	200006d8 	.word	0x200006d8

0800d344 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d344:	b480      	push	{r7}
 800d346:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d348:	4b02      	ldr	r3, [pc, #8]	; (800d354 <LmhpCompliancePackageFactory+0x10>)
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bc80      	pop	{r7}
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	200000e8 	.word	0x200000e8

0800d358 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af02      	add	r7, sp, #8
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	4613      	mov	r3, r2
 800d364:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d018      	beq.n	800d39e <LmhpComplianceInit+0x46>
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d015      	beq.n	800d39e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800d372:	4a19      	ldr	r2, [pc, #100]	; (800d3d8 <LmhpComplianceInit+0x80>)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d378:	4a18      	ldr	r2, [pc, #96]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d37e:	4a17      	ldr	r2, [pc, #92]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d384:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d386:	2201      	movs	r2, #1
 800d388:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d38a:	2300      	movs	r3, #0
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	4b14      	ldr	r3, [pc, #80]	; (800d3e0 <LmhpComplianceInit+0x88>)
 800d390:	2200      	movs	r2, #0
 800d392:	f04f 31ff 	mov.w	r1, #4294967295
 800d396:	4813      	ldr	r0, [pc, #76]	; (800d3e4 <LmhpComplianceInit+0x8c>)
 800d398:	f00f f9ac 	bl	801c6f4 <UTIL_TIMER_Create>
 800d39c:	e005      	b.n	800d3aa <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d39e:	4b0e      	ldr	r3, [pc, #56]	; (800d3d8 <LmhpComplianceInit+0x80>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d3a4:	4b0d      	ldr	r3, [pc, #52]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d3aa:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d3b0:	f7ff ffbc 	bl	800d32c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d3b4:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d3ba:	4b08      	ldr	r3, [pc, #32]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d3c0:	4b06      	ldr	r3, [pc, #24]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d3c8:	4b04      	ldr	r3, [pc, #16]	; (800d3dc <LmhpComplianceInit+0x84>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800d3d0:	bf00      	nop
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	200006fc 	.word	0x200006fc
 800d3dc:	200006c4 	.word	0x200006c4
 800d3e0:	0800dccd 	.word	0x0800dccd
 800d3e4:	20000700 	.word	0x20000700

0800d3e8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d3ec:	4b02      	ldr	r3, [pc, #8]	; (800d3f8 <LmhpComplianceIsInitialized+0x10>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bc80      	pop	{r7}
 800d3f6:	4770      	bx	lr
 800d3f8:	200006c4 	.word	0x200006c4

0800d3fc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d400:	4b02      	ldr	r3, [pc, #8]	; (800d40c <LmhpComplianceIsTxPending+0x10>)
 800d402:	785b      	ldrb	r3, [r3, #1]
}
 800d404:	4618      	mov	r0, r3
 800d406:	46bd      	mov	sp, r7
 800d408:	bc80      	pop	{r7}
 800d40a:	4770      	bx	lr
 800d40c:	200006c4 	.word	0x200006c4

0800d410 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d410:	b590      	push	{r4, r7, lr}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d416:	4b33      	ldr	r3, [pc, #204]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d418:	785b      	ldrb	r3, [r3, #1]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d03f      	beq.n	800d49e <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d41e:	f00f fb27 	bl	801ca70 <UTIL_TIMER_GetCurrentTime>
 800d422:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d424:	4b2f      	ldr	r3, [pc, #188]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d426:	685c      	ldr	r4, [r3, #4]
 800d428:	f7ff f966 	bl	800c6f8 <LmHandlerGetDutyCycleWaitTime>
 800d42c:	4603      	mov	r3, r0
 800d42e:	4423      	add	r3, r4
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	429a      	cmp	r2, r3
 800d434:	d942      	bls.n	800d4bc <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d436:	4b2b      	ldr	r3, [pc, #172]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d438:	7a9b      	ldrb	r3, [r3, #10]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d03e      	beq.n	800d4bc <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800d43e:	23e0      	movs	r3, #224	; 0xe0
 800d440:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d442:	4b28      	ldr	r3, [pc, #160]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d444:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800d446:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d448:	4b26      	ldr	r3, [pc, #152]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d44a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800d44c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d44e:	23ff      	movs	r3, #255	; 0xff
 800d450:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d452:	4b24      	ldr	r3, [pc, #144]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d454:	7a19      	ldrb	r1, [r3, #8]
 800d456:	463b      	mov	r3, r7
 800d458:	2201      	movs	r2, #1
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff f9f4 	bl	800c848 <LmHandlerSend>
 800d460:	4603      	mov	r3, r0
 800d462:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800d464:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d468:	f113 0f02 	cmn.w	r3, #2
 800d46c:	d004      	beq.n	800d478 <LmhpComplianceProcess+0x68>
 800d46e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d472:	f113 0f06 	cmn.w	r3, #6
 800d476:	d108      	bne.n	800d48a <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800d478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d47c:	481a      	ldr	r0, [pc, #104]	; (800d4e8 <LmhpComplianceProcess+0xd8>)
 800d47e:	f00f fa4d 	bl	801c91c <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800d482:	4819      	ldr	r0, [pc, #100]	; (800d4e8 <LmhpComplianceProcess+0xd8>)
 800d484:	f00f f96c 	bl	801c760 <UTIL_TIMER_Start>
 800d488:	e005      	b.n	800d496 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d48a:	4b16      	ldr	r3, [pc, #88]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d490:	4b14      	ldr	r3, [pc, #80]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d492:	2200      	movs	r2, #0
 800d494:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d496:	4a13      	ldr	r2, [pc, #76]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6053      	str	r3, [r2, #4]
 800d49c:	e00e      	b.n	800d4bc <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d49e:	4b11      	ldr	r3, [pc, #68]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d4a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d009      	beq.n	800d4bc <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d4a8:	4b0e      	ldr	r3, [pc, #56]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d4b0:	4b0c      	ldr	r3, [pc, #48]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d4b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff fab4 	bl	800ca24 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d4bc:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d4be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00a      	beq.n	800d4dc <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d4c6:	4b07      	ldr	r3, [pc, #28]	; (800d4e4 <LmhpComplianceProcess+0xd4>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d4ce:	4b07      	ldr	r3, [pc, #28]	; (800d4ec <LmhpComplianceProcess+0xdc>)
 800d4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d4d6:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <LmhpComplianceProcess+0xdc>)
 800d4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4da:	4798      	blx	r3
        }
    }
}
 800d4dc:	bf00      	nop
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd90      	pop	{r4, r7, pc}
 800d4e4:	200006c4 	.word	0x200006c4
 800d4e8:	20000700 	.word	0x20000700
 800d4ec:	200000e8 	.word	0x200000e8

0800d4f0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d4f0:	b5b0      	push	{r4, r5, r7, lr}
 800d4f2:	b0a4      	sub	sp, #144	; 0x90
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d4fe:	4bce      	ldr	r3, [pc, #824]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	f083 0301 	eor.w	r3, r3, #1
 800d506:	b2db      	uxtb	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f040 83b5 	bne.w	800dc78 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	78db      	ldrb	r3, [r3, #3]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d103      	bne.n	800d51e <LmhpComplianceOnMcpsIndication+0x2e>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	7b9b      	ldrb	r3, [r3, #14]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d005      	beq.n	800d52a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d51e:	4bc6      	ldr	r3, [pc, #792]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d520:	8a1b      	ldrh	r3, [r3, #16]
 800d522:	3301      	adds	r3, #1
 800d524:	b29a      	uxth	r2, r3
 800d526:	4bc4      	ldr	r3, [pc, #784]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d528:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7b5b      	ldrb	r3, [r3, #13]
 800d52e:	f083 0301 	eor.w	r3, r3, #1
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b00      	cmp	r3, #0
 800d536:	f040 83a1 	bne.w	800dc7c <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	78db      	ldrb	r3, [r3, #3]
 800d53e:	2be0      	cmp	r3, #224	; 0xe0
 800d540:	f040 839e 	bne.w	800dc80 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d544:	4bbc      	ldr	r3, [pc, #752]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d546:	2200      	movs	r2, #0
 800d548:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	689a      	ldr	r2, [r3, #8]
 800d54e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d552:	1c59      	adds	r1, r3, #1
 800d554:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d558:	4413      	add	r3, r2
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	2b7f      	cmp	r3, #127	; 0x7f
 800d55e:	f200 836e 	bhi.w	800dc3e <LmhpComplianceOnMcpsIndication+0x74e>
 800d562:	a201      	add	r2, pc, #4	; (adr r2, 800d568 <LmhpComplianceOnMcpsIndication+0x78>)
 800d564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d568:	0800d769 	.word	0x0800d769
 800d56c:	0800d7ad 	.word	0x0800d7ad
 800d570:	0800d7b7 	.word	0x0800d7b7
 800d574:	0800d7c3 	.word	0x0800d7c3
 800d578:	0800d7e5 	.word	0x0800d7e5
 800d57c:	0800d813 	.word	0x0800d813
 800d580:	0800d841 	.word	0x0800d841
 800d584:	0800d89f 	.word	0x0800d89f
 800d588:	0800d8f7 	.word	0x0800d8f7
 800d58c:	0800d963 	.word	0x0800d963
 800d590:	0800d9b3 	.word	0x0800d9b3
 800d594:	0800dc3f 	.word	0x0800dc3f
 800d598:	0800dc3f 	.word	0x0800dc3f
 800d59c:	0800dc3f 	.word	0x0800dc3f
 800d5a0:	0800dc3f 	.word	0x0800dc3f
 800d5a4:	0800dc3f 	.word	0x0800dc3f
 800d5a8:	0800dc3f 	.word	0x0800dc3f
 800d5ac:	0800dc3f 	.word	0x0800dc3f
 800d5b0:	0800dc3f 	.word	0x0800dc3f
 800d5b4:	0800dc3f 	.word	0x0800dc3f
 800d5b8:	0800dc3f 	.word	0x0800dc3f
 800d5bc:	0800dc3f 	.word	0x0800dc3f
 800d5c0:	0800dc3f 	.word	0x0800dc3f
 800d5c4:	0800dc3f 	.word	0x0800dc3f
 800d5c8:	0800dc3f 	.word	0x0800dc3f
 800d5cc:	0800dc3f 	.word	0x0800dc3f
 800d5d0:	0800dc3f 	.word	0x0800dc3f
 800d5d4:	0800dc3f 	.word	0x0800dc3f
 800d5d8:	0800dc3f 	.word	0x0800dc3f
 800d5dc:	0800dc3f 	.word	0x0800dc3f
 800d5e0:	0800dc3f 	.word	0x0800dc3f
 800d5e4:	0800dc3f 	.word	0x0800dc3f
 800d5e8:	0800d9bb 	.word	0x0800d9bb
 800d5ec:	0800d9cd 	.word	0x0800d9cd
 800d5f0:	0800d9d5 	.word	0x0800d9d5
 800d5f4:	0800dc3f 	.word	0x0800dc3f
 800d5f8:	0800dc3f 	.word	0x0800dc3f
 800d5fc:	0800dc3f 	.word	0x0800dc3f
 800d600:	0800dc3f 	.word	0x0800dc3f
 800d604:	0800dc3f 	.word	0x0800dc3f
 800d608:	0800dc3f 	.word	0x0800dc3f
 800d60c:	0800dc3f 	.word	0x0800dc3f
 800d610:	0800dc3f 	.word	0x0800dc3f
 800d614:	0800dc3f 	.word	0x0800dc3f
 800d618:	0800dc3f 	.word	0x0800dc3f
 800d61c:	0800dc3f 	.word	0x0800dc3f
 800d620:	0800dc3f 	.word	0x0800dc3f
 800d624:	0800dc3f 	.word	0x0800dc3f
 800d628:	0800dc3f 	.word	0x0800dc3f
 800d62c:	0800dc3f 	.word	0x0800dc3f
 800d630:	0800dc3f 	.word	0x0800dc3f
 800d634:	0800dc3f 	.word	0x0800dc3f
 800d638:	0800dc3f 	.word	0x0800dc3f
 800d63c:	0800dc3f 	.word	0x0800dc3f
 800d640:	0800dc3f 	.word	0x0800dc3f
 800d644:	0800dc3f 	.word	0x0800dc3f
 800d648:	0800dc3f 	.word	0x0800dc3f
 800d64c:	0800dc3f 	.word	0x0800dc3f
 800d650:	0800dc3f 	.word	0x0800dc3f
 800d654:	0800dc3f 	.word	0x0800dc3f
 800d658:	0800dc3f 	.word	0x0800dc3f
 800d65c:	0800dc3f 	.word	0x0800dc3f
 800d660:	0800dc3f 	.word	0x0800dc3f
 800d664:	0800dc3f 	.word	0x0800dc3f
 800d668:	0800dc3f 	.word	0x0800dc3f
 800d66c:	0800dc3f 	.word	0x0800dc3f
 800d670:	0800dc3f 	.word	0x0800dc3f
 800d674:	0800dc3f 	.word	0x0800dc3f
 800d678:	0800dc3f 	.word	0x0800dc3f
 800d67c:	0800dc3f 	.word	0x0800dc3f
 800d680:	0800dc3f 	.word	0x0800dc3f
 800d684:	0800dc3f 	.word	0x0800dc3f
 800d688:	0800dc3f 	.word	0x0800dc3f
 800d68c:	0800dc3f 	.word	0x0800dc3f
 800d690:	0800dc3f 	.word	0x0800dc3f
 800d694:	0800dc3f 	.word	0x0800dc3f
 800d698:	0800dc3f 	.word	0x0800dc3f
 800d69c:	0800dc3f 	.word	0x0800dc3f
 800d6a0:	0800dc3f 	.word	0x0800dc3f
 800d6a4:	0800dc3f 	.word	0x0800dc3f
 800d6a8:	0800dc3f 	.word	0x0800dc3f
 800d6ac:	0800dc3f 	.word	0x0800dc3f
 800d6b0:	0800dc3f 	.word	0x0800dc3f
 800d6b4:	0800dc3f 	.word	0x0800dc3f
 800d6b8:	0800dc3f 	.word	0x0800dc3f
 800d6bc:	0800dc3f 	.word	0x0800dc3f
 800d6c0:	0800dc3f 	.word	0x0800dc3f
 800d6c4:	0800dc3f 	.word	0x0800dc3f
 800d6c8:	0800dc3f 	.word	0x0800dc3f
 800d6cc:	0800dc3f 	.word	0x0800dc3f
 800d6d0:	0800dc3f 	.word	0x0800dc3f
 800d6d4:	0800dc3f 	.word	0x0800dc3f
 800d6d8:	0800dc3f 	.word	0x0800dc3f
 800d6dc:	0800dc3f 	.word	0x0800dc3f
 800d6e0:	0800dc3f 	.word	0x0800dc3f
 800d6e4:	0800dc3f 	.word	0x0800dc3f
 800d6e8:	0800dc3f 	.word	0x0800dc3f
 800d6ec:	0800dc3f 	.word	0x0800dc3f
 800d6f0:	0800dc3f 	.word	0x0800dc3f
 800d6f4:	0800dc3f 	.word	0x0800dc3f
 800d6f8:	0800dc3f 	.word	0x0800dc3f
 800d6fc:	0800dc3f 	.word	0x0800dc3f
 800d700:	0800dc3f 	.word	0x0800dc3f
 800d704:	0800dc3f 	.word	0x0800dc3f
 800d708:	0800dc3f 	.word	0x0800dc3f
 800d70c:	0800dc3f 	.word	0x0800dc3f
 800d710:	0800dc3f 	.word	0x0800dc3f
 800d714:	0800dc3f 	.word	0x0800dc3f
 800d718:	0800dc3f 	.word	0x0800dc3f
 800d71c:	0800dc3f 	.word	0x0800dc3f
 800d720:	0800dc3f 	.word	0x0800dc3f
 800d724:	0800dc3f 	.word	0x0800dc3f
 800d728:	0800dc3f 	.word	0x0800dc3f
 800d72c:	0800dc3f 	.word	0x0800dc3f
 800d730:	0800dc3f 	.word	0x0800dc3f
 800d734:	0800dc3f 	.word	0x0800dc3f
 800d738:	0800dc3f 	.word	0x0800dc3f
 800d73c:	0800dc3f 	.word	0x0800dc3f
 800d740:	0800dc3f 	.word	0x0800dc3f
 800d744:	0800dc3f 	.word	0x0800dc3f
 800d748:	0800dc3f 	.word	0x0800dc3f
 800d74c:	0800dc3f 	.word	0x0800dc3f
 800d750:	0800dc3f 	.word	0x0800dc3f
 800d754:	0800dc3f 	.word	0x0800dc3f
 800d758:	0800dc3f 	.word	0x0800dc3f
 800d75c:	0800da07 	.word	0x0800da07
 800d760:	0800dab7 	.word	0x0800dab7
 800d764:	0800dae9 	.word	0x0800dae9
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d768:	4b33      	ldr	r3, [pc, #204]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d76a:	68da      	ldr	r2, [r3, #12]
 800d76c:	4b32      	ldr	r3, [pc, #200]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d76e:	7a9b      	ldrb	r3, [r3, #10]
 800d770:	1c59      	adds	r1, r3, #1
 800d772:	b2c8      	uxtb	r0, r1
 800d774:	4930      	ldr	r1, [pc, #192]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d776:	7288      	strb	r0, [r1, #10]
 800d778:	4413      	add	r3, r2
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d77e:	4b2e      	ldr	r3, [pc, #184]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d780:	68da      	ldr	r2, [r3, #12]
 800d782:	4b2d      	ldr	r3, [pc, #180]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d784:	7a9b      	ldrb	r3, [r3, #10]
 800d786:	1c59      	adds	r1, r3, #1
 800d788:	b2c8      	uxtb	r0, r1
 800d78a:	492b      	ldr	r1, [pc, #172]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d78c:	7288      	strb	r0, [r1, #10]
 800d78e:	4413      	add	r3, r2
 800d790:	2206      	movs	r2, #6
 800d792:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d794:	4b28      	ldr	r3, [pc, #160]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d796:	68da      	ldr	r2, [r3, #12]
 800d798:	4b27      	ldr	r3, [pc, #156]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d79a:	7a9b      	ldrb	r3, [r3, #10]
 800d79c:	1c59      	adds	r1, r3, #1
 800d79e:	b2c8      	uxtb	r0, r1
 800d7a0:	4925      	ldr	r1, [pc, #148]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7a2:	7288      	strb	r0, [r1, #10]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	701a      	strb	r2, [r3, #0]
        break;
 800d7aa:	e251      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d7ac:	4b22      	ldr	r3, [pc, #136]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800d7b4:	e24c      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d7b6:	4b21      	ldr	r3, [pc, #132]	; (800d83c <LmhpComplianceOnMcpsIndication+0x34c>)
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	2002      	movs	r0, #2
 800d7be:	4798      	blx	r3
        break;
 800d7c0:	e246      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	689a      	ldr	r2, [r3, #8]
 800d7c6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7ca:	1c59      	adds	r1, r3, #1
 800d7cc:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d7d0:	4413      	add	r3, r2
 800d7d2:	781a      	ldrb	r2, [r3, #0]
 800d7d4:	4b18      	ldr	r3, [pc, #96]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d7da:	4b17      	ldr	r3, [pc, #92]	; (800d838 <LmhpComplianceOnMcpsIndication+0x348>)
 800d7dc:	2201      	movs	r2, #1
 800d7de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800d7e2:	e235      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d7e4:	2304      	movs	r3, #4
 800d7e6:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	689a      	ldr	r2, [r3, #8]
 800d7ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7f0:	1c59      	adds	r1, r3, #1
 800d7f2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d7f6:	4413      	add	r3, r2
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	bf14      	ite	ne
 800d7fe:	2301      	movne	r3, #1
 800d800:	2300      	moveq	r3, #0
 800d802:	b2db      	uxtb	r3, r3
 800d804:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d806:	f107 030c 	add.w	r3, r7, #12
 800d80a:	4618      	mov	r0, r3
 800d80c:	f004 fa08 	bl	8011c20 <LoRaMacMibSetRequestConfirm>
        break;
 800d810:	e21e      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	689a      	ldr	r2, [r3, #8]
 800d816:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d81a:	1c59      	adds	r1, r3, #1
 800d81c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d820:	4413      	add	r3, r2
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	bf14      	ite	ne
 800d828:	2301      	movne	r3, #1
 800d82a:	2300      	moveq	r3, #0
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	4618      	mov	r0, r3
 800d830:	f005 f824 	bl	801287c <LoRaMacTestSetDutyCycleOn>
        break;
 800d834:	e20c      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
 800d836:	bf00      	nop
 800d838:	200006c4 	.word	0x200006c4
 800d83c:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d840:	4ba5      	ldr	r3, [pc, #660]	; (800dad8 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d842:	f107 040c 	add.w	r4, r7, #12
 800d846:	461d      	mov	r5, r3
 800d848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d84c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d84e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	689a      	ldr	r2, [r3, #8]
 800d85c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d860:	1c59      	adds	r1, r3, #1
 800d862:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d866:	4413      	add	r3, r2
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d86e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d872:	2b0a      	cmp	r3, #10
 800d874:	f200 81e5 	bhi.w	800dc42 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d878:	4b98      	ldr	r3, [pc, #608]	; (800dadc <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f000 81df 	beq.w	800dc42 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d884:	4b95      	ldr	r3, [pc, #596]	; (800dadc <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	685a      	ldr	r2, [r3, #4]
 800d88a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	3390      	adds	r3, #144	; 0x90
 800d892:	443b      	add	r3, r7
 800d894:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800d898:	4618      	mov	r0, r3
 800d89a:	4790      	blx	r2
            }
        }
        break;
 800d89c:	e1d1      	b.n	800dc42 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	689a      	ldr	r2, [r3, #8]
 800d8a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d8a6:	1c59      	adds	r1, r3, #1
 800d8a8:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d8ac:	4413      	add	r3, r2
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d8b4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d004      	beq.n	800d8c6 <LmhpComplianceOnMcpsIndication+0x3d6>
 800d8bc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	f040 81c0 	bne.w	800dc46 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d8c6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	bf14      	ite	ne
 800d8ce:	2301      	movne	r3, #1
 800d8d0:	2300      	moveq	r3, #0
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	4b82      	ldr	r3, [pc, #520]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d8d8:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d8da:	4b80      	ldr	r3, [pc, #512]	; (800dadc <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 81b0 	beq.w	800dc46 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d8e6:	4b7d      	ldr	r3, [pc, #500]	; (800dadc <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	4a7c      	ldr	r2, [pc, #496]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d8ee:	7a12      	ldrb	r2, [r2, #8]
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	4798      	blx	r3
            }
        }
        break;
 800d8f4:	e1a7      	b.n	800dc46 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d8f6:	4b7a      	ldr	r3, [pc, #488]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d8f8:	68da      	ldr	r2, [r3, #12]
 800d8fa:	4b79      	ldr	r3, [pc, #484]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d8fc:	7a9b      	ldrb	r3, [r3, #10]
 800d8fe:	1c59      	adds	r1, r3, #1
 800d900:	b2c8      	uxtb	r0, r1
 800d902:	4977      	ldr	r1, [pc, #476]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d904:	7288      	strb	r0, [r1, #10]
 800d906:	4413      	add	r3, r2
 800d908:	2208      	movs	r2, #8
 800d90a:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d90c:	2301      	movs	r3, #1
 800d90e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800d912:	e019      	b.n	800d948 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	689a      	ldr	r2, [r3, #8]
 800d918:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d91c:	1c59      	adds	r1, r3, #1
 800d91e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d922:	4413      	add	r3, r2
 800d924:	781a      	ldrb	r2, [r3, #0]
 800d926:	4b6e      	ldr	r3, [pc, #440]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d928:	68d9      	ldr	r1, [r3, #12]
 800d92a:	4b6d      	ldr	r3, [pc, #436]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d92c:	7a9b      	ldrb	r3, [r3, #10]
 800d92e:	1c58      	adds	r0, r3, #1
 800d930:	b2c4      	uxtb	r4, r0
 800d932:	486b      	ldr	r0, [pc, #428]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d934:	7284      	strb	r4, [r0, #10]
 800d936:	440b      	add	r3, r1
 800d938:	3201      	adds	r2, #1
 800d93a:	b2d2      	uxtb	r2, r2
 800d93c:	701a      	strb	r2, [r3, #0]
             i++ )
 800d93e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800d942:	3301      	adds	r3, #1
 800d944:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d948:	4b65      	ldr	r3, [pc, #404]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d94a:	7a5a      	ldrb	r2, [r3, #9]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7b1b      	ldrb	r3, [r3, #12]
 800d950:	4293      	cmp	r3, r2
 800d952:	bf28      	it	cs
 800d954:	4613      	movcs	r3, r2
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d3d9      	bcc.n	800d914 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800d960:	e176      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d962:	4b5f      	ldr	r3, [pc, #380]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	4b5e      	ldr	r3, [pc, #376]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d968:	7a9b      	ldrb	r3, [r3, #10]
 800d96a:	1c59      	adds	r1, r3, #1
 800d96c:	b2c8      	uxtb	r0, r1
 800d96e:	495c      	ldr	r1, [pc, #368]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d970:	7288      	strb	r0, [r1, #10]
 800d972:	4413      	add	r3, r2
 800d974:	2209      	movs	r2, #9
 800d976:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d978:	4b59      	ldr	r3, [pc, #356]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d97a:	8a18      	ldrh	r0, [r3, #16]
 800d97c:	4b58      	ldr	r3, [pc, #352]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	4b57      	ldr	r3, [pc, #348]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d982:	7a9b      	ldrb	r3, [r3, #10]
 800d984:	1c59      	adds	r1, r3, #1
 800d986:	b2cc      	uxtb	r4, r1
 800d988:	4955      	ldr	r1, [pc, #340]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d98a:	728c      	strb	r4, [r1, #10]
 800d98c:	4413      	add	r3, r2
 800d98e:	b2c2      	uxtb	r2, r0
 800d990:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d992:	4b53      	ldr	r3, [pc, #332]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d994:	8a1b      	ldrh	r3, [r3, #16]
 800d996:	0a1b      	lsrs	r3, r3, #8
 800d998:	b298      	uxth	r0, r3
 800d99a:	4b51      	ldr	r3, [pc, #324]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	4b50      	ldr	r3, [pc, #320]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9a0:	7a9b      	ldrb	r3, [r3, #10]
 800d9a2:	1c59      	adds	r1, r3, #1
 800d9a4:	b2cc      	uxtb	r4, r1
 800d9a6:	494e      	ldr	r1, [pc, #312]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9a8:	728c      	strb	r4, [r1, #10]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	b2c2      	uxtb	r2, r0
 800d9ae:	701a      	strb	r2, [r3, #0]
        break;
 800d9b0:	e14e      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800d9b2:	4b4b      	ldr	r3, [pc, #300]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	821a      	strh	r2, [r3, #16]
        break;
 800d9b8:	e14a      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800d9ba:	2304      	movs	r3, #4
 800d9bc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800d9c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f004 fc9b 	bl	8012300 <LoRaMacMlmeRequest>
        break;
 800d9ca:	e141      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800d9cc:	4b45      	ldr	r3, [pc, #276]	; (800dae4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d0:	4798      	blx	r3
        break;
 800d9d2:	e13d      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689a      	ldr	r2, [r3, #8]
 800d9d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d9dc:	1c59      	adds	r1, r3, #1
 800d9de:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d9e2:	4413      	add	r3, r2
 800d9e4:	781a      	ldrb	r2, [r3, #0]
 800d9e6:	4b3e      	ldr	r3, [pc, #248]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9e8:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d9ea:	4b3c      	ldr	r3, [pc, #240]	; (800dadc <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 812a 	beq.w	800dc4a <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d9f6:	4b39      	ldr	r3, [pc, #228]	; (800dadc <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	4a38      	ldr	r2, [pc, #224]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d9fe:	7d52      	ldrb	r2, [r2, #21]
 800da00:	4610      	mov	r0, r2
 800da02:	4798      	blx	r3
        }
        break;
 800da04:	e121      	b.n	800dc4a <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	7b1b      	ldrb	r3, [r3, #12]
 800da0a:	2b07      	cmp	r3, #7
 800da0c:	f040 811f 	bne.w	800dc4e <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800da10:	2305      	movs	r3, #5
 800da12:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	689a      	ldr	r2, [r3, #8]
 800da1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da1e:	4413      	add	r3, r2
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	b21a      	sxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6899      	ldr	r1, [r3, #8]
 800da28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da2c:	3301      	adds	r3, #1
 800da2e:	440b      	add	r3, r1
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	021b      	lsls	r3, r3, #8
 800da34:	b21b      	sxth	r3, r3
 800da36:	4313      	orrs	r3, r2
 800da38:	b21b      	sxth	r3, r3
 800da3a:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800da3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cmdIndex += 2;
 800da40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da44:	3302      	adds	r3, #2
 800da46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	689a      	ldr	r2, [r3, #8]
 800da4e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da52:	4413      	add	r3, r2
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	4619      	mov	r1, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689a      	ldr	r2, [r3, #8]
 800da5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da60:	3301      	adds	r3, #1
 800da62:	4413      	add	r3, r2
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	021b      	lsls	r3, r3, #8
 800da68:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6899      	ldr	r1, [r3, #8]
 800da70:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da74:	3302      	adds	r3, #2
 800da76:	440b      	add	r3, r1
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800da7c:	4313      	orrs	r3, r2
 800da7e:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800da80:	2364      	movs	r3, #100	; 0x64
 800da82:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800da86:	64bb      	str	r3, [r7, #72]	; 0x48
                100;
            cmdIndex += 3;
 800da88:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da8c:	3303      	adds	r3, #3
 800da8e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	689a      	ldr	r2, [r3, #8]
 800da96:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da9a:	1c59      	adds	r1, r3, #1
 800da9c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800daa0:	4413      	add	r3, r2
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	b25b      	sxtb	r3, r3
 800daa6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800daaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800daae:	4618      	mov	r0, r3
 800dab0:	f004 fc26 	bl	8012300 <LoRaMacMlmeRequest>
        }
        break;
 800dab4:	e0cb      	b.n	800dc4e <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800dab6:	2339      	movs	r3, #57	; 0x39
 800dab8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        mibReq.Param.IsCertPortOn = false;
 800dabc:	2300      	movs	r3, #0
 800dabe:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dac2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dac6:	4618      	mov	r0, r3
 800dac8:	f004 f8aa 	bl	8011c20 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800dacc:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800dad4:	e0bc      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
 800dad6:	bf00      	nop
 800dad8:	0801d9c8 	.word	0x0801d9c8
 800dadc:	200006fc 	.word	0x200006fc
 800dae0:	200006c4 	.word	0x200006c4
 800dae4:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800dae8:	232a      	movs	r3, #42	; 0x2a
 800daea:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800daec:	f107 030c 	add.w	r3, r7, #12
 800daf0:	4618      	mov	r0, r3
 800daf2:	f003 feef 	bl	80118d4 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	63bb      	str	r3, [r7, #56]	; 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800dafe:	4b62      	ldr	r3, [pc, #392]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db00:	68da      	ldr	r2, [r3, #12]
 800db02:	4b61      	ldr	r3, [pc, #388]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db04:	7a9b      	ldrb	r3, [r3, #10]
 800db06:	1c59      	adds	r1, r3, #1
 800db08:	b2c8      	uxtb	r0, r1
 800db0a:	495f      	ldr	r1, [pc, #380]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db0c:	7288      	strb	r0, [r1, #10]
 800db0e:	4413      	add	r3, r2
 800db10:	227f      	movs	r2, #127	; 0x7f
 800db12:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800db14:	4b5d      	ldr	r3, [pc, #372]	; (800dc8c <LmhpComplianceOnMcpsIndication+0x79c>)
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	4b5b      	ldr	r3, [pc, #364]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db1a:	68d9      	ldr	r1, [r3, #12]
 800db1c:	4b5a      	ldr	r3, [pc, #360]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db1e:	7a9b      	ldrb	r3, [r3, #10]
 800db20:	1c58      	adds	r0, r3, #1
 800db22:	b2c4      	uxtb	r4, r0
 800db24:	4858      	ldr	r0, [pc, #352]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db26:	7284      	strb	r4, [r0, #10]
 800db28:	440b      	add	r3, r1
 800db2a:	78d2      	ldrb	r2, [r2, #3]
 800db2c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800db2e:	4b57      	ldr	r3, [pc, #348]	; (800dc8c <LmhpComplianceOnMcpsIndication+0x79c>)
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	4b55      	ldr	r3, [pc, #340]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db34:	68d9      	ldr	r1, [r3, #12]
 800db36:	4b54      	ldr	r3, [pc, #336]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db38:	7a9b      	ldrb	r3, [r3, #10]
 800db3a:	1c58      	adds	r0, r3, #1
 800db3c:	b2c4      	uxtb	r4, r0
 800db3e:	4852      	ldr	r0, [pc, #328]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db40:	7284      	strb	r4, [r0, #10]
 800db42:	440b      	add	r3, r1
 800db44:	7892      	ldrb	r2, [r2, #2]
 800db46:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800db48:	4b50      	ldr	r3, [pc, #320]	; (800dc8c <LmhpComplianceOnMcpsIndication+0x79c>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	4b4e      	ldr	r3, [pc, #312]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db4e:	68d9      	ldr	r1, [r3, #12]
 800db50:	4b4d      	ldr	r3, [pc, #308]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db52:	7a9b      	ldrb	r3, [r3, #10]
 800db54:	1c58      	adds	r0, r3, #1
 800db56:	b2c4      	uxtb	r4, r0
 800db58:	484b      	ldr	r0, [pc, #300]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db5a:	7284      	strb	r4, [r0, #10]
 800db5c:	440b      	add	r3, r1
 800db5e:	7852      	ldrb	r2, [r2, #1]
 800db60:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800db62:	4b4a      	ldr	r3, [pc, #296]	; (800dc8c <LmhpComplianceOnMcpsIndication+0x79c>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	4b48      	ldr	r3, [pc, #288]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db68:	68d9      	ldr	r1, [r3, #12]
 800db6a:	4b47      	ldr	r3, [pc, #284]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db6c:	7a9b      	ldrb	r3, [r3, #10]
 800db6e:	1c58      	adds	r0, r3, #1
 800db70:	b2c4      	uxtb	r4, r0
 800db72:	4845      	ldr	r0, [pc, #276]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db74:	7284      	strb	r4, [r0, #10]
 800db76:	440b      	add	r3, r1
 800db78:	7812      	ldrb	r2, [r2, #0]
 800db7a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800db7c:	4b42      	ldr	r3, [pc, #264]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db7e:	68da      	ldr	r2, [r3, #12]
 800db80:	4b41      	ldr	r3, [pc, #260]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db82:	7a9b      	ldrb	r3, [r3, #10]
 800db84:	1c59      	adds	r1, r3, #1
 800db86:	b2c8      	uxtb	r0, r1
 800db88:	493f      	ldr	r1, [pc, #252]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db8a:	7288      	strb	r0, [r1, #10]
 800db8c:	4413      	add	r3, r2
 800db8e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800db92:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800db94:	4b3c      	ldr	r3, [pc, #240]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db96:	68da      	ldr	r2, [r3, #12]
 800db98:	4b3b      	ldr	r3, [pc, #236]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800db9a:	7a9b      	ldrb	r3, [r3, #10]
 800db9c:	1c59      	adds	r1, r3, #1
 800db9e:	b2c8      	uxtb	r0, r1
 800dba0:	4939      	ldr	r1, [pc, #228]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dba2:	7288      	strb	r0, [r1, #10]
 800dba4:	4413      	add	r3, r2
 800dba6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800dbaa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800dbac:	4b36      	ldr	r3, [pc, #216]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbae:	68da      	ldr	r2, [r3, #12]
 800dbb0:	4b35      	ldr	r3, [pc, #212]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbb2:	7a9b      	ldrb	r3, [r3, #10]
 800dbb4:	1c59      	adds	r1, r3, #1
 800dbb6:	b2c8      	uxtb	r0, r1
 800dbb8:	4933      	ldr	r1, [pc, #204]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbba:	7288      	strb	r0, [r1, #10]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800dbc2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800dbc4:	4b30      	ldr	r3, [pc, #192]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbc6:	68da      	ldr	r2, [r3, #12]
 800dbc8:	4b2f      	ldr	r3, [pc, #188]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbca:	7a9b      	ldrb	r3, [r3, #10]
 800dbcc:	1c59      	adds	r1, r3, #1
 800dbce:	b2c8      	uxtb	r0, r1
 800dbd0:	492d      	ldr	r1, [pc, #180]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbd2:	7288      	strb	r0, [r1, #10]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800dbda:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800dbdc:	4b2a      	ldr	r3, [pc, #168]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbde:	68da      	ldr	r2, [r3, #12]
 800dbe0:	4b29      	ldr	r3, [pc, #164]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbe2:	7a9b      	ldrb	r3, [r3, #10]
 800dbe4:	1c59      	adds	r1, r3, #1
 800dbe6:	b2c8      	uxtb	r0, r1
 800dbe8:	4927      	ldr	r1, [pc, #156]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbea:	7288      	strb	r0, [r1, #10]
 800dbec:	4413      	add	r3, r2
 800dbee:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800dbf2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800dbf4:	4b24      	ldr	r3, [pc, #144]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbf6:	68da      	ldr	r2, [r3, #12]
 800dbf8:	4b23      	ldr	r3, [pc, #140]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dbfa:	7a9b      	ldrb	r3, [r3, #10]
 800dbfc:	1c59      	adds	r1, r3, #1
 800dbfe:	b2c8      	uxtb	r0, r1
 800dc00:	4921      	ldr	r1, [pc, #132]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc02:	7288      	strb	r0, [r1, #10]
 800dc04:	4413      	add	r3, r2
 800dc06:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800dc0a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800dc0c:	4b1e      	ldr	r3, [pc, #120]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc0e:	68da      	ldr	r2, [r3, #12]
 800dc10:	4b1d      	ldr	r3, [pc, #116]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc12:	7a9b      	ldrb	r3, [r3, #10]
 800dc14:	1c59      	adds	r1, r3, #1
 800dc16:	b2c8      	uxtb	r0, r1
 800dc18:	491b      	ldr	r1, [pc, #108]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc1a:	7288      	strb	r0, [r1, #10]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800dc22:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800dc24:	4b18      	ldr	r3, [pc, #96]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc26:	68da      	ldr	r2, [r3, #12]
 800dc28:	4b17      	ldr	r3, [pc, #92]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc2a:	7a9b      	ldrb	r3, [r3, #10]
 800dc2c:	1c59      	adds	r1, r3, #1
 800dc2e:	b2c8      	uxtb	r0, r1
 800dc30:	4915      	ldr	r1, [pc, #84]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc32:	7288      	strb	r0, [r1, #10]
 800dc34:	4413      	add	r3, r2
 800dc36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dc3a:	701a      	strb	r2, [r3, #0]
        break;
 800dc3c:	e008      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800dc3e:	bf00      	nop
 800dc40:	e006      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc42:	bf00      	nop
 800dc44:	e004      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc46:	bf00      	nop
 800dc48:	e002      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc4a:	bf00      	nop
 800dc4c:	e000      	b.n	800dc50 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800dc4e:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800dc50:	4b0d      	ldr	r3, [pc, #52]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc52:	7a9b      	ldrb	r3, [r3, #10]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d008      	beq.n	800dc6a <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800dc58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dc5c:	480c      	ldr	r0, [pc, #48]	; (800dc90 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dc5e:	f00e fe5d 	bl	801c91c <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800dc62:	480b      	ldr	r0, [pc, #44]	; (800dc90 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dc64:	f00e fd7c 	bl	801c760 <UTIL_TIMER_Start>
 800dc68:	e00b      	b.n	800dc82 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800dc6a:	4809      	ldr	r0, [pc, #36]	; (800dc90 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800dc6c:	f00e fde6 	bl	801c83c <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800dc70:	4b05      	ldr	r3, [pc, #20]	; (800dc88 <LmhpComplianceOnMcpsIndication+0x798>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	705a      	strb	r2, [r3, #1]
 800dc76:	e004      	b.n	800dc82 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dc78:	bf00      	nop
 800dc7a:	e002      	b.n	800dc82 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dc7c:	bf00      	nop
 800dc7e:	e000      	b.n	800dc82 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800dc80:	bf00      	nop
    }
}
 800dc82:	3790      	adds	r7, #144	; 0x90
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bdb0      	pop	{r4, r5, r7, pc}
 800dc88:	200006c4 	.word	0x200006c4
 800dc8c:	200006fc 	.word	0x200006fc
 800dc90:	20000700 	.word	0x20000700

0800dc94 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800dc9c:	bf00      	nop
    }
}
 800dc9e:	bf00      	nop
 800dca0:	370c      	adds	r7, #12
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bc80      	pop	{r7}
 800dca6:	4770      	bx	lr

0800dca8 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800dcb0:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <LmhpComplianceOnMlmeIndication+0x20>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	f083 0301 	eor.w	r3, r3, #1
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b00      	cmp	r3, #0
    {
        return;
 800dcbc:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bc80      	pop	{r7}
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	200006c4 	.word	0x200006c4

0800dccc <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800dcd4:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <OnProcessTimer+0x1c>)
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800dcda:	4b04      	ldr	r3, [pc, #16]	; (800dcec <OnProcessTimer+0x20>)
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	4798      	blx	r3
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	200006c4 	.word	0x200006c4
 800dcec:	200000e8 	.word	0x200000e8

0800dcf0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800dcf0:	b590      	push	{r4, r7, lr}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800dcf6:	f00e febb 	bl	801ca70 <UTIL_TIMER_GetCurrentTime>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	4a16      	ldr	r2, [pc, #88]	; (800dd58 <OnRadioTxDone+0x68>)
 800dcfe:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800dd00:	4c16      	ldr	r4, [pc, #88]	; (800dd5c <OnRadioTxDone+0x6c>)
 800dd02:	463b      	mov	r3, r7
 800dd04:	4618      	mov	r0, r3
 800dd06:	f00e f82d 	bl	801bd64 <SysTimeGet>
 800dd0a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800dd0e:	463a      	mov	r2, r7
 800dd10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd14:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800dd18:	4a11      	ldr	r2, [pc, #68]	; (800dd60 <OnRadioTxDone+0x70>)
 800dd1a:	7813      	ldrb	r3, [r2, #0]
 800dd1c:	f043 0320 	orr.w	r3, r3, #32
 800dd20:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dd22:	4b0e      	ldr	r3, [pc, #56]	; (800dd5c <OnRadioTxDone+0x6c>)
 800dd24:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00a      	beq.n	800dd42 <OnRadioTxDone+0x52>
 800dd2c:	4b0b      	ldr	r3, [pc, #44]	; (800dd5c <OnRadioTxDone+0x6c>)
 800dd2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dd32:	691b      	ldr	r3, [r3, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d004      	beq.n	800dd42 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dd38:	4b08      	ldr	r3, [pc, #32]	; (800dd5c <OnRadioTxDone+0x6c>)
 800dd3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800dd42:	4b08      	ldr	r3, [pc, #32]	; (800dd64 <OnRadioTxDone+0x74>)
 800dd44:	2201      	movs	r2, #1
 800dd46:	2100      	movs	r1, #0
 800dd48:	2002      	movs	r0, #2
 800dd4a:	f00e ff81 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800dd4e:	bf00      	nop
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd90      	pop	{r4, r7, pc}
 800dd56:	bf00      	nop
 800dd58:	200017e4 	.word	0x200017e4
 800dd5c:	20000718 	.word	0x20000718
 800dd60:	200017e0 	.word	0x200017e0
 800dd64:	0801d9f4 	.word	0x0801d9f4

0800dd68 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	4608      	mov	r0, r1
 800dd72:	4611      	mov	r1, r2
 800dd74:	461a      	mov	r2, r3
 800dd76:	4603      	mov	r3, r0
 800dd78:	817b      	strh	r3, [r7, #10]
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	813b      	strh	r3, [r7, #8]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800dd82:	f00e fe75 	bl	801ca70 <UTIL_TIMER_GetCurrentTime>
 800dd86:	4603      	mov	r3, r0
 800dd88:	4a18      	ldr	r2, [pc, #96]	; (800ddec <OnRadioRxDone+0x84>)
 800dd8a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800dd8c:	4a17      	ldr	r2, [pc, #92]	; (800ddec <OnRadioRxDone+0x84>)
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800dd92:	4a16      	ldr	r2, [pc, #88]	; (800ddec <OnRadioRxDone+0x84>)
 800dd94:	897b      	ldrh	r3, [r7, #10]
 800dd96:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800dd98:	4a14      	ldr	r2, [pc, #80]	; (800ddec <OnRadioRxDone+0x84>)
 800dd9a:	893b      	ldrh	r3, [r7, #8]
 800dd9c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800dd9e:	4a13      	ldr	r2, [pc, #76]	; (800ddec <OnRadioRxDone+0x84>)
 800dda0:	79fb      	ldrb	r3, [r7, #7]
 800dda2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800dda4:	4a12      	ldr	r2, [pc, #72]	; (800ddf0 <OnRadioRxDone+0x88>)
 800dda6:	7813      	ldrb	r3, [r2, #0]
 800dda8:	f043 0310 	orr.w	r3, r3, #16
 800ddac:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800ddae:	4a10      	ldr	r2, [pc, #64]	; (800ddf0 <OnRadioRxDone+0x88>)
 800ddb0:	7813      	ldrb	r3, [r2, #0]
 800ddb2:	f043 0301 	orr.w	r3, r3, #1
 800ddb6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ddb8:	4b0e      	ldr	r3, [pc, #56]	; (800ddf4 <OnRadioRxDone+0x8c>)
 800ddba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00a      	beq.n	800ddd8 <OnRadioRxDone+0x70>
 800ddc2:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <OnRadioRxDone+0x8c>)
 800ddc4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d004      	beq.n	800ddd8 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ddce:	4b09      	ldr	r3, [pc, #36]	; (800ddf4 <OnRadioRxDone+0x8c>)
 800ddd0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ddd8:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <OnRadioRxDone+0x90>)
 800ddda:	2201      	movs	r2, #1
 800dddc:	2100      	movs	r1, #0
 800ddde:	2002      	movs	r0, #2
 800dde0:	f00e ff36 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800dde4:	bf00      	nop
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	200017e8 	.word	0x200017e8
 800ddf0:	200017e0 	.word	0x200017e0
 800ddf4:	20000718 	.word	0x20000718
 800ddf8:	0801da04 	.word	0x0801da04

0800ddfc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800de00:	4a0e      	ldr	r2, [pc, #56]	; (800de3c <OnRadioTxTimeout+0x40>)
 800de02:	7813      	ldrb	r3, [r2, #0]
 800de04:	f043 0308 	orr.w	r3, r3, #8
 800de08:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800de0a:	4b0d      	ldr	r3, [pc, #52]	; (800de40 <OnRadioTxTimeout+0x44>)
 800de0c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00a      	beq.n	800de2a <OnRadioTxTimeout+0x2e>
 800de14:	4b0a      	ldr	r3, [pc, #40]	; (800de40 <OnRadioTxTimeout+0x44>)
 800de16:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d004      	beq.n	800de2a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <OnRadioTxTimeout+0x44>)
 800de22:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800de26:	691b      	ldr	r3, [r3, #16]
 800de28:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800de2a:	4b06      	ldr	r3, [pc, #24]	; (800de44 <OnRadioTxTimeout+0x48>)
 800de2c:	2201      	movs	r2, #1
 800de2e:	2100      	movs	r1, #0
 800de30:	2002      	movs	r0, #2
 800de32:	f00e ff0d 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800de36:	bf00      	nop
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	200017e0 	.word	0x200017e0
 800de40:	20000718 	.word	0x20000718
 800de44:	0801da14 	.word	0x0801da14

0800de48 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800de4c:	4a0b      	ldr	r2, [pc, #44]	; (800de7c <OnRadioRxError+0x34>)
 800de4e:	7813      	ldrb	r3, [r2, #0]
 800de50:	f043 0304 	orr.w	r3, r3, #4
 800de54:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800de56:	4b0a      	ldr	r3, [pc, #40]	; (800de80 <OnRadioRxError+0x38>)
 800de58:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00a      	beq.n	800de76 <OnRadioRxError+0x2e>
 800de60:	4b07      	ldr	r3, [pc, #28]	; (800de80 <OnRadioRxError+0x38>)
 800de62:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d004      	beq.n	800de76 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800de6c:	4b04      	ldr	r3, [pc, #16]	; (800de80 <OnRadioRxError+0x38>)
 800de6e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800de72:	691b      	ldr	r3, [r3, #16]
 800de74:	4798      	blx	r3
    }
}
 800de76:	bf00      	nop
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	200017e0 	.word	0x200017e0
 800de80:	20000718 	.word	0x20000718

0800de84 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800de84:	b580      	push	{r7, lr}
 800de86:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800de88:	4a0e      	ldr	r2, [pc, #56]	; (800dec4 <OnRadioRxTimeout+0x40>)
 800de8a:	7813      	ldrb	r3, [r2, #0]
 800de8c:	f043 0302 	orr.w	r3, r3, #2
 800de90:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800de92:	4b0d      	ldr	r3, [pc, #52]	; (800dec8 <OnRadioRxTimeout+0x44>)
 800de94:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00a      	beq.n	800deb2 <OnRadioRxTimeout+0x2e>
 800de9c:	4b0a      	ldr	r3, [pc, #40]	; (800dec8 <OnRadioRxTimeout+0x44>)
 800de9e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d004      	beq.n	800deb2 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dea8:	4b07      	ldr	r3, [pc, #28]	; (800dec8 <OnRadioRxTimeout+0x44>)
 800deaa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800deb2:	4b06      	ldr	r3, [pc, #24]	; (800decc <OnRadioRxTimeout+0x48>)
 800deb4:	2201      	movs	r2, #1
 800deb6:	2100      	movs	r1, #0
 800deb8:	2002      	movs	r0, #2
 800deba:	f00e fec9 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 800debe:	bf00      	nop
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	200017e0 	.word	0x200017e0
 800dec8:	20000718 	.word	0x20000718
 800decc:	0801da24 	.word	0x0801da24

0800ded0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800ded0:	b480      	push	{r7}
 800ded2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ded4:	4b08      	ldr	r3, [pc, #32]	; (800def8 <UpdateRxSlotIdleState+0x28>)
 800ded6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d004      	beq.n	800dee8 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800dede:	4b07      	ldr	r3, [pc, #28]	; (800defc <UpdateRxSlotIdleState+0x2c>)
 800dee0:	2206      	movs	r2, #6
 800dee2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800dee6:	e003      	b.n	800def0 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dee8:	4b04      	ldr	r3, [pc, #16]	; (800defc <UpdateRxSlotIdleState+0x2c>)
 800deea:	2202      	movs	r2, #2
 800deec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
}
 800def0:	bf00      	nop
 800def2:	46bd      	mov	sp, r7
 800def4:	bc80      	pop	{r7}
 800def6:	4770      	bx	lr
 800def8:	20000c38 	.word	0x20000c38
 800defc:	20000718 	.word	0x20000718

0800df00 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08e      	sub	sp, #56	; 0x38
 800df04:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800df06:	4b3e      	ldr	r3, [pc, #248]	; (800e000 <ProcessRadioTxDone+0x100>)
 800df08:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d002      	beq.n	800df16 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800df10:	4b3c      	ldr	r3, [pc, #240]	; (800e004 <ProcessRadioTxDone+0x104>)
 800df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df14:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800df16:	4b3c      	ldr	r3, [pc, #240]	; (800e008 <ProcessRadioTxDone+0x108>)
 800df18:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800df1c:	4619      	mov	r1, r3
 800df1e:	483b      	ldr	r0, [pc, #236]	; (800e00c <ProcessRadioTxDone+0x10c>)
 800df20:	f00e fcfc 	bl	801c91c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800df24:	4839      	ldr	r0, [pc, #228]	; (800e00c <ProcessRadioTxDone+0x10c>)
 800df26:	f00e fc1b 	bl	801c760 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800df2a:	4b37      	ldr	r3, [pc, #220]	; (800e008 <ProcessRadioTxDone+0x108>)
 800df2c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800df30:	4619      	mov	r1, r3
 800df32:	4837      	ldr	r0, [pc, #220]	; (800e010 <ProcessRadioTxDone+0x110>)
 800df34:	f00e fcf2 	bl	801c91c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800df38:	4835      	ldr	r0, [pc, #212]	; (800e010 <ProcessRadioTxDone+0x110>)
 800df3a:	f00e fc11 	bl	801c760 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800df3e:	4b32      	ldr	r3, [pc, #200]	; (800e008 <ProcessRadioTxDone+0x108>)
 800df40:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800df44:	2b00      	cmp	r3, #0
 800df46:	d01a      	beq.n	800df7e <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800df48:	2315      	movs	r3, #21
 800df4a:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df4e:	4b2c      	ldr	r3, [pc, #176]	; (800e000 <ProcessRadioTxDone+0x100>)
 800df50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df54:	f107 0220 	add.w	r2, r7, #32
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f006 fd25 	bl	80149aa <RegionGetPhyParam>
 800df60:	4603      	mov	r3, r0
 800df62:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800df64:	4b28      	ldr	r3, [pc, #160]	; (800e008 <ProcessRadioTxDone+0x108>)
 800df66:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	4413      	add	r3, r2
 800df6e:	4619      	mov	r1, r3
 800df70:	4828      	ldr	r0, [pc, #160]	; (800e014 <ProcessRadioTxDone+0x114>)
 800df72:	f00e fcd3 	bl	801c91c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800df76:	4827      	ldr	r0, [pc, #156]	; (800e014 <ProcessRadioTxDone+0x114>)
 800df78:	f00e fbf2 	bl	801c760 <UTIL_TIMER_Start>
 800df7c:	e003      	b.n	800df86 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800df7e:	4b22      	ldr	r3, [pc, #136]	; (800e008 <ProcessRadioTxDone+0x108>)
 800df80:	2200      	movs	r2, #0
 800df82:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800df86:	4b24      	ldr	r3, [pc, #144]	; (800e018 <ProcessRadioTxDone+0x118>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a1d      	ldr	r2, [pc, #116]	; (800e000 <ProcessRadioTxDone+0x100>)
 800df8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800df8e:	4b1e      	ldr	r3, [pc, #120]	; (800e008 <ProcessRadioTxDone+0x108>)
 800df90:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800df94:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800df96:	4b20      	ldr	r3, [pc, #128]	; (800e018 <ProcessRadioTxDone+0x118>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800df9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f00d ff17 	bl	801bdd4 <SysTimeGetMcuTime>
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	4b15      	ldr	r3, [pc, #84]	; (800e000 <ProcessRadioTxDone+0x100>)
 800dfaa:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800dfae:	9200      	str	r2, [sp, #0]
 800dfb0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800dfb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800dfb8:	ca06      	ldmia	r2, {r1, r2}
 800dfba:	f00d fe6c 	bl	801bc96 <SysTimeSub>
 800dfbe:	f107 0314 	add.w	r3, r7, #20
 800dfc2:	463a      	mov	r2, r7
 800dfc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfc8:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800dfcc:	4b0e      	ldr	r3, [pc, #56]	; (800e008 <ProcessRadioTxDone+0x108>)
 800dfce:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800dfd2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dfd8:	4b09      	ldr	r3, [pc, #36]	; (800e000 <ProcessRadioTxDone+0x100>)
 800dfda:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800dfe6:	4b06      	ldr	r3, [pc, #24]	; (800e000 <ProcessRadioTxDone+0x100>)
 800dfe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfec:	f107 0208 	add.w	r2, r7, #8
 800dff0:	4611      	mov	r1, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f006 fcfa 	bl	80149ec <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800dff8:	bf00      	nop
 800dffa:	3730      	adds	r7, #48	; 0x30
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20000c38 	.word	0x20000c38
 800e004:	0801e0d4 	.word	0x0801e0d4
 800e008:	20000718 	.word	0x20000718
 800e00c:	20000a98 	.word	0x20000a98
 800e010:	20000ab0 	.word	0x20000ab0
 800e014:	20000b1c 	.word	0x20000b1c
 800e018:	200017e4 	.word	0x200017e4

0800e01c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e020:	4b10      	ldr	r3, [pc, #64]	; (800e064 <PrepareRxDoneAbort+0x48>)
 800e022:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e02a:	4a0e      	ldr	r2, [pc, #56]	; (800e064 <PrepareRxDoneAbort+0x48>)
 800e02c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800e030:	4b0c      	ldr	r3, [pc, #48]	; (800e064 <PrepareRxDoneAbort+0x48>)
 800e032:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e036:	2b00      	cmp	r3, #0
 800e038:	d002      	beq.n	800e040 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e03a:	2000      	movs	r0, #0
 800e03c:	f001 f99c 	bl	800f378 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e040:	4a08      	ldr	r2, [pc, #32]	; (800e064 <PrepareRxDoneAbort+0x48>)
 800e042:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e046:	f043 0302 	orr.w	r3, r3, #2
 800e04a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e04e:	4a05      	ldr	r2, [pc, #20]	; (800e064 <PrepareRxDoneAbort+0x48>)
 800e050:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e054:	f043 0320 	orr.w	r3, r3, #32
 800e058:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

    UpdateRxSlotIdleState( );
 800e05c:	f7ff ff38 	bl	800ded0 <UpdateRxSlotIdleState>
}
 800e060:	bf00      	nop
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20000718 	.word	0x20000718

0800e068 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e068:	b590      	push	{r4, r7, lr}
 800e06a:	b0a7      	sub	sp, #156	; 0x9c
 800e06c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e06e:	2312      	movs	r3, #18
 800e070:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e074:	4bbd      	ldr	r3, [pc, #756]	; (800e36c <ProcessRadioRxDone+0x304>)
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint16_t size = RxDoneParams.Size;
 800e07c:	4bbb      	ldr	r3, [pc, #748]	; (800e36c <ProcessRadioRxDone+0x304>)
 800e07e:	891b      	ldrh	r3, [r3, #8]
 800e080:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800e084:	4bb9      	ldr	r3, [pc, #740]	; (800e36c <ProcessRadioRxDone+0x304>)
 800e086:	895b      	ldrh	r3, [r3, #10]
 800e088:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    int8_t snr = RxDoneParams.Snr;
 800e08c:	4bb7      	ldr	r3, [pc, #732]	; (800e36c <ProcessRadioRxDone+0x304>)
 800e08e:	7b1b      	ldrb	r3, [r3, #12]
 800e090:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    uint8_t pktHeaderLen = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    uint32_t downLinkCounter = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e09e:	4bb4      	ldr	r3, [pc, #720]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e0a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e0a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t multicast = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e0b4:	4aaf      	ldr	r2, [pc, #700]	; (800e374 <ProcessRadioRxDone+0x30c>)
 800e0b6:	7813      	ldrb	r3, [r2, #0]
 800e0b8:	f36f 0300 	bfc	r3, #0, #1
 800e0bc:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e0be:	4bae      	ldr	r3, [pc, #696]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800e0c6:	4aac      	ldr	r2, [pc, #688]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0c8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800e0cc:	f8a2 3490 	strh.w	r3, [r2, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800e0d0:	4aa9      	ldr	r2, [pc, #676]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e0d6:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e0da:	4ba7      	ldr	r3, [pc, #668]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0dc:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800e0e0:	4ba5      	ldr	r3, [pc, #660]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0e2:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800e0e6:	4ba4      	ldr	r3, [pc, #656]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800e0ee:	4ba2      	ldr	r3, [pc, #648]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800e0f6:	4ba0      	ldr	r3, [pc, #640]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800e0fe:	4b9e      	ldr	r3, [pc, #632]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e100:	2200      	movs	r2, #0
 800e102:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800e106:	4b9c      	ldr	r3, [pc, #624]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800e10e:	4b9a      	ldr	r3, [pc, #616]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800e116:	4b98      	ldr	r3, [pc, #608]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e11e:	4b96      	ldr	r3, [pc, #600]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e120:	2200      	movs	r2, #0
 800e122:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e126:	4b94      	ldr	r3, [pc, #592]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800e12e:	4b92      	ldr	r3, [pc, #584]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e130:	2200      	movs	r2, #0
 800e132:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e136:	4b90      	ldr	r3, [pc, #576]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e13e:	4b8e      	ldr	r3, [pc, #568]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e140:	2200      	movs	r2, #0
 800e142:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e146:	4b8d      	ldr	r3, [pc, #564]	; (800e37c <ProcessRadioRxDone+0x314>)
 800e148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14a:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e14c:	4b8a      	ldr	r3, [pc, #552]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e14e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e152:	2b00      	cmp	r3, #0
 800e154:	d102      	bne.n	800e15c <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e156:	488a      	ldr	r0, [pc, #552]	; (800e380 <ProcessRadioRxDone+0x318>)
 800e158:	f00e fb70 	bl	801c83c <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e15c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e160:	4619      	mov	r1, r3
 800e162:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800e166:	f004 fccf 	bl	8012b08 <LoRaMacClassBRxBeacon>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00b      	beq.n	800e188 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e170:	4a81      	ldr	r2, [pc, #516]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e172:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800e176:	f8a2 3482 	strh.w	r3, [r2, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e17a:	4a7f      	ldr	r2, [pc, #508]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e17c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e180:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
        return;
 800e184:	f000 bc22 	b.w	800e9cc <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e188:	4b79      	ldr	r3, [pc, #484]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e18a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d11e      	bne.n	800e1d0 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e192:	f004 fccc 	bl	8012b2e <LoRaMacClassBIsPingExpected>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00a      	beq.n	800e1b2 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e19c:	2000      	movs	r0, #0
 800e19e:	f004 fc7d 	bl	8012a9c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e1a2:	2000      	movs	r0, #0
 800e1a4:	f004 fc9e 	bl	8012ae4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e1a8:	4b73      	ldr	r3, [pc, #460]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e1aa:	2204      	movs	r2, #4
 800e1ac:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800e1b0:	e00e      	b.n	800e1d0 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e1b2:	f004 fcc3 	bl	8012b3c <LoRaMacClassBIsMulticastExpected>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d009      	beq.n	800e1d0 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1bc:	2000      	movs	r0, #0
 800e1be:	f004 fc77 	bl	8012ab0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	f004 fc97 	bl	8012af6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e1c8:	4b6b      	ldr	r3, [pc, #428]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e1ca:	2205      	movs	r2, #5
 800e1cc:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e1d0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
 800e1da:	461a      	mov	r2, r3
 800e1dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1e0:	4413      	add	r3, r2
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

    switch( macHdr.Bits.MType )
 800e1e8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e1ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	2b06      	cmp	r3, #6
 800e1f6:	f200 83bd 	bhi.w	800e974 <ProcessRadioRxDone+0x90c>
 800e1fa:	a201      	add	r2, pc, #4	; (adr r2, 800e200 <ProcessRadioRxDone+0x198>)
 800e1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e200:	0800e21d 	.word	0x0800e21d
 800e204:	0800e975 	.word	0x0800e975
 800e208:	0800e3b1 	.word	0x0800e3b1
 800e20c:	0800e975 	.word	0x0800e975
 800e210:	0800e3a9 	.word	0x0800e3a9
 800e214:	0800e975 	.word	0x0800e975
 800e218:	0800e907 	.word	0x0800e907
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e21c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e220:	2b10      	cmp	r3, #16
 800e222:	d806      	bhi.n	800e232 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e224:	4b54      	ldr	r3, [pc, #336]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e22c:	f7ff fef6 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e230:	e3cc      	b.n	800e9cc <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e236:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800e238:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e240:	4b4b      	ldr	r3, [pc, #300]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e242:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e246:	2b00      	cmp	r3, #0
 800e248:	d006      	beq.n	800e258 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e24a:	4b4b      	ldr	r3, [pc, #300]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e252:	f7ff fee3 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e256:	e3b9      	b.n	800e9cc <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e258:	f7fe f874 	bl	800c344 <SecureElementGetJoinEui>
 800e25c:	4601      	mov	r1, r0
 800e25e:	f107 030c 	add.w	r3, r7, #12
 800e262:	461a      	mov	r2, r3
 800e264:	20ff      	movs	r0, #255	; 0xff
 800e266:	f005 fe1f 	bl	8013ea8 <LoRaMacCryptoHandleJoinAccept>
 800e26a:	4603      	mov	r3, r0
 800e26c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e270:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e274:	2b00      	cmp	r3, #0
 800e276:	f040 8085 	bne.w	800e384 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e27a:	7d7b      	ldrb	r3, [r7, #21]
 800e27c:	461a      	mov	r2, r3
 800e27e:	4b3c      	ldr	r3, [pc, #240]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e280:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e284:	4b3a      	ldr	r3, [pc, #232]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e286:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e28a:	7dbb      	ldrb	r3, [r7, #22]
 800e28c:	021b      	lsls	r3, r3, #8
 800e28e:	4313      	orrs	r3, r2
 800e290:	4a37      	ldr	r2, [pc, #220]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e292:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e296:	4b36      	ldr	r3, [pc, #216]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e298:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e29c:	7dfb      	ldrb	r3, [r7, #23]
 800e29e:	041b      	lsls	r3, r3, #16
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	4a33      	ldr	r2, [pc, #204]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2a4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	4a31      	ldr	r2, [pc, #196]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2ac:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e2b0:	7f3b      	ldrb	r3, [r7, #28]
 800e2b2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4b2d      	ldr	r3, [pc, #180]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e2c0:	7f3b      	ldrb	r3, [r7, #28]
 800e2c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	4b29      	ldr	r3, [pc, #164]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e2d0:	7f3b      	ldrb	r3, [r7, #28]
 800e2d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4b25      	ldr	r3, [pc, #148]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e2e0:	7f7b      	ldrb	r3, [r7, #29]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	4b22      	ldr	r3, [pc, #136]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2e6:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e2e8:	4b21      	ldr	r3, [pc, #132]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d102      	bne.n	800e2f6 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e2f0:	4b1f      	ldr	r3, [pc, #124]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e2f6:	4b1e      	ldr	r3, [pc, #120]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e2f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e2fe:	fb02 f303 	mul.w	r3, r2, r3
 800e302:	4a1b      	ldr	r2, [pc, #108]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e304:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e306:	4b1a      	ldr	r3, [pc, #104]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e30a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e30e:	4a18      	ldr	r2, [pc, #96]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e310:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e312:	4b17      	ldr	r3, [pc, #92]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e314:	2200      	movs	r2, #0
 800e316:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e31a:	f107 030c 	add.w	r3, r7, #12
 800e31e:	3312      	adds	r3, #18
 800e320:	677b      	str	r3, [r7, #116]	; 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e322:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e326:	b2db      	uxtb	r3, r3
 800e328:	3b11      	subs	r3, #17
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e330:	4b11      	ldr	r3, [pc, #68]	; (800e378 <ProcessRadioRxDone+0x310>)
 800e332:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800e336:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e33a:	4b0d      	ldr	r3, [pc, #52]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e33c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e340:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800e344:	4611      	mov	r1, r2
 800e346:	4618      	mov	r0, r3
 800e348:	f006 fba0 	bl	8014a8c <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e34c:	4b08      	ldr	r3, [pc, #32]	; (800e370 <ProcessRadioRxDone+0x308>)
 800e34e:	2202      	movs	r2, #2
 800e350:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e354:	2001      	movs	r0, #1
 800e356:	f005 f8cf 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d01b      	beq.n	800e398 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e360:	2101      	movs	r1, #1
 800e362:	2000      	movs	r0, #0
 800e364:	f005 f83c 	bl	80133e0 <LoRaMacConfirmQueueSetStatus>
 800e368:	e016      	b.n	800e398 <ProcessRadioRxDone+0x330>
 800e36a:	bf00      	nop
 800e36c:	200017e8 	.word	0x200017e8
 800e370:	20000c38 	.word	0x20000c38
 800e374:	200017e0 	.word	0x200017e0
 800e378:	20000718 	.word	0x20000718
 800e37c:	0801e0d4 	.word	0x0801e0d4
 800e380:	20000ab0 	.word	0x20000ab0
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e384:	2001      	movs	r0, #1
 800e386:	f005 f8b7 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d003      	beq.n	800e398 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e390:	2101      	movs	r1, #1
 800e392:	2007      	movs	r0, #7
 800e394:	f005 f824 	bl	80133e0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e398:	4ab9      	ldr	r2, [pc, #740]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e39a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e39e:	f043 0308 	orr.w	r3, r3, #8
 800e3a2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800e3a6:	e2ec      	b.n	800e982 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e3a8:	4bb5      	ldr	r3, [pc, #724]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e3b0:	4bb4      	ldr	r3, [pc, #720]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e3b2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800e3b6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e3ba:	4bb1      	ldr	r3, [pc, #708]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e3bc:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800e3c0:	b25b      	sxtb	r3, r3
 800e3c2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e3c6:	230d      	movs	r3, #13
 800e3c8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e3cc:	4bad      	ldr	r3, [pc, #692]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e3ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d002      	beq.n	800e3dc <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e3d6:	230e      	movs	r3, #14
 800e3d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e3dc:	4ba9      	ldr	r3, [pc, #676]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e3de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3e2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800e3e6:	4611      	mov	r1, r2
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f006 fade 	bl	80149aa <RegionGetPhyParam>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	667b      	str	r3, [r7, #100]	; 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e3f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e3f6:	3b0d      	subs	r3, #13
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	b21b      	sxth	r3, r3
 800e3fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e400:	b21a      	sxth	r2, r3
 800e402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e404:	b21b      	sxth	r3, r3
 800e406:	429a      	cmp	r2, r3
 800e408:	dc03      	bgt.n	800e412 <ProcessRadioRxDone+0x3aa>
 800e40a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e40e:	2b0b      	cmp	r3, #11
 800e410:	d806      	bhi.n	800e420 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e412:	4b9b      	ldr	r3, [pc, #620]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e414:	2201      	movs	r2, #1
 800e416:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e41a:	f7ff fdff 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e41e:	e2d5      	b.n	800e9cc <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800e420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e424:	637b      	str	r3, [r7, #52]	; 0x34
            macMsgData.BufSize = size;
 800e426:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e430:	4b95      	ldr	r3, [pc, #596]	; (800e688 <ProcessRadioRxDone+0x620>)
 800e432:	65bb      	str	r3, [r7, #88]	; 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e434:	23ff      	movs	r3, #255	; 0xff
 800e436:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e43a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e43e:	4618      	mov	r0, r3
 800e440:	f006 f831 	bl	80144a6 <LoRaMacParserData>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d006      	beq.n	800e458 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e44a:	4b8d      	ldr	r3, [pc, #564]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e452:	f7ff fde3 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e456:	e2b9      	b.n	800e9cc <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e458:	4b8a      	ldr	r3, [pc, #552]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e45a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d132      	bne.n	800e4c8 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e462:	f004 fb64 	bl	8012b2e <LoRaMacClassBIsPingExpected>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d014      	beq.n	800e496 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e46c:	2000      	movs	r0, #0
 800e46e:	f004 fb15 	bl	8012a9c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e472:	2000      	movs	r0, #0
 800e474:	f004 fb36 	bl	8012ae4 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e478:	4b81      	ldr	r3, [pc, #516]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e47a:	2204      	movs	r2, #4
 800e47c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e482:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e486:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	4619      	mov	r1, r3
 800e48e:	4610      	mov	r0, r2
 800e490:	f004 fbd6 	bl	8012c40 <LoRaMacClassBSetFPendingBit>
 800e494:	e018      	b.n	800e4c8 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e496:	f004 fb51 	bl	8012b3c <LoRaMacClassBIsMulticastExpected>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d013      	beq.n	800e4c8 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	f004 fb05 	bl	8012ab0 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f004 fb25 	bl	8012af6 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e4ac:	4b74      	ldr	r3, [pc, #464]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e4ae:	2205      	movs	r2, #5
 800e4b0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e4b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e4ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	f004 fbbc 	bl	8012c40 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ca:	4a6d      	ldr	r2, [pc, #436]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e4cc:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e4d0:	1dba      	adds	r2, r7, #6
 800e4d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e4d6:	4611      	mov	r1, r2
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f002 fd13 	bl	8010f04 <DetermineFrameType>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d006      	beq.n	800e4f2 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e4e4:	4b66      	ldr	r3, [pc, #408]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e4ec:	f7ff fd96 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e4f0:	e26c      	b.n	800e9cc <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            downLinkCounter = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800e502:	e049      	b.n	800e598 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e504:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e508:	4a5e      	ldr	r2, [pc, #376]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e50a:	212c      	movs	r1, #44	; 0x2c
 800e50c:	fb01 f303 	mul.w	r3, r1, r3
 800e510:	4413      	add	r3, r2
 800e512:	33dc      	adds	r3, #220	; 0xdc
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e518:	429a      	cmp	r2, r3
 800e51a:	d138      	bne.n	800e58e <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e51c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e520:	4a58      	ldr	r2, [pc, #352]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e522:	212c      	movs	r1, #44	; 0x2c
 800e524:	fb01 f303 	mul.w	r3, r1, r3
 800e528:	4413      	add	r3, r2
 800e52a:	33da      	adds	r3, #218	; 0xda
 800e52c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d02d      	beq.n	800e58e <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e532:	2301      	movs	r3, #1
 800e534:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e538:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e53c:	4a51      	ldr	r2, [pc, #324]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e53e:	212c      	movs	r1, #44	; 0x2c
 800e540:	fb01 f303 	mul.w	r3, r1, r3
 800e544:	4413      	add	r3, r2
 800e546:	33db      	adds	r3, #219	; 0xdb
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e54e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e552:	4a4c      	ldr	r2, [pc, #304]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e554:	212c      	movs	r1, #44	; 0x2c
 800e556:	fb01 f303 	mul.w	r3, r1, r3
 800e55a:	4413      	add	r3, r2
 800e55c:	33f8      	adds	r3, #248	; 0xf8
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e564:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e568:	4a46      	ldr	r2, [pc, #280]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e56a:	212c      	movs	r1, #44	; 0x2c
 800e56c:	fb01 f303 	mul.w	r3, r1, r3
 800e570:	4413      	add	r3, r2
 800e572:	33dc      	adds	r3, #220	; 0xdc
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e57a:	4b42      	ldr	r3, [pc, #264]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e57c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e580:	2b02      	cmp	r3, #2
 800e582:	d10e      	bne.n	800e5a2 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e584:	4b3e      	ldr	r3, [pc, #248]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e586:	2203      	movs	r2, #3
 800e588:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    }
                    break;
 800e58c:	e009      	b.n	800e5a2 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e58e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e592:	3301      	adds	r3, #1
 800e594:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800e598:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d0b1      	beq.n	800e504 <ProcessRadioRxDone+0x49c>
 800e5a0:	e000      	b.n	800e5a4 <ProcessRadioRxDone+0x53c>
                    break;
 800e5a2:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e5a4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d117      	bne.n	800e5dc <ProcessRadioRxDone+0x574>
 800e5ac:	79bb      	ldrb	r3, [r7, #6]
 800e5ae:	2b03      	cmp	r3, #3
 800e5b0:	d10d      	bne.n	800e5ce <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e5b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e5b6:	f003 0320 	and.w	r3, r3, #32
 800e5ba:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d106      	bne.n	800e5ce <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e5c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c8:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d006      	beq.n	800e5dc <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5ce:	4b2c      	ldr	r3, [pc, #176]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e5d6:	f7ff fd21 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e5da:	e1f7      	b.n	800e9cc <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e5dc:	79b9      	ldrb	r1, [r7, #6]
 800e5de:	4c29      	ldr	r4, [pc, #164]	; (800e684 <ProcessRadioRxDone+0x61c>)
 800e5e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e5e4:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800e5e8:	f107 0308 	add.w	r3, r7, #8
 800e5ec:	9301      	str	r3, [sp, #4]
 800e5ee:	1dfb      	adds	r3, r7, #7
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800e5f6:	f000 fee7 	bl	800f3c8 <GetFCntDown>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e600:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e604:	2b00      	cmp	r3, #0
 800e606:	d017      	beq.n	800e638 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e608:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e60c:	2b07      	cmp	r3, #7
 800e60e:	d104      	bne.n	800e61a <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e610:	4b1b      	ldr	r3, [pc, #108]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e612:	2208      	movs	r2, #8
 800e614:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800e618:	e003      	b.n	800e622 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e61a:	4b19      	ldr	r3, [pc, #100]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e61c:	2201      	movs	r2, #1
 800e61e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	4a16      	ldr	r2, [pc, #88]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e626:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	4a14      	ldr	r2, [pc, #80]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e62e:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800e632:	f7ff fcf3 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e636:	e1c9      	b.n	800e9cc <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e638:	79fa      	ldrb	r2, [r7, #7]
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800e640:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	460b      	mov	r3, r1
 800e648:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e64c:	f005 fd78 	bl	8014140 <LoRaMacCryptoUnsecureMessage>
 800e650:	4603      	mov	r3, r0
 800e652:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e656:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d016      	beq.n	800e68c <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e65e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e662:	2b02      	cmp	r3, #2
 800e664:	d104      	bne.n	800e670 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e666:	4b06      	ldr	r3, [pc, #24]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e668:	220a      	movs	r2, #10
 800e66a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800e66e:	e003      	b.n	800e678 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e670:	4b03      	ldr	r3, [pc, #12]	; (800e680 <ProcessRadioRxDone+0x618>)
 800e672:	220b      	movs	r2, #11
 800e674:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                PrepareRxDoneAbort( );
 800e678:	f7ff fcd0 	bl	800e01c <PrepareRxDoneAbort>
                return;
 800e67c:	e1a6      	b.n	800e9cc <ProcessRadioRxDone+0x964>
 800e67e:	bf00      	nop
 800e680:	20000718 	.word	0x20000718
 800e684:	20000c38 	.word	0x20000c38
 800e688:	20000950 	.word	0x20000950
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e68c:	4bb5      	ldr	r3, [pc, #724]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e694:	4ab3      	ldr	r2, [pc, #716]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e696:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e69a:	f882 3426 	strb.w	r3, [r2, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e69e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e6a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	4bae      	ldr	r3, [pc, #696]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e6ac:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e6b0:	4bac      	ldr	r3, [pc, #688]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e6b8:	4baa      	ldr	r3, [pc, #680]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	4aa8      	ldr	r2, [pc, #672]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e6c4:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	4aa6      	ldr	r2, [pc, #664]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e6cc:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e6d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e6d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bf14      	ite	ne
 800e6de:	2301      	movne	r3, #1
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	4b9f      	ldr	r3, [pc, #636]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e6e6:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e6ea:	4b9e      	ldr	r3, [pc, #632]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e6f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e6f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	bf14      	ite	ne
 800e700:	2301      	movne	r3, #1
 800e702:	2300      	moveq	r3, #0
 800e704:	b2da      	uxtb	r2, r3
 800e706:	4b97      	ldr	r3, [pc, #604]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e708:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e70c:	4b95      	ldr	r3, [pc, #596]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e70e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e712:	2b00      	cmp	r3, #0
 800e714:	d004      	beq.n	800e720 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e716:	4b93      	ldr	r3, [pc, #588]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e718:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d106      	bne.n	800e72e <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e720:	4b91      	ldr	r3, [pc, #580]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e722:	2200      	movs	r2, #0
 800e724:	629a      	str	r2, [r3, #40]	; 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e726:	4b90      	ldr	r3, [pc, #576]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e728:	2201      	movs	r2, #1
 800e72a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e72e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e732:	2b01      	cmp	r3, #1
 800e734:	d104      	bne.n	800e740 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e736:	4b8b      	ldr	r3, [pc, #556]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e738:	2202      	movs	r2, #2
 800e73a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800e73e:	e034      	b.n	800e7aa <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e740:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e744:	f023 031f 	bic.w	r3, r3, #31
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2ba0      	cmp	r3, #160	; 0xa0
 800e74c:	d125      	bne.n	800e79a <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e74e:	4b86      	ldr	r3, [pc, #536]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e750:	2201      	movs	r2, #1
 800e752:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e756:	4b84      	ldr	r3, [pc, #528]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e758:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d102      	bne.n	800e766 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e762:	4a81      	ldr	r2, [pc, #516]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e764:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e766:	4b7f      	ldr	r3, [pc, #508]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e768:	2201      	movs	r2, #1
 800e76a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e76e:	4b7d      	ldr	r3, [pc, #500]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e770:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e774:	2b00      	cmp	r3, #0
 800e776:	d018      	beq.n	800e7aa <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e778:	4b7a      	ldr	r3, [pc, #488]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e77a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d013      	beq.n	800e7aa <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e782:	4b79      	ldr	r3, [pc, #484]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e788:	4a76      	ldr	r2, [pc, #472]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e78a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e78e:	4b77      	ldr	r3, [pc, #476]	; (800e96c <ProcessRadioRxDone+0x904>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a74      	ldr	r2, [pc, #464]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e794:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 800e798:	e007      	b.n	800e7aa <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e79a:	4b73      	ldr	r3, [pc, #460]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e7a2:	4b70      	ldr	r3, [pc, #448]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e7aa:	4b6e      	ldr	r3, [pc, #440]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e7ac:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e7b0:	4a6c      	ldr	r2, [pc, #432]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e7b2:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 800e7b6:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f001 ff88 	bl	80106d0 <RemoveMacCommands>

            switch( fType )
 800e7c0:	79bb      	ldrb	r3, [r7, #6]
 800e7c2:	2b03      	cmp	r3, #3
 800e7c4:	d873      	bhi.n	800e8ae <ProcessRadioRxDone+0x846>
 800e7c6:	a201      	add	r2, pc, #4	; (adr r2, 800e7cc <ProcessRadioRxDone+0x764>)
 800e7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7cc:	0800e7dd 	.word	0x0800e7dd
 800e7d0:	0800e82d 	.word	0x0800e82d
 800e7d4:	0800e863 	.word	0x0800e863
 800e7d8:	0800e889 	.word	0x0800e889
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e7dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e7e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	461c      	mov	r4, r3
 800e7e8:	4b5e      	ldr	r3, [pc, #376]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e7ea:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e7ee:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e7f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e7f6:	f102 0010 	add.w	r0, r2, #16
 800e7fa:	9300      	str	r3, [sp, #0]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	4622      	mov	r2, r4
 800e800:	2100      	movs	r1, #0
 800e802:	f000 ff45 	bl	800f690 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e806:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e80a:	4b56      	ldr	r3, [pc, #344]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e80c:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e812:	4a54      	ldr	r2, [pc, #336]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e814:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e818:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e81c:	4b51      	ldr	r3, [pc, #324]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e81e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e822:	4b50      	ldr	r3, [pc, #320]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e824:	2201      	movs	r2, #1
 800e826:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800e82a:	e047      	b.n	800e8bc <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e82c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e830:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e834:	b2db      	uxtb	r3, r3
 800e836:	461c      	mov	r4, r3
 800e838:	4b4a      	ldr	r3, [pc, #296]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e83a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e83e:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e842:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e846:	f102 0010 	add.w	r0, r2, #16
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	460b      	mov	r3, r1
 800e84e:	4622      	mov	r2, r4
 800e850:	2100      	movs	r1, #0
 800e852:	f000 ff1d 	bl	800f690 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e856:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e85a:	4b42      	ldr	r3, [pc, #264]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e85c:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800e860:	e02c      	b.n	800e8bc <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e862:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e864:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e868:	4b3e      	ldr	r3, [pc, #248]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e86a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e86e:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	460b      	mov	r3, r1
 800e876:	2100      	movs	r1, #0
 800e878:	f000 ff0a 	bl	800f690 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e87c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e880:	4b38      	ldr	r3, [pc, #224]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e882:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800e886:	e019      	b.n	800e8bc <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e888:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e88c:	4b35      	ldr	r3, [pc, #212]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e88e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e894:	4a33      	ldr	r2, [pc, #204]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e896:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e89a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e89e:	4b31      	ldr	r3, [pc, #196]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8a0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e8a4:	4b2f      	ldr	r3, [pc, #188]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800e8ac:	e006      	b.n	800e8bc <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8ae:	4b2d      	ldr	r3, [pc, #180]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800e8b6:	f7ff fbb1 	bl	800e01c <PrepareRxDoneAbort>
                    break;
 800e8ba:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e8bc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e8c0:	2be0      	cmp	r3, #224	; 0xe0
 800e8c2:	d118      	bne.n	800e8f6 <ProcessRadioRxDone+0x88e>
 800e8c4:	4b28      	ldr	r3, [pc, #160]	; (800e968 <ProcessRadioRxDone+0x900>)
 800e8c6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800e8ca:	f083 0301 	eor.w	r3, r3, #1
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d010      	beq.n	800e8f6 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e8d4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e8d8:	4b22      	ldr	r3, [pc, #136]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8da:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800e8de:	4b21      	ldr	r3, [pc, #132]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800e8e6:	4b1f      	ldr	r3, [pc, #124]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800e8ee:	4b1d      	ldr	r3, [pc, #116]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e8f6:	4a1b      	ldr	r2, [pc, #108]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e8f8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e8fc:	f043 0302 	orr.w	r3, r3, #2
 800e900:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

            break;
 800e904:	e03d      	b.n	800e982 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e906:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e90a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e90e:	18d1      	adds	r1, r2, r3
 800e910:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e914:	b29b      	uxth	r3, r3
 800e916:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800e91a:	1ad3      	subs	r3, r2, r3
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	461a      	mov	r2, r3
 800e920:	4813      	ldr	r0, [pc, #76]	; (800e970 <ProcessRadioRxDone+0x908>)
 800e922:	f009 fe40 	bl	80185a6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e926:	4b0f      	ldr	r3, [pc, #60]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e928:	2203      	movs	r2, #3
 800e92a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e92e:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e930:	2200      	movs	r2, #0
 800e932:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e936:	4b0b      	ldr	r3, [pc, #44]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e938:	4a0d      	ldr	r2, [pc, #52]	; (800e970 <ProcessRadioRxDone+0x908>)
 800e93a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e93e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e942:	b2da      	uxtb	r2, r3
 800e944:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	4b05      	ldr	r3, [pc, #20]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e94e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e952:	4a04      	ldr	r2, [pc, #16]	; (800e964 <ProcessRadioRxDone+0x8fc>)
 800e954:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e958:	f043 0302 	orr.w	r3, r3, #2
 800e95c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800e960:	e00f      	b.n	800e982 <ProcessRadioRxDone+0x91a>
 800e962:	bf00      	nop
 800e964:	20000718 	.word	0x20000718
 800e968:	20000c38 	.word	0x20000c38
 800e96c:	200017e8 	.word	0x200017e8
 800e970:	20000950 	.word	0x20000950
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e974:	4b17      	ldr	r3, [pc, #92]	; (800e9d4 <ProcessRadioRxDone+0x96c>)
 800e976:	2201      	movs	r2, #1
 800e978:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800e97c:	f7ff fb4e 	bl	800e01c <PrepareRxDoneAbort>
            break;
 800e980:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e982:	4b14      	ldr	r3, [pc, #80]	; (800e9d4 <ProcessRadioRxDone+0x96c>)
 800e984:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d004      	beq.n	800e996 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e98c:	4b11      	ldr	r3, [pc, #68]	; (800e9d4 <ProcessRadioRxDone+0x96c>)
 800e98e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e992:	2b01      	cmp	r3, #1
 800e994:	d10c      	bne.n	800e9b0 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800e996:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <ProcessRadioRxDone+0x96c>)
 800e998:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d007      	beq.n	800e9b0 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e9a0:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <ProcessRadioRxDone+0x96c>)
 800e9a2:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d002      	beq.n	800e9b0 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	f000 fce4 	bl	800f378 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e9b0:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <ProcessRadioRxDone+0x96c>)
 800e9b2:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	d006      	beq.n	800e9c8 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e9ba:	4a06      	ldr	r2, [pc, #24]	; (800e9d4 <ProcessRadioRxDone+0x96c>)
 800e9bc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e9c0:	f043 0320 	orr.w	r3, r3, #32
 800e9c4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e9c8:	f7ff fa82 	bl	800ded0 <UpdateRxSlotIdleState>
}
 800e9cc:	3794      	adds	r7, #148	; 0x94
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd90      	pop	{r4, r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20000718 	.word	0x20000718

0800e9d8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e9dc:	4b11      	ldr	r3, [pc, #68]	; (800ea24 <ProcessRadioTxTimeout+0x4c>)
 800e9de:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d002      	beq.n	800e9ec <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e9e6:	4b10      	ldr	r3, [pc, #64]	; (800ea28 <ProcessRadioTxTimeout+0x50>)
 800e9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ea:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e9ec:	f7ff fa70 	bl	800ded0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e9f0:	4b0e      	ldr	r3, [pc, #56]	; (800ea2c <ProcessRadioTxTimeout+0x54>)
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e9f8:	2002      	movs	r0, #2
 800e9fa:	f004 fd49 	bl	8013490 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e9fe:	4b0b      	ldr	r3, [pc, #44]	; (800ea2c <ProcessRadioTxTimeout+0x54>)
 800ea00:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d003      	beq.n	800ea10 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800ea08:	4b08      	ldr	r3, [pc, #32]	; (800ea2c <ProcessRadioTxTimeout+0x54>)
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ea10:	4a06      	ldr	r2, [pc, #24]	; (800ea2c <ProcessRadioTxTimeout+0x54>)
 800ea12:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ea16:	f043 0320 	orr.w	r3, r3, #32
 800ea1a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800ea1e:	bf00      	nop
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20000c38 	.word	0x20000c38
 800ea28:	0801e0d4 	.word	0x0801e0d4
 800ea2c:	20000718 	.word	0x20000718

0800ea30 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	460a      	mov	r2, r1
 800ea3a:	71fb      	strb	r3, [r7, #7]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ea40:	2300      	movs	r3, #0
 800ea42:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ea44:	4b3d      	ldr	r3, [pc, #244]	; (800eb3c <HandleRadioRxErrorTimeout+0x10c>)
 800ea46:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d002      	beq.n	800ea54 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ea4e:	4b3c      	ldr	r3, [pc, #240]	; (800eb40 <HandleRadioRxErrorTimeout+0x110>)
 800ea50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea52:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ea54:	f004 f864 	bl	8012b20 <LoRaMacClassBIsBeaconExpected>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d007      	beq.n	800ea6e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ea5e:	2002      	movs	r0, #2
 800ea60:	f004 f812 	bl	8012a88 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ea64:	2000      	movs	r0, #0
 800ea66:	f004 f834 	bl	8012ad2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ea6e:	4b33      	ldr	r3, [pc, #204]	; (800eb3c <HandleRadioRxErrorTimeout+0x10c>)
 800ea70:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d119      	bne.n	800eaac <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ea78:	f004 f859 	bl	8012b2e <LoRaMacClassBIsPingExpected>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ea82:	2000      	movs	r0, #0
 800ea84:	f004 f80a 	bl	8012a9c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ea88:	2000      	movs	r0, #0
 800ea8a:	f004 f82b 	bl	8012ae4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ea92:	f004 f853 	bl	8012b3c <LoRaMacClassBIsMulticastExpected>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d007      	beq.n	800eaac <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f004 f807 	bl	8012ab0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	f004 f827 	bl	8012af6 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
 800eaae:	f083 0301 	eor.w	r3, r3, #1
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d03b      	beq.n	800eb30 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800eab8:	4b22      	ldr	r3, [pc, #136]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eaba:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d122      	bne.n	800eb08 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800eac2:	4b20      	ldr	r3, [pc, #128]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eac4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d003      	beq.n	800ead4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800eacc:	4a1d      	ldr	r2, [pc, #116]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ead4:	79fb      	ldrb	r3, [r7, #7]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f004 fcda 	bl	8013490 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800eadc:	4b17      	ldr	r3, [pc, #92]	; (800eb3c <HandleRadioRxErrorTimeout+0x10c>)
 800eade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae0:	4618      	mov	r0, r3
 800eae2:	f00d ffd7 	bl	801ca94 <UTIL_TIMER_GetElapsedTime>
 800eae6:	4602      	mov	r2, r0
 800eae8:	4b16      	ldr	r3, [pc, #88]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eaea:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d31e      	bcc.n	800eb30 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800eaf2:	4815      	ldr	r0, [pc, #84]	; (800eb48 <HandleRadioRxErrorTimeout+0x118>)
 800eaf4:	f00d fea2 	bl	801c83c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800eaf8:	4a12      	ldr	r2, [pc, #72]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eafa:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800eafe:	f043 0320 	orr.w	r3, r3, #32
 800eb02:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800eb06:	e013      	b.n	800eb30 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800eb08:	4b0e      	ldr	r3, [pc, #56]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eb0a:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d003      	beq.n	800eb1a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800eb12:	4a0c      	ldr	r2, [pc, #48]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eb14:	79bb      	ldrb	r3, [r7, #6]
 800eb16:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800eb1a:	79bb      	ldrb	r3, [r7, #6]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f004 fcb7 	bl	8013490 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800eb22:	4a08      	ldr	r2, [pc, #32]	; (800eb44 <HandleRadioRxErrorTimeout+0x114>)
 800eb24:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800eb28:	f043 0320 	orr.w	r3, r3, #32
 800eb2c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800eb30:	f7ff f9ce 	bl	800ded0 <UpdateRxSlotIdleState>
}
 800eb34:	bf00      	nop
 800eb36:	3710      	adds	r7, #16
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}
 800eb3c:	20000c38 	.word	0x20000c38
 800eb40:	0801e0d4 	.word	0x0801e0d4
 800eb44:	20000718 	.word	0x20000718
 800eb48:	20000ab0 	.word	0x20000ab0

0800eb4c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800eb50:	2106      	movs	r1, #6
 800eb52:	2005      	movs	r0, #5
 800eb54:	f7ff ff6c 	bl	800ea30 <HandleRadioRxErrorTimeout>
}
 800eb58:	bf00      	nop
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800eb60:	2104      	movs	r1, #4
 800eb62:	2003      	movs	r0, #3
 800eb64:	f7ff ff64 	bl	800ea30 <HandleRadioRxErrorTimeout>
}
 800eb68:	bf00      	nop
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb72:	f3ef 8310 	mrs	r3, PRIMASK
 800eb76:	607b      	str	r3, [r7, #4]
  return(result);
 800eb78:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800eb7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb7c:	b672      	cpsid	i
}
 800eb7e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800eb80:	4b1d      	ldr	r3, [pc, #116]	; (800ebf8 <LoRaMacHandleIrqEvents+0x8c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800eb86:	4b1c      	ldr	r3, [pc, #112]	; (800ebf8 <LoRaMacHandleIrqEvents+0x8c>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	f383 8810 	msr	PRIMASK, r3
}
 800eb96:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d027      	beq.n	800ebee <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800eb9e:	783b      	ldrb	r3, [r7, #0]
 800eba0:	f003 0320 	and.w	r3, r3, #32
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ebaa:	f7ff f9a9 	bl	800df00 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ebae:	783b      	ldrb	r3, [r7, #0]
 800ebb0:	f003 0310 	and.w	r3, r3, #16
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ebba:	f7ff fa55 	bl	800e068 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ebbe:	783b      	ldrb	r3, [r7, #0]
 800ebc0:	f003 0308 	and.w	r3, r3, #8
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ebca:	f7ff ff05 	bl	800e9d8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ebce:	783b      	ldrb	r3, [r7, #0]
 800ebd0:	f003 0304 	and.w	r3, r3, #4
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ebda:	f7ff ffb7 	bl	800eb4c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ebde:	783b      	ldrb	r3, [r7, #0]
 800ebe0:	f003 0302 	and.w	r3, r3, #2
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d001      	beq.n	800ebee <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ebea:	f7ff ffb7 	bl	800eb5c <ProcessRadioRxTimeout>
        }
    }
}
 800ebee:	bf00      	nop
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	200017e0 	.word	0x200017e0

0800ebfc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800ec00:	4b0c      	ldr	r3, [pc, #48]	; (800ec34 <LoRaMacIsBusy+0x38>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	f003 0301 	and.w	r3, r3, #1
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d001      	beq.n	800ec12 <LoRaMacIsBusy+0x16>
    {
        return true;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e00c      	b.n	800ec2c <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ec12:	4b09      	ldr	r3, [pc, #36]	; (800ec38 <LoRaMacIsBusy+0x3c>)
 800ec14:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d106      	bne.n	800ec2a <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800ec1c:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <LoRaMacIsBusy+0x3c>)
 800ec1e:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d101      	bne.n	800ec2a <LoRaMacIsBusy+0x2e>
    {
        return false;
 800ec26:	2300      	movs	r3, #0
 800ec28:	e000      	b.n	800ec2c <LoRaMacIsBusy+0x30>
    }
    return true;
 800ec2a:	2301      	movs	r3, #1
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bc80      	pop	{r7}
 800ec32:	4770      	bx	lr
 800ec34:	200017e0 	.word	0x200017e0
 800ec38:	20000718 	.word	0x20000718

0800ec3c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ec46:	4a04      	ldr	r2, [pc, #16]	; (800ec58 <LoRaMacEnableRequests+0x1c>)
 800ec48:	79fb      	ldrb	r3, [r7, #7]
 800ec4a:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
}
 800ec4e:	bf00      	nop
 800ec50:	370c      	adds	r7, #12
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bc80      	pop	{r7}
 800ec56:	4770      	bx	lr
 800ec58:	20000718 	.word	0x20000718

0800ec5c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ec62:	4b2c      	ldr	r3, [pc, #176]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ec64:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ec68:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ec6a:	4b2a      	ldr	r3, [pc, #168]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ec6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d14a      	bne.n	800ed0a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ec74:	4b27      	ldr	r3, [pc, #156]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ec76:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ec7a:	f003 0301 	and.w	r3, r3, #1
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d006      	beq.n	800ec92 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ec84:	4a23      	ldr	r2, [pc, #140]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ec86:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ec8a:	f36f 0300 	bfc	r3, #0, #1
 800ec8e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ec92:	4b20      	ldr	r3, [pc, #128]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ec94:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ec98:	f003 0304 	and.w	r3, r3, #4
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d006      	beq.n	800ecb0 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800eca2:	4a1c      	ldr	r2, [pc, #112]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800eca4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800eca8:	f36f 0382 	bfc	r3, #2, #1
 800ecac:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ecb0:	2001      	movs	r0, #1
 800ecb2:	f7ff ffc3 	bl	800ec3c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ecb6:	793b      	ldrb	r3, [r7, #4]
 800ecb8:	f003 0301 	and.w	r3, r3, #1
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d005      	beq.n	800ecce <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ecc2:	4b14      	ldr	r3, [pc, #80]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ecc4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4813      	ldr	r0, [pc, #76]	; (800ed18 <LoRaMacHandleRequestEvents+0xbc>)
 800eccc:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ecce:	793b      	ldrb	r3, [r7, #4]
 800ecd0:	f003 0304 	and.w	r3, r3, #4
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00e      	beq.n	800ecf8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ecda:	4810      	ldr	r0, [pc, #64]	; (800ed1c <LoRaMacHandleRequestEvents+0xc0>)
 800ecdc:	f004 fc26 	bl	801352c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ece0:	f004 fc70 	bl	80135c4 <LoRaMacConfirmQueueGetCnt>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d006      	beq.n	800ecf8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ecea:	4a0a      	ldr	r2, [pc, #40]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ecec:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ecf0:	f043 0304 	orr.w	r3, r3, #4
 800ecf4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ecf8:	f003 ff3e 	bl	8012b78 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ecfc:	4a05      	ldr	r2, [pc, #20]	; (800ed14 <LoRaMacHandleRequestEvents+0xb8>)
 800ecfe:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed02:	f36f 1345 	bfc	r3, #5, #1
 800ed06:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
}
 800ed0a:	bf00      	nop
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20000718 	.word	0x20000718
 800ed18:	20000b5c 	.word	0x20000b5c
 800ed1c:	20000b70 	.word	0x20000b70

0800ed20 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ed26:	4b07      	ldr	r3, [pc, #28]	; (800ed44 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800ed28:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d105      	bne.n	800ed3c <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800ed30:	2300      	movs	r3, #0
 800ed32:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800ed34:	1dfb      	adds	r3, r7, #7
 800ed36:	4618      	mov	r0, r3
 800ed38:	f004 f9de 	bl	80130f8 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20000718 	.word	0x20000718

0800ed48 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ed4c:	4b16      	ldr	r3, [pc, #88]	; (800eda8 <LoRaMacHandleIndicationEvents+0x60>)
 800ed4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ed52:	f003 0308 	and.w	r3, r3, #8
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00d      	beq.n	800ed78 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ed5c:	4a12      	ldr	r2, [pc, #72]	; (800eda8 <LoRaMacHandleIndicationEvents+0x60>)
 800ed5e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed62:	f36f 03c3 	bfc	r3, #3, #1
 800ed66:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ed6a:	4b0f      	ldr	r3, [pc, #60]	; (800eda8 <LoRaMacHandleIndicationEvents+0x60>)
 800ed6c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	490e      	ldr	r1, [pc, #56]	; (800edac <LoRaMacHandleIndicationEvents+0x64>)
 800ed74:	480e      	ldr	r0, [pc, #56]	; (800edb0 <LoRaMacHandleIndicationEvents+0x68>)
 800ed76:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ed78:	4b0b      	ldr	r3, [pc, #44]	; (800eda8 <LoRaMacHandleIndicationEvents+0x60>)
 800ed7a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ed7e:	f003 0302 	and.w	r3, r3, #2
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00d      	beq.n	800eda4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ed88:	4a07      	ldr	r2, [pc, #28]	; (800eda8 <LoRaMacHandleIndicationEvents+0x60>)
 800ed8a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed8e:	f36f 0341 	bfc	r3, #1, #1
 800ed92:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ed96:	4b04      	ldr	r3, [pc, #16]	; (800eda8 <LoRaMacHandleIndicationEvents+0x60>)
 800ed98:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4903      	ldr	r1, [pc, #12]	; (800edac <LoRaMacHandleIndicationEvents+0x64>)
 800eda0:	4804      	ldr	r0, [pc, #16]	; (800edb4 <LoRaMacHandleIndicationEvents+0x6c>)
 800eda2:	4798      	blx	r3
    }
}
 800eda4:	bf00      	nop
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	20000718 	.word	0x20000718
 800edac:	20000ba8 	.word	0x20000ba8
 800edb0:	20000b84 	.word	0x20000b84
 800edb4:	20000b3c 	.word	0x20000b3c

0800edb8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800edbe:	4b2a      	ldr	r3, [pc, #168]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800edc0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800edc4:	f003 0301 	and.w	r3, r3, #1
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d048      	beq.n	800ee60 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800edce:	2300      	movs	r3, #0
 800edd0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800edd2:	2300      	movs	r3, #0
 800edd4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800edd6:	4b24      	ldr	r3, [pc, #144]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800edd8:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d004      	beq.n	800edea <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ede0:	4b21      	ldr	r3, [pc, #132]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800ede2:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ede6:	2b03      	cmp	r3, #3
 800ede8:	d104      	bne.n	800edf4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800edea:	f002 f8ed 	bl	8010fc8 <CheckRetransUnconfirmedUplink>
 800edee:	4603      	mov	r3, r0
 800edf0:	71fb      	strb	r3, [r7, #7]
 800edf2:	e010      	b.n	800ee16 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800edf4:	4b1c      	ldr	r3, [pc, #112]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800edf6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d10b      	bne.n	800ee16 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800edfe:	4b1a      	ldr	r3, [pc, #104]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee00:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d004      	beq.n	800ee12 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ee08:	f002 f90a 	bl	8011020 <CheckRetransConfirmedUplink>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	71fb      	strb	r3, [r7, #7]
 800ee10:	e001      	b.n	800ee16 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800ee12:	2301      	movs	r3, #1
 800ee14:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800ee16:	79fb      	ldrb	r3, [r7, #7]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00d      	beq.n	800ee38 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ee1c:	4813      	ldr	r0, [pc, #76]	; (800ee6c <LoRaMacHandleMcpsRequest+0xb4>)
 800ee1e:	f00d fd0d 	bl	801c83c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ee22:	4b11      	ldr	r3, [pc, #68]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee24:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ee28:	f023 0320 	bic.w	r3, r3, #32
 800ee2c:	4a0e      	ldr	r2, [pc, #56]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee2e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800ee32:	f002 f92f 	bl	8011094 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800ee36:	e013      	b.n	800ee60 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800ee38:	79bb      	ldrb	r3, [r7, #6]
 800ee3a:	f083 0301 	eor.w	r3, r3, #1
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d00d      	beq.n	800ee60 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ee44:	4a08      	ldr	r2, [pc, #32]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee46:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ee4a:	f36f 1345 	bfc	r3, #5, #1
 800ee4e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800ee52:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <LoRaMacHandleMcpsRequest+0xb0>)
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	f000 f9c8 	bl	800f1f0 <OnTxDelayedTimerEvent>
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	20000718 	.word	0x20000718
 800ee6c:	20000a80 	.word	0x20000a80

0800ee70 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ee74:	4b18      	ldr	r3, [pc, #96]	; (800eed8 <LoRaMacHandleMlmeRequest+0x68>)
 800ee76:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ee7a:	f003 0304 	and.w	r3, r3, #4
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d026      	beq.n	800eed2 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ee84:	2001      	movs	r0, #1
 800ee86:	f004 fb37 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d012      	beq.n	800eeb6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ee90:	2001      	movs	r0, #1
 800ee92:	f004 fad3 	bl	801343c <LoRaMacConfirmQueueGetStatus>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d103      	bne.n	800eea4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800ee9c:	4b0e      	ldr	r3, [pc, #56]	; (800eed8 <LoRaMacHandleMlmeRequest+0x68>)
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eea4:	4b0c      	ldr	r3, [pc, #48]	; (800eed8 <LoRaMacHandleMlmeRequest+0x68>)
 800eea6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eeaa:	f023 0302 	bic.w	r3, r3, #2
 800eeae:	4a0a      	ldr	r2, [pc, #40]	; (800eed8 <LoRaMacHandleMlmeRequest+0x68>)
 800eeb0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800eeb4:	e00d      	b.n	800eed2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800eeb6:	2005      	movs	r0, #5
 800eeb8:	f004 fb1e 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d007      	beq.n	800eed2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eec2:	4b05      	ldr	r3, [pc, #20]	; (800eed8 <LoRaMacHandleMlmeRequest+0x68>)
 800eec4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eec8:	f023 0302 	bic.w	r3, r3, #2
 800eecc:	4a02      	ldr	r2, [pc, #8]	; (800eed8 <LoRaMacHandleMlmeRequest+0x68>)
 800eece:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800eed2:	bf00      	nop
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20000718 	.word	0x20000718

0800eedc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800eee0:	200b      	movs	r0, #11
 800eee2:	f004 fb09 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d019      	beq.n	800ef20 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800eeec:	4b0e      	ldr	r3, [pc, #56]	; (800ef28 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800eeee:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800eef2:	f003 0301 	and.w	r3, r3, #1
 800eef6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d111      	bne.n	800ef20 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800eefe:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ef02:	f003 0304 	and.w	r3, r3, #4
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d009      	beq.n	800ef20 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ef0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ef12:	f023 0302 	bic.w	r3, r3, #2
 800ef16:	4a04      	ldr	r2, [pc, #16]	; (800ef28 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ef18:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e000      	b.n	800ef22 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	20000718 	.word	0x20000718

0800ef2c <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	71fb      	strb	r3, [r7, #7]
 800ef36:	460b      	mov	r3, r1
 800ef38:	71bb      	strb	r3, [r7, #6]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800ef3e:	79fb      	ldrb	r3, [r7, #7]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d00a      	beq.n	800ef5a <CheckForMinimumAbpDatarate+0x2e>
 800ef44:	79bb      	ldrb	r3, [r7, #6]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d107      	bne.n	800ef5a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800ef4a:	797b      	ldrb	r3, [r7, #5]
 800ef4c:	f083 0301 	eor.w	r3, r3, #1
 800ef50:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800ef56:	2301      	movs	r3, #1
 800ef58:	e000      	b.n	800ef5c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bc80      	pop	{r7}
 800ef64:	4770      	bx	lr
	...

0800ef68 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800ef6c:	4b0d      	ldr	r3, [pc, #52]	; (800efa4 <LoRaMacCheckForRxAbort+0x3c>)
 800ef6e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ef72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00f      	beq.n	800ef9a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800ef7a:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <LoRaMacCheckForRxAbort+0x3c>)
 800ef7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ef80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef84:	4a07      	ldr	r2, [pc, #28]	; (800efa4 <LoRaMacCheckForRxAbort+0x3c>)
 800ef86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ef8a:	4b06      	ldr	r3, [pc, #24]	; (800efa4 <LoRaMacCheckForRxAbort+0x3c>)
 800ef8c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ef90:	f023 0302 	bic.w	r3, r3, #2
 800ef94:	4a03      	ldr	r2, [pc, #12]	; (800efa4 <LoRaMacCheckForRxAbort+0x3c>)
 800ef96:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800ef9a:	bf00      	nop
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bc80      	pop	{r7}
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	20000718 	.word	0x20000718

0800efa8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800efb0:	2300      	movs	r3, #0
 800efb2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800efb4:	2300      	movs	r3, #0
 800efb6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800efb8:	4b50      	ldr	r3, [pc, #320]	; (800f0fc <LoRaMacHandleNvm+0x154>)
 800efba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f040 8098 	bne.w	800f0f4 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2124      	movs	r1, #36	; 0x24
 800efc8:	4618      	mov	r0, r3
 800efca:	f009 fb41 	bl	8018650 <Crc32>
 800efce:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd4:	68ba      	ldr	r2, [r7, #8]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d006      	beq.n	800efe8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800efe0:	89fb      	ldrh	r3, [r7, #14]
 800efe2:	f043 0301 	orr.w	r3, r3, #1
 800efe6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3328      	adds	r3, #40	; 0x28
 800efec:	2114      	movs	r1, #20
 800efee:	4618      	mov	r0, r3
 800eff0:	f009 fb2e 	bl	8018650 <Crc32>
 800eff4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	429a      	cmp	r2, r3
 800effe:	d006      	beq.n	800f00e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f006:	89fb      	ldrh	r3, [r7, #14]
 800f008:	f043 0302 	orr.w	r3, r3, #2
 800f00c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3340      	adds	r3, #64	; 0x40
 800f012:	21e0      	movs	r1, #224	; 0xe0
 800f014:	4618      	mov	r0, r3
 800f016:	f009 fb1b 	bl	8018650 <Crc32>
 800f01a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	429a      	cmp	r2, r3
 800f026:	d007      	beq.n	800f038 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f030:	89fb      	ldrh	r3, [r7, #14]
 800f032:	f043 0304 	orr.w	r3, r3, #4
 800f036:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800f03e:	21bc      	movs	r1, #188	; 0xbc
 800f040:	4618      	mov	r0, r3
 800f042:	f009 fb05 	bl	8018650 <Crc32>
 800f046:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	429a      	cmp	r2, r3
 800f052:	d007      	beq.n	800f064 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	68ba      	ldr	r2, [r7, #8]
 800f058:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f05c:	89fb      	ldrh	r3, [r7, #14]
 800f05e:	f043 0308 	orr.w	r3, r3, #8
 800f062:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f06a:	2110      	movs	r1, #16
 800f06c:	4618      	mov	r0, r3
 800f06e:	f009 faef 	bl	8018650 <Crc32>
 800f072:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d007      	beq.n	800f090 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	68ba      	ldr	r2, [r7, #8]
 800f084:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f088:	89fb      	ldrh	r3, [r7, #14]
 800f08a:	f043 0310 	orr.w	r3, r3, #16
 800f08e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f096:	f44f 715e 	mov.w	r1, #888	; 0x378
 800f09a:	4618      	mov	r0, r3
 800f09c:	f009 fad8 	bl	8018650 <Crc32>
 800f0a0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 800f0a8:	68ba      	ldr	r2, [r7, #8]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d007      	beq.n	800f0be <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f0b6:	89fb      	ldrh	r3, [r7, #14]
 800f0b8:	f043 0320 	orr.w	r3, r3, #32
 800f0bc:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800f0c4:	2114      	movs	r1, #20
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f009 fac2 	bl	8018650 <Crc32>
 800f0cc:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 800f0d4:	68ba      	ldr	r2, [r7, #8]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d007      	beq.n	800f0ea <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f0e2:	89fb      	ldrh	r3, [r7, #14]
 800f0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0e8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f0ea:	89fb      	ldrh	r3, [r7, #14]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f002 f80d 	bl	801110c <CallNvmDataChangeCallback>
 800f0f2:	e000      	b.n	800f0f6 <LoRaMacHandleNvm+0x14e>
        return;
 800f0f4:	bf00      	nop
}
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	20000718 	.word	0x20000718

0800f100 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00d      	beq.n	800f12c <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f110:	6838      	ldr	r0, [r7, #0]
 800f112:	f00d fcbf 	bl	801ca94 <UTIL_TIMER_GetElapsedTime>
 800f116:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d905      	bls.n	800f12c <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f120:	4b05      	ldr	r3, [pc, #20]	; (800f138 <LoRaMacHandleResponseTimeout+0x38>)
 800f122:	2200      	movs	r2, #0
 800f124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800f128:	2301      	movs	r3, #1
 800f12a:	e000      	b.n	800f12e <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20000c38 	.word	0x20000c38

0800f13c <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f142:	2300      	movs	r3, #0
 800f144:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f146:	f7ff fd11 	bl	800eb6c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f14a:	f003 fd84 	bl	8012c56 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f14e:	4b26      	ldr	r3, [pc, #152]	; (800f1e8 <LoRaMacProcess+0xac>)
 800f150:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f154:	f003 0320 	and.w	r3, r3, #32
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d025      	beq.n	800f1aa <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f15e:	2000      	movs	r0, #0
 800f160:	f7ff fd6c 	bl	800ec3c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f164:	f7ff ff00 	bl	800ef68 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f168:	f001 ffee 	bl	8011148 <IsRequestPending>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d006      	beq.n	800f180 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f172:	f7ff feb3 	bl	800eedc <LoRaMacCheckForBeaconAcquisition>
 800f176:	4603      	mov	r3, r0
 800f178:	461a      	mov	r2, r3
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	4313      	orrs	r3, r2
 800f17e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f180:	79fb      	ldrb	r3, [r7, #7]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d103      	bne.n	800f18e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f186:	f7ff fe73 	bl	800ee70 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f18a:	f7ff fe15 	bl	800edb8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f18e:	f7ff fd65 	bl	800ec5c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f192:	f7ff fdc5 	bl	800ed20 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f196:	2001      	movs	r0, #1
 800f198:	f7ff fd50 	bl	800ec3c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f19c:	4a12      	ldr	r2, [pc, #72]	; (800f1e8 <LoRaMacProcess+0xac>)
 800f19e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1a6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800f1aa:	f7ff fdcd 	bl	800ed48 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f1ae:	4b0e      	ldr	r3, [pc, #56]	; (800f1e8 <LoRaMacProcess+0xac>)
 800f1b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800f1b4:	2b02      	cmp	r3, #2
 800f1b6:	d101      	bne.n	800f1bc <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800f1b8:	f001 fbe0 	bl	801097c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f1bc:	4b0a      	ldr	r3, [pc, #40]	; (800f1e8 <LoRaMacProcess+0xac>)
 800f1be:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d009      	beq.n	800f1e0 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f1cc:	4a06      	ldr	r2, [pc, #24]	; (800f1e8 <LoRaMacProcess+0xac>)
 800f1ce:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f1d2:	f36f 1386 	bfc	r3, #6, #1
 800f1d6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800f1da:	4804      	ldr	r0, [pc, #16]	; (800f1ec <LoRaMacProcess+0xb0>)
 800f1dc:	f7ff fee4 	bl	800efa8 <LoRaMacHandleNvm>
    }
}
 800f1e0:	bf00      	nop
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	20000718 	.word	0x20000718
 800f1ec:	20000c38 	.word	0x20000c38

0800f1f0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f1f8:	481e      	ldr	r0, [pc, #120]	; (800f274 <OnTxDelayedTimerEvent+0x84>)
 800f1fa:	f00d fb1f 	bl	801c83c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f1fe:	4b1e      	ldr	r3, [pc, #120]	; (800f278 <OnTxDelayedTimerEvent+0x88>)
 800f200:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f204:	f023 0320 	bic.w	r3, r3, #32
 800f208:	4a1b      	ldr	r2, [pc, #108]	; (800f278 <OnTxDelayedTimerEvent+0x88>)
 800f20a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f20e:	4b1b      	ldr	r3, [pc, #108]	; (800f27c <OnTxDelayedTimerEvent+0x8c>)
 800f210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f214:	4a18      	ldr	r2, [pc, #96]	; (800f278 <OnTxDelayedTimerEvent+0x88>)
 800f216:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 800f21a:	4611      	mov	r1, r2
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7ff ff6f 	bl	800f100 <LoRaMacHandleResponseTimeout>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d11e      	bne.n	800f266 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f228:	2001      	movs	r0, #1
 800f22a:	f001 f92d 	bl	8010488 <ScheduleTx>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	d01a      	beq.n	800f26a <OnTxDelayedTimerEvent+0x7a>
 800f234:	2b0b      	cmp	r3, #11
 800f236:	d018      	beq.n	800f26a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f238:	4b10      	ldr	r3, [pc, #64]	; (800f27c <OnTxDelayedTimerEvent+0x8c>)
 800f23a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	4b0d      	ldr	r3, [pc, #52]	; (800f278 <OnTxDelayedTimerEvent+0x88>)
 800f242:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f246:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <OnTxDelayedTimerEvent+0x88>)
 800f248:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800f24c:	4b0a      	ldr	r3, [pc, #40]	; (800f278 <OnTxDelayedTimerEvent+0x88>)
 800f24e:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f252:	4b09      	ldr	r3, [pc, #36]	; (800f278 <OnTxDelayedTimerEvent+0x88>)
 800f254:	2209      	movs	r2, #9
 800f256:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f25a:	2009      	movs	r0, #9
 800f25c:	f004 f918 	bl	8013490 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f260:	f001 ff18 	bl	8011094 <StopRetransmission>
            break;
 800f264:	e002      	b.n	800f26c <OnTxDelayedTimerEvent+0x7c>
        return;
 800f266:	bf00      	nop
 800f268:	e000      	b.n	800f26c <OnTxDelayedTimerEvent+0x7c>
            break;
 800f26a:	bf00      	nop
        }
    }
}
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	20000a80 	.word	0x20000a80
 800f278:	20000718 	.word	0x20000718
 800f27c:	20000c38 	.word	0x20000c38

0800f280 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f288:	4b17      	ldr	r3, [pc, #92]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f28a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800f28e:	4b16      	ldr	r3, [pc, #88]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f290:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f294:	4b15      	ldr	r3, [pc, #84]	; (800f2ec <OnRxWindow1TimerEvent+0x6c>)
 800f296:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800f29a:	b25a      	sxtb	r2, r3
 800f29c:	4b12      	ldr	r3, [pc, #72]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f29e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f2a2:	4b12      	ldr	r3, [pc, #72]	; (800f2ec <OnRxWindow1TimerEvent+0x6c>)
 800f2a4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f2a8:	4b0f      	ldr	r3, [pc, #60]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f2aa:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f2ae:	4b0f      	ldr	r3, [pc, #60]	; (800f2ec <OnRxWindow1TimerEvent+0x6c>)
 800f2b0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f2b4:	4b0c      	ldr	r3, [pc, #48]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f2b6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f2ba:	4b0b      	ldr	r3, [pc, #44]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f2c2:	4b09      	ldr	r3, [pc, #36]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f2ca:	4b08      	ldr	r3, [pc, #32]	; (800f2ec <OnRxWindow1TimerEvent+0x6c>)
 800f2cc:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800f2d0:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <OnRxWindow1TimerEvent+0x68>)
 800f2d2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f2d6:	4906      	ldr	r1, [pc, #24]	; (800f2f0 <OnRxWindow1TimerEvent+0x70>)
 800f2d8:	4806      	ldr	r0, [pc, #24]	; (800f2f4 <OnRxWindow1TimerEvent+0x74>)
 800f2da:	f001 fb1b 	bl	8010914 <RxWindowSetup>
}
 800f2de:	bf00      	nop
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	20000718 	.word	0x20000718
 800f2ec:	20000c38 	.word	0x20000c38
 800f2f0:	20000ad0 	.word	0x20000ad0
 800f2f4:	20000a98 	.word	0x20000a98

0800f2f8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f300:	4b19      	ldr	r3, [pc, #100]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f302:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800f306:	2b00      	cmp	r3, #0
 800f308:	d029      	beq.n	800f35e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f30a:	4b17      	ldr	r3, [pc, #92]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f30c:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800f310:	4b15      	ldr	r3, [pc, #84]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f312:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f316:	4b15      	ldr	r3, [pc, #84]	; (800f36c <OnRxWindow2TimerEvent+0x74>)
 800f318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f31a:	4a13      	ldr	r2, [pc, #76]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f31c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f320:	4b12      	ldr	r3, [pc, #72]	; (800f36c <OnRxWindow2TimerEvent+0x74>)
 800f322:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f326:	4b10      	ldr	r3, [pc, #64]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f328:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f32c:	4b0f      	ldr	r3, [pc, #60]	; (800f36c <OnRxWindow2TimerEvent+0x74>)
 800f32e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f332:	4b0d      	ldr	r3, [pc, #52]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f334:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f338:	4b0b      	ldr	r3, [pc, #44]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f340:	4b09      	ldr	r3, [pc, #36]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f342:	2201      	movs	r2, #1
 800f344:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f348:	4b08      	ldr	r3, [pc, #32]	; (800f36c <OnRxWindow2TimerEvent+0x74>)
 800f34a:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800f34e:	4b06      	ldr	r3, [pc, #24]	; (800f368 <OnRxWindow2TimerEvent+0x70>)
 800f350:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f354:	4906      	ldr	r1, [pc, #24]	; (800f370 <OnRxWindow2TimerEvent+0x78>)
 800f356:	4807      	ldr	r0, [pc, #28]	; (800f374 <OnRxWindow2TimerEvent+0x7c>)
 800f358:	f001 fadc 	bl	8010914 <RxWindowSetup>
 800f35c:	e000      	b.n	800f360 <OnRxWindow2TimerEvent+0x68>
        return;
 800f35e:	bf00      	nop
}
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
 800f366:	bf00      	nop
 800f368:	20000718 	.word	0x20000718
 800f36c:	20000c38 	.word	0x20000c38
 800f370:	20000ae8 	.word	0x20000ae8
 800f374:	20000ab0 	.word	0x20000ab0

0800f378 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f380:	480f      	ldr	r0, [pc, #60]	; (800f3c0 <OnRetransmitTimeoutTimerEvent+0x48>)
 800f382:	f00d fa5b 	bl	801c83c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f386:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f388:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d003      	beq.n	800f398 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f390:	4b0c      	ldr	r3, [pc, #48]	; (800f3c4 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f392:	2201      	movs	r2, #1
 800f394:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f398:	4b0a      	ldr	r3, [pc, #40]	; (800f3c4 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f39a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00a      	beq.n	800f3b8 <OnRetransmitTimeoutTimerEvent+0x40>
 800f3a2:	4b08      	ldr	r3, [pc, #32]	; (800f3c4 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f3a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d004      	beq.n	800f3b8 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f3ae:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f3b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	4798      	blx	r3
    }
}
 800f3b8:	bf00      	nop
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	20000b1c 	.word	0x20000b1c
 800f3c4:	20000718 	.word	0x20000718

0800f3c8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60ba      	str	r2, [r7, #8]
 800f3d0:	607b      	str	r3, [r7, #4]
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	73fb      	strb	r3, [r7, #15]
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d005      	beq.n	800f3ec <GetFCntDown+0x24>
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d002      	beq.n	800f3ec <GetFCntDown+0x24>
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d101      	bne.n	800f3f0 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f3ec:	2309      	movs	r3, #9
 800f3ee:	e028      	b.n	800f442 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f3f0:	7bfb      	ldrb	r3, [r7, #15]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d016      	beq.n	800f424 <GetFCntDown+0x5c>
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d118      	bne.n	800f42c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f3fa:	79bb      	ldrb	r3, [r7, #6]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d10d      	bne.n	800f41c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f400:	7bbb      	ldrb	r3, [r7, #14]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d002      	beq.n	800f40c <GetFCntDown+0x44>
 800f406:	7bbb      	ldrb	r3, [r7, #14]
 800f408:	2b03      	cmp	r3, #3
 800f40a:	d103      	bne.n	800f414 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	2202      	movs	r2, #2
 800f410:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f412:	e00d      	b.n	800f430 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	2201      	movs	r2, #1
 800f418:	701a      	strb	r2, [r3, #0]
            break;
 800f41a:	e009      	b.n	800f430 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	2203      	movs	r2, #3
 800f420:	701a      	strb	r2, [r3, #0]
            break;
 800f422:	e005      	b.n	800f430 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	2204      	movs	r2, #4
 800f428:	701a      	strb	r2, [r3, #0]
            break;
 800f42a:	e001      	b.n	800f430 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f42c:	2305      	movs	r3, #5
 800f42e:	e008      	b.n	800f442 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	7818      	ldrb	r0, [r3, #0]
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	89db      	ldrh	r3, [r3, #14]
 800f438:	69fa      	ldr	r2, [r7, #28]
 800f43a:	4619      	mov	r1, r3
 800f43c:	f004 fc52 	bl	8013ce4 <LoRaMacCryptoGetFCntDown>
 800f440:	4603      	mov	r3, r0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
	...

0800f44c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f44c:	b5b0      	push	{r4, r5, r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	4603      	mov	r3, r0
 800f454:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f456:	2303      	movs	r3, #3
 800f458:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f45a:	4b62      	ldr	r3, [pc, #392]	; (800f5e4 <SwitchClass+0x198>)
 800f45c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f460:	2b02      	cmp	r3, #2
 800f462:	f000 80a7 	beq.w	800f5b4 <SwitchClass+0x168>
 800f466:	2b02      	cmp	r3, #2
 800f468:	f300 80b6 	bgt.w	800f5d8 <SwitchClass+0x18c>
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d003      	beq.n	800f478 <SwitchClass+0x2c>
 800f470:	2b01      	cmp	r3, #1
 800f472:	f000 8091 	beq.w	800f598 <SwitchClass+0x14c>
 800f476:	e0af      	b.n	800f5d8 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d107      	bne.n	800f48e <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f47e:	4b59      	ldr	r3, [pc, #356]	; (800f5e4 <SwitchClass+0x198>)
 800f480:	4a58      	ldr	r2, [pc, #352]	; (800f5e4 <SwitchClass+0x198>)
 800f482:	336c      	adds	r3, #108	; 0x6c
 800f484:	3264      	adds	r2, #100	; 0x64
 800f486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f48a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f48e:	79fb      	ldrb	r3, [r7, #7]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d10c      	bne.n	800f4ae <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	4618      	mov	r0, r3
 800f498:	f003 fb74 	bl	8012b84 <LoRaMacClassBSwitchClass>
 800f49c:	4603      	mov	r3, r0
 800f49e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f4a0:	7bfb      	ldrb	r3, [r7, #15]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d103      	bne.n	800f4ae <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f4a6:	4a4f      	ldr	r2, [pc, #316]	; (800f5e4 <SwitchClass+0x198>)
 800f4a8:	79fb      	ldrb	r3, [r7, #7]
 800f4aa:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f4ae:	79fb      	ldrb	r3, [r7, #7]
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	f040 808c 	bne.w	800f5ce <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f4b6:	4a4b      	ldr	r2, [pc, #300]	; (800f5e4 <SwitchClass+0x198>)
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f4be:	4a4a      	ldr	r2, [pc, #296]	; (800f5e8 <SwitchClass+0x19c>)
 800f4c0:	4b49      	ldr	r3, [pc, #292]	; (800f5e8 <SwitchClass+0x19c>)
 800f4c2:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800f4c6:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800f4ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f4d2:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f4d6:	4b44      	ldr	r3, [pc, #272]	; (800f5e8 <SwitchClass+0x19c>)
 800f4d8:	2202      	movs	r2, #2
 800f4da:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f4de:	2300      	movs	r3, #0
 800f4e0:	73bb      	strb	r3, [r7, #14]
 800f4e2:	e049      	b.n	800f578 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f4e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4e8:	4a3e      	ldr	r2, [pc, #248]	; (800f5e4 <SwitchClass+0x198>)
 800f4ea:	212c      	movs	r1, #44	; 0x2c
 800f4ec:	fb01 f303 	mul.w	r3, r1, r3
 800f4f0:	4413      	add	r3, r2
 800f4f2:	33da      	adds	r3, #218	; 0xda
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d038      	beq.n	800f56c <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f4fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4fe:	4a39      	ldr	r2, [pc, #228]	; (800f5e4 <SwitchClass+0x198>)
 800f500:	212c      	movs	r1, #44	; 0x2c
 800f502:	fb01 f303 	mul.w	r3, r1, r3
 800f506:	4413      	add	r3, r2
 800f508:	33f0      	adds	r3, #240	; 0xf0
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4a35      	ldr	r2, [pc, #212]	; (800f5e4 <SwitchClass+0x198>)
 800f50e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f514:	4a33      	ldr	r2, [pc, #204]	; (800f5e4 <SwitchClass+0x198>)
 800f516:	212c      	movs	r1, #44	; 0x2c
 800f518:	fb01 f303 	mul.w	r3, r1, r3
 800f51c:	4413      	add	r3, r2
 800f51e:	33f4      	adds	r3, #244	; 0xf4
 800f520:	f993 3000 	ldrsb.w	r3, [r3]
 800f524:	b2da      	uxtb	r2, r3
 800f526:	4b2f      	ldr	r3, [pc, #188]	; (800f5e4 <SwitchClass+0x198>)
 800f528:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f52c:	4b2e      	ldr	r3, [pc, #184]	; (800f5e8 <SwitchClass+0x19c>)
 800f52e:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800f532:	4b2d      	ldr	r3, [pc, #180]	; (800f5e8 <SwitchClass+0x19c>)
 800f534:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f538:	4b2a      	ldr	r3, [pc, #168]	; (800f5e4 <SwitchClass+0x198>)
 800f53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f53c:	4a2a      	ldr	r2, [pc, #168]	; (800f5e8 <SwitchClass+0x19c>)
 800f53e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f542:	4b28      	ldr	r3, [pc, #160]	; (800f5e4 <SwitchClass+0x198>)
 800f544:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f548:	4b27      	ldr	r3, [pc, #156]	; (800f5e8 <SwitchClass+0x19c>)
 800f54a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f54e:	4b25      	ldr	r3, [pc, #148]	; (800f5e4 <SwitchClass+0x198>)
 800f550:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f554:	4b24      	ldr	r3, [pc, #144]	; (800f5e8 <SwitchClass+0x19c>)
 800f556:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f55a:	4b23      	ldr	r3, [pc, #140]	; (800f5e8 <SwitchClass+0x19c>)
 800f55c:	2203      	movs	r2, #3
 800f55e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f562:	4b21      	ldr	r3, [pc, #132]	; (800f5e8 <SwitchClass+0x19c>)
 800f564:	2201      	movs	r2, #1
 800f566:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800f56a:	e009      	b.n	800f580 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f56c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f570:	b2db      	uxtb	r3, r3
 800f572:	3301      	adds	r3, #1
 800f574:	b2db      	uxtb	r3, r3
 800f576:	73bb      	strb	r3, [r7, #14]
 800f578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	ddb1      	ble.n	800f4e4 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f580:	4b19      	ldr	r3, [pc, #100]	; (800f5e8 <SwitchClass+0x19c>)
 800f582:	2200      	movs	r2, #0
 800f584:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f588:	4b18      	ldr	r3, [pc, #96]	; (800f5ec <SwitchClass+0x1a0>)
 800f58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f58e:	f001 f9f5 	bl	801097c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f592:	2300      	movs	r3, #0
 800f594:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f596:	e01a      	b.n	800f5ce <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f003 faf2 	bl	8012b84 <LoRaMacClassBSwitchClass>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d113      	bne.n	800f5d2 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f5aa:	4a0e      	ldr	r2, [pc, #56]	; (800f5e4 <SwitchClass+0x198>)
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800f5b2:	e00e      	b.n	800f5d2 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f5b4:	79fb      	ldrb	r3, [r7, #7]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10d      	bne.n	800f5d6 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f5ba:	4a0a      	ldr	r2, [pc, #40]	; (800f5e4 <SwitchClass+0x198>)
 800f5bc:	79fb      	ldrb	r3, [r7, #7]
 800f5be:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	; (800f5ec <SwitchClass+0x1a0>)
 800f5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c6:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f5cc:	e003      	b.n	800f5d6 <SwitchClass+0x18a>
            break;
 800f5ce:	bf00      	nop
 800f5d0:	e002      	b.n	800f5d8 <SwitchClass+0x18c>
            break;
 800f5d2:	bf00      	nop
 800f5d4:	e000      	b.n	800f5d8 <SwitchClass+0x18c>
            break;
 800f5d6:	bf00      	nop
        }
    }

    return status;
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bdb0      	pop	{r4, r5, r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	20000c38 	.word	0x20000c38
 800f5e8:	20000718 	.word	0x20000718
 800f5ec:	0801e0d4 	.word	0x0801e0d4

0800f5f0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f5fa:	4b10      	ldr	r3, [pc, #64]	; (800f63c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f5fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f600:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f602:	79fb      	ldrb	r3, [r7, #7]
 800f604:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f606:	230d      	movs	r3, #13
 800f608:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f60a:	4b0c      	ldr	r3, [pc, #48]	; (800f63c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f60c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f614:	230e      	movs	r3, #14
 800f616:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f618:	4b08      	ldr	r3, [pc, #32]	; (800f63c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f61a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f61e:	f107 0210 	add.w	r2, r7, #16
 800f622:	4611      	mov	r1, r2
 800f624:	4618      	mov	r0, r3
 800f626:	f005 f9c0 	bl	80149aa <RegionGetPhyParam>
 800f62a:	4603      	mov	r3, r0
 800f62c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	b2db      	uxtb	r3, r3
}
 800f632:	4618      	mov	r0, r3
 800f634:	3718      	adds	r7, #24
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20000c38 	.word	0x20000c38

0800f640 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	4603      	mov	r3, r0
 800f648:	71fb      	strb	r3, [r7, #7]
 800f64a:	460b      	mov	r3, r1
 800f64c:	71bb      	strb	r3, [r7, #6]
 800f64e:	4613      	mov	r3, r2
 800f650:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f652:	2300      	movs	r3, #0
 800f654:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f65a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff ffc6 	bl	800f5f0 <GetMaxAppPayloadWithoutFOptsLength>
 800f664:	4603      	mov	r3, r0
 800f666:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	797b      	ldrb	r3, [r7, #5]
 800f66e:	b29b      	uxth	r3, r3
 800f670:	4413      	add	r3, r2
 800f672:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f674:	89ba      	ldrh	r2, [r7, #12]
 800f676:	89fb      	ldrh	r3, [r7, #14]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d804      	bhi.n	800f686 <ValidatePayloadLength+0x46>
 800f67c:	89bb      	ldrh	r3, [r7, #12]
 800f67e:	2bff      	cmp	r3, #255	; 0xff
 800f680:	d801      	bhi.n	800f686 <ValidatePayloadLength+0x46>
    {
        return true;
 800f682:	2301      	movs	r3, #1
 800f684:	e000      	b.n	800f688 <ValidatePayloadLength+0x48>
    }
    return false;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f690:	b590      	push	{r4, r7, lr}
 800f692:	b0a5      	sub	sp, #148	; 0x94
 800f694:	af02      	add	r7, sp, #8
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	4608      	mov	r0, r1
 800f69a:	4611      	mov	r1, r2
 800f69c:	461a      	mov	r2, r3
 800f69e:	4603      	mov	r3, r0
 800f6a0:	70fb      	strb	r3, [r7, #3]
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	70bb      	strb	r3, [r7, #2]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f6bc:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	f000 84ab 	beq.w	801001c <ProcessMacCommands+0x98c>
 800f6c6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	f040 84ac 	bne.w	8010028 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f6d0:	f000 bca4 	b.w	801001c <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f6d4:	78fb      	ldrb	r3, [r7, #3]
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	4413      	add	r3, r2
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f003 fd33 	bl	8013148 <LoRaMacCommandsGetCmdSize>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	78fb      	ldrb	r3, [r7, #3]
 800f6e8:	441a      	add	r2, r3
 800f6ea:	78bb      	ldrb	r3, [r7, #2]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	f300 849d 	bgt.w	801002c <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f6f2:	78fb      	ldrb	r3, [r7, #3]
 800f6f4:	1c5a      	adds	r2, r3, #1
 800f6f6:	70fa      	strb	r2, [r7, #3]
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	3b02      	subs	r3, #2
 800f702:	2b11      	cmp	r3, #17
 800f704:	f200 8494 	bhi.w	8010030 <ProcessMacCommands+0x9a0>
 800f708:	a201      	add	r2, pc, #4	; (adr r2, 800f710 <ProcessMacCommands+0x80>)
 800f70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70e:	bf00      	nop
 800f710:	0800f759 	.word	0x0800f759
 800f714:	0800f79b 	.word	0x0800f79b
 800f718:	0800f917 	.word	0x0800f917
 800f71c:	0800f955 	.word	0x0800f955
 800f720:	0800fa4d 	.word	0x0800fa4d
 800f724:	0800fa9d 	.word	0x0800fa9d
 800f728:	0800fb59 	.word	0x0800fb59
 800f72c:	0800fbaf 	.word	0x0800fbaf
 800f730:	0800fc93 	.word	0x0800fc93
 800f734:	08010031 	.word	0x08010031
 800f738:	08010031 	.word	0x08010031
 800f73c:	0800fd3d 	.word	0x0800fd3d
 800f740:	08010031 	.word	0x08010031
 800f744:	08010031 	.word	0x08010031
 800f748:	0800fe5d 	.word	0x0800fe5d
 800f74c:	0800fe91 	.word	0x0800fe91
 800f750:	0800ff21 	.word	0x0800ff21
 800f754:	0800ff97 	.word	0x0800ff97
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f758:	2004      	movs	r0, #4
 800f75a:	f003 fecd 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 845b 	beq.w	801001c <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f766:	2104      	movs	r1, #4
 800f768:	2000      	movs	r0, #0
 800f76a:	f003 fe39 	bl	80133e0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f76e:	78fb      	ldrb	r3, [r7, #3]
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	70fa      	strb	r2, [r7, #3]
 800f774:	461a      	mov	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4413      	add	r3, r2
 800f77a:	781a      	ldrb	r2, [r3, #0]
 800f77c:	4bb0      	ldr	r3, [pc, #704]	; (800fa40 <ProcessMacCommands+0x3b0>)
 800f77e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f782:	78fb      	ldrb	r3, [r7, #3]
 800f784:	1c5a      	adds	r2, r3, #1
 800f786:	70fa      	strb	r2, [r7, #3]
 800f788:	461a      	mov	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4413      	add	r3, r2
 800f78e:	781a      	ldrb	r2, [r3, #0]
 800f790:	4bab      	ldr	r3, [pc, #684]	; (800fa40 <ProcessMacCommands+0x3b0>)
 800f792:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                }
                break;
 800f796:	f000 bc41 	b.w	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f7b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f7b6:	f083 0301 	eor.w	r3, r3, #1
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f000 80a5 	beq.w	800f90c <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f7c8:	78fb      	ldrb	r3, [r7, #3]
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f7d2:	4b9c      	ldr	r3, [pc, #624]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f7d4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f7d8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f7dc:	4b99      	ldr	r3, [pc, #612]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f7de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f7e2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f7e6:	4b97      	ldr	r3, [pc, #604]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f7e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f7ec:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f7f0:	4b94      	ldr	r3, [pc, #592]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f7f2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f7f6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f7fa:	4b92      	ldr	r3, [pc, #584]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f7fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f800:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f804:	4b8f      	ldr	r3, [pc, #572]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f806:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f80a:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f80c:	4b8d      	ldr	r3, [pc, #564]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f80e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f812:	2b00      	cmp	r3, #0
 800f814:	d008      	beq.n	800f828 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f816:	78ba      	ldrb	r2, [r7, #2]
 800f818:	78fb      	ldrb	r3, [r7, #3]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	3301      	adds	r3, #1
 800f820:	b2db      	uxtb	r3, r3
 800f822:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800f826:	e002      	b.n	800f82e <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f828:	2305      	movs	r3, #5
 800f82a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f82e:	4b85      	ldr	r3, [pc, #532]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f830:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f834:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f838:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f83c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f840:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f844:	9301      	str	r3, [sp, #4]
 800f846:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f84a:	9300      	str	r3, [sp, #0]
 800f84c:	4623      	mov	r3, r4
 800f84e:	f005 f9b3 	bl	8014bb8 <RegionLinkAdrReq>
 800f852:	4603      	mov	r3, r0
 800f854:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f858:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f85c:	f003 0307 	and.w	r3, r3, #7
 800f860:	2b07      	cmp	r3, #7
 800f862:	d119      	bne.n	800f898 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f864:	4b77      	ldr	r3, [pc, #476]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f866:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800f86a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f86e:	429a      	cmp	r2, r3
 800f870:	da03      	bge.n	800f87a <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f872:	4b74      	ldr	r3, [pc, #464]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f874:	2201      	movs	r2, #1
 800f876:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f87a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f87e:	4b71      	ldr	r3, [pc, #452]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f884:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f888:	4b6e      	ldr	r3, [pc, #440]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f88a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f88e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f892:	4b6c      	ldr	r3, [pc, #432]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f894:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f898:	2300      	movs	r3, #0
 800f89a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f89e:	e00b      	b.n	800f8b8 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f8a0:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	2003      	movs	r0, #3
 800f8aa:	f003 fafd 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f8ae:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f8b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f8bc:	4a62      	ldr	r2, [pc, #392]	; (800fa48 <ProcessMacCommands+0x3b8>)
 800f8be:	fba2 2303 	umull	r2, r3, r2, r3
 800f8c2:	089b      	lsrs	r3, r3, #2
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d3e8      	bcc.n	800f8a0 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f8ce:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f8d2:	78fb      	ldrb	r3, [r7, #3]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f8dc:	78fa      	ldrb	r2, [r7, #3]
 800f8de:	78bb      	ldrb	r3, [r7, #2]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d20a      	bcs.n	800f8fa <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f8e4:	78fb      	ldrb	r3, [r7, #3]
 800f8e6:	1c5a      	adds	r2, r3, #1
 800f8e8:	70fa      	strb	r2, [r7, #3]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	2b03      	cmp	r3, #3
 800f8f4:	f43f af68 	beq.w	800f7c8 <ProcessMacCommands+0x138>
 800f8f8:	e000      	b.n	800f8fc <ProcessMacCommands+0x26c>
                            break;
 800f8fa:	bf00      	nop

                    if( macIndex < commandsSize )
 800f8fc:	78fa      	ldrb	r2, [r7, #3]
 800f8fe:	78bb      	ldrb	r3, [r7, #2]
 800f900:	429a      	cmp	r2, r3
 800f902:	d206      	bcs.n	800f912 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f904:	78fb      	ldrb	r3, [r7, #3]
 800f906:	3b01      	subs	r3, #1
 800f908:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f90a:	e002      	b.n	800f912 <ProcessMacCommands+0x282>
                    macIndex += 4;
 800f90c:	78fb      	ldrb	r3, [r7, #3]
 800f90e:	3304      	adds	r3, #4
 800f910:	70fb      	strb	r3, [r7, #3]
                break;
 800f912:	bf00      	nop
 800f914:	e382      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f916:	78fb      	ldrb	r3, [r7, #3]
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	70fa      	strb	r2, [r7, #3]
 800f91c:	461a      	mov	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4413      	add	r3, r2
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	f003 030f 	and.w	r3, r3, #15
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	4b46      	ldr	r3, [pc, #280]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f92c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f930:	4b44      	ldr	r3, [pc, #272]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f932:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800f936:	461a      	mov	r2, r3
 800f938:	2301      	movs	r3, #1
 800f93a:	4093      	lsls	r3, r2
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	4b41      	ldr	r3, [pc, #260]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f940:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f944:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f948:	2200      	movs	r2, #0
 800f94a:	4619      	mov	r1, r3
 800f94c:	2004      	movs	r0, #4
 800f94e:	f003 faab 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                break;
 800f952:	e363      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f954:	2307      	movs	r3, #7
 800f956:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f95a:	78fb      	ldrb	r3, [r7, #3]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	4413      	add	r3, r2
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	091b      	lsrs	r3, r3, #4
 800f964:	b2db      	uxtb	r3, r3
 800f966:	b25b      	sxtb	r3, r3
 800f968:	f003 0307 	and.w	r3, r3, #7
 800f96c:	b25b      	sxtb	r3, r3
 800f96e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f972:	78fb      	ldrb	r3, [r7, #3]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	4413      	add	r3, r2
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	b25b      	sxtb	r3, r3
 800f97c:	f003 030f 	and.w	r3, r3, #15
 800f980:	b25b      	sxtb	r3, r3
 800f982:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f986:	78fb      	ldrb	r3, [r7, #3]
 800f988:	3301      	adds	r3, #1
 800f98a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f98c:	78fb      	ldrb	r3, [r7, #3]
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	70fa      	strb	r2, [r7, #3]
 800f992:	461a      	mov	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4413      	add	r3, r2
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f99c:	78fb      	ldrb	r3, [r7, #3]
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	70fa      	strb	r2, [r7, #3]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	021a      	lsls	r2, r3, #8
 800f9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f9b2:	78fb      	ldrb	r3, [r7, #3]
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	70fa      	strb	r2, [r7, #3]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4413      	add	r3, r2
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	041a      	lsls	r2, r3, #16
 800f9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ca:	2264      	movs	r2, #100	; 0x64
 800f9cc:	fb02 f303 	mul.w	r3, r2, r3
 800f9d0:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f9d2:	4b1c      	ldr	r3, [pc, #112]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f9d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f9dc:	4611      	mov	r1, r2
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f005 f911 	bl	8014c06 <RegionRxParamSetupReq>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f9ea:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f9ee:	f003 0307 	and.w	r3, r3, #7
 800f9f2:	2b07      	cmp	r3, #7
 800f9f4:	d117      	bne.n	800fa26 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f9f6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	4b11      	ldr	r3, [pc, #68]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800f9fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fa02:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	4b0e      	ldr	r3, [pc, #56]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800fa0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fa0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa10:	4a0c      	ldr	r2, [pc, #48]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800fa12:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fa14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa16:	4a0b      	ldr	r2, [pc, #44]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800fa18:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800fa1a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800fa1e:	b2da      	uxtb	r2, r3
 800fa20:	4b08      	ldr	r3, [pc, #32]	; (800fa44 <ProcessMacCommands+0x3b4>)
 800fa22:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800fa26:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fa2a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fa2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fa32:	2201      	movs	r2, #1
 800fa34:	4619      	mov	r1, r3
 800fa36:	2005      	movs	r0, #5
 800fa38:	f003 fa36 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fa3c:	bf00      	nop
 800fa3e:	e2ed      	b.n	801001c <ProcessMacCommands+0x98c>
 800fa40:	20000718 	.word	0x20000718
 800fa44:	20000c38 	.word	0x20000c38
 800fa48:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800fa4c:	23ff      	movs	r3, #255	; 0xff
 800fa4e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800fa52:	4bb7      	ldr	r3, [pc, #732]	; (800fd30 <ProcessMacCommands+0x6a0>)
 800fa54:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00d      	beq.n	800fa78 <ProcessMacCommands+0x3e8>
 800fa5c:	4bb4      	ldr	r3, [pc, #720]	; (800fd30 <ProcessMacCommands+0x6a0>)
 800fa5e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d007      	beq.n	800fa78 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fa68:	4bb1      	ldr	r3, [pc, #708]	; (800fd30 <ProcessMacCommands+0x6a0>)
 800fa6a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4798      	blx	r3
 800fa72:	4603      	mov	r3, r0
 800fa74:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fa78:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800fa7c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fa80:	787b      	ldrb	r3, [r7, #1]
 800fa82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fa8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fa90:	2202      	movs	r2, #2
 800fa92:	4619      	mov	r1, r3
 800fa94:	2006      	movs	r0, #6
 800fa96:	f003 fa07 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                break;
 800fa9a:	e2bf      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800faa2:	78fb      	ldrb	r3, [r7, #3]
 800faa4:	1c5a      	adds	r2, r3, #1
 800faa6:	70fa      	strb	r2, [r7, #3]
 800faa8:	461a      	mov	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4413      	add	r3, r2
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	b25b      	sxtb	r3, r3
 800fab2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800fab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800faba:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fabc:	78fb      	ldrb	r3, [r7, #3]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	70fa      	strb	r2, [r7, #3]
 800fac2:	461a      	mov	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4413      	add	r3, r2
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800facc:	78fb      	ldrb	r3, [r7, #3]
 800face:	1c5a      	adds	r2, r3, #1
 800fad0:	70fa      	strb	r2, [r7, #3]
 800fad2:	461a      	mov	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4413      	add	r3, r2
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	021a      	lsls	r2, r3, #8
 800fadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fade:	4313      	orrs	r3, r2
 800fae0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fae2:	78fb      	ldrb	r3, [r7, #3]
 800fae4:	1c5a      	adds	r2, r3, #1
 800fae6:	70fa      	strb	r2, [r7, #3]
 800fae8:	461a      	mov	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4413      	add	r3, r2
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	041a      	lsls	r2, r3, #16
 800faf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf4:	4313      	orrs	r3, r2
 800faf6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800faf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafa:	2264      	movs	r2, #100	; 0x64
 800fafc:	fb02 f303 	mul.w	r3, r2, r3
 800fb00:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fb06:	78fb      	ldrb	r3, [r7, #3]
 800fb08:	1c5a      	adds	r2, r3, #1
 800fb0a:	70fa      	strb	r2, [r7, #3]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4413      	add	r3, r2
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	b25b      	sxtb	r3, r3
 800fb16:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800fb1a:	4b86      	ldr	r3, [pc, #536]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fb1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb20:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800fb24:	4611      	mov	r1, r2
 800fb26:	4618      	mov	r0, r3
 800fb28:	f005 f888 	bl	8014c3c <RegionNewChannelReq>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800fb34:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fb38:	b25b      	sxtb	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	db0a      	blt.n	800fb54 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 800fb3e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fb42:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fb46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	2007      	movs	r0, #7
 800fb50:	f003 f9aa 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                }
                break;
 800fb54:	bf00      	nop
 800fb56:	e261      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fb58:	78fb      	ldrb	r3, [r7, #3]
 800fb5a:	1c5a      	adds	r2, r3, #1
 800fb5c:	70fa      	strb	r2, [r7, #3]
 800fb5e:	461a      	mov	r2, r3
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4413      	add	r3, r2
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f003 030f 	and.w	r3, r3, #15
 800fb6a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800fb6e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d104      	bne.n	800fb80 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800fb76:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800fb80:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800fb84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb88:	fb02 f303 	mul.w	r3, r2, r3
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	4b69      	ldr	r3, [pc, #420]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fb90:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fb92:	4b68      	ldr	r3, [pc, #416]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fb94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb96:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800fb9a:	4a66      	ldr	r2, [pc, #408]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fb9c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fb9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fba2:	2200      	movs	r2, #0
 800fba4:	4619      	mov	r1, r3
 800fba6:	2008      	movs	r0, #8
 800fba8:	f003 f97e 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800fbac:	e236      	b.n	801001c <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fbae:	78fb      	ldrb	r3, [r7, #3]
 800fbb0:	1c5a      	adds	r2, r3, #1
 800fbb2:	70fa      	strb	r2, [r7, #3]
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4413      	add	r3, r2
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fbcc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fbd0:	f003 0320 	and.w	r3, r3, #32
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d002      	beq.n	800fbde <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fbde:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fbe2:	f003 0310 	and.w	r3, r3, #16
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d002      	beq.n	800fbf0 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fbea:	2301      	movs	r3, #1
 800fbec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fbf0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800fbf4:	f003 030f 	and.w	r3, r3, #15
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fbfe:	4b4d      	ldr	r3, [pc, #308]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc04:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fc08:	4611      	mov	r1, r2
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f005 f831 	bl	8014c72 <RegionTxParamSetupReq>
 800fc10:	4603      	mov	r3, r0
 800fc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc16:	d03a      	beq.n	800fc8e <ProcessMacCommands+0x5fe>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fc18:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800fc1c:	4b45      	ldr	r3, [pc, #276]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fc22:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800fc26:	4b43      	ldr	r3, [pc, #268]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc28:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fc2c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fc30:	461a      	mov	r2, r3
 800fc32:	4b41      	ldr	r3, [pc, #260]	; (800fd38 <ProcessMacCommands+0x6a8>)
 800fc34:	5c9b      	ldrb	r3, [r3, r2]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7f0 fdc8 	bl	80007cc <__aeabi_ui2f>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	4a3d      	ldr	r2, [pc, #244]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc40:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fc42:	2302      	movs	r3, #2
 800fc44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fc48:	4b3a      	ldr	r3, [pc, #232]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fc4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc52:	4b38      	ldr	r3, [pc, #224]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc58:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fc5c:	4611      	mov	r1, r2
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f004 fea3 	bl	80149aa <RegionGetPhyParam>
 800fc64:	4603      	mov	r3, r0
 800fc66:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6a:	b25a      	sxtb	r2, r3
 800fc6c:	4b31      	ldr	r3, [pc, #196]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc6e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fc72:	4293      	cmp	r3, r2
 800fc74:	bfb8      	it	lt
 800fc76:	4613      	movlt	r3, r2
 800fc78:	b25a      	sxtb	r2, r3
 800fc7a:	4b2e      	ldr	r3, [pc, #184]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fc7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fc80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fc84:	2200      	movs	r2, #0
 800fc86:	4619      	mov	r1, r3
 800fc88:	2009      	movs	r0, #9
 800fc8a:	f003 f90d 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                }
                break;
 800fc8e:	bf00      	nop
 800fc90:	e1c4      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fc92:	2303      	movs	r3, #3
 800fc94:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800fc98:	78fb      	ldrb	r3, [r7, #3]
 800fc9a:	1c5a      	adds	r2, r3, #1
 800fc9c:	70fa      	strb	r2, [r7, #3]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4413      	add	r3, r2
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fcaa:	78fb      	ldrb	r3, [r7, #3]
 800fcac:	1c5a      	adds	r2, r3, #1
 800fcae:	70fa      	strb	r2, [r7, #3]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fcba:	78fb      	ldrb	r3, [r7, #3]
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	70fa      	strb	r2, [r7, #3]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	021a      	lsls	r2, r3, #8
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fccc:	4313      	orrs	r3, r2
 800fcce:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fcd0:	78fb      	ldrb	r3, [r7, #3]
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	70fa      	strb	r2, [r7, #3]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4413      	add	r3, r2
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	041a      	lsls	r2, r3, #16
 800fce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce2:	4313      	orrs	r3, r2
 800fce4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce8:	2264      	movs	r2, #100	; 0x64
 800fcea:	fb02 f303 	mul.w	r3, r2, r3
 800fcee:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800fcf0:	4b10      	ldr	r3, [pc, #64]	; (800fd34 <ProcessMacCommands+0x6a4>)
 800fcf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcf6:	f107 0220 	add.w	r2, r7, #32
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f004 ffd3 	bl	8014ca8 <RegionDlChannelReq>
 800fd02:	4603      	mov	r3, r0
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800fd0a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fd0e:	b25b      	sxtb	r3, r3
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	db0a      	blt.n	800fd2a <ProcessMacCommands+0x69a>
                {
                    macCmdPayload[0] = status;
 800fd14:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fd18:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800fd1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fd20:	2201      	movs	r2, #1
 800fd22:	4619      	mov	r1, r3
 800fd24:	200a      	movs	r0, #10
 800fd26:	f003 f8bf 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800fd2a:	bf00      	nop
 800fd2c:	e176      	b.n	801001c <ProcessMacCommands+0x98c>
 800fd2e:	bf00      	nop
 800fd30:	20000718 	.word	0x20000718
 800fd34:	20000c38 	.word	0x20000c38
 800fd38:	0801e008 	.word	0x0801e008
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800fd3c:	2009      	movs	r0, #9
 800fd3e:	f003 fbdb 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 8084 	beq.w	800fe52 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800fd4a:	2109      	movs	r1, #9
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	f003 fb47 	bl	80133e0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800fd52:	f107 0318 	add.w	r3, r7, #24
 800fd56:	2200      	movs	r2, #0
 800fd58:	601a      	str	r2, [r3, #0]
 800fd5a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800fd5c:	f107 0310 	add.w	r3, r7, #16
 800fd60:	2200      	movs	r2, #0
 800fd62:	601a      	str	r2, [r3, #0]
 800fd64:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800fd66:	f107 0308 	add.w	r3, r7, #8
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800fd70:	78fb      	ldrb	r3, [r7, #3]
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	70fa      	strb	r2, [r7, #3]
 800fd76:	461a      	mov	r2, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800fd80:	78fb      	ldrb	r3, [r7, #3]
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	70fa      	strb	r2, [r7, #3]
 800fd86:	461a      	mov	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	021a      	lsls	r2, r3, #8
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	4313      	orrs	r3, r2
 800fd94:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800fd96:	78fb      	ldrb	r3, [r7, #3]
 800fd98:	1c5a      	adds	r2, r3, #1
 800fd9a:	70fa      	strb	r2, [r7, #3]
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4413      	add	r3, r2
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	041a      	lsls	r2, r3, #16
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fdac:	78fb      	ldrb	r3, [r7, #3]
 800fdae:	1c5a      	adds	r2, r3, #1
 800fdb0:	70fa      	strb	r2, [r7, #3]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	061a      	lsls	r2, r3, #24
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800fdc2:	78fb      	ldrb	r3, [r7, #3]
 800fdc4:	1c5a      	adds	r2, r3, #1
 800fdc6:	70fa      	strb	r2, [r7, #3]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4413      	add	r3, r2
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	b21b      	sxth	r3, r3
 800fdd2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800fdd4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdde:	fb02 f303 	mul.w	r3, r2, r3
 800fde2:	121b      	asrs	r3, r3, #8
 800fde4:	b21b      	sxth	r3, r3
 800fde6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800fde8:	f107 0310 	add.w	r3, r7, #16
 800fdec:	f107 0218 	add.w	r2, r7, #24
 800fdf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdf4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800fdf8:	693a      	ldr	r2, [r7, #16]
 800fdfa:	4b8f      	ldr	r3, [pc, #572]	; (8010038 <ProcessMacCommands+0x9a8>)
 800fdfc:	4413      	add	r3, r2
 800fdfe:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800fe00:	f107 0308 	add.w	r3, r7, #8
 800fe04:	4618      	mov	r0, r3
 800fe06:	f00b ffad 	bl	801bd64 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800fe0a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800fe0e:	4b8b      	ldr	r3, [pc, #556]	; (801003c <ProcessMacCommands+0x9ac>)
 800fe10:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800fe14:	9200      	str	r2, [sp, #0]
 800fe16:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800fe1a:	f107 0210 	add.w	r2, r7, #16
 800fe1e:	ca06      	ldmia	r2, {r1, r2}
 800fe20:	f00b ff39 	bl	801bc96 <SysTimeSub>
 800fe24:	f107 0010 	add.w	r0, r7, #16
 800fe28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe2e:	f107 0208 	add.w	r2, r7, #8
 800fe32:	ca06      	ldmia	r2, {r1, r2}
 800fe34:	f00b fef6 	bl	801bc24 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800fe38:	f107 0310 	add.w	r3, r7, #16
 800fe3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe40:	f00b ff62 	bl	801bd08 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fe44:	f002 fedc 	bl	8012c00 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fe48:	4b7c      	ldr	r3, [pc, #496]	; (801003c <ProcessMacCommands+0x9ac>)
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800fe50:	e0e4      	b.n	801001c <ProcessMacCommands+0x98c>
                }
                else
                {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fe52:	4b7a      	ldr	r3, [pc, #488]	; (801003c <ProcessMacCommands+0x9ac>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */
                }
                break;
 800fe5a:	e0df      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800fe5c:	200c      	movs	r0, #12
 800fe5e:	f003 fb4b 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f000 80d9 	beq.w	801001c <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800fe6a:	210c      	movs	r1, #12
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	f003 fab7 	bl	80133e0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800fe72:	4b72      	ldr	r3, [pc, #456]	; (801003c <ProcessMacCommands+0x9ac>)
 800fe74:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800fe78:	2b04      	cmp	r3, #4
 800fe7a:	f000 80cf 	beq.w	801001c <ProcessMacCommands+0x98c>
 800fe7e:	4b6f      	ldr	r3, [pc, #444]	; (801003c <ProcessMacCommands+0x9ac>)
 800fe80:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800fe84:	2b05      	cmp	r3, #5
 800fe86:	f000 80c9 	beq.w	801001c <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800fe8a:	f002 fe9a 	bl	8012bc2 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800fe8e:	e0c5      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800fe90:	2303      	movs	r3, #3
 800fe92:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800fe9a:	78fb      	ldrb	r3, [r7, #3]
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	70fa      	strb	r2, [r7, #3]
 800fea0:	461a      	mov	r2, r3
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	4413      	add	r3, r2
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800feaa:	78fb      	ldrb	r3, [r7, #3]
 800feac:	1c5a      	adds	r2, r3, #1
 800feae:	70fa      	strb	r2, [r7, #3]
 800feb0:	461a      	mov	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4413      	add	r3, r2
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	021b      	lsls	r3, r3, #8
 800feba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800febc:	4313      	orrs	r3, r2
 800febe:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fec0:	78fb      	ldrb	r3, [r7, #3]
 800fec2:	1c5a      	adds	r2, r3, #1
 800fec4:	70fa      	strb	r2, [r7, #3]
 800fec6:	461a      	mov	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4413      	add	r3, r2
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	041b      	lsls	r3, r3, #16
 800fed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fed2:	4313      	orrs	r3, r2
 800fed4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800fed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fed8:	2264      	movs	r2, #100	; 0x64
 800feda:	fb02 f303 	mul.w	r3, r2, r3
 800fede:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fee0:	78fb      	ldrb	r3, [r7, #3]
 800fee2:	1c5a      	adds	r2, r3, #1
 800fee4:	70fa      	strb	r2, [r7, #3]
 800fee6:	461a      	mov	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4413      	add	r3, r2
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	f003 030f 	and.w	r3, r3, #15
 800fef2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fef6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fefa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fefc:	4618      	mov	r0, r3
 800fefe:	f002 fe66 	bl	8012bce <LoRaMacClassBPingSlotChannelReq>
 800ff02:	4603      	mov	r3, r0
 800ff04:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800ff08:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800ff0c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800ff10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ff14:	2201      	movs	r2, #1
 800ff16:	4619      	mov	r1, r3
 800ff18:	2011      	movs	r0, #17
 800ff1a:	f002 ffc5 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800ff1e:	e07d      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ff20:	200d      	movs	r0, #13
 800ff22:	f003 fae9 	bl	80134f8 <LoRaMacConfirmQueueIsCmdActive>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d077      	beq.n	801001c <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ff2c:	210d      	movs	r1, #13
 800ff2e:	2000      	movs	r0, #0
 800ff30:	f003 fa56 	bl	80133e0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ff40:	78fb      	ldrb	r3, [r7, #3]
 800ff42:	1c5a      	adds	r2, r3, #1
 800ff44:	70fa      	strb	r2, [r7, #3]
 800ff46:	461a      	mov	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4413      	add	r3, r2
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800ff52:	78fb      	ldrb	r3, [r7, #3]
 800ff54:	1c5a      	adds	r2, r3, #1
 800ff56:	70fa      	strb	r2, [r7, #3]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	021b      	lsls	r3, r3, #8
 800ff62:	b21a      	sxth	r2, r3
 800ff64:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ff68:	4313      	orrs	r3, r2
 800ff6a:	b21b      	sxth	r3, r3
 800ff6c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ff70:	78fb      	ldrb	r3, [r7, #3]
 800ff72:	1c5a      	adds	r2, r3, #1
 800ff74:	70fa      	strb	r2, [r7, #3]
 800ff76:	461a      	mov	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ff82:	4b2f      	ldr	r3, [pc, #188]	; (8010040 <ProcessMacCommands+0x9b0>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800ff8a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f002 fe29 	bl	8012be6 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ff94:	e042      	b.n	801001c <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800ff9c:	78fb      	ldrb	r3, [r7, #3]
 800ff9e:	1c5a      	adds	r2, r3, #1
 800ffa0:	70fa      	strb	r2, [r7, #3]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ffae:	78fb      	ldrb	r3, [r7, #3]
 800ffb0:	1c5a      	adds	r2, r3, #1
 800ffb2:	70fa      	strb	r2, [r7, #3]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	4413      	add	r3, r2
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	021b      	lsls	r3, r3, #8
 800ffbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ffc8:	78fb      	ldrb	r3, [r7, #3]
 800ffca:	1c5a      	adds	r2, r3, #1
 800ffcc:	70fa      	strb	r2, [r7, #3]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	041b      	lsls	r3, r3, #16
 800ffd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800ffe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ffe6:	2264      	movs	r2, #100	; 0x64
 800ffe8:	fb02 f303 	mul.w	r3, r2, r3
 800ffec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fff0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800fff4:	f002 fe0a 	bl	8012c0c <LoRaMacClassBBeaconFreqReq>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d003      	beq.n	8010006 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 800fffe:	2301      	movs	r3, #1
 8010000:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8010004:	e002      	b.n	801000c <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010006:	2300      	movs	r3, #0
 8010008:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801000c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010010:	2201      	movs	r2, #1
 8010012:	4619      	mov	r1, r3
 8010014:	2013      	movs	r0, #19
 8010016:	f002 ff47 	bl	8012ea8 <LoRaMacCommandsAddCmd>
                }
                break;
 801001a:	bf00      	nop
    while( macIndex < commandsSize )
 801001c:	78fa      	ldrb	r2, [r7, #3]
 801001e:	78bb      	ldrb	r3, [r7, #2]
 8010020:	429a      	cmp	r2, r3
 8010022:	f4ff ab57 	bcc.w	800f6d4 <ProcessMacCommands+0x44>
 8010026:	e004      	b.n	8010032 <ProcessMacCommands+0x9a2>
        return;
 8010028:	bf00      	nop
 801002a:	e002      	b.n	8010032 <ProcessMacCommands+0x9a2>
            return;
 801002c:	bf00      	nop
 801002e:	e000      	b.n	8010032 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010030:	bf00      	nop
        }
    }
}
 8010032:	378c      	adds	r7, #140	; 0x8c
 8010034:	46bd      	mov	sp, r7
 8010036:	bd90      	pop	{r4, r7, pc}
 8010038:	12d53d80 	.word	0x12d53d80
 801003c:	20000718 	.word	0x20000718
 8010040:	200017e8 	.word	0x200017e8

08010044 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b08e      	sub	sp, #56	; 0x38
 8010048:	af02      	add	r7, sp, #8
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	607a      	str	r2, [r7, #4]
 801004e:	461a      	mov	r2, r3
 8010050:	460b      	mov	r3, r1
 8010052:	72fb      	strb	r3, [r7, #11]
 8010054:	4613      	mov	r3, r2
 8010056:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010058:	2303      	movs	r3, #3
 801005a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801005e:	4b66      	ldr	r3, [pc, #408]	; (80101f8 <Send+0x1b4>)
 8010060:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010064:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010068:	4b63      	ldr	r3, [pc, #396]	; (80101f8 <Send+0x1b4>)
 801006a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801006e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010072:	4b61      	ldr	r3, [pc, #388]	; (80101f8 <Send+0x1b4>)
 8010074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010076:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010078:	4b5f      	ldr	r3, [pc, #380]	; (80101f8 <Send+0x1b4>)
 801007a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010082:	2307      	movs	r3, #7
 8010084:	e0b4      	b.n	80101f0 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010086:	4b5c      	ldr	r3, [pc, #368]	; (80101f8 <Send+0x1b4>)
 8010088:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 801008c:	2b00      	cmp	r3, #0
 801008e:	d102      	bne.n	8010096 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010090:	4b59      	ldr	r3, [pc, #356]	; (80101f8 <Send+0x1b4>)
 8010092:	2200      	movs	r2, #0
 8010094:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801009c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100a0:	f36f 0303 	bfc	r3, #0, #4
 80100a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80100a8:	4b53      	ldr	r3, [pc, #332]	; (80101f8 <Send+0x1b4>)
 80100aa:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80100ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100b2:	f362 13c7 	bfi	r3, r2, #7, #1
 80100b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80100ba:	4b4f      	ldr	r3, [pc, #316]	; (80101f8 <Send+0x1b4>)
 80100bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d106      	bne.n	80100d2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80100c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100c8:	f043 0310 	orr.w	r3, r3, #16
 80100cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80100d0:	e005      	b.n	80100de <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80100d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100d6:	f36f 1304 	bfc	r3, #4, #1
 80100da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80100de:	4b46      	ldr	r3, [pc, #280]	; (80101f8 <Send+0x1b4>)
 80100e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d005      	beq.n	80100f4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80100e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100ec:	f043 0320 	orr.w	r3, r3, #32
 80100f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 80100f4:	2301      	movs	r3, #1
 80100f6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80100f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80100fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	bf14      	ite	ne
 8010106:	2301      	movne	r3, #1
 8010108:	2300      	moveq	r3, #0
 801010a:	b2db      	uxtb	r3, r3
 801010c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801010e:	4b3a      	ldr	r3, [pc, #232]	; (80101f8 <Send+0x1b4>)
 8010110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010112:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010114:	4b39      	ldr	r3, [pc, #228]	; (80101fc <Send+0x1b8>)
 8010116:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 801011a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801011c:	4b37      	ldr	r3, [pc, #220]	; (80101fc <Send+0x1b8>)
 801011e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8010122:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010124:	4b34      	ldr	r3, [pc, #208]	; (80101f8 <Send+0x1b4>)
 8010126:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801012a:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801012e:	4b32      	ldr	r3, [pc, #200]	; (80101f8 <Send+0x1b4>)
 8010130:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010134:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010138:	4b2f      	ldr	r3, [pc, #188]	; (80101f8 <Send+0x1b4>)
 801013a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801013e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010142:	4b2d      	ldr	r3, [pc, #180]	; (80101f8 <Send+0x1b4>)
 8010144:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801014c:	4b2a      	ldr	r3, [pc, #168]	; (80101f8 <Send+0x1b4>)
 801014e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010152:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010156:	f107 0014 	add.w	r0, r7, #20
 801015a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	4b27      	ldr	r3, [pc, #156]	; (8010200 <Send+0x1bc>)
 8010162:	4a28      	ldr	r2, [pc, #160]	; (8010204 <Send+0x1c0>)
 8010164:	4928      	ldr	r1, [pc, #160]	; (8010208 <Send+0x1c4>)
 8010166:	f002 fbcb 	bl	8012900 <LoRaMacAdrCalcNext>
 801016a:	4603      	mov	r3, r0
 801016c:	461a      	mov	r2, r3
 801016e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010172:	f362 1386 	bfi	r3, r2, #6, #1
 8010176:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801017a:	7afa      	ldrb	r2, [r7, #11]
 801017c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010180:	893b      	ldrh	r3, [r7, #8]
 8010182:	9300      	str	r3, [sp, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f000 fc42 	bl	8010a10 <PrepareFrame>
 801018c:	4603      	mov	r3, r0
 801018e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010196:	2b00      	cmp	r3, #0
 8010198:	d003      	beq.n	80101a2 <Send+0x15e>
 801019a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801019e:	2b0a      	cmp	r3, #10
 80101a0:	d107      	bne.n	80101b2 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80101a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80101a6:	4618      	mov	r0, r3
 80101a8:	f000 f96e 	bl	8010488 <ScheduleTx>
 80101ac:	4603      	mov	r3, r0
 80101ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80101b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00a      	beq.n	80101d0 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80101ba:	4a0f      	ldr	r2, [pc, #60]	; (80101f8 <Send+0x1b4>)
 80101bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80101c0:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80101c4:	4a0c      	ldr	r2, [pc, #48]	; (80101f8 <Send+0x1b4>)
 80101c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80101ca:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80101ce:	e00d      	b.n	80101ec <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80101d0:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <Send+0x1b4>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80101d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101da:	4a07      	ldr	r2, [pc, #28]	; (80101f8 <Send+0x1b4>)
 80101dc:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80101de:	f002 fedb 	bl	8012f98 <LoRaMacCommandsRemoveNoneStickyCmds>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101e8:	2313      	movs	r3, #19
 80101ea:	e001      	b.n	80101f0 <Send+0x1ac>
        }
    }
    return status;
 80101ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3730      	adds	r7, #48	; 0x30
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	20000c38 	.word	0x20000c38
 80101fc:	20000718 	.word	0x20000718
 8010200:	20000c98 	.word	0x20000c98
 8010204:	20000c70 	.word	0x20000c70
 8010208:	20000c71 	.word	0x20000c71

0801020c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	4603      	mov	r3, r0
 8010214:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010216:	2300      	movs	r3, #0
 8010218:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801021a:	2300      	movs	r3, #0
 801021c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801021e:	2301      	movs	r3, #1
 8010220:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010222:	79fb      	ldrb	r3, [r7, #7]
 8010224:	2bff      	cmp	r3, #255	; 0xff
 8010226:	d129      	bne.n	801027c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010228:	2000      	movs	r0, #0
 801022a:	f7ff f90f 	bl	800f44c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801022e:	4b1a      	ldr	r3, [pc, #104]	; (8010298 <SendReJoinReq+0x8c>)
 8010230:	2200      	movs	r2, #0
 8010232:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010236:	4b18      	ldr	r3, [pc, #96]	; (8010298 <SendReJoinReq+0x8c>)
 8010238:	4a18      	ldr	r2, [pc, #96]	; (801029c <SendReJoinReq+0x90>)
 801023a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801023e:	4b16      	ldr	r3, [pc, #88]	; (8010298 <SendReJoinReq+0x8c>)
 8010240:	22ff      	movs	r2, #255	; 0xff
 8010242:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010246:	7b3b      	ldrb	r3, [r7, #12]
 8010248:	f36f 1347 	bfc	r3, #5, #3
 801024c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801024e:	7b3a      	ldrb	r2, [r7, #12]
 8010250:	4b11      	ldr	r3, [pc, #68]	; (8010298 <SendReJoinReq+0x8c>)
 8010252:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010256:	f7fc f875 	bl	800c344 <SecureElementGetJoinEui>
 801025a:	4603      	mov	r3, r0
 801025c:	2208      	movs	r2, #8
 801025e:	4619      	mov	r1, r3
 8010260:	480f      	ldr	r0, [pc, #60]	; (80102a0 <SendReJoinReq+0x94>)
 8010262:	f008 f9a0 	bl	80185a6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010266:	f7fc f84b 	bl	800c300 <SecureElementGetDevEui>
 801026a:	4603      	mov	r3, r0
 801026c:	2208      	movs	r2, #8
 801026e:	4619      	mov	r1, r3
 8010270:	480c      	ldr	r0, [pc, #48]	; (80102a4 <SendReJoinReq+0x98>)
 8010272:	f008 f998 	bl	80185a6 <memcpy1>

            allowDelayedTx = false;
 8010276:	2300      	movs	r3, #0
 8010278:	73fb      	strb	r3, [r7, #15]

            break;
 801027a:	e002      	b.n	8010282 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801027c:	2302      	movs	r3, #2
 801027e:	73bb      	strb	r3, [r7, #14]
            break;
 8010280:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010282:	7bfb      	ldrb	r3, [r7, #15]
 8010284:	4618      	mov	r0, r3
 8010286:	f000 f8ff 	bl	8010488 <ScheduleTx>
 801028a:	4603      	mov	r3, r0
 801028c:	73bb      	strb	r3, [r7, #14]
    return status;
 801028e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010290:	4618      	mov	r0, r3
 8010292:	3710      	adds	r7, #16
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	20000718 	.word	0x20000718
 801029c:	2000071a 	.word	0x2000071a
 80102a0:	20000826 	.word	0x20000826
 80102a4:	2000082e 	.word	0x2000082e

080102a8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80102ac:	f002 fc38 	bl	8012b20 <LoRaMacClassBIsBeaconExpected>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d001      	beq.n	80102ba <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80102b6:	230e      	movs	r3, #14
 80102b8:	e013      	b.n	80102e2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80102ba:	4b0b      	ldr	r3, [pc, #44]	; (80102e8 <CheckForClassBCollision+0x40>)
 80102bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d10d      	bne.n	80102e0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80102c4:	f002 fc33 	bl	8012b2e <LoRaMacClassBIsPingExpected>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80102ce:	230f      	movs	r3, #15
 80102d0:	e007      	b.n	80102e2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80102d2:	f002 fc33 	bl	8012b3c <LoRaMacClassBIsMulticastExpected>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d001      	beq.n	80102e0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80102dc:	230f      	movs	r3, #15
 80102de:	e000      	b.n	80102e2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	20000c38 	.word	0x20000c38

080102ec <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80102ec:	b590      	push	{r4, r7, lr}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80102f2:	4b2d      	ldr	r3, [pc, #180]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 80102f4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80102f8:	4b2b      	ldr	r3, [pc, #172]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 80102fa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80102fe:	4b2a      	ldr	r3, [pc, #168]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010300:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8010304:	4b28      	ldr	r3, [pc, #160]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010306:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801030a:	4b27      	ldr	r3, [pc, #156]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 801030c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010310:	b25b      	sxtb	r3, r3
 8010312:	f004 fd2d 	bl	8014d70 <RegionApplyDrOffset>
 8010316:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010318:	b259      	sxtb	r1, r3
 801031a:	4b23      	ldr	r3, [pc, #140]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 801031c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010320:	4b21      	ldr	r3, [pc, #132]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010324:	4821      	ldr	r0, [pc, #132]	; (80103ac <ComputeRxWindowParameters+0xc0>)
 8010326:	9000      	str	r0, [sp, #0]
 8010328:	4620      	mov	r0, r4
 801032a:	f004 fbe2 	bl	8014af2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801032e:	4b1e      	ldr	r3, [pc, #120]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010330:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010334:	4b1c      	ldr	r3, [pc, #112]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010336:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801033a:	b259      	sxtb	r1, r3
 801033c:	4b1a      	ldr	r3, [pc, #104]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 801033e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010342:	4b19      	ldr	r3, [pc, #100]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010346:	4c1a      	ldr	r4, [pc, #104]	; (80103b0 <ComputeRxWindowParameters+0xc4>)
 8010348:	9400      	str	r4, [sp, #0]
 801034a:	f004 fbd2 	bl	8014af2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801034e:	4b16      	ldr	r3, [pc, #88]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010352:	4a18      	ldr	r2, [pc, #96]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 8010354:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010358:	4413      	add	r3, r2
 801035a:	4a16      	ldr	r2, [pc, #88]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 801035c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010360:	4b11      	ldr	r3, [pc, #68]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010364:	4a13      	ldr	r2, [pc, #76]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 8010366:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 801036a:	4413      	add	r3, r2
 801036c:	4a11      	ldr	r2, [pc, #68]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 801036e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010372:	4b0d      	ldr	r3, [pc, #52]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010374:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010378:	2b00      	cmp	r3, #0
 801037a:	d111      	bne.n	80103a0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801037c:	4b0a      	ldr	r3, [pc, #40]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 801037e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010380:	4a0c      	ldr	r2, [pc, #48]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 8010382:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010386:	4413      	add	r3, r2
 8010388:	4a0a      	ldr	r2, [pc, #40]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 801038a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801038e:	4b06      	ldr	r3, [pc, #24]	; (80103a8 <ComputeRxWindowParameters+0xbc>)
 8010390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010392:	4a08      	ldr	r2, [pc, #32]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 8010394:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010398:	4413      	add	r3, r2
 801039a:	4a06      	ldr	r2, [pc, #24]	; (80103b4 <ComputeRxWindowParameters+0xc8>)
 801039c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80103a0:	bf00      	nop
 80103a2:	3704      	adds	r7, #4
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd90      	pop	{r4, r7, pc}
 80103a8:	20000c38 	.word	0x20000c38
 80103ac:	20000ad0 	.word	0x20000ad0
 80103b0:	20000ae8 	.word	0x20000ae8
 80103b4:	20000718 	.word	0x20000718

080103b8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80103be:	2300      	movs	r3, #0
 80103c0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80103c2:	4b13      	ldr	r3, [pc, #76]	; (8010410 <VerifyTxFrame+0x58>)
 80103c4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d01b      	beq.n	8010404 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80103cc:	1d3b      	adds	r3, r7, #4
 80103ce:	4618      	mov	r0, r3
 80103d0:	f002 fe28 	bl	8013024 <LoRaMacCommandsGetSizeSerializedCmds>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d001      	beq.n	80103de <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80103da:	2313      	movs	r3, #19
 80103dc:	e013      	b.n	8010406 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80103de:	4b0d      	ldr	r3, [pc, #52]	; (8010414 <VerifyTxFrame+0x5c>)
 80103e0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80103e4:	4a0a      	ldr	r2, [pc, #40]	; (8010410 <VerifyTxFrame+0x58>)
 80103e6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80103ea:	687a      	ldr	r2, [r7, #4]
 80103ec:	b2d2      	uxtb	r2, r2
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff f926 	bl	800f640 <ValidatePayloadLength>
 80103f4:	4603      	mov	r3, r0
 80103f6:	f083 0301 	eor.w	r3, r3, #1
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010400:	2308      	movs	r3, #8
 8010402:	e000      	b.n	8010406 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	20000c38 	.word	0x20000c38
 8010414:	20000718 	.word	0x20000718

08010418 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801041e:	4b18      	ldr	r3, [pc, #96]	; (8010480 <SerializeTxFrame+0x68>)
 8010420:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010424:	2b00      	cmp	r3, #0
 8010426:	d002      	beq.n	801042e <SerializeTxFrame+0x16>
 8010428:	2b04      	cmp	r3, #4
 801042a:	d011      	beq.n	8010450 <SerializeTxFrame+0x38>
 801042c:	e021      	b.n	8010472 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801042e:	4815      	ldr	r0, [pc, #84]	; (8010484 <SerializeTxFrame+0x6c>)
 8010430:	f004 f92d 	bl	801468e <LoRaMacSerializerJoinRequest>
 8010434:	4603      	mov	r3, r0
 8010436:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d001      	beq.n	8010442 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801043e:	2311      	movs	r3, #17
 8010440:	e01a      	b.n	8010478 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010442:	4b0f      	ldr	r3, [pc, #60]	; (8010480 <SerializeTxFrame+0x68>)
 8010444:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010448:	b29a      	uxth	r2, r3
 801044a:	4b0d      	ldr	r3, [pc, #52]	; (8010480 <SerializeTxFrame+0x68>)
 801044c:	801a      	strh	r2, [r3, #0]
            break;
 801044e:	e012      	b.n	8010476 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010450:	480c      	ldr	r0, [pc, #48]	; (8010484 <SerializeTxFrame+0x6c>)
 8010452:	f004 f99e 	bl	8014792 <LoRaMacSerializerData>
 8010456:	4603      	mov	r3, r0
 8010458:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801045a:	79fb      	ldrb	r3, [r7, #7]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d001      	beq.n	8010464 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010460:	2311      	movs	r3, #17
 8010462:	e009      	b.n	8010478 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010464:	4b06      	ldr	r3, [pc, #24]	; (8010480 <SerializeTxFrame+0x68>)
 8010466:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801046a:	b29a      	uxth	r2, r3
 801046c:	4b04      	ldr	r3, [pc, #16]	; (8010480 <SerializeTxFrame+0x68>)
 801046e:	801a      	strh	r2, [r3, #0]
            break;
 8010470:	e001      	b.n	8010476 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010472:	2303      	movs	r3, #3
 8010474:	e000      	b.n	8010478 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	20000718 	.word	0x20000718
 8010484:	20000820 	.word	0x20000820

08010488 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b090      	sub	sp, #64	; 0x40
 801048c:	af02      	add	r7, sp, #8
 801048e:	4603      	mov	r3, r0
 8010490:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010492:	2303      	movs	r3, #3
 8010494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010498:	f7ff ff06 	bl	80102a8 <CheckForClassBCollision>
 801049c:	4603      	mov	r3, r0
 801049e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80104a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d002      	beq.n	80104b0 <ScheduleTx+0x28>
    {
        return status;
 80104aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104ae:	e08f      	b.n	80105d0 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 80104b0:	f000 f8f4 	bl	801069c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80104b4:	f7ff ffb0 	bl	8010418 <SerializeTxFrame>
 80104b8:	4603      	mov	r3, r0
 80104ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80104be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d002      	beq.n	80104cc <ScheduleTx+0x44>
    {
        return status;
 80104c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104ca:	e081      	b.n	80105d0 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80104cc:	4b42      	ldr	r3, [pc, #264]	; (80105d8 <ScheduleTx+0x150>)
 80104ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80104d2:	4b41      	ldr	r3, [pc, #260]	; (80105d8 <ScheduleTx+0x150>)
 80104d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80104d8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80104da:	4b3f      	ldr	r3, [pc, #252]	; (80105d8 <ScheduleTx+0x150>)
 80104dc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80104e0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80104e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80104e6:	4618      	mov	r0, r3
 80104e8:	f00b fc74 	bl	801bdd4 <SysTimeGetMcuTime>
 80104ec:	4638      	mov	r0, r7
 80104ee:	4b3a      	ldr	r3, [pc, #232]	; (80105d8 <ScheduleTx+0x150>)
 80104f0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80104f4:	9200      	str	r2, [sp, #0]
 80104f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80104fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80104fe:	ca06      	ldmia	r2, {r1, r2}
 8010500:	f00b fbc9 	bl	801bc96 <SysTimeSub>
 8010504:	f107 0320 	add.w	r3, r7, #32
 8010508:	463a      	mov	r2, r7
 801050a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801050e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010512:	4b31      	ldr	r3, [pc, #196]	; (80105d8 <ScheduleTx+0x150>)
 8010514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010516:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010518:	2300      	movs	r3, #0
 801051a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801051e:	2301      	movs	r3, #1
 8010520:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010522:	4b2e      	ldr	r3, [pc, #184]	; (80105dc <ScheduleTx+0x154>)
 8010524:	881b      	ldrh	r3, [r3, #0]
 8010526:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010528:	4b2b      	ldr	r3, [pc, #172]	; (80105d8 <ScheduleTx+0x150>)
 801052a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 801052e:	2b00      	cmp	r3, #0
 8010530:	d104      	bne.n	801053c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010532:	2301      	movs	r3, #1
 8010534:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010538:	2300      	movs	r3, #0
 801053a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801053c:	4b26      	ldr	r3, [pc, #152]	; (80105d8 <ScheduleTx+0x150>)
 801053e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010542:	f107 0114 	add.w	r1, r7, #20
 8010546:	4b26      	ldr	r3, [pc, #152]	; (80105e0 <ScheduleTx+0x158>)
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	4b26      	ldr	r3, [pc, #152]	; (80105e4 <ScheduleTx+0x15c>)
 801054c:	4a26      	ldr	r2, [pc, #152]	; (80105e8 <ScheduleTx+0x160>)
 801054e:	f004 fbec 	bl	8014d2a <RegionNextChannel>
 8010552:	4603      	mov	r3, r0
 8010554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801055c:	2b00      	cmp	r3, #0
 801055e:	d022      	beq.n	80105a6 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010564:	2b0b      	cmp	r3, #11
 8010566:	d11b      	bne.n	80105a0 <ScheduleTx+0x118>
 8010568:	7bfb      	ldrb	r3, [r7, #15]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d018      	beq.n	80105a0 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801056e:	4b1b      	ldr	r3, [pc, #108]	; (80105dc <ScheduleTx+0x154>)
 8010570:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8010574:	2b00      	cmp	r3, #0
 8010576:	d011      	beq.n	801059c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010578:	4b18      	ldr	r3, [pc, #96]	; (80105dc <ScheduleTx+0x154>)
 801057a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801057e:	f043 0320 	orr.w	r3, r3, #32
 8010582:	4a16      	ldr	r2, [pc, #88]	; (80105dc <ScheduleTx+0x154>)
 8010584:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010588:	4b14      	ldr	r3, [pc, #80]	; (80105dc <ScheduleTx+0x154>)
 801058a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801058e:	4619      	mov	r1, r3
 8010590:	4816      	ldr	r0, [pc, #88]	; (80105ec <ScheduleTx+0x164>)
 8010592:	f00c f9c3 	bl	801c91c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010596:	4815      	ldr	r0, [pc, #84]	; (80105ec <ScheduleTx+0x164>)
 8010598:	f00c f8e2 	bl	801c760 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801059c:	2300      	movs	r3, #0
 801059e:	e017      	b.n	80105d0 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80105a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105a4:	e014      	b.n	80105d0 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80105a6:	f7ff fea1 	bl	80102ec <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80105aa:	f7ff ff05 	bl	80103b8 <VerifyTxFrame>
 80105ae:	4603      	mov	r3, r0
 80105b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80105b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d002      	beq.n	80105c2 <ScheduleTx+0x13a>
    {
        return status;
 80105bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105c0:	e006      	b.n	80105d0 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80105c2:	4b06      	ldr	r3, [pc, #24]	; (80105dc <ScheduleTx+0x154>)
 80105c4:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 fb3d 	bl	8010c48 <SendFrameOnChannel>
 80105ce:	4603      	mov	r3, r0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3738      	adds	r7, #56	; 0x38
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	20000c38 	.word	0x20000c38
 80105dc:	20000718 	.word	0x20000718
 80105e0:	20000c68 	.word	0x20000c68
 80105e4:	20000bb0 	.word	0x20000bb0
 80105e8:	20000b37 	.word	0x20000b37
 80105ec:	20000a80 	.word	0x20000a80

080105f0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4603      	mov	r3, r0
 80105f8:	460a      	mov	r2, r1
 80105fa:	71fb      	strb	r3, [r7, #7]
 80105fc:	4613      	mov	r3, r2
 80105fe:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010600:	2312      	movs	r3, #18
 8010602:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010608:	4b22      	ldr	r3, [pc, #136]	; (8010694 <SecureFrame+0xa4>)
 801060a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801060e:	2b00      	cmp	r3, #0
 8010610:	d002      	beq.n	8010618 <SecureFrame+0x28>
 8010612:	2b04      	cmp	r3, #4
 8010614:	d011      	beq.n	801063a <SecureFrame+0x4a>
 8010616:	e036      	b.n	8010686 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010618:	481f      	ldr	r0, [pc, #124]	; (8010698 <SecureFrame+0xa8>)
 801061a:	f003 fc07 	bl	8013e2c <LoRaMacCryptoPrepareJoinRequest>
 801061e:	4603      	mov	r3, r0
 8010620:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010622:	7bfb      	ldrb	r3, [r7, #15]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d001      	beq.n	801062c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010628:	2311      	movs	r3, #17
 801062a:	e02f      	b.n	801068c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801062c:	4b19      	ldr	r3, [pc, #100]	; (8010694 <SecureFrame+0xa4>)
 801062e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010632:	b29a      	uxth	r2, r3
 8010634:	4b17      	ldr	r3, [pc, #92]	; (8010694 <SecureFrame+0xa4>)
 8010636:	801a      	strh	r2, [r3, #0]
            break;
 8010638:	e027      	b.n	801068a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801063a:	f107 0308 	add.w	r3, r7, #8
 801063e:	4618      	mov	r0, r3
 8010640:	f003 fb38 	bl	8013cb4 <LoRaMacCryptoGetFCntUp>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801064a:	2312      	movs	r3, #18
 801064c:	e01e      	b.n	801068c <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 801064e:	4b11      	ldr	r3, [pc, #68]	; (8010694 <SecureFrame+0xa4>)
 8010650:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	3b01      	subs	r3, #1
 801065c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801065e:	68b8      	ldr	r0, [r7, #8]
 8010660:	79ba      	ldrb	r2, [r7, #6]
 8010662:	79f9      	ldrb	r1, [r7, #7]
 8010664:	4b0c      	ldr	r3, [pc, #48]	; (8010698 <SecureFrame+0xa8>)
 8010666:	f003 fcf3 	bl	8014050 <LoRaMacCryptoSecureMessage>
 801066a:	4603      	mov	r3, r0
 801066c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801066e:	7bfb      	ldrb	r3, [r7, #15]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d001      	beq.n	8010678 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010674:	2311      	movs	r3, #17
 8010676:	e009      	b.n	801068c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010678:	4b06      	ldr	r3, [pc, #24]	; (8010694 <SecureFrame+0xa4>)
 801067a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801067e:	b29a      	uxth	r2, r3
 8010680:	4b04      	ldr	r3, [pc, #16]	; (8010694 <SecureFrame+0xa4>)
 8010682:	801a      	strh	r2, [r3, #0]
            break;
 8010684:	e001      	b.n	801068a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010686:	2303      	movs	r3, #3
 8010688:	e000      	b.n	801068c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801068a:	2300      	movs	r3, #0
}
 801068c:	4618      	mov	r0, r3
 801068e:	3710      	adds	r7, #16
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	20000718 	.word	0x20000718
 8010698:	20000820 	.word	0x20000820

0801069c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801069c:	b480      	push	{r7}
 801069e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80106a0:	4b09      	ldr	r3, [pc, #36]	; (80106c8 <CalculateBackOff+0x2c>)
 80106a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d10a      	bne.n	80106be <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80106a8:	4b07      	ldr	r3, [pc, #28]	; (80106c8 <CalculateBackOff+0x2c>)
 80106aa:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80106ae:	3b01      	subs	r3, #1
 80106b0:	4a06      	ldr	r2, [pc, #24]	; (80106cc <CalculateBackOff+0x30>)
 80106b2:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
 80106b6:	fb02 f303 	mul.w	r3, r2, r3
 80106ba:	4a03      	ldr	r2, [pc, #12]	; (80106c8 <CalculateBackOff+0x2c>)
 80106bc:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80106be:	bf00      	nop
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bc80      	pop	{r7}
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	20000c38 	.word	0x20000c38
 80106cc:	20000718 	.word	0x20000718

080106d0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4603      	mov	r3, r0
 80106d8:	7139      	strb	r1, [r7, #4]
 80106da:	71fb      	strb	r3, [r7, #7]
 80106dc:	4613      	mov	r3, r2
 80106de:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80106e0:	79fb      	ldrb	r3, [r7, #7]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d002      	beq.n	80106ec <RemoveMacCommands+0x1c>
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d10d      	bne.n	8010708 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80106ec:	79bb      	ldrb	r3, [r7, #6]
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d108      	bne.n	8010704 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80106f2:	793b      	ldrb	r3, [r7, #4]
 80106f4:	f003 0320 	and.w	r3, r3, #32
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d004      	beq.n	8010708 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80106fe:	f002 fc6f 	bl	8012fe0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010702:	e001      	b.n	8010708 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010704:	f002 fc6c 	bl	8012fe0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010708:	bf00      	nop
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010710:	b5b0      	push	{r4, r5, r7, lr}
 8010712:	b090      	sub	sp, #64	; 0x40
 8010714:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010716:	4b70      	ldr	r3, [pc, #448]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010718:	2200      	movs	r2, #0
 801071a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801071e:	4b6e      	ldr	r3, [pc, #440]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010720:	2200      	movs	r2, #0
 8010722:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010724:	4b6d      	ldr	r3, [pc, #436]	; (80108dc <ResetMacParameters+0x1cc>)
 8010726:	2200      	movs	r2, #0
 8010728:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 801072c:	4b6b      	ldr	r3, [pc, #428]	; (80108dc <ResetMacParameters+0x1cc>)
 801072e:	2200      	movs	r2, #0
 8010730:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8010734:	4b69      	ldr	r3, [pc, #420]	; (80108dc <ResetMacParameters+0x1cc>)
 8010736:	2200      	movs	r2, #0
 8010738:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801073c:	4b66      	ldr	r3, [pc, #408]	; (80108d8 <ResetMacParameters+0x1c8>)
 801073e:	2200      	movs	r2, #0
 8010740:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010744:	4b64      	ldr	r3, [pc, #400]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010746:	2201      	movs	r2, #1
 8010748:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801074c:	4b62      	ldr	r3, [pc, #392]	; (80108d8 <ResetMacParameters+0x1c8>)
 801074e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8010752:	4b61      	ldr	r3, [pc, #388]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010758:	4b5f      	ldr	r3, [pc, #380]	; (80108d8 <ResetMacParameters+0x1c8>)
 801075a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801075e:	4b5e      	ldr	r3, [pc, #376]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010764:	4b5c      	ldr	r3, [pc, #368]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010766:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 801076a:	4b5b      	ldr	r3, [pc, #364]	; (80108d8 <ResetMacParameters+0x1c8>)
 801076c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010770:	4b59      	ldr	r3, [pc, #356]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010772:	4a59      	ldr	r2, [pc, #356]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010774:	3364      	adds	r3, #100	; 0x64
 8010776:	32a8      	adds	r2, #168	; 0xa8
 8010778:	e892 0003 	ldmia.w	r2, {r0, r1}
 801077c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010780:	4b55      	ldr	r3, [pc, #340]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010782:	4a55      	ldr	r2, [pc, #340]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010784:	336c      	adds	r3, #108	; 0x6c
 8010786:	32b0      	adds	r2, #176	; 0xb0
 8010788:	e892 0003 	ldmia.w	r2, {r0, r1}
 801078c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010790:	4b51      	ldr	r3, [pc, #324]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010792:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010796:	4b50      	ldr	r3, [pc, #320]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010798:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801079c:	4b4e      	ldr	r3, [pc, #312]	; (80108d8 <ResetMacParameters+0x1c8>)
 801079e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 80107a2:	4b4d      	ldr	r3, [pc, #308]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80107a8:	4b4b      	ldr	r3, [pc, #300]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80107ae:	4a4a      	ldr	r2, [pc, #296]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107b0:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80107b2:	4b49      	ldr	r3, [pc, #292]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80107b8:	4a47      	ldr	r2, [pc, #284]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107ba:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80107bc:	4b47      	ldr	r3, [pc, #284]	; (80108dc <ResetMacParameters+0x1cc>)
 80107be:	2200      	movs	r2, #0
 80107c0:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 80107c4:	4b44      	ldr	r3, [pc, #272]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80107cc:	4b42      	ldr	r3, [pc, #264]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 80107d4:	4b40      	ldr	r3, [pc, #256]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80107dc:	2301      	movs	r3, #1
 80107de:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80107e0:	4b3f      	ldr	r3, [pc, #252]	; (80108e0 <ResetMacParameters+0x1d0>)
 80107e2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80107e4:	4b3f      	ldr	r3, [pc, #252]	; (80108e4 <ResetMacParameters+0x1d4>)
 80107e6:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 80107e8:	4b3f      	ldr	r3, [pc, #252]	; (80108e8 <ResetMacParameters+0x1d8>)
 80107ea:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80107ec:	4b3a      	ldr	r3, [pc, #232]	; (80108d8 <ResetMacParameters+0x1c8>)
 80107ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107f2:	1d3a      	adds	r2, r7, #4
 80107f4:	4611      	mov	r1, r2
 80107f6:	4618      	mov	r0, r3
 80107f8:	f004 f90f 	bl	8014a1a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80107fc:	4b37      	ldr	r3, [pc, #220]	; (80108dc <ResetMacParameters+0x1cc>)
 80107fe:	2200      	movs	r2, #0
 8010800:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010804:	4b35      	ldr	r3, [pc, #212]	; (80108dc <ResetMacParameters+0x1cc>)
 8010806:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 801080a:	4b34      	ldr	r3, [pc, #208]	; (80108dc <ResetMacParameters+0x1cc>)
 801080c:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010810:	4b31      	ldr	r3, [pc, #196]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010814:	4a31      	ldr	r2, [pc, #196]	; (80108dc <ResetMacParameters+0x1cc>)
 8010816:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801081a:	4b2f      	ldr	r3, [pc, #188]	; (80108d8 <ResetMacParameters+0x1c8>)
 801081c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010820:	4b2e      	ldr	r3, [pc, #184]	; (80108dc <ResetMacParameters+0x1cc>)
 8010822:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010826:	4b2c      	ldr	r3, [pc, #176]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010828:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801082c:	4b2b      	ldr	r3, [pc, #172]	; (80108dc <ResetMacParameters+0x1cc>)
 801082e:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010832:	4b2a      	ldr	r3, [pc, #168]	; (80108dc <ResetMacParameters+0x1cc>)
 8010834:	2200      	movs	r2, #0
 8010836:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801083a:	4b28      	ldr	r3, [pc, #160]	; (80108dc <ResetMacParameters+0x1cc>)
 801083c:	2201      	movs	r2, #1
 801083e:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010842:	4b25      	ldr	r3, [pc, #148]	; (80108d8 <ResetMacParameters+0x1c8>)
 8010844:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8010848:	4b24      	ldr	r3, [pc, #144]	; (80108dc <ResetMacParameters+0x1cc>)
 801084a:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801084e:	4a23      	ldr	r2, [pc, #140]	; (80108dc <ResetMacParameters+0x1cc>)
 8010850:	4b22      	ldr	r3, [pc, #136]	; (80108dc <ResetMacParameters+0x1cc>)
 8010852:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010856:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801085a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801085e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010862:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010866:	4b1d      	ldr	r3, [pc, #116]	; (80108dc <ResetMacParameters+0x1cc>)
 8010868:	2201      	movs	r2, #1
 801086a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801086e:	4b1b      	ldr	r3, [pc, #108]	; (80108dc <ResetMacParameters+0x1cc>)
 8010870:	2202      	movs	r2, #2
 8010872:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010876:	2300      	movs	r3, #0
 8010878:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 801087a:	2300      	movs	r3, #0
 801087c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 801087e:	4b17      	ldr	r3, [pc, #92]	; (80108dc <ResetMacParameters+0x1cc>)
 8010880:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010884:	2b00      	cmp	r3, #0
 8010886:	d009      	beq.n	801089c <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010888:	4b14      	ldr	r3, [pc, #80]	; (80108dc <ResetMacParameters+0x1cc>)
 801088a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010892:	4b12      	ldr	r3, [pc, #72]	; (80108dc <ResetMacParameters+0x1cc>)
 8010894:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010898:	691b      	ldr	r3, [r3, #16]
 801089a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801089c:	4b13      	ldr	r3, [pc, #76]	; (80108ec <ResetMacParameters+0x1dc>)
 801089e:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80108a0:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <ResetMacParameters+0x1e0>)
 80108a2:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80108a4:	4b13      	ldr	r3, [pc, #76]	; (80108f4 <ResetMacParameters+0x1e4>)
 80108a6:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80108a8:	4b13      	ldr	r3, [pc, #76]	; (80108f8 <ResetMacParameters+0x1e8>)
 80108aa:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80108ac:	4b13      	ldr	r3, [pc, #76]	; (80108fc <ResetMacParameters+0x1ec>)
 80108ae:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80108b0:	4b13      	ldr	r3, [pc, #76]	; (8010900 <ResetMacParameters+0x1f0>)
 80108b2:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80108b4:	4b13      	ldr	r3, [pc, #76]	; (8010904 <ResetMacParameters+0x1f4>)
 80108b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80108b8:	4b13      	ldr	r3, [pc, #76]	; (8010908 <ResetMacParameters+0x1f8>)
 80108ba:	633b      	str	r3, [r7, #48]	; 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80108bc:	4b13      	ldr	r3, [pc, #76]	; (801090c <ResetMacParameters+0x1fc>)
 80108be:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80108c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80108c4:	f107 0314 	add.w	r3, r7, #20
 80108c8:	4a11      	ldr	r2, [pc, #68]	; (8010910 <ResetMacParameters+0x200>)
 80108ca:	4618      	mov	r0, r3
 80108cc:	f002 f8d1 	bl	8012a72 <LoRaMacClassBInit>
}
 80108d0:	bf00      	nop
 80108d2:	3740      	adds	r7, #64	; 0x40
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bdb0      	pop	{r4, r5, r7, pc}
 80108d8:	20000c38 	.word	0x20000c38
 80108dc:	20000718 	.word	0x20000718
 80108e0:	20000e1c 	.word	0x20000e1c
 80108e4:	20000e30 	.word	0x20000e30
 80108e8:	20001750 	.word	0x20001750
 80108ec:	20000b84 	.word	0x20000b84
 80108f0:	20000b3c 	.word	0x20000b3c
 80108f4:	20000b70 	.word	0x20000b70
 80108f8:	20000bad 	.word	0x20000bad
 80108fc:	20000d0c 	.word	0x20000d0c
 8010900:	20000c78 	.word	0x20000c78
 8010904:	20000c7c 	.word	0x20000c7c
 8010908:	20000d10 	.word	0x20000d10
 801090c:	20000d54 	.word	0x20000d54
 8010910:	200011ac 	.word	0x200011ac

08010914 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f00b ff8c 	bl	801c83c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010924:	4b11      	ldr	r3, [pc, #68]	; (801096c <RxWindowSetup+0x58>)
 8010926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010928:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801092a:	4b11      	ldr	r3, [pc, #68]	; (8010970 <RxWindowSetup+0x5c>)
 801092c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010930:	4a10      	ldr	r2, [pc, #64]	; (8010974 <RxWindowSetup+0x60>)
 8010932:	6839      	ldr	r1, [r7, #0]
 8010934:	4618      	mov	r0, r3
 8010936:	f004 f900 	bl	8014b3a <RegionRxConfig>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d010      	beq.n	8010962 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010940:	4b0d      	ldr	r3, [pc, #52]	; (8010978 <RxWindowSetup+0x64>)
 8010942:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 8010946:	4b0c      	ldr	r3, [pc, #48]	; (8010978 <RxWindowSetup+0x64>)
 8010948:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801094c:	4b07      	ldr	r3, [pc, #28]	; (801096c <RxWindowSetup+0x58>)
 801094e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010950:	4a07      	ldr	r2, [pc, #28]	; (8010970 <RxWindowSetup+0x5c>)
 8010952:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010954:	4610      	mov	r0, r2
 8010956:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	7cda      	ldrb	r2, [r3, #19]
 801095c:	4b06      	ldr	r3, [pc, #24]	; (8010978 <RxWindowSetup+0x64>)
 801095e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8010962:	bf00      	nop
 8010964:	3708      	adds	r7, #8
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	0801e0d4 	.word	0x0801e0d4
 8010970:	20000c38 	.word	0x20000c38
 8010974:	20000b40 	.word	0x20000b40
 8010978:	20000718 	.word	0x20000718

0801097c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801097c:	b590      	push	{r4, r7, lr}
 801097e:	b083      	sub	sp, #12
 8010980:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010982:	4b1e      	ldr	r3, [pc, #120]	; (80109fc <OpenContinuousRxCWindow+0x80>)
 8010984:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010988:	4b1c      	ldr	r3, [pc, #112]	; (80109fc <OpenContinuousRxCWindow+0x80>)
 801098a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801098e:	b259      	sxtb	r1, r3
 8010990:	4b1a      	ldr	r3, [pc, #104]	; (80109fc <OpenContinuousRxCWindow+0x80>)
 8010992:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010996:	4b19      	ldr	r3, [pc, #100]	; (80109fc <OpenContinuousRxCWindow+0x80>)
 8010998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801099a:	4c19      	ldr	r4, [pc, #100]	; (8010a00 <OpenContinuousRxCWindow+0x84>)
 801099c:	9400      	str	r4, [sp, #0]
 801099e:	f004 f8a8 	bl	8014af2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80109a2:	4b18      	ldr	r3, [pc, #96]	; (8010a04 <OpenContinuousRxCWindow+0x88>)
 80109a4:	2202      	movs	r2, #2
 80109a6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80109aa:	4b14      	ldr	r3, [pc, #80]	; (80109fc <OpenContinuousRxCWindow+0x80>)
 80109ac:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80109b0:	4b14      	ldr	r3, [pc, #80]	; (8010a04 <OpenContinuousRxCWindow+0x88>)
 80109b2:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80109b6:	4b13      	ldr	r3, [pc, #76]	; (8010a04 <OpenContinuousRxCWindow+0x88>)
 80109b8:	2201      	movs	r2, #1
 80109ba:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80109be:	4b0f      	ldr	r3, [pc, #60]	; (80109fc <OpenContinuousRxCWindow+0x80>)
 80109c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109c4:	4a10      	ldr	r2, [pc, #64]	; (8010a08 <OpenContinuousRxCWindow+0x8c>)
 80109c6:	490e      	ldr	r1, [pc, #56]	; (8010a00 <OpenContinuousRxCWindow+0x84>)
 80109c8:	4618      	mov	r0, r3
 80109ca:	f004 f8b6 	bl	8014b3a <RegionRxConfig>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d00f      	beq.n	80109f4 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80109d4:	4b0b      	ldr	r3, [pc, #44]	; (8010a04 <OpenContinuousRxCWindow+0x88>)
 80109d6:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 80109da:	4b0a      	ldr	r3, [pc, #40]	; (8010a04 <OpenContinuousRxCWindow+0x88>)
 80109dc:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80109e0:	4b0a      	ldr	r3, [pc, #40]	; (8010a0c <OpenContinuousRxCWindow+0x90>)
 80109e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e4:	2000      	movs	r0, #0
 80109e6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80109e8:	4b06      	ldr	r3, [pc, #24]	; (8010a04 <OpenContinuousRxCWindow+0x88>)
 80109ea:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80109ee:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <OpenContinuousRxCWindow+0x88>)
 80109f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80109f4:	bf00      	nop
 80109f6:	3704      	adds	r7, #4
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd90      	pop	{r4, r7, pc}
 80109fc:	20000c38 	.word	0x20000c38
 8010a00:	20000b00 	.word	0x20000b00
 8010a04:	20000718 	.word	0x20000718
 8010a08:	20000b40 	.word	0x20000b40
 8010a0c:	0801e0d4 	.word	0x0801e0d4

08010a10 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	603b      	str	r3, [r7, #0]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010a20:	4b82      	ldr	r3, [pc, #520]	; (8010c2c <PrepareFrame+0x21c>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010a26:	4b81      	ldr	r3, [pc, #516]	; (8010c2c <PrepareFrame+0x21c>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010a36:	2300      	movs	r3, #0
 8010a38:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010a40:	2300      	movs	r3, #0
 8010a42:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010a44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a46:	461a      	mov	r2, r3
 8010a48:	6839      	ldr	r1, [r7, #0]
 8010a4a:	4879      	ldr	r0, [pc, #484]	; (8010c30 <PrepareFrame+0x220>)
 8010a4c:	f007 fdab 	bl	80185a6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	4b75      	ldr	r3, [pc, #468]	; (8010c2c <PrepareFrame+0x21c>)
 8010a56:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	781a      	ldrb	r2, [r3, #0]
 8010a5e:	4b73      	ldr	r3, [pc, #460]	; (8010c2c <PrepareFrame+0x21c>)
 8010a60:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b07      	cmp	r3, #7
 8010a6e:	f000 80b9 	beq.w	8010be4 <PrepareFrame+0x1d4>
 8010a72:	2b07      	cmp	r3, #7
 8010a74:	f300 80d0 	bgt.w	8010c18 <PrepareFrame+0x208>
 8010a78:	2b02      	cmp	r3, #2
 8010a7a:	d006      	beq.n	8010a8a <PrepareFrame+0x7a>
 8010a7c:	2b04      	cmp	r3, #4
 8010a7e:	f040 80cb 	bne.w	8010c18 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010a82:	4b6a      	ldr	r3, [pc, #424]	; (8010c2c <PrepareFrame+0x21c>)
 8010a84:	2201      	movs	r2, #1
 8010a86:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010a8a:	4b68      	ldr	r3, [pc, #416]	; (8010c2c <PrepareFrame+0x21c>)
 8010a8c:	2204      	movs	r2, #4
 8010a8e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010a92:	4b66      	ldr	r3, [pc, #408]	; (8010c2c <PrepareFrame+0x21c>)
 8010a94:	4a67      	ldr	r2, [pc, #412]	; (8010c34 <PrepareFrame+0x224>)
 8010a96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010a9a:	4b64      	ldr	r3, [pc, #400]	; (8010c2c <PrepareFrame+0x21c>)
 8010a9c:	22ff      	movs	r2, #255	; 0xff
 8010a9e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	781a      	ldrb	r2, [r3, #0]
 8010aa6:	4b61      	ldr	r3, [pc, #388]	; (8010c2c <PrepareFrame+0x21c>)
 8010aa8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010aac:	4a5f      	ldr	r2, [pc, #380]	; (8010c2c <PrepareFrame+0x21c>)
 8010aae:	79fb      	ldrb	r3, [r7, #7]
 8010ab0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010ab4:	4b60      	ldr	r3, [pc, #384]	; (8010c38 <PrepareFrame+0x228>)
 8010ab6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010aba:	4a5c      	ldr	r2, [pc, #368]	; (8010c2c <PrepareFrame+0x21c>)
 8010abc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	781a      	ldrb	r2, [r3, #0]
 8010ac4:	4b59      	ldr	r3, [pc, #356]	; (8010c2c <PrepareFrame+0x21c>)
 8010ac6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010aca:	4b58      	ldr	r3, [pc, #352]	; (8010c2c <PrepareFrame+0x21c>)
 8010acc:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010ad0:	4b56      	ldr	r3, [pc, #344]	; (8010c2c <PrepareFrame+0x21c>)
 8010ad2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010ad6:	4b55      	ldr	r3, [pc, #340]	; (8010c2c <PrepareFrame+0x21c>)
 8010ad8:	4a55      	ldr	r2, [pc, #340]	; (8010c30 <PrepareFrame+0x220>)
 8010ada:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010ade:	f107 0318 	add.w	r3, r7, #24
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f003 f8e6 	bl	8013cb4 <LoRaMacCryptoGetFCntUp>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d001      	beq.n	8010af2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010aee:	2312      	movs	r3, #18
 8010af0:	e098      	b.n	8010c24 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	4b4d      	ldr	r3, [pc, #308]	; (8010c2c <PrepareFrame+0x21c>)
 8010af8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010afc:	4b4b      	ldr	r3, [pc, #300]	; (8010c2c <PrepareFrame+0x21c>)
 8010afe:	2200      	movs	r2, #0
 8010b00:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010b04:	4b49      	ldr	r3, [pc, #292]	; (8010c2c <PrepareFrame+0x21c>)
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	4a47      	ldr	r2, [pc, #284]	; (8010c2c <PrepareFrame+0x21c>)
 8010b10:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010b14:	f107 0314 	add.w	r3, r7, #20
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f002 fa83 	bl	8013024 <LoRaMacCommandsGetSizeSerializedCmds>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d001      	beq.n	8010b28 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b24:	2313      	movs	r3, #19
 8010b26:	e07d      	b.n	8010c24 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d076      	beq.n	8010c1c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010b2e:	4b42      	ldr	r3, [pc, #264]	; (8010c38 <PrepareFrame+0x228>)
 8010b30:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fe fd5b 	bl	800f5f0 <GetMaxAppPayloadWithoutFOptsLength>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010b3e:	4b3b      	ldr	r3, [pc, #236]	; (8010c2c <PrepareFrame+0x21c>)
 8010b40:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d01d      	beq.n	8010b84 <PrepareFrame+0x174>
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	2b0f      	cmp	r3, #15
 8010b4c:	d81a      	bhi.n	8010b84 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010b4e:	f107 0314 	add.w	r3, r7, #20
 8010b52:	4a3a      	ldr	r2, [pc, #232]	; (8010c3c <PrepareFrame+0x22c>)
 8010b54:	4619      	mov	r1, r3
 8010b56:	200f      	movs	r0, #15
 8010b58:	f002 fa7a 	bl	8013050 <LoRaMacCommandsSerializeCmds>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b62:	2313      	movs	r3, #19
 8010b64:	e05e      	b.n	8010c24 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	f003 030f 	and.w	r3, r3, #15
 8010b6c:	b2d9      	uxtb	r1, r3
 8010b6e:	68ba      	ldr	r2, [r7, #8]
 8010b70:	7813      	ldrb	r3, [r2, #0]
 8010b72:	f361 0303 	bfi	r3, r1, #0, #4
 8010b76:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	781a      	ldrb	r2, [r3, #0]
 8010b7c:	4b2b      	ldr	r3, [pc, #172]	; (8010c2c <PrepareFrame+0x21c>)
 8010b7e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010b82:	e04b      	b.n	8010c1c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010b84:	4b29      	ldr	r3, [pc, #164]	; (8010c2c <PrepareFrame+0x21c>)
 8010b86:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d010      	beq.n	8010bb0 <PrepareFrame+0x1a0>
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	2b0f      	cmp	r3, #15
 8010b92:	d90d      	bls.n	8010bb0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010b94:	7ffb      	ldrb	r3, [r7, #31]
 8010b96:	f107 0114 	add.w	r1, r7, #20
 8010b9a:	4a29      	ldr	r2, [pc, #164]	; (8010c40 <PrepareFrame+0x230>)
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f002 fa57 	bl	8013050 <LoRaMacCommandsSerializeCmds>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d001      	beq.n	8010bac <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010ba8:	2313      	movs	r3, #19
 8010baa:	e03b      	b.n	8010c24 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010bac:	230a      	movs	r3, #10
 8010bae:	e039      	b.n	8010c24 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010bb0:	7ffb      	ldrb	r3, [r7, #31]
 8010bb2:	f107 0114 	add.w	r1, r7, #20
 8010bb6:	4a22      	ldr	r2, [pc, #136]	; (8010c40 <PrepareFrame+0x230>)
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f002 fa49 	bl	8013050 <LoRaMacCommandsSerializeCmds>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d001      	beq.n	8010bc8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010bc4:	2313      	movs	r3, #19
 8010bc6:	e02d      	b.n	8010c24 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010bc8:	4b18      	ldr	r3, [pc, #96]	; (8010c2c <PrepareFrame+0x21c>)
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010bd0:	4b16      	ldr	r3, [pc, #88]	; (8010c2c <PrepareFrame+0x21c>)
 8010bd2:	4a1b      	ldr	r2, [pc, #108]	; (8010c40 <PrepareFrame+0x230>)
 8010bd4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <PrepareFrame+0x21c>)
 8010bde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010be2:	e01b      	b.n	8010c1c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d01a      	beq.n	8010c20 <PrepareFrame+0x210>
 8010bea:	4b10      	ldr	r3, [pc, #64]	; (8010c2c <PrepareFrame+0x21c>)
 8010bec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d015      	beq.n	8010c20 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010bf4:	4813      	ldr	r0, [pc, #76]	; (8010c44 <PrepareFrame+0x234>)
 8010bf6:	4b0d      	ldr	r3, [pc, #52]	; (8010c2c <PrepareFrame+0x21c>)
 8010bf8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	461a      	mov	r2, r3
 8010c00:	6839      	ldr	r1, [r7, #0]
 8010c02:	f007 fcd0 	bl	80185a6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010c06:	4b09      	ldr	r3, [pc, #36]	; (8010c2c <PrepareFrame+0x21c>)
 8010c08:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	3301      	adds	r3, #1
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	4b06      	ldr	r3, [pc, #24]	; (8010c2c <PrepareFrame+0x21c>)
 8010c14:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010c16:	e003      	b.n	8010c20 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010c18:	2302      	movs	r3, #2
 8010c1a:	e003      	b.n	8010c24 <PrepareFrame+0x214>
            break;
 8010c1c:	bf00      	nop
 8010c1e:	e000      	b.n	8010c22 <PrepareFrame+0x212>
            break;
 8010c20:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3720      	adds	r7, #32
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	20000718 	.word	0x20000718
 8010c30:	20000850 	.word	0x20000850
 8010c34:	2000071a 	.word	0x2000071a
 8010c38:	20000c38 	.word	0x20000c38
 8010c3c:	20000830 	.word	0x20000830
 8010c40:	20000bb8 	.word	0x20000bb8
 8010c44:	2000071b 	.word	0x2000071b

08010c48 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b08a      	sub	sp, #40	; 0x28
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	4603      	mov	r3, r0
 8010c50:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c52:	2303      	movs	r3, #3
 8010c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
 8010c5e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010c60:	4b4a      	ldr	r3, [pc, #296]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010c62:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010c66:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010c68:	4b48      	ldr	r3, [pc, #288]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010c6a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010c6e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010c70:	4b46      	ldr	r3, [pc, #280]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c74:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010c76:	4b45      	ldr	r3, [pc, #276]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c7a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010c7c:	4b44      	ldr	r3, [pc, #272]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010c82:	4b42      	ldr	r3, [pc, #264]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010c84:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010c88:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010c8a:	4b40      	ldr	r3, [pc, #256]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010c8c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010c90:	f107 020f 	add.w	r2, r7, #15
 8010c94:	f107 0110 	add.w	r1, r7, #16
 8010c98:	4b3e      	ldr	r3, [pc, #248]	; (8010d94 <SendFrameOnChannel+0x14c>)
 8010c9a:	f003 ff6c 	bl	8014b76 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c9e:	4b3c      	ldr	r3, [pc, #240]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ca6:	4b39      	ldr	r3, [pc, #228]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010ca8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010cac:	b2da      	uxtb	r2, r3
 8010cae:	4b38      	ldr	r3, [pc, #224]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cb0:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010cb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010cb8:	4b35      	ldr	r3, [pc, #212]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cba:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8010cbe:	79fb      	ldrb	r3, [r7, #7]
 8010cc0:	4a33      	ldr	r2, [pc, #204]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cc2:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010cc6:	4b32      	ldr	r3, [pc, #200]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cc8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8010ccc:	4a30      	ldr	r2, [pc, #192]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cce:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010cd2:	4b2f      	ldr	r3, [pc, #188]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cd4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8010cd8:	4a2d      	ldr	r2, [pc, #180]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cda:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010cde:	f001 ff34 	bl	8012b4a <LoRaMacClassBIsBeaconModeActive>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d00b      	beq.n	8010d00 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010ce8:	4b29      	ldr	r3, [pc, #164]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010cea:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f001 ff96 	bl	8012c20 <LoRaMacClassBIsUplinkCollision>
 8010cf4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010cf6:	6a3b      	ldr	r3, [r7, #32]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010cfc:	2310      	movs	r3, #16
 8010cfe:	e040      	b.n	8010d82 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010d00:	4b22      	ldr	r3, [pc, #136]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010d02:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d101      	bne.n	8010d0e <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010d0a:	f001 ff93 	bl	8012c34 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010d0e:	f001 ff2d 	bl	8012b6c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010d12:	4b1e      	ldr	r3, [pc, #120]	; (8010d8c <SendFrameOnChannel+0x144>)
 8010d14:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	4a1d      	ldr	r2, [pc, #116]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d1c:	f892 241f 	ldrb.w	r2, [r2, #1055]	; 0x41f
 8010d20:	4611      	mov	r1, r2
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7ff fc64 	bl	80105f0 <SecureFrame>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8010d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d002      	beq.n	8010d3c <SendFrameOnChannel+0xf4>
    {
        return status;
 8010d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d3a:	e022      	b.n	8010d82 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010d3c:	4b14      	ldr	r3, [pc, #80]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d42:	f043 0302 	orr.w	r3, r3, #2
 8010d46:	4a12      	ldr	r2, [pc, #72]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d48:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8010d4c:	4b10      	ldr	r3, [pc, #64]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d4e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010d52:	3301      	adds	r3, #1
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	4b0e      	ldr	r3, [pc, #56]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d58:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010d5c:	4b0c      	ldr	r3, [pc, #48]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d5e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8010d62:	4b0b      	ldr	r3, [pc, #44]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d64:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8010d68:	4b09      	ldr	r3, [pc, #36]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010d70:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <SendFrameOnChannel+0x150>)
 8010d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d74:	4a06      	ldr	r2, [pc, #24]	; (8010d90 <SendFrameOnChannel+0x148>)
 8010d76:	8812      	ldrh	r2, [r2, #0]
 8010d78:	b2d2      	uxtb	r2, r2
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	4807      	ldr	r0, [pc, #28]	; (8010d9c <SendFrameOnChannel+0x154>)
 8010d7e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3728      	adds	r7, #40	; 0x28
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	20000c38 	.word	0x20000c38
 8010d90:	20000718 	.word	0x20000718
 8010d94:	20000b38 	.word	0x20000b38
 8010d98:	0801e0d4 	.word	0x0801e0d4
 8010d9c:	2000071a 	.word	0x2000071a

08010da0 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	4603      	mov	r3, r0
 8010da8:	6039      	str	r1, [r7, #0]
 8010daa:	80fb      	strh	r3, [r7, #6]
 8010dac:	4613      	mov	r3, r2
 8010dae:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010db0:	4b09      	ldr	r3, [pc, #36]	; (8010dd8 <SetTxContinuousWave+0x38>)
 8010db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010db4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010db8:	88fa      	ldrh	r2, [r7, #6]
 8010dba:	6838      	ldr	r0, [r7, #0]
 8010dbc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010dbe:	4b07      	ldr	r3, [pc, #28]	; (8010ddc <SetTxContinuousWave+0x3c>)
 8010dc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010dc4:	f043 0302 	orr.w	r3, r3, #2
 8010dc8:	4a04      	ldr	r2, [pc, #16]	; (8010ddc <SetTxContinuousWave+0x3c>)
 8010dca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010dce:	2300      	movs	r3, #0
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	0801e0d4 	.word	0x0801e0d4
 8010ddc:	20000718 	.word	0x20000718

08010de0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010dea:	4b3e      	ldr	r3, [pc, #248]	; (8010ee4 <RestoreNvmData+0x104>)
 8010dec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d001      	beq.n	8010df8 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010df4:	2301      	movs	r3, #1
 8010df6:	e071      	b.n	8010edc <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010df8:	2124      	movs	r1, #36	; 0x24
 8010dfa:	483b      	ldr	r0, [pc, #236]	; (8010ee8 <RestoreNvmData+0x108>)
 8010dfc:	f007 fc28 	bl	8018650 <Crc32>
 8010e00:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010e02:	4b39      	ldr	r3, [pc, #228]	; (8010ee8 <RestoreNvmData+0x108>)
 8010e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d001      	beq.n	8010e10 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e0c:	2317      	movs	r3, #23
 8010e0e:	e065      	b.n	8010edc <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010e10:	2114      	movs	r1, #20
 8010e12:	4836      	ldr	r0, [pc, #216]	; (8010eec <RestoreNvmData+0x10c>)
 8010e14:	f007 fc1c 	bl	8018650 <Crc32>
 8010e18:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010e1a:	4b33      	ldr	r3, [pc, #204]	; (8010ee8 <RestoreNvmData+0x108>)
 8010e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d001      	beq.n	8010e28 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e24:	2317      	movs	r3, #23
 8010e26:	e059      	b.n	8010edc <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010e28:	21e0      	movs	r1, #224	; 0xe0
 8010e2a:	4831      	ldr	r0, [pc, #196]	; (8010ef0 <RestoreNvmData+0x110>)
 8010e2c:	f007 fc10 	bl	8018650 <Crc32>
 8010e30:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010e32:	4b2d      	ldr	r3, [pc, #180]	; (8010ee8 <RestoreNvmData+0x108>)
 8010e34:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d001      	beq.n	8010e42 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e3e:	2317      	movs	r3, #23
 8010e40:	e04c      	b.n	8010edc <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010e42:	21bc      	movs	r1, #188	; 0xbc
 8010e44:	482b      	ldr	r0, [pc, #172]	; (8010ef4 <RestoreNvmData+0x114>)
 8010e46:	f007 fc03 	bl	8018650 <Crc32>
 8010e4a:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8010e4c:	4b26      	ldr	r3, [pc, #152]	; (8010ee8 <RestoreNvmData+0x108>)
 8010e4e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d001      	beq.n	8010e5c <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e58:	2317      	movs	r3, #23
 8010e5a:	e03f      	b.n	8010edc <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8010e5c:	2110      	movs	r1, #16
 8010e5e:	4826      	ldr	r0, [pc, #152]	; (8010ef8 <RestoreNvmData+0x118>)
 8010e60:	f007 fbf6 	bl	8018650 <Crc32>
 8010e64:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010e66:	4b20      	ldr	r3, [pc, #128]	; (8010ee8 <RestoreNvmData+0x108>)
 8010e68:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d001      	beq.n	8010e76 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e72:	2317      	movs	r3, #23
 8010e74:	e032      	b.n	8010edc <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010e76:	2114      	movs	r1, #20
 8010e78:	4820      	ldr	r0, [pc, #128]	; (8010efc <RestoreNvmData+0x11c>)
 8010e7a:	f007 fbe9 	bl	8018650 <Crc32>
 8010e7e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010e80:	4b19      	ldr	r3, [pc, #100]	; (8010ee8 <RestoreNvmData+0x108>)
 8010e82:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d001      	beq.n	8010e90 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010e8c:	2317      	movs	r3, #23
 8010e8e:	e025      	b.n	8010edc <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010e90:	f240 528c 	movw	r2, #1420	; 0x58c
 8010e94:	4914      	ldr	r1, [pc, #80]	; (8010ee8 <RestoreNvmData+0x108>)
 8010e96:	481a      	ldr	r0, [pc, #104]	; (8010f00 <RestoreNvmData+0x120>)
 8010e98:	f007 fb85 	bl	80185a6 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010e9c:	f240 528c 	movw	r2, #1420	; 0x58c
 8010ea0:	2100      	movs	r1, #0
 8010ea2:	4811      	ldr	r0, [pc, #68]	; (8010ee8 <RestoreNvmData+0x108>)
 8010ea4:	f007 fbba 	bl	801861c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010ea8:	4b0e      	ldr	r3, [pc, #56]	; (8010ee4 <RestoreNvmData+0x104>)
 8010eaa:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010eae:	4b0d      	ldr	r3, [pc, #52]	; (8010ee4 <RestoreNvmData+0x104>)
 8010eb0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010eb4:	4b12      	ldr	r3, [pc, #72]	; (8010f00 <RestoreNvmData+0x120>)
 8010eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eb8:	4a0a      	ldr	r2, [pc, #40]	; (8010ee4 <RestoreNvmData+0x104>)
 8010eba:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ebe:	4b10      	ldr	r3, [pc, #64]	; (8010f00 <RestoreNvmData+0x120>)
 8010ec0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010ec4:	4b07      	ldr	r3, [pc, #28]	; (8010ee4 <RestoreNvmData+0x104>)
 8010ec6:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010eca:	4b06      	ldr	r3, [pc, #24]	; (8010ee4 <RestoreNvmData+0x104>)
 8010ecc:	2201      	movs	r2, #1
 8010ece:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010ed2:	4b04      	ldr	r3, [pc, #16]	; (8010ee4 <RestoreNvmData+0x104>)
 8010ed4:	2202      	movs	r2, #2
 8010ed6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    return LORAMAC_STATUS_OK;
 8010eda:	2300      	movs	r3, #0
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	20000718 	.word	0x20000718
 8010ee8:	200011c4 	.word	0x200011c4
 8010eec:	200011ec 	.word	0x200011ec
 8010ef0:	20001204 	.word	0x20001204
 8010ef4:	200012e8 	.word	0x200012e8
 8010ef8:	200013a8 	.word	0x200013a8
 8010efc:	20001738 	.word	0x20001738
 8010f00:	20000c38 	.word	0x20000c38

08010f04 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <DetermineFrameType+0x16>
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d101      	bne.n	8010f1e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f1a:	2303      	movs	r3, #3
 8010f1c:	e03b      	b.n	8010f96 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	7b1b      	ldrb	r3, [r3, #12]
 8010f22:	f003 030f 	and.w	r3, r3, #15
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d008      	beq.n	8010f3e <DetermineFrameType+0x3a>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d003      	beq.n	8010f3e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	701a      	strb	r2, [r3, #0]
 8010f3c:	e02a      	b.n	8010f94 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d103      	bne.n	8010f50 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	701a      	strb	r2, [r3, #0]
 8010f4e:	e021      	b.n	8010f94 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	7b1b      	ldrb	r3, [r3, #12]
 8010f54:	f003 030f 	and.w	r3, r3, #15
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d108      	bne.n	8010f70 <DetermineFrameType+0x6c>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d103      	bne.n	8010f70 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	2202      	movs	r2, #2
 8010f6c:	701a      	strb	r2, [r3, #0]
 8010f6e:	e011      	b.n	8010f94 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	7b1b      	ldrb	r3, [r3, #12]
 8010f74:	f003 030f 	and.w	r3, r3, #15
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d108      	bne.n	8010f90 <DetermineFrameType+0x8c>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d003      	beq.n	8010f90 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	2203      	movs	r2, #3
 8010f8c:	701a      	strb	r2, [r3, #0]
 8010f8e:	e001      	b.n	8010f94 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010f90:	2318      	movs	r3, #24
 8010f92:	e000      	b.n	8010f96 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	370c      	adds	r7, #12
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bc80      	pop	{r7}
 8010f9e:	4770      	bx	lr

08010fa0 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	460a      	mov	r2, r1
 8010faa:	71fb      	strb	r3, [r7, #7]
 8010fac:	4613      	mov	r3, r2
 8010fae:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8010fb0:	79fa      	ldrb	r2, [r7, #7]
 8010fb2:	79bb      	ldrb	r3, [r7, #6]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d301      	bcc.n	8010fbc <CheckRetrans+0x1c>
    {
        return true;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e000      	b.n	8010fbe <CheckRetrans+0x1e>
    }
    return false;
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	370c      	adds	r7, #12
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bc80      	pop	{r7}
 8010fc6:	4770      	bx	lr

08010fc8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010fcc:	4b12      	ldr	r3, [pc, #72]	; (8011018 <CheckRetransUnconfirmedUplink+0x50>)
 8010fce:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010fd2:	4a12      	ldr	r2, [pc, #72]	; (801101c <CheckRetransUnconfirmedUplink+0x54>)
 8010fd4:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8010fd8:	4611      	mov	r1, r2
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff ffe0 	bl	8010fa0 <CheckRetrans>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d001      	beq.n	8010fea <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e014      	b.n	8011014 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010fea:	4b0b      	ldr	r3, [pc, #44]	; (8011018 <CheckRetransUnconfirmedUplink+0x50>)
 8010fec:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010ff0:	f003 0302 	and.w	r3, r3, #2
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00b      	beq.n	8011012 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010ffa:	4b07      	ldr	r3, [pc, #28]	; (8011018 <CheckRetransUnconfirmedUplink+0x50>)
 8010ffc:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8011000:	2b00      	cmp	r3, #0
 8011002:	d004      	beq.n	801100e <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011004:	4b04      	ldr	r3, [pc, #16]	; (8011018 <CheckRetransUnconfirmedUplink+0x50>)
 8011006:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801100a:	2b01      	cmp	r3, #1
 801100c:	d101      	bne.n	8011012 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801100e:	2301      	movs	r3, #1
 8011010:	e000      	b.n	8011014 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8011012:	2300      	movs	r3, #0
}
 8011014:	4618      	mov	r0, r3
 8011016:	bd80      	pop	{r7, pc}
 8011018:	20000718 	.word	0x20000718
 801101c:	20000c38 	.word	0x20000c38

08011020 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011020:	b580      	push	{r7, lr}
 8011022:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011024:	4b10      	ldr	r3, [pc, #64]	; (8011068 <CheckRetransConfirmedUplink+0x48>)
 8011026:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 801102a:	4a10      	ldr	r2, [pc, #64]	; (801106c <CheckRetransConfirmedUplink+0x4c>)
 801102c:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8011030:	4611      	mov	r1, r2
 8011032:	4618      	mov	r0, r3
 8011034:	f7ff ffb4 	bl	8010fa0 <CheckRetrans>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d001      	beq.n	8011042 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801103e:	2301      	movs	r3, #1
 8011040:	e00f      	b.n	8011062 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011042:	4b09      	ldr	r3, [pc, #36]	; (8011068 <CheckRetransConfirmedUplink+0x48>)
 8011044:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011048:	f003 0302 	and.w	r3, r3, #2
 801104c:	b2db      	uxtb	r3, r3
 801104e:	2b00      	cmp	r3, #0
 8011050:	d006      	beq.n	8011060 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011052:	4b05      	ldr	r3, [pc, #20]	; (8011068 <CheckRetransConfirmedUplink+0x48>)
 8011054:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 801105c:	2301      	movs	r3, #1
 801105e:	e000      	b.n	8011062 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	20000718 	.word	0x20000718
 801106c:	20000c38 	.word	0x20000c38

08011070 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801107e:	d002      	beq.n	8011086 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	3301      	adds	r3, #1
 8011084:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8011086:	687b      	ldr	r3, [r7, #4]
}
 8011088:	4618      	mov	r0, r3
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	bc80      	pop	{r7}
 8011090:	4770      	bx	lr
	...

08011094 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011098:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <StopRetransmission+0x70>)
 801109a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 801109e:	f003 0302 	and.w	r3, r3, #2
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d009      	beq.n	80110bc <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80110a8:	4b16      	ldr	r3, [pc, #88]	; (8011104 <StopRetransmission+0x70>)
 80110aa:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d011      	beq.n	80110d6 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80110b2:	4b14      	ldr	r3, [pc, #80]	; (8011104 <StopRetransmission+0x70>)
 80110b4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d00c      	beq.n	80110d6 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80110bc:	4b12      	ldr	r3, [pc, #72]	; (8011108 <StopRetransmission+0x74>)
 80110be:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d007      	beq.n	80110d6 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80110c6:	4b10      	ldr	r3, [pc, #64]	; (8011108 <StopRetransmission+0x74>)
 80110c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7ff ffd0 	bl	8011070 <IncreaseAdrAckCounter>
 80110d0:	4603      	mov	r3, r0
 80110d2:	4a0d      	ldr	r2, [pc, #52]	; (8011108 <StopRetransmission+0x74>)
 80110d4:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80110d6:	4b0b      	ldr	r3, [pc, #44]	; (8011104 <StopRetransmission+0x70>)
 80110d8:	2200      	movs	r2, #0
 80110da:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 80110de:	4b09      	ldr	r3, [pc, #36]	; (8011104 <StopRetransmission+0x70>)
 80110e0:	2200      	movs	r2, #0
 80110e2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80110e6:	4b07      	ldr	r3, [pc, #28]	; (8011104 <StopRetransmission+0x70>)
 80110e8:	2200      	movs	r2, #0
 80110ea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80110ee:	4b05      	ldr	r3, [pc, #20]	; (8011104 <StopRetransmission+0x70>)
 80110f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80110f4:	f023 0302 	bic.w	r3, r3, #2
 80110f8:	4a02      	ldr	r2, [pc, #8]	; (8011104 <StopRetransmission+0x70>)
 80110fa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80110fe:	2301      	movs	r3, #1
}
 8011100:	4618      	mov	r0, r3
 8011102:	bd80      	pop	{r7, pc}
 8011104:	20000718 	.word	0x20000718
 8011108:	20000c38 	.word	0x20000c38

0801110c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	4603      	mov	r3, r0
 8011114:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011116:	4b0b      	ldr	r3, [pc, #44]	; (8011144 <CallNvmDataChangeCallback+0x38>)
 8011118:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00c      	beq.n	801113a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011120:	4b08      	ldr	r3, [pc, #32]	; (8011144 <CallNvmDataChangeCallback+0x38>)
 8011122:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011126:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011128:	2b00      	cmp	r3, #0
 801112a:	d006      	beq.n	801113a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801112c:	4b05      	ldr	r3, [pc, #20]	; (8011144 <CallNvmDataChangeCallback+0x38>)
 801112e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	88fa      	ldrh	r2, [r7, #6]
 8011136:	4610      	mov	r0, r2
 8011138:	4798      	blx	r3
    }
}
 801113a:	bf00      	nop
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20000718 	.word	0x20000718

08011148 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011148:	b480      	push	{r7}
 801114a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801114c:	4b0b      	ldr	r3, [pc, #44]	; (801117c <IsRequestPending+0x34>)
 801114e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011152:	f003 0304 	and.w	r3, r3, #4
 8011156:	b2db      	uxtb	r3, r3
 8011158:	2b00      	cmp	r3, #0
 801115a:	d107      	bne.n	801116c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801115c:	4b07      	ldr	r3, [pc, #28]	; (801117c <IsRequestPending+0x34>)
 801115e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011162:	f003 0301 	and.w	r3, r3, #1
 8011166:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011168:	2b00      	cmp	r3, #0
 801116a:	d001      	beq.n	8011170 <IsRequestPending+0x28>
    {
        return 1;
 801116c:	2301      	movs	r3, #1
 801116e:	e000      	b.n	8011172 <IsRequestPending+0x2a>
    }
    return 0;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	46bd      	mov	sp, r7
 8011176:	bc80      	pop	{r7}
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop
 801117c:	20000718 	.word	0x20000718

08011180 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011180:	b590      	push	{r4, r7, lr}
 8011182:	b091      	sub	sp, #68	; 0x44
 8011184:	af02      	add	r7, sp, #8
 8011186:	6178      	str	r0, [r7, #20]
 8011188:	6139      	str	r1, [r7, #16]
 801118a:	4613      	mov	r3, r2
 801118c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <LoRaMacInitialization+0x1a>
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801119a:	2303      	movs	r3, #3
 801119c:	e27c      	b.n	8011698 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00b      	beq.n	80111be <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d007      	beq.n	80111be <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d003      	beq.n	80111be <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d101      	bne.n	80111c2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80111be:	2303      	movs	r3, #3
 80111c0:	e26a      	b.n	8011698 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
 80111c4:	4618      	mov	r0, r3
 80111c6:	f003 fbdb 	bl	8014980 <RegionIsActive>
 80111ca:	4603      	mov	r3, r0
 80111cc:	f083 0301 	eor.w	r3, r3, #1
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d001      	beq.n	80111da <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80111d6:	2309      	movs	r3, #9
 80111d8:	e25e      	b.n	8011698 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80111da:	6978      	ldr	r0, [r7, #20]
 80111dc:	f002 f882 	bl	80132e4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80111e0:	f240 528c 	movw	r2, #1420	; 0x58c
 80111e4:	2100      	movs	r1, #0
 80111e6:	48c7      	ldr	r0, [pc, #796]	; (8011504 <LoRaMacInitialization+0x384>)
 80111e8:	f007 fa18 	bl	801861c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80111ec:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80111f0:	2100      	movs	r1, #0
 80111f2:	48c5      	ldr	r0, [pc, #788]	; (8011508 <LoRaMacInitialization+0x388>)
 80111f4:	f007 fa12 	bl	801861c <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80111f8:	4ac2      	ldr	r2, [pc, #776]	; (8011504 <LoRaMacInitialization+0x384>)
 80111fa:	7bfb      	ldrb	r3, [r7, #15]
 80111fc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011200:	4bc0      	ldr	r3, [pc, #768]	; (8011504 <LoRaMacInitialization+0x384>)
 8011202:	2200      	movs	r2, #0
 8011204:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011208:	4bbe      	ldr	r3, [pc, #760]	; (8011504 <LoRaMacInitialization+0x384>)
 801120a:	2200      	movs	r2, #0
 801120c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011210:	4bbc      	ldr	r3, [pc, #752]	; (8011504 <LoRaMacInitialization+0x384>)
 8011212:	4abe      	ldr	r2, [pc, #760]	; (801150c <LoRaMacInitialization+0x38c>)
 8011214:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011218:	2300      	movs	r3, #0
 801121a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801121e:	4bbc      	ldr	r3, [pc, #752]	; (8011510 <LoRaMacInitialization+0x390>)
 8011220:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011222:	4bbc      	ldr	r3, [pc, #752]	; (8011514 <LoRaMacInitialization+0x394>)
 8011224:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011226:	4bbc      	ldr	r3, [pc, #752]	; (8011518 <LoRaMacInitialization+0x398>)
 8011228:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801122a:	4bb6      	ldr	r3, [pc, #728]	; (8011504 <LoRaMacInitialization+0x384>)
 801122c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011230:	f107 021c 	add.w	r2, r7, #28
 8011234:	4611      	mov	r1, r2
 8011236:	4618      	mov	r0, r3
 8011238:	f003 fbef 	bl	8014a1a <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801123c:	230f      	movs	r3, #15
 801123e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011242:	4bb0      	ldr	r3, [pc, #704]	; (8011504 <LoRaMacInitialization+0x384>)
 8011244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011248:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801124c:	4611      	mov	r1, r2
 801124e:	4618      	mov	r0, r3
 8011250:	f003 fbab 	bl	80149aa <RegionGetPhyParam>
 8011254:	4603      	mov	r3, r0
 8011256:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	2b00      	cmp	r3, #0
 801125c:	bf14      	ite	ne
 801125e:	2301      	movne	r3, #1
 8011260:	2300      	moveq	r3, #0
 8011262:	b2da      	uxtb	r2, r3
 8011264:	4ba7      	ldr	r3, [pc, #668]	; (8011504 <LoRaMacInitialization+0x384>)
 8011266:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801126a:	230a      	movs	r3, #10
 801126c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011270:	4ba4      	ldr	r3, [pc, #656]	; (8011504 <LoRaMacInitialization+0x384>)
 8011272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011276:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801127a:	4611      	mov	r1, r2
 801127c:	4618      	mov	r0, r3
 801127e:	f003 fb94 	bl	80149aa <RegionGetPhyParam>
 8011282:	4603      	mov	r3, r0
 8011284:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011288:	b25a      	sxtb	r2, r3
 801128a:	4b9e      	ldr	r3, [pc, #632]	; (8011504 <LoRaMacInitialization+0x384>)
 801128c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011290:	2306      	movs	r3, #6
 8011292:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011296:	4b9b      	ldr	r3, [pc, #620]	; (8011504 <LoRaMacInitialization+0x384>)
 8011298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801129c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80112a0:	4611      	mov	r1, r2
 80112a2:	4618      	mov	r0, r3
 80112a4:	f003 fb81 	bl	80149aa <RegionGetPhyParam>
 80112a8:	4603      	mov	r3, r0
 80112aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	b25a      	sxtb	r2, r3
 80112b0:	4b94      	ldr	r3, [pc, #592]	; (8011504 <LoRaMacInitialization+0x384>)
 80112b2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80112b6:	2310      	movs	r3, #16
 80112b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112bc:	4b91      	ldr	r3, [pc, #580]	; (8011504 <LoRaMacInitialization+0x384>)
 80112be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80112c6:	4611      	mov	r1, r2
 80112c8:	4618      	mov	r0, r3
 80112ca:	f003 fb6e 	bl	80149aa <RegionGetPhyParam>
 80112ce:	4603      	mov	r3, r0
 80112d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d4:	4a8b      	ldr	r2, [pc, #556]	; (8011504 <LoRaMacInitialization+0x384>)
 80112d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80112da:	2311      	movs	r3, #17
 80112dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112e0:	4b88      	ldr	r3, [pc, #544]	; (8011504 <LoRaMacInitialization+0x384>)
 80112e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80112ea:	4611      	mov	r1, r2
 80112ec:	4618      	mov	r0, r3
 80112ee:	f003 fb5c 	bl	80149aa <RegionGetPhyParam>
 80112f2:	4603      	mov	r3, r0
 80112f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	4a82      	ldr	r2, [pc, #520]	; (8011504 <LoRaMacInitialization+0x384>)
 80112fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80112fe:	2312      	movs	r3, #18
 8011300:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011304:	4b7f      	ldr	r3, [pc, #508]	; (8011504 <LoRaMacInitialization+0x384>)
 8011306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801130a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801130e:	4611      	mov	r1, r2
 8011310:	4618      	mov	r0, r3
 8011312:	f003 fb4a 	bl	80149aa <RegionGetPhyParam>
 8011316:	4603      	mov	r3, r0
 8011318:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131c:	4a79      	ldr	r2, [pc, #484]	; (8011504 <LoRaMacInitialization+0x384>)
 801131e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011322:	2313      	movs	r3, #19
 8011324:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011328:	4b76      	ldr	r3, [pc, #472]	; (8011504 <LoRaMacInitialization+0x384>)
 801132a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801132e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011332:	4611      	mov	r1, r2
 8011334:	4618      	mov	r0, r3
 8011336:	f003 fb38 	bl	80149aa <RegionGetPhyParam>
 801133a:	4603      	mov	r3, r0
 801133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011340:	4a70      	ldr	r2, [pc, #448]	; (8011504 <LoRaMacInitialization+0x384>)
 8011342:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011346:	2314      	movs	r3, #20
 8011348:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801134c:	4b6d      	ldr	r3, [pc, #436]	; (8011504 <LoRaMacInitialization+0x384>)
 801134e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011352:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011356:	4611      	mov	r1, r2
 8011358:	4618      	mov	r0, r3
 801135a:	f003 fb26 	bl	80149aa <RegionGetPhyParam>
 801135e:	4603      	mov	r3, r0
 8011360:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011364:	4a67      	ldr	r2, [pc, #412]	; (8011504 <LoRaMacInitialization+0x384>)
 8011366:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801136a:	2316      	movs	r3, #22
 801136c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011370:	4b64      	ldr	r3, [pc, #400]	; (8011504 <LoRaMacInitialization+0x384>)
 8011372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011376:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801137a:	4611      	mov	r1, r2
 801137c:	4618      	mov	r0, r3
 801137e:	f003 fb14 	bl	80149aa <RegionGetPhyParam>
 8011382:	4603      	mov	r3, r0
 8011384:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011388:	b2da      	uxtb	r2, r3
 801138a:	4b5e      	ldr	r3, [pc, #376]	; (8011504 <LoRaMacInitialization+0x384>)
 801138c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011390:	2317      	movs	r3, #23
 8011392:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011396:	4b5b      	ldr	r3, [pc, #364]	; (8011504 <LoRaMacInitialization+0x384>)
 8011398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801139c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80113a0:	4611      	mov	r1, r2
 80113a2:	4618      	mov	r0, r3
 80113a4:	f003 fb01 	bl	80149aa <RegionGetPhyParam>
 80113a8:	4603      	mov	r3, r0
 80113aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80113ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ae:	4a55      	ldr	r2, [pc, #340]	; (8011504 <LoRaMacInitialization+0x384>)
 80113b0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80113b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b6:	4a53      	ldr	r2, [pc, #332]	; (8011504 <LoRaMacInitialization+0x384>)
 80113b8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80113bc:	2318      	movs	r3, #24
 80113be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113c2:	4b50      	ldr	r3, [pc, #320]	; (8011504 <LoRaMacInitialization+0x384>)
 80113c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80113cc:	4611      	mov	r1, r2
 80113ce:	4618      	mov	r0, r3
 80113d0:	f003 faeb 	bl	80149aa <RegionGetPhyParam>
 80113d4:	4603      	mov	r3, r0
 80113d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80113d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113da:	b2da      	uxtb	r2, r3
 80113dc:	4b49      	ldr	r3, [pc, #292]	; (8011504 <LoRaMacInitialization+0x384>)
 80113de:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80113e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	4b47      	ldr	r3, [pc, #284]	; (8011504 <LoRaMacInitialization+0x384>)
 80113e8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80113ec:	231d      	movs	r3, #29
 80113ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113f2:	4b44      	ldr	r3, [pc, #272]	; (8011504 <LoRaMacInitialization+0x384>)
 80113f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113f8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80113fc:	4611      	mov	r1, r2
 80113fe:	4618      	mov	r0, r3
 8011400:	f003 fad3 	bl	80149aa <RegionGetPhyParam>
 8011404:	4603      	mov	r3, r0
 8011406:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140a:	b2da      	uxtb	r2, r3
 801140c:	4b3d      	ldr	r3, [pc, #244]	; (8011504 <LoRaMacInitialization+0x384>)
 801140e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011412:	231e      	movs	r3, #30
 8011414:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011418:	4b3a      	ldr	r3, [pc, #232]	; (8011504 <LoRaMacInitialization+0x384>)
 801141a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801141e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011422:	4611      	mov	r1, r2
 8011424:	4618      	mov	r0, r3
 8011426:	f003 fac0 	bl	80149aa <RegionGetPhyParam>
 801142a:	4603      	mov	r3, r0
 801142c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011430:	b2da      	uxtb	r2, r3
 8011432:	4b34      	ldr	r3, [pc, #208]	; (8011504 <LoRaMacInitialization+0x384>)
 8011434:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011438:	231f      	movs	r3, #31
 801143a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801143e:	4b31      	ldr	r3, [pc, #196]	; (8011504 <LoRaMacInitialization+0x384>)
 8011440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011444:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011448:	4611      	mov	r1, r2
 801144a:	4618      	mov	r0, r3
 801144c:	f003 faad 	bl	80149aa <RegionGetPhyParam>
 8011450:	4603      	mov	r3, r0
 8011452:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011456:	4a2b      	ldr	r2, [pc, #172]	; (8011504 <LoRaMacInitialization+0x384>)
 8011458:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801145c:	2320      	movs	r3, #32
 801145e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011462:	4b28      	ldr	r3, [pc, #160]	; (8011504 <LoRaMacInitialization+0x384>)
 8011464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011468:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801146c:	4611      	mov	r1, r2
 801146e:	4618      	mov	r0, r3
 8011470:	f003 fa9b 	bl	80149aa <RegionGetPhyParam>
 8011474:	4603      	mov	r3, r0
 8011476:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147a:	4a22      	ldr	r2, [pc, #136]	; (8011504 <LoRaMacInitialization+0x384>)
 801147c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011480:	230b      	movs	r3, #11
 8011482:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011486:	4b1f      	ldr	r3, [pc, #124]	; (8011504 <LoRaMacInitialization+0x384>)
 8011488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801148c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011490:	4611      	mov	r1, r2
 8011492:	4618      	mov	r0, r3
 8011494:	f003 fa89 	bl	80149aa <RegionGetPhyParam>
 8011498:	4603      	mov	r3, r0
 801149a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 801149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149e:	b29a      	uxth	r2, r3
 80114a0:	4b19      	ldr	r3, [pc, #100]	; (8011508 <LoRaMacInitialization+0x388>)
 80114a2:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80114a6:	230c      	movs	r3, #12
 80114a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114ac:	4b15      	ldr	r3, [pc, #84]	; (8011504 <LoRaMacInitialization+0x384>)
 80114ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80114b6:	4611      	mov	r1, r2
 80114b8:	4618      	mov	r0, r3
 80114ba:	f003 fa76 	bl	80149aa <RegionGetPhyParam>
 80114be:	4603      	mov	r3, r0
 80114c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 80114c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	4b10      	ldr	r3, [pc, #64]	; (8011508 <LoRaMacInitialization+0x388>)
 80114c8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80114cc:	4b0d      	ldr	r3, [pc, #52]	; (8011504 <LoRaMacInitialization+0x384>)
 80114ce:	2201      	movs	r2, #1
 80114d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80114d4:	4b0b      	ldr	r3, [pc, #44]	; (8011504 <LoRaMacInitialization+0x384>)
 80114d6:	220a      	movs	r2, #10
 80114d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80114dc:	4b09      	ldr	r3, [pc, #36]	; (8011504 <LoRaMacInitialization+0x384>)
 80114de:	2206      	movs	r2, #6
 80114e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80114e4:	4b07      	ldr	r3, [pc, #28]	; (8011504 <LoRaMacInitialization+0x384>)
 80114e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114ea:	4a06      	ldr	r2, [pc, #24]	; (8011504 <LoRaMacInitialization+0x384>)
 80114ec:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80114ee:	4b05      	ldr	r3, [pc, #20]	; (8011504 <LoRaMacInitialization+0x384>)
 80114f0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80114f4:	4b03      	ldr	r3, [pc, #12]	; (8011504 <LoRaMacInitialization+0x384>)
 80114f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80114fa:	4b02      	ldr	r3, [pc, #8]	; (8011504 <LoRaMacInitialization+0x384>)
 80114fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011500:	e00c      	b.n	801151c <LoRaMacInitialization+0x39c>
 8011502:	bf00      	nop
 8011504:	20000c38 	.word	0x20000c38
 8011508:	20000718 	.word	0x20000718
 801150c:	01000400 	.word	0x01000400
 8011510:	20000e1c 	.word	0x20000e1c
 8011514:	20000e30 	.word	0x20000e30
 8011518:	20001750 	.word	0x20001750
 801151c:	4a60      	ldr	r2, [pc, #384]	; (80116a0 <LoRaMacInitialization+0x520>)
 801151e:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011520:	4b5f      	ldr	r3, [pc, #380]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011526:	4a5e      	ldr	r2, [pc, #376]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011528:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801152a:	4b5d      	ldr	r3, [pc, #372]	; (80116a0 <LoRaMacInitialization+0x520>)
 801152c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011530:	4a5b      	ldr	r2, [pc, #364]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011532:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011534:	4b5a      	ldr	r3, [pc, #360]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801153a:	4a59      	ldr	r2, [pc, #356]	; (80116a0 <LoRaMacInitialization+0x520>)
 801153c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801153e:	4b58      	ldr	r3, [pc, #352]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011540:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011544:	4a56      	ldr	r2, [pc, #344]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011546:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011548:	4b55      	ldr	r3, [pc, #340]	; (80116a0 <LoRaMacInitialization+0x520>)
 801154a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 801154e:	4b54      	ldr	r3, [pc, #336]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011550:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011554:	4b52      	ldr	r3, [pc, #328]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011556:	2201      	movs	r2, #1
 8011558:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801155c:	4a51      	ldr	r2, [pc, #324]	; (80116a4 <LoRaMacInitialization+0x524>)
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8011564:	f7ff f8d4 	bl	8010710 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011568:	4b4d      	ldr	r3, [pc, #308]	; (80116a0 <LoRaMacInitialization+0x520>)
 801156a:	2201      	movs	r2, #1
 801156c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8011570:	4a4c      	ldr	r2, [pc, #304]	; (80116a4 <LoRaMacInitialization+0x524>)
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011578:	4b4a      	ldr	r3, [pc, #296]	; (80116a4 <LoRaMacInitialization+0x524>)
 801157a:	2200      	movs	r2, #0
 801157c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8011580:	4b48      	ldr	r3, [pc, #288]	; (80116a4 <LoRaMacInitialization+0x524>)
 8011582:	2201      	movs	r2, #1
 8011584:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011588:	4b45      	ldr	r3, [pc, #276]	; (80116a0 <LoRaMacInitialization+0x520>)
 801158a:	2200      	movs	r2, #0
 801158c:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801158e:	4b44      	ldr	r3, [pc, #272]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011590:	2200      	movs	r2, #0
 8011592:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011594:	2300      	movs	r3, #0
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	4b43      	ldr	r3, [pc, #268]	; (80116a8 <LoRaMacInitialization+0x528>)
 801159a:	2200      	movs	r2, #0
 801159c:	f04f 31ff 	mov.w	r1, #4294967295
 80115a0:	4842      	ldr	r0, [pc, #264]	; (80116ac <LoRaMacInitialization+0x52c>)
 80115a2:	f00b f8a7 	bl	801c6f4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80115a6:	2300      	movs	r3, #0
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	4b41      	ldr	r3, [pc, #260]	; (80116b0 <LoRaMacInitialization+0x530>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	f04f 31ff 	mov.w	r1, #4294967295
 80115b2:	4840      	ldr	r0, [pc, #256]	; (80116b4 <LoRaMacInitialization+0x534>)
 80115b4:	f00b f89e 	bl	801c6f4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80115b8:	2300      	movs	r3, #0
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	4b3e      	ldr	r3, [pc, #248]	; (80116b8 <LoRaMacInitialization+0x538>)
 80115be:	2200      	movs	r2, #0
 80115c0:	f04f 31ff 	mov.w	r1, #4294967295
 80115c4:	483d      	ldr	r0, [pc, #244]	; (80116bc <LoRaMacInitialization+0x53c>)
 80115c6:	f00b f895 	bl	801c6f4 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80115ca:	2300      	movs	r3, #0
 80115cc:	9300      	str	r3, [sp, #0]
 80115ce:	4b3c      	ldr	r3, [pc, #240]	; (80116c0 <LoRaMacInitialization+0x540>)
 80115d0:	2200      	movs	r2, #0
 80115d2:	f04f 31ff 	mov.w	r1, #4294967295
 80115d6:	483b      	ldr	r0, [pc, #236]	; (80116c4 <LoRaMacInitialization+0x544>)
 80115d8:	f00b f88c 	bl	801c6f4 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80115dc:	4c30      	ldr	r4, [pc, #192]	; (80116a0 <LoRaMacInitialization+0x520>)
 80115de:	463b      	mov	r3, r7
 80115e0:	4618      	mov	r0, r3
 80115e2:	f00a fbf7 	bl	801bdd4 <SysTimeGetMcuTime>
 80115e6:	f504 7388 	add.w	r3, r4, #272	; 0x110
 80115ea:	463a      	mov	r2, r7
 80115ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115f0:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80115f4:	4b34      	ldr	r3, [pc, #208]	; (80116c8 <LoRaMacInitialization+0x548>)
 80115f6:	2200      	movs	r2, #0
 80115f8:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80115fa:	4b2a      	ldr	r3, [pc, #168]	; (80116a4 <LoRaMacInitialization+0x524>)
 80115fc:	4a33      	ldr	r2, [pc, #204]	; (80116cc <LoRaMacInitialization+0x54c>)
 80115fe:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011602:	4b28      	ldr	r3, [pc, #160]	; (80116a4 <LoRaMacInitialization+0x524>)
 8011604:	4a32      	ldr	r2, [pc, #200]	; (80116d0 <LoRaMacInitialization+0x550>)
 8011606:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801160a:	4b26      	ldr	r3, [pc, #152]	; (80116a4 <LoRaMacInitialization+0x524>)
 801160c:	4a31      	ldr	r2, [pc, #196]	; (80116d4 <LoRaMacInitialization+0x554>)
 801160e:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011612:	4b24      	ldr	r3, [pc, #144]	; (80116a4 <LoRaMacInitialization+0x524>)
 8011614:	4a30      	ldr	r2, [pc, #192]	; (80116d8 <LoRaMacInitialization+0x558>)
 8011616:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801161a:	4b22      	ldr	r3, [pc, #136]	; (80116a4 <LoRaMacInitialization+0x524>)
 801161c:	4a2f      	ldr	r2, [pc, #188]	; (80116dc <LoRaMacInitialization+0x55c>)
 801161e:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011622:	4b2f      	ldr	r3, [pc, #188]	; (80116e0 <LoRaMacInitialization+0x560>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	482f      	ldr	r0, [pc, #188]	; (80116e4 <LoRaMacInitialization+0x564>)
 8011628:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	689b      	ldr	r3, [r3, #8]
 801162e:	4619      	mov	r1, r3
 8011630:	482d      	ldr	r0, [pc, #180]	; (80116e8 <LoRaMacInitialization+0x568>)
 8011632:	f7fa fb87 	bl	800bd44 <SecureElementInit>
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d001      	beq.n	8011640 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801163c:	2311      	movs	r3, #17
 801163e:	e02b      	b.n	8011698 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011640:	4817      	ldr	r0, [pc, #92]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011642:	f002 fafb 	bl	8013c3c <LoRaMacCryptoInit>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801164c:	2311      	movs	r3, #17
 801164e:	e023      	b.n	8011698 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011650:	f001 fc1a 	bl	8012e88 <LoRaMacCommandsInit>
 8011654:	4603      	mov	r3, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801165a:	2313      	movs	r3, #19
 801165c:	e01c      	b.n	8011698 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801165e:	4823      	ldr	r0, [pc, #140]	; (80116ec <LoRaMacInitialization+0x56c>)
 8011660:	f002 fb8c 	bl	8013d7c <LoRaMacCryptoSetMulticastReference>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	d001      	beq.n	801166e <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801166a:	2311      	movs	r3, #17
 801166c:	e014      	b.n	8011698 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801166e:	4b1c      	ldr	r3, [pc, #112]	; (80116e0 <LoRaMacInitialization+0x560>)
 8011670:	695b      	ldr	r3, [r3, #20]
 8011672:	4798      	blx	r3
 8011674:	4603      	mov	r3, r0
 8011676:	4618      	mov	r0, r3
 8011678:	f006 ff70 	bl	801855c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801167c:	4b18      	ldr	r3, [pc, #96]	; (80116e0 <LoRaMacInitialization+0x560>)
 801167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011680:	4a07      	ldr	r2, [pc, #28]	; (80116a0 <LoRaMacInitialization+0x520>)
 8011682:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011686:	4610      	mov	r0, r2
 8011688:	4798      	blx	r3
    Radio.Sleep( );
 801168a:	4b15      	ldr	r3, [pc, #84]	; (80116e0 <LoRaMacInitialization+0x560>)
 801168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801168e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011690:	2001      	movs	r0, #1
 8011692:	f7fd fad3 	bl	800ec3c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011696:	2300      	movs	r3, #0
}
 8011698:	4618      	mov	r0, r3
 801169a:	373c      	adds	r7, #60	; 0x3c
 801169c:	46bd      	mov	sp, r7
 801169e:	bd90      	pop	{r4, r7, pc}
 80116a0:	20000c38 	.word	0x20000c38
 80116a4:	20000718 	.word	0x20000718
 80116a8:	0800f1f1 	.word	0x0800f1f1
 80116ac:	20000a80 	.word	0x20000a80
 80116b0:	0800f281 	.word	0x0800f281
 80116b4:	20000a98 	.word	0x20000a98
 80116b8:	0800f2f9 	.word	0x0800f2f9
 80116bc:	20000ab0 	.word	0x20000ab0
 80116c0:	0800f379 	.word	0x0800f379
 80116c4:	20000b1c 	.word	0x20000b1c
 80116c8:	200017e0 	.word	0x200017e0
 80116cc:	0800dcf1 	.word	0x0800dcf1
 80116d0:	0800dd69 	.word	0x0800dd69
 80116d4:	0800de49 	.word	0x0800de49
 80116d8:	0800ddfd 	.word	0x0800ddfd
 80116dc:	0800de85 	.word	0x0800de85
 80116e0:	0801e0d4 	.word	0x0801e0d4
 80116e4:	20000a64 	.word	0x20000a64
 80116e8:	20000d5c 	.word	0x20000d5c
 80116ec:	20000d10 	.word	0x20000d10

080116f0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80116f0:	b480      	push	{r7}
 80116f2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80116f4:	4b04      	ldr	r3, [pc, #16]	; (8011708 <LoRaMacStart+0x18>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80116fc:	2300      	movs	r3, #0
}
 80116fe:	4618      	mov	r0, r3
 8011700:	46bd      	mov	sp, r7
 8011702:	bc80      	pop	{r7}
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	20000718 	.word	0x20000718

0801170c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801170c:	b580      	push	{r7, lr}
 801170e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011710:	f7fd fa74 	bl	800ebfc <LoRaMacIsBusy>
 8011714:	4603      	mov	r3, r0
 8011716:	f083 0301 	eor.w	r3, r3, #1
 801171a:	b2db      	uxtb	r3, r3
 801171c:	2b00      	cmp	r3, #0
 801171e:	d005      	beq.n	801172c <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8011720:	4b07      	ldr	r3, [pc, #28]	; (8011740 <LoRaMacStop+0x34>)
 8011722:	2201      	movs	r2, #1
 8011724:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011728:	2300      	movs	r3, #0
 801172a:	e007      	b.n	801173c <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801172c:	4b04      	ldr	r3, [pc, #16]	; (8011740 <LoRaMacStop+0x34>)
 801172e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011732:	2b01      	cmp	r3, #1
 8011734:	d101      	bne.n	801173a <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8011736:	2300      	movs	r3, #0
 8011738:	e000      	b.n	801173c <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 801173a:	2301      	movs	r3, #1
}
 801173c:	4618      	mov	r0, r3
 801173e:	bd80      	pop	{r7, pc}
 8011740:	20000718 	.word	0x20000718

08011744 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011744:	b580      	push	{r7, lr}
 8011746:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011748:	4812      	ldr	r0, [pc, #72]	; (8011794 <LoRaMacHalt+0x50>)
 801174a:	f00b f877 	bl	801c83c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801174e:	4812      	ldr	r0, [pc, #72]	; (8011798 <LoRaMacHalt+0x54>)
 8011750:	f00b f874 	bl	801c83c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011754:	4811      	ldr	r0, [pc, #68]	; (801179c <LoRaMacHalt+0x58>)
 8011756:	f00b f871 	bl	801c83c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801175a:	4811      	ldr	r0, [pc, #68]	; (80117a0 <LoRaMacHalt+0x5c>)
 801175c:	f00b f86e 	bl	801c83c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011760:	f001 fa04 	bl	8012b6c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011764:	4b0f      	ldr	r3, [pc, #60]	; (80117a4 <LoRaMacHalt+0x60>)
 8011766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011768:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801176a:	4b0f      	ldr	r3, [pc, #60]	; (80117a8 <LoRaMacHalt+0x64>)
 801176c:	2200      	movs	r2, #0
 801176e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8011772:	480e      	ldr	r0, [pc, #56]	; (80117ac <LoRaMacHalt+0x68>)
 8011774:	f7fd fc18 	bl	800efa8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011778:	f240 528c 	movw	r2, #1420	; 0x58c
 801177c:	490b      	ldr	r1, [pc, #44]	; (80117ac <LoRaMacHalt+0x68>)
 801177e:	480c      	ldr	r0, [pc, #48]	; (80117b0 <LoRaMacHalt+0x6c>)
 8011780:	f006 ff11 	bl	80185a6 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011784:	4b08      	ldr	r3, [pc, #32]	; (80117a8 <LoRaMacHalt+0x64>)
 8011786:	2201      	movs	r2, #1
 8011788:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801178c:	2300      	movs	r3, #0
}
 801178e:	4618      	mov	r0, r3
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	20000a80 	.word	0x20000a80
 8011798:	20000a98 	.word	0x20000a98
 801179c:	20000ab0 	.word	0x20000ab0
 80117a0:	20000b1c 	.word	0x20000b1c
 80117a4:	0801e0d4 	.word	0x0801e0d4
 80117a8:	20000718 	.word	0x20000718
 80117ac:	20000c38 	.word	0x20000c38
 80117b0:	200011c4 	.word	0x200011c4

080117b4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80117b4:	b590      	push	{r4, r7, lr}
 80117b6:	b08d      	sub	sp, #52	; 0x34
 80117b8:	af02      	add	r7, sp, #8
 80117ba:	4603      	mov	r3, r0
 80117bc:	6039      	str	r1, [r7, #0]
 80117be:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80117c0:	4b42      	ldr	r3, [pc, #264]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 80117c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117c4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80117c6:	4b41      	ldr	r3, [pc, #260]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 80117c8:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 80117cc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80117ce:	4b3f      	ldr	r3, [pc, #252]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 80117d0:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 80117d4:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80117d6:	4b3e      	ldr	r3, [pc, #248]	; (80118d0 <LoRaMacQueryTxPossible+0x11c>)
 80117d8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80117dc:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d101      	bne.n	80117ec <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80117e8:	2303      	movs	r3, #3
 80117ea:	e06b      	b.n	80118c4 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80117ec:	2300      	movs	r3, #0
 80117ee:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80117f0:	4b36      	ldr	r3, [pc, #216]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 80117f2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80117f6:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80117f8:	4b34      	ldr	r3, [pc, #208]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 80117fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117fc:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80117fe:	4b34      	ldr	r3, [pc, #208]	; (80118d0 <LoRaMacQueryTxPossible+0x11c>)
 8011800:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8011804:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011806:	4b32      	ldr	r3, [pc, #200]	; (80118d0 <LoRaMacQueryTxPossible+0x11c>)
 8011808:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 801180c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801180e:	4b2f      	ldr	r3, [pc, #188]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 8011810:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011814:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011818:	4b2c      	ldr	r3, [pc, #176]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 801181a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801181e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011822:	4b2b      	ldr	r3, [pc, #172]	; (80118d0 <LoRaMacQueryTxPossible+0x11c>)
 8011824:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801182c:	4b27      	ldr	r3, [pc, #156]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 801182e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011836:	4b25      	ldr	r3, [pc, #148]	; (80118cc <LoRaMacQueryTxPossible+0x118>)
 8011838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801183c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011840:	f107 040d 	add.w	r4, r7, #13
 8011844:	f107 020e 	add.w	r2, r7, #14
 8011848:	f107 010f 	add.w	r1, r7, #15
 801184c:	f107 0014 	add.w	r0, r7, #20
 8011850:	f107 0310 	add.w	r3, r7, #16
 8011854:	9300      	str	r3, [sp, #0]
 8011856:	4623      	mov	r3, r4
 8011858:	f001 f852 	bl	8012900 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011860:	4618      	mov	r0, r3
 8011862:	f7fd fec5 	bl	800f5f0 <GetMaxAppPayloadWithoutFOptsLength>
 8011866:	4603      	mov	r3, r0
 8011868:	461a      	mov	r2, r3
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801186e:	f107 0308 	add.w	r3, r7, #8
 8011872:	4618      	mov	r0, r3
 8011874:	f001 fbd6 	bl	8013024 <LoRaMacCommandsGetSizeSerializedCmds>
 8011878:	4603      	mov	r3, r0
 801187a:	2b00      	cmp	r3, #0
 801187c:	d001      	beq.n	8011882 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801187e:	2313      	movs	r3, #19
 8011880:	e020      	b.n	80118c4 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	2b0f      	cmp	r3, #15
 8011886:	d819      	bhi.n	80118bc <LoRaMacQueryTxPossible+0x108>
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	785b      	ldrb	r3, [r3, #1]
 801188c:	461a      	mov	r2, r3
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	429a      	cmp	r2, r3
 8011892:	d313      	bcc.n	80118bc <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	785a      	ldrb	r2, [r3, #1]
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	b2db      	uxtb	r3, r3
 801189c:	1ad3      	subs	r3, r2, r3
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	785b      	ldrb	r3, [r3, #1]
 80118a8:	4619      	mov	r1, r3
 80118aa:	79fa      	ldrb	r2, [r7, #7]
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	4413      	add	r3, r2
 80118b0:	4299      	cmp	r1, r3
 80118b2:	d301      	bcc.n	80118b8 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80118b4:	2300      	movs	r3, #0
 80118b6:	e005      	b.n	80118c4 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80118b8:	2308      	movs	r3, #8
 80118ba:	e003      	b.n	80118c4 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2200      	movs	r2, #0
 80118c0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80118c2:	2308      	movs	r3, #8
    }
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	372c      	adds	r7, #44	; 0x2c
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd90      	pop	{r4, r7, pc}
 80118cc:	20000c38 	.word	0x20000c38
 80118d0:	20000718 	.word	0x20000718

080118d4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80118d4:	b590      	push	{r4, r7, lr}
 80118d6:	b087      	sub	sp, #28
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80118dc:	2300      	movs	r3, #0
 80118de:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d101      	bne.n	80118ea <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118e6:	2303      	movs	r3, #3
 80118e8:	e191      	b.n	8011c0e <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	2b39      	cmp	r3, #57	; 0x39
 80118f0:	f200 8186 	bhi.w	8011c00 <LoRaMacMibGetRequestConfirm+0x32c>
 80118f4:	a201      	add	r2, pc, #4	; (adr r2, 80118fc <LoRaMacMibGetRequestConfirm+0x28>)
 80118f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118fa:	bf00      	nop
 80118fc:	080119e5 	.word	0x080119e5
 8011900:	080119f1 	.word	0x080119f1
 8011904:	080119fd 	.word	0x080119fd
 8011908:	08011a09 	.word	0x08011a09
 801190c:	08011a15 	.word	0x08011a15
 8011910:	08011a21 	.word	0x08011a21
 8011914:	08011a2d 	.word	0x08011a2d
 8011918:	08011c01 	.word	0x08011c01
 801191c:	08011c01 	.word	0x08011c01
 8011920:	08011c01 	.word	0x08011c01
 8011924:	08011c01 	.word	0x08011c01
 8011928:	08011c01 	.word	0x08011c01
 801192c:	08011c01 	.word	0x08011c01
 8011930:	08011c01 	.word	0x08011c01
 8011934:	08011c01 	.word	0x08011c01
 8011938:	08011a39 	.word	0x08011a39
 801193c:	08011a45 	.word	0x08011a45
 8011940:	08011a51 	.word	0x08011a51
 8011944:	08011a73 	.word	0x08011a73
 8011948:	08011a85 	.word	0x08011a85
 801194c:	08011a97 	.word	0x08011a97
 8011950:	08011aa9 	.word	0x08011aa9
 8011954:	08011add 	.word	0x08011add
 8011958:	08011abb 	.word	0x08011abb
 801195c:	08011aff 	.word	0x08011aff
 8011960:	08011b0b 	.word	0x08011b0b
 8011964:	08011b15 	.word	0x08011b15
 8011968:	08011b1f 	.word	0x08011b1f
 801196c:	08011b29 	.word	0x08011b29
 8011970:	08011b33 	.word	0x08011b33
 8011974:	08011b3d 	.word	0x08011b3d
 8011978:	08011b69 	.word	0x08011b69
 801197c:	08011b75 	.word	0x08011b75
 8011980:	08011b8d 	.word	0x08011b8d
 8011984:	08011b81 	.word	0x08011b81
 8011988:	08011b99 	.word	0x08011b99
 801198c:	08011ba3 	.word	0x08011ba3
 8011990:	08011baf 	.word	0x08011baf
 8011994:	08011bc9 	.word	0x08011bc9
 8011998:	08011bb9 	.word	0x08011bb9
 801199c:	08011bc1 	.word	0x08011bc1
 80119a0:	08011c01 	.word	0x08011c01
 80119a4:	08011bd5 	.word	0x08011bd5
 80119a8:	08011c01 	.word	0x08011c01
 80119ac:	08011c01 	.word	0x08011c01
 80119b0:	08011c01 	.word	0x08011c01
 80119b4:	08011c01 	.word	0x08011c01
 80119b8:	08011c01 	.word	0x08011c01
 80119bc:	08011c01 	.word	0x08011c01
 80119c0:	08011c01 	.word	0x08011c01
 80119c4:	08011c01 	.word	0x08011c01
 80119c8:	08011c01 	.word	0x08011c01
 80119cc:	08011c01 	.word	0x08011c01
 80119d0:	08011c01 	.word	0x08011c01
 80119d4:	08011c01 	.word	0x08011c01
 80119d8:	08011c01 	.word	0x08011c01
 80119dc:	08011be9 	.word	0x08011be9
 80119e0:	08011bf5 	.word	0x08011bf5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80119e4:	4b8c      	ldr	r3, [pc, #560]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 80119e6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	711a      	strb	r2, [r3, #4]
            break;
 80119ee:	e10d      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80119f0:	4b89      	ldr	r3, [pc, #548]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 80119f2:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	711a      	strb	r2, [r3, #4]
            break;
 80119fa:	e107      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80119fc:	f7fa fc80 	bl	800c300 <SecureElementGetDevEui>
 8011a00:	4602      	mov	r2, r0
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	605a      	str	r2, [r3, #4]
            break;
 8011a06:	e101      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011a08:	f7fa fc9c 	bl	800c344 <SecureElementGetJoinEui>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	605a      	str	r2, [r3, #4]
            break;
 8011a12:	e0fb      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011a14:	4b80      	ldr	r3, [pc, #512]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a16:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	711a      	strb	r2, [r3, #4]
            break;
 8011a1e:	e0f5      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011a20:	4b7d      	ldr	r3, [pc, #500]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a22:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	605a      	str	r2, [r3, #4]
            break;
 8011a2a:	e0ef      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011a2c:	4b7a      	ldr	r3, [pc, #488]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a2e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	605a      	str	r2, [r3, #4]
            break;
 8011a36:	e0e9      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011a38:	4b77      	ldr	r3, [pc, #476]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a3a:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	711a      	strb	r2, [r3, #4]
            break;
 8011a42:	e0e3      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011a44:	4b74      	ldr	r3, [pc, #464]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a46:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	711a      	strb	r2, [r3, #4]
            break;
 8011a4e:	e0dd      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011a50:	231c      	movs	r3, #28
 8011a52:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a54:	4b70      	ldr	r3, [pc, #448]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a5a:	f107 0210 	add.w	r2, r7, #16
 8011a5e:	4611      	mov	r1, r2
 8011a60:	4618      	mov	r0, r3
 8011a62:	f002 ffa2 	bl	80149aa <RegionGetPhyParam>
 8011a66:	4603      	mov	r3, r0
 8011a68:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	605a      	str	r2, [r3, #4]
            break;
 8011a70:	e0cc      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	4a68      	ldr	r2, [pc, #416]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a76:	3304      	adds	r3, #4
 8011a78:	3264      	adds	r2, #100	; 0x64
 8011a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a7e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011a82:	e0c3      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	4a64      	ldr	r2, [pc, #400]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a88:	3304      	adds	r3, #4
 8011a8a:	32a8      	adds	r2, #168	; 0xa8
 8011a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a90:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011a94:	e0ba      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	4a5f      	ldr	r2, [pc, #380]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	326c      	adds	r2, #108	; 0x6c
 8011a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011aa2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011aa6:	e0b1      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a5b      	ldr	r2, [pc, #364]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011aac:	3304      	adds	r3, #4
 8011aae:	32b0      	adds	r2, #176	; 0xb0
 8011ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ab4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011ab8:	e0a8      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011aba:	231a      	movs	r3, #26
 8011abc:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011abe:	4b56      	ldr	r3, [pc, #344]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ac4:	f107 0210 	add.w	r2, r7, #16
 8011ac8:	4611      	mov	r1, r2
 8011aca:	4618      	mov	r0, r3
 8011acc:	f002 ff6d 	bl	80149aa <RegionGetPhyParam>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011ad4:	68fa      	ldr	r2, [r7, #12]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	605a      	str	r2, [r3, #4]
            break;
 8011ada:	e097      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011adc:	2319      	movs	r3, #25
 8011ade:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ae0:	4b4d      	ldr	r3, [pc, #308]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ae6:	f107 0210 	add.w	r2, r7, #16
 8011aea:	4611      	mov	r1, r2
 8011aec:	4618      	mov	r0, r3
 8011aee:	f002 ff5c 	bl	80149aa <RegionGetPhyParam>
 8011af2:	4603      	mov	r3, r0
 8011af4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011af6:	68fa      	ldr	r2, [r7, #12]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	605a      	str	r2, [r3, #4]
            break;
 8011afc:	e086      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011afe:	4b46      	ldr	r3, [pc, #280]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b00:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	711a      	strb	r2, [r3, #4]
            break;
 8011b08:	e080      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011b0a:	4b43      	ldr	r3, [pc, #268]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	605a      	str	r2, [r3, #4]
            break;
 8011b12:	e07b      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011b14:	4b40      	ldr	r3, [pc, #256]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	605a      	str	r2, [r3, #4]
            break;
 8011b1c:	e076      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011b1e:	4b3e      	ldr	r3, [pc, #248]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	605a      	str	r2, [r3, #4]
            break;
 8011b26:	e071      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011b28:	4b3b      	ldr	r3, [pc, #236]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	605a      	str	r2, [r3, #4]
            break;
 8011b30:	e06c      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011b32:	4b39      	ldr	r3, [pc, #228]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	605a      	str	r2, [r3, #4]
            break;
 8011b3a:	e067      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011b3c:	2302      	movs	r3, #2
 8011b3e:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b40:	4b35      	ldr	r3, [pc, #212]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b42:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011b46:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b48:	4b33      	ldr	r3, [pc, #204]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b4e:	f107 0210 	add.w	r2, r7, #16
 8011b52:	4611      	mov	r1, r2
 8011b54:	4618      	mov	r0, r3
 8011b56:	f002 ff28 	bl	80149aa <RegionGetPhyParam>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	b25a      	sxtb	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	711a      	strb	r2, [r3, #4]
            break;
 8011b66:	e051      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011b68:	4b2b      	ldr	r3, [pc, #172]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b6a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	711a      	strb	r2, [r3, #4]
            break;
 8011b72:	e04b      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011b74:	4b28      	ldr	r3, [pc, #160]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b76:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	711a      	strb	r2, [r3, #4]
            break;
 8011b7e:	e045      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011b80:	4b25      	ldr	r3, [pc, #148]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b82:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	711a      	strb	r2, [r3, #4]
            break;
 8011b8a:	e03f      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011b8c:	4b22      	ldr	r3, [pc, #136]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b8e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	711a      	strb	r2, [r3, #4]
            break;
 8011b96:	e039      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011b98:	4b1f      	ldr	r3, [pc, #124]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	605a      	str	r2, [r3, #4]
            break;
 8011ba0:	e034      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011ba2:	4b1d      	ldr	r3, [pc, #116]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011ba4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	711a      	strb	r2, [r3, #4]
            break;
 8011bac:	e02e      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011bae:	4b1a      	ldr	r3, [pc, #104]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	605a      	str	r2, [r3, #4]
            break;
 8011bb6:	e029      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	4a17      	ldr	r2, [pc, #92]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bbc:	605a      	str	r2, [r3, #4]
            break;
 8011bbe:	e025      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	4a16      	ldr	r2, [pc, #88]	; (8011c1c <LoRaMacMibGetRequestConfirm+0x348>)
 8011bc4:	605a      	str	r2, [r3, #4]
            break;
 8011bc6:	e021      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011bc8:	4b13      	ldr	r3, [pc, #76]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	605a      	str	r2, [r3, #4]
            break;
 8011bd2:	e01b      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4a10      	ldr	r2, [pc, #64]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bd8:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8011bdc:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011bde:	687c      	ldr	r4, [r7, #4]
 8011be0:	f003 f8f4 	bl	8014dcc <RegionGetVersion>
 8011be4:	60a0      	str	r0, [r4, #8]
            break;
 8011be6:	e011      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011be8:	4b0b      	ldr	r3, [pc, #44]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	605a      	str	r2, [r3, #4]
            break;
 8011bf2:	e00b      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011bf4:	4b08      	ldr	r3, [pc, #32]	; (8011c18 <LoRaMacMibGetRequestConfirm+0x344>)
 8011bf6:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	711a      	strb	r2, [r3, #4]
            break;
 8011bfe:	e005      	b.n	8011c0c <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f000 ffca 	bl	8012b9a <LoRaMacClassBMibGetRequestConfirm>
 8011c06:	4603      	mov	r3, r0
 8011c08:	75fb      	strb	r3, [r7, #23]
            break;
 8011c0a:	bf00      	nop
        }
    }
    return status;
 8011c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	371c      	adds	r7, #28
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd90      	pop	{r4, r7, pc}
 8011c16:	bf00      	nop
 8011c18:	20000c38 	.word	0x20000c38
 8011c1c:	200011c4 	.word	0x200011c4

08011c20 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d101      	bne.n	8011c36 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c32:	2303      	movs	r3, #3
 8011c34:	e35c      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011c36:	4bb9      	ldr	r3, [pc, #740]	; (8011f1c <LoRaMacMibSetRequestConfirm+0x2fc>)
 8011c38:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c3c:	f003 0302 	and.w	r3, r3, #2
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011c44:	2301      	movs	r3, #1
 8011c46:	e353      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	2b39      	cmp	r3, #57	; 0x39
 8011c4e:	f200 8323 	bhi.w	8012298 <LoRaMacMibSetRequestConfirm+0x678>
 8011c52:	a201      	add	r2, pc, #4	; (adr r2, 8011c58 <LoRaMacMibSetRequestConfirm+0x38>)
 8011c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c58:	08011d41 	.word	0x08011d41
 8011c5c:	08011d51 	.word	0x08011d51
 8011c60:	08011d6b 	.word	0x08011d6b
 8011c64:	08011d83 	.word	0x08011d83
 8011c68:	08011d9b 	.word	0x08011d9b
 8011c6c:	08011da7 	.word	0x08011da7
 8011c70:	08011db3 	.word	0x08011db3
 8011c74:	08011dbf 	.word	0x08011dbf
 8011c78:	08011de5 	.word	0x08011de5
 8011c7c:	08011e0b 	.word	0x08011e0b
 8011c80:	08011e31 	.word	0x08011e31
 8011c84:	08011e57 	.word	0x08011e57
 8011c88:	08011e7d 	.word	0x08011e7d
 8011c8c:	08011ea3 	.word	0x08011ea3
 8011c90:	08011ec9 	.word	0x08011ec9
 8011c94:	08011eef 	.word	0x08011eef
 8011c98:	08011f0f 	.word	0x08011f0f
 8011c9c:	08012299 	.word	0x08012299
 8011ca0:	08011f29 	.word	0x08011f29
 8011ca4:	08011f99 	.word	0x08011f99
 8011ca8:	08011fd9 	.word	0x08011fd9
 8011cac:	0801203b 	.word	0x0801203b
 8011cb0:	080120ab 	.word	0x080120ab
 8011cb4:	0801207b 	.word	0x0801207b
 8011cb8:	080120db 	.word	0x080120db
 8011cbc:	080120fd 	.word	0x080120fd
 8011cc0:	08012107 	.word	0x08012107
 8011cc4:	08012111 	.word	0x08012111
 8011cc8:	0801211b 	.word	0x0801211b
 8011ccc:	08012125 	.word	0x08012125
 8011cd0:	08012299 	.word	0x08012299
 8011cd4:	0801212f 	.word	0x0801212f
 8011cd8:	08012161 	.word	0x08012161
 8011cdc:	080121cd 	.word	0x080121cd
 8011ce0:	0801219b 	.word	0x0801219b
 8011ce4:	08012209 	.word	0x08012209
 8011ce8:	0801221f 	.word	0x0801221f
 8011cec:	08012237 	.word	0x08012237
 8011cf0:	08012241 	.word	0x08012241
 8011cf4:	0801224d 	.word	0x0801224d
 8011cf8:	08012299 	.word	0x08012299
 8011cfc:	08012257 	.word	0x08012257
 8011d00:	08012299 	.word	0x08012299
 8011d04:	08012299 	.word	0x08012299
 8011d08:	08012299 	.word	0x08012299
 8011d0c:	08012299 	.word	0x08012299
 8011d10:	08012299 	.word	0x08012299
 8011d14:	08012299 	.word	0x08012299
 8011d18:	08012299 	.word	0x08012299
 8011d1c:	08012299 	.word	0x08012299
 8011d20:	08012299 	.word	0x08012299
 8011d24:	08012299 	.word	0x08012299
 8011d28:	08012299 	.word	0x08012299
 8011d2c:	08012299 	.word	0x08012299
 8011d30:	08012299 	.word	0x08012299
 8011d34:	08012299 	.word	0x08012299
 8011d38:	08012281 	.word	0x08012281
 8011d3c:	0801228d 	.word	0x0801228d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	791b      	ldrb	r3, [r3, #4]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7fd fb81 	bl	800f44c <SwitchClass>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	75fb      	strb	r3, [r7, #23]
            break;
 8011d4e:	e2c4      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	791b      	ldrb	r3, [r3, #4]
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	d005      	beq.n	8011d64 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	791a      	ldrb	r2, [r3, #4]
 8011d5c:	4b70      	ldr	r3, [pc, #448]	; (8011f20 <LoRaMacMibSetRequestConfirm+0x300>)
 8011d5e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d62:	e2ba      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d64:	2303      	movs	r3, #3
 8011d66:	75fb      	strb	r3, [r7, #23]
            break;
 8011d68:	e2b7      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fa faae 	bl	800c2d0 <SecureElementSetDevEui>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f000 8294 	beq.w	80122a4 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d80:	e290      	b.n	80122a4 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fa fac4 	bl	800c314 <SecureElementSetJoinEui>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 828a 	beq.w	80122a8 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d94:	2303      	movs	r3, #3
 8011d96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d98:	e286      	b.n	80122a8 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	791a      	ldrb	r2, [r3, #4]
 8011d9e:	4b60      	ldr	r3, [pc, #384]	; (8011f20 <LoRaMacMibSetRequestConfirm+0x300>)
 8011da0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8011da4:	e299      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	4a5d      	ldr	r2, [pc, #372]	; (8011f20 <LoRaMacMibSetRequestConfirm+0x300>)
 8011dac:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8011db0:	e293      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	4a5a      	ldr	r2, [pc, #360]	; (8011f20 <LoRaMacMibSetRequestConfirm+0x300>)
 8011db8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8011dbc:	e28d      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d00b      	beq.n	8011dde <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	4619      	mov	r1, r3
 8011dcc:	2000      	movs	r0, #0
 8011dce:	f001 fffd 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f000 8269 	beq.w	80122ac <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011dda:	2311      	movs	r3, #17
 8011ddc:	e288      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dde:	2303      	movs	r3, #3
 8011de0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011de2:	e263      	b.n	80122ac <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00b      	beq.n	8011e04 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	4619      	mov	r1, r3
 8011df2:	2001      	movs	r0, #1
 8011df4:	f001 ffea 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f000 8258 	beq.w	80122b0 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e00:	2311      	movs	r3, #17
 8011e02:	e275      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e04:	2303      	movs	r3, #3
 8011e06:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e08:	e252      	b.n	80122b0 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	685b      	ldr	r3, [r3, #4]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d00b      	beq.n	8011e2a <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	4619      	mov	r1, r3
 8011e18:	2002      	movs	r0, #2
 8011e1a:	f001 ffd7 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	f000 8247 	beq.w	80122b4 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e26:	2311      	movs	r3, #17
 8011e28:	e262      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e2a:	2303      	movs	r3, #3
 8011e2c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e2e:	e241      	b.n	80122b4 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00b      	beq.n	8011e50 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	2003      	movs	r0, #3
 8011e40:	f001 ffc4 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f000 8236 	beq.w	80122b8 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e4c:	2311      	movs	r3, #17
 8011e4e:	e24f      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e50:	2303      	movs	r3, #3
 8011e52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e54:	e230      	b.n	80122b8 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d00b      	beq.n	8011e76 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	4619      	mov	r1, r3
 8011e64:	207f      	movs	r0, #127	; 0x7f
 8011e66:	f001 ffb1 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f000 8225 	beq.w	80122bc <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e72:	2311      	movs	r3, #17
 8011e74:	e23c      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e76:	2303      	movs	r3, #3
 8011e78:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e7a:	e21f      	b.n	80122bc <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00b      	beq.n	8011e9c <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	4619      	mov	r1, r3
 8011e8a:	2080      	movs	r0, #128	; 0x80
 8011e8c:	f001 ff9e 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f000 8214 	beq.w	80122c0 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e98:	2311      	movs	r3, #17
 8011e9a:	e229      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ea0:	e20e      	b.n	80122c0 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00b      	beq.n	8011ec2 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	4619      	mov	r1, r3
 8011eb0:	2081      	movs	r0, #129	; 0x81
 8011eb2:	f001 ff8b 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	f000 8203 	beq.w	80122c4 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ebe:	2311      	movs	r3, #17
 8011ec0:	e216      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ec2:	2303      	movs	r3, #3
 8011ec4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ec6:	e1fd      	b.n	80122c4 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00b      	beq.n	8011ee8 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	2082      	movs	r0, #130	; 0x82
 8011ed8:	f001 ff78 	bl	8013dcc <LoRaMacCryptoSetKey>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	f000 81f2 	beq.w	80122c8 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ee4:	2311      	movs	r3, #17
 8011ee6:	e203      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ee8:	2303      	movs	r3, #3
 8011eea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011eec:	e1ec      	b.n	80122c8 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	791a      	ldrb	r2, [r3, #4]
 8011ef2:	4b0b      	ldr	r3, [pc, #44]	; (8011f20 <LoRaMacMibSetRequestConfirm+0x300>)
 8011ef4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011ef8:	4b0a      	ldr	r3, [pc, #40]	; (8011f24 <LoRaMacMibSetRequestConfirm+0x304>)
 8011efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011efc:	4a08      	ldr	r2, [pc, #32]	; (8011f20 <LoRaMacMibSetRequestConfirm+0x300>)
 8011efe:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011f02:	4610      	mov	r0, r2
 8011f04:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011f06:	4b07      	ldr	r3, [pc, #28]	; (8011f24 <LoRaMacMibSetRequestConfirm+0x304>)
 8011f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f0a:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011f0c:	e1e5      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	791a      	ldrb	r2, [r3, #4]
 8011f12:	4b03      	ldr	r3, [pc, #12]	; (8011f20 <LoRaMacMibSetRequestConfirm+0x300>)
 8011f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011f18:	e1df      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
 8011f1a:	bf00      	nop
 8011f1c:	20000718 	.word	0x20000718
 8011f20:	20000c38 	.word	0x20000c38
 8011f24:	0801e0d4 	.word	0x0801e0d4
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	7a1b      	ldrb	r3, [r3, #8]
 8011f2c:	b25b      	sxtb	r3, r3
 8011f2e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011f30:	4bb3      	ldr	r3, [pc, #716]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011f32:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011f36:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011f38:	4bb1      	ldr	r3, [pc, #708]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f3e:	f107 0108 	add.w	r1, r7, #8
 8011f42:	2207      	movs	r2, #7
 8011f44:	4618      	mov	r0, r3
 8011f46:	f002 fd80 	bl	8014a4a <RegionVerify>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	f083 0301 	eor.w	r3, r3, #1
 8011f50:	b2db      	uxtb	r3, r3
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d002      	beq.n	8011f5c <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f56:	2303      	movs	r3, #3
 8011f58:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011f5a:	e1be      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011f62:	4ba7      	ldr	r3, [pc, #668]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f68:	f107 0108 	add.w	r1, r7, #8
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f002 fd6b 	bl	8014a4a <RegionVerify>
 8011f74:	4603      	mov	r3, r0
 8011f76:	f083 0301 	eor.w	r3, r3, #1
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d002      	beq.n	8011f86 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011f80:	2303      	movs	r3, #3
 8011f82:	75fb      	strb	r3, [r7, #23]
            break;
 8011f84:	e1a9      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011f86:	4b9e      	ldr	r3, [pc, #632]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	3364      	adds	r3, #100	; 0x64
 8011f8c:	3204      	adds	r2, #4
 8011f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f92:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011f96:	e1a0      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	7a1b      	ldrb	r3, [r3, #8]
 8011f9c:	b25b      	sxtb	r3, r3
 8011f9e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011fa0:	4b97      	ldr	r3, [pc, #604]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011fa2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011fa6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011fa8:	4b95      	ldr	r3, [pc, #596]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fae:	f107 0108 	add.w	r1, r7, #8
 8011fb2:	2207      	movs	r2, #7
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f002 fd48 	bl	8014a4a <RegionVerify>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d008      	beq.n	8011fd2 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011fc0:	4b8f      	ldr	r3, [pc, #572]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	33a8      	adds	r3, #168	; 0xa8
 8011fc6:	3204      	adds	r2, #4
 8011fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fcc:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011fd0:	e183      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fd2:	2303      	movs	r3, #3
 8011fd4:	75fb      	strb	r3, [r7, #23]
            break;
 8011fd6:	e180      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	7a1b      	ldrb	r3, [r3, #8]
 8011fdc:	b25b      	sxtb	r3, r3
 8011fde:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011fe0:	4b87      	ldr	r3, [pc, #540]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011fe2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011fe6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011fe8:	4b85      	ldr	r3, [pc, #532]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fee:	f107 0108 	add.w	r1, r7, #8
 8011ff2:	2207      	movs	r2, #7
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f002 fd28 	bl	8014a4a <RegionVerify>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d019      	beq.n	8012034 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012000:	4b7f      	ldr	r3, [pc, #508]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	336c      	adds	r3, #108	; 0x6c
 8012006:	3204      	adds	r2, #4
 8012008:	e892 0003 	ldmia.w	r2, {r0, r1}
 801200c:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012010:	4b7b      	ldr	r3, [pc, #492]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012012:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012016:	2b02      	cmp	r3, #2
 8012018:	f040 8158 	bne.w	80122cc <LoRaMacMibSetRequestConfirm+0x6ac>
 801201c:	4b78      	ldr	r3, [pc, #480]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801201e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8012022:	2b00      	cmp	r3, #0
 8012024:	f000 8152 	beq.w	80122cc <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012028:	4b76      	ldr	r3, [pc, #472]	; (8012204 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801202e:	f7fe fca5 	bl	801097c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012032:	e14b      	b.n	80122cc <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012034:	2303      	movs	r3, #3
 8012036:	75fb      	strb	r3, [r7, #23]
            break;
 8012038:	e148      	b.n	80122cc <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	7a1b      	ldrb	r3, [r3, #8]
 801203e:	b25b      	sxtb	r3, r3
 8012040:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012042:	4b6f      	ldr	r3, [pc, #444]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012044:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012048:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801204a:	4b6d      	ldr	r3, [pc, #436]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801204c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012050:	f107 0108 	add.w	r1, r7, #8
 8012054:	2207      	movs	r2, #7
 8012056:	4618      	mov	r0, r3
 8012058:	f002 fcf7 	bl	8014a4a <RegionVerify>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d008      	beq.n	8012074 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012062:	4b67      	ldr	r3, [pc, #412]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	33b0      	adds	r3, #176	; 0xb0
 8012068:	3204      	adds	r2, #4
 801206a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801206e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012072:	e132      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012074:	2303      	movs	r3, #3
 8012076:	75fb      	strb	r3, [r7, #23]
            break;
 8012078:	e12f      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012080:	2301      	movs	r3, #1
 8012082:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012084:	4b5e      	ldr	r3, [pc, #376]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801208a:	f107 020c 	add.w	r2, r7, #12
 801208e:	4611      	mov	r1, r2
 8012090:	4618      	mov	r0, r3
 8012092:	f002 fd13 	bl	8014abc <RegionChanMaskSet>
 8012096:	4603      	mov	r3, r0
 8012098:	f083 0301 	eor.w	r3, r3, #1
 801209c:	b2db      	uxtb	r3, r3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	f000 8116 	beq.w	80122d0 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120a4:	2303      	movs	r3, #3
 80120a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120a8:	e112      	b.n	80122d0 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80120b0:	2300      	movs	r3, #0
 80120b2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80120b4:	4b52      	ldr	r3, [pc, #328]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120ba:	f107 020c 	add.w	r2, r7, #12
 80120be:	4611      	mov	r1, r2
 80120c0:	4618      	mov	r0, r3
 80120c2:	f002 fcfb 	bl	8014abc <RegionChanMaskSet>
 80120c6:	4603      	mov	r3, r0
 80120c8:	f083 0301 	eor.w	r3, r3, #1
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	f000 8100 	beq.w	80122d4 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120d4:	2303      	movs	r3, #3
 80120d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120d8:	e0fc      	b.n	80122d4 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	791b      	ldrb	r3, [r3, #4]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d009      	beq.n	80120f6 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80120e6:	2b0f      	cmp	r3, #15
 80120e8:	d805      	bhi.n	80120f6 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	791a      	ldrb	r2, [r3, #4]
 80120ee:	4b44      	ldr	r3, [pc, #272]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80120f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80120f4:	e0f1      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120f6:	2303      	movs	r3, #3
 80120f8:	75fb      	strb	r3, [r7, #23]
            break;
 80120fa:	e0ee      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	4a3f      	ldr	r2, [pc, #252]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012102:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012104:	e0e9      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	4a3d      	ldr	r2, [pc, #244]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801210c:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 801210e:	e0e4      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	4a3a      	ldr	r2, [pc, #232]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012116:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8012118:	e0df      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	4a38      	ldr	r2, [pc, #224]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012120:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8012122:	e0da      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	4a35      	ldr	r2, [pc, #212]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801212a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801212c:	e0d5      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012134:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012136:	4b32      	ldr	r3, [pc, #200]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801213c:	f107 0108 	add.w	r1, r7, #8
 8012140:	2206      	movs	r2, #6
 8012142:	4618      	mov	r0, r3
 8012144:	f002 fc81 	bl	8014a4a <RegionVerify>
 8012148:	4603      	mov	r3, r0
 801214a:	2b00      	cmp	r3, #0
 801214c:	d005      	beq.n	801215a <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801214e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012152:	4b2b      	ldr	r3, [pc, #172]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012154:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012158:	e0bf      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801215a:	2303      	movs	r3, #3
 801215c:	75fb      	strb	r3, [r7, #23]
            break;
 801215e:	e0bc      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012166:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012168:	4b25      	ldr	r3, [pc, #148]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801216a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801216e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012170:	4b23      	ldr	r3, [pc, #140]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012176:	f107 0108 	add.w	r1, r7, #8
 801217a:	2205      	movs	r2, #5
 801217c:	4618      	mov	r0, r3
 801217e:	f002 fc64 	bl	8014a4a <RegionVerify>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d005      	beq.n	8012194 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012188:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801218c:	4b1c      	ldr	r3, [pc, #112]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801218e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012192:	e0a2      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012194:	2303      	movs	r3, #3
 8012196:	75fb      	strb	r3, [r7, #23]
            break;
 8012198:	e09f      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80121a0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80121a2:	4b17      	ldr	r3, [pc, #92]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121a8:	f107 0108 	add.w	r1, r7, #8
 80121ac:	220a      	movs	r2, #10
 80121ae:	4618      	mov	r0, r3
 80121b0:	f002 fc4b 	bl	8014a4a <RegionVerify>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d005      	beq.n	80121c6 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80121ba:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80121be:	4b10      	ldr	r3, [pc, #64]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121c0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80121c4:	e089      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121c6:	2303      	movs	r3, #3
 80121c8:	75fb      	strb	r3, [r7, #23]
            break;
 80121ca:	e086      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80121d2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80121d4:	4b0a      	ldr	r3, [pc, #40]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121da:	f107 0108 	add.w	r1, r7, #8
 80121de:	2209      	movs	r2, #9
 80121e0:	4618      	mov	r0, r3
 80121e2:	f002 fc32 	bl	8014a4a <RegionVerify>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d005      	beq.n	80121f8 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80121ec:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80121f0:	4b03      	ldr	r3, [pc, #12]	; (8012200 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80121f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80121f6:	e070      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121f8:	2303      	movs	r3, #3
 80121fa:	75fb      	strb	r3, [r7, #23]
            break;
 80121fc:	e06d      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
 80121fe:	bf00      	nop
 8012200:	20000c38 	.word	0x20000c38
 8012204:	0801e0d4 	.word	0x0801e0d4
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	4a3a      	ldr	r2, [pc, #232]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801220e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8012212:	4b39      	ldr	r3, [pc, #228]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012218:	4a37      	ldr	r2, [pc, #220]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801221a:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 801221c:	e05d      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	791a      	ldrb	r2, [r3, #4]
 8012222:	4b35      	ldr	r3, [pc, #212]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012224:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8012228:	4b33      	ldr	r3, [pc, #204]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801222a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801222e:	4b32      	ldr	r3, [pc, #200]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8012234:	e051      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	4a2f      	ldr	r2, [pc, #188]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 801223c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801223e:	e04c      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	4a2c      	ldr	r2, [pc, #176]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012246:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 801224a:	e046      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 801224c:	f7fe fdc8 	bl	8010de0 <RestoreNvmData>
 8012250:	4603      	mov	r3, r0
 8012252:	75fb      	strb	r3, [r7, #23]
            break;
 8012254:	e041      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	799b      	ldrb	r3, [r3, #6]
 801225a:	2b01      	cmp	r3, #1
 801225c:	d80d      	bhi.n	801227a <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801225e:	4a26      	ldr	r2, [pc, #152]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6858      	ldr	r0, [r3, #4]
 801226c:	f001 fd12 	bl	8013c94 <LoRaMacCryptoSetLrWanVersion>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d030      	beq.n	80122d8 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012276:	2311      	movs	r3, #17
 8012278:	e03a      	b.n	80122f0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801227a:	2303      	movs	r3, #3
 801227c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801227e:	e02b      	b.n	80122d8 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	4a1c      	ldr	r2, [pc, #112]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012286:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801228a:	e026      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	791a      	ldrb	r2, [r3, #4]
 8012290:	4b19      	ldr	r3, [pc, #100]	; (80122f8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012292:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
            break;
 8012296:	e020      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 fc88 	bl	8012bae <LoRaMacMibClassBSetRequestConfirm>
 801229e:	4603      	mov	r3, r0
 80122a0:	75fb      	strb	r3, [r7, #23]
            break;
 80122a2:	e01a      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122a4:	bf00      	nop
 80122a6:	e018      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122a8:	bf00      	nop
 80122aa:	e016      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122ac:	bf00      	nop
 80122ae:	e014      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122b0:	bf00      	nop
 80122b2:	e012      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122b4:	bf00      	nop
 80122b6:	e010      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122b8:	bf00      	nop
 80122ba:	e00e      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122bc:	bf00      	nop
 80122be:	e00c      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122c0:	bf00      	nop
 80122c2:	e00a      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122c4:	bf00      	nop
 80122c6:	e008      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122c8:	bf00      	nop
 80122ca:	e006      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122cc:	bf00      	nop
 80122ce:	e004      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122d0:	bf00      	nop
 80122d2:	e002      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122d4:	bf00      	nop
 80122d6:	e000      	b.n	80122da <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 80122d8:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 80122da:	7dfb      	ldrb	r3, [r7, #23]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d106      	bne.n	80122ee <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80122e0:	4a06      	ldr	r2, [pc, #24]	; (80122fc <LoRaMacMibSetRequestConfirm+0x6dc>)
 80122e2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80122e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122ea:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 80122ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3718      	adds	r7, #24
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	20000c38 	.word	0x20000c38
 80122fc:	20000718 	.word	0x20000718

08012300 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b08a      	sub	sp, #40	; 0x28
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012308:	2302      	movs	r3, #2
 801230a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801230e:	2300      	movs	r3, #0
 8012310:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d101      	bne.n	801231c <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012318:	2303      	movs	r3, #3
 801231a:	e16c      	b.n	80125f6 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012322:	f7fc fc6b 	bl	800ebfc <LoRaMacIsBusy>
 8012326:	4603      	mov	r3, r0
 8012328:	2b00      	cmp	r3, #0
 801232a:	d001      	beq.n	8012330 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 801232c:	2301      	movs	r3, #1
 801232e:	e162      	b.n	80125f6 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012330:	f001 f954 	bl	80135dc <LoRaMacConfirmQueueIsFull>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 801233a:	2301      	movs	r3, #1
 801233c:	e15b      	b.n	80125f6 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801233e:	f001 f941 	bl	80135c4 <LoRaMacConfirmQueueGetCnt>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d104      	bne.n	8012352 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012348:	2214      	movs	r2, #20
 801234a:	2100      	movs	r1, #0
 801234c:	48ac      	ldr	r0, [pc, #688]	; (8012600 <LoRaMacMlmeRequest+0x300>)
 801234e:	f006 f965 	bl	801861c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012352:	4bac      	ldr	r3, [pc, #688]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 8012354:	2201      	movs	r2, #1
 8012356:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801235a:	4aaa      	ldr	r2, [pc, #680]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 801235c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012360:	f043 0304 	orr.w	r3, r3, #4
 8012364:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012370:	2301      	movs	r3, #1
 8012372:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012376:	2300      	movs	r3, #0
 8012378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 801237c:	2300      	movs	r3, #0
 801237e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	3b01      	subs	r3, #1
 8012388:	2b0c      	cmp	r3, #12
 801238a:	f200 8108 	bhi.w	801259e <LoRaMacMlmeRequest+0x29e>
 801238e:	a201      	add	r2, pc, #4	; (adr r2, 8012394 <LoRaMacMlmeRequest+0x94>)
 8012390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012394:	080123c9 	.word	0x080123c9
 8012398:	0801259f 	.word	0x0801259f
 801239c:	0801259f 	.word	0x0801259f
 80123a0:	0801249f 	.word	0x0801249f
 80123a4:	080124c1 	.word	0x080124c1
 80123a8:	0801259f 	.word	0x0801259f
 80123ac:	0801259f 	.word	0x0801259f
 80123b0:	0801259f 	.word	0x0801259f
 80123b4:	080124df 	.word	0x080124df
 80123b8:	0801259f 	.word	0x0801259f
 80123bc:	0801256d 	.word	0x0801256d
 80123c0:	08012501 	.word	0x08012501
 80123c4:	0801254b 	.word	0x0801254b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80123c8:	4b8e      	ldr	r3, [pc, #568]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 80123ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123ce:	f003 0320 	and.w	r3, r3, #32
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d001      	beq.n	80123da <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80123d6:	2301      	movs	r3, #1
 80123d8:	e10d      	b.n	80125f6 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	791b      	ldrb	r3, [r3, #4]
 80123de:	2b02      	cmp	r3, #2
 80123e0:	d12e      	bne.n	8012440 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 80123e2:	f7fe f995 	bl	8010710 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80123e6:	4b88      	ldr	r3, [pc, #544]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 80123e8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	795b      	ldrb	r3, [r3, #5]
 80123f0:	b25b      	sxtb	r3, r3
 80123f2:	2200      	movs	r2, #0
 80123f4:	4619      	mov	r1, r3
 80123f6:	f002 fc72 	bl	8014cde <RegionAlternateDr>
 80123fa:	4603      	mov	r3, r0
 80123fc:	461a      	mov	r2, r3
 80123fe:	4b82      	ldr	r3, [pc, #520]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 8012400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012404:	2307      	movs	r3, #7
 8012406:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 801240a:	20ff      	movs	r0, #255	; 0xff
 801240c:	f7fd fefe 	bl	801020c <SendReJoinReq>
 8012410:	4603      	mov	r3, r0
 8012412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8012416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801241a:	2b00      	cmp	r3, #0
 801241c:	f000 80c1 	beq.w	80125a2 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012420:	4b79      	ldr	r3, [pc, #484]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 8012422:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	795b      	ldrb	r3, [r3, #5]
 801242a:	b25b      	sxtb	r3, r3
 801242c:	2201      	movs	r2, #1
 801242e:	4619      	mov	r1, r3
 8012430:	f002 fc55 	bl	8014cde <RegionAlternateDr>
 8012434:	4603      	mov	r3, r0
 8012436:	461a      	mov	r2, r3
 8012438:	4b73      	ldr	r3, [pc, #460]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 801243a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801243e:	e0b0      	b.n	80125a2 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	791b      	ldrb	r3, [r3, #4]
 8012444:	2b01      	cmp	r3, #1
 8012446:	f040 80ac 	bne.w	80125a2 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801244a:	4b6f      	ldr	r3, [pc, #444]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 801244c:	2200      	movs	r2, #0
 801244e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012452:	2302      	movs	r3, #2
 8012454:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012456:	4b6c      	ldr	r3, [pc, #432]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 8012458:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801245c:	f107 020c 	add.w	r2, r7, #12
 8012460:	4611      	mov	r1, r2
 8012462:	4618      	mov	r0, r3
 8012464:	f002 fad9 	bl	8014a1a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	791a      	ldrb	r2, [r3, #4]
 801246c:	4b66      	ldr	r3, [pc, #408]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 801246e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012472:	2300      	movs	r3, #0
 8012474:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8012478:	2301      	movs	r3, #1
 801247a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 801247e:	4b61      	ldr	r3, [pc, #388]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 8012480:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012488:	4a5e      	ldr	r2, [pc, #376]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 801248a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801248e:	f043 0320 	orr.w	r3, r3, #32
 8012492:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 8012496:	2300      	movs	r3, #0
 8012498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801249c:	e081      	b.n	80125a2 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801249e:	2300      	movs	r3, #0
 80124a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80124a4:	f107 031c 	add.w	r3, r7, #28
 80124a8:	2200      	movs	r2, #0
 80124aa:	4619      	mov	r1, r3
 80124ac:	2002      	movs	r0, #2
 80124ae:	f000 fcfb 	bl	8012ea8 <LoRaMacCommandsAddCmd>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d076      	beq.n	80125a6 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124b8:	2313      	movs	r3, #19
 80124ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80124be:	e072      	b.n	80125a6 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	8898      	ldrh	r0, [r3, #4]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6899      	ldr	r1, [r3, #8]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	461a      	mov	r2, r3
 80124d2:	f7fe fc65 	bl	8010da0 <SetTxContinuousWave>
 80124d6:	4603      	mov	r3, r0
 80124d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80124dc:	e06a      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80124de:	2300      	movs	r3, #0
 80124e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80124e4:	f107 031c 	add.w	r3, r7, #28
 80124e8:	2200      	movs	r2, #0
 80124ea:	4619      	mov	r1, r3
 80124ec:	200d      	movs	r0, #13
 80124ee:	f000 fcdb 	bl	8012ea8 <LoRaMacCommandsAddCmd>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d058      	beq.n	80125aa <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124f8:	2313      	movs	r3, #19
 80124fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80124fe:	e054      	b.n	80125aa <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012500:	4b41      	ldr	r3, [pc, #260]	; (8012608 <LoRaMacMlmeRequest+0x308>)
 8012502:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012506:	2b00      	cmp	r3, #0
 8012508:	d151      	bne.n	80125ae <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	791b      	ldrb	r3, [r3, #4]
 801250e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	791b      	ldrb	r3, [r3, #4]
 8012516:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801251a:	b2db      	uxtb	r3, r3
 801251c:	4618      	mov	r0, r3
 801251e:	f000 fb1b 	bl	8012b58 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012522:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012526:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012528:	2300      	movs	r3, #0
 801252a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801252e:	f107 031c 	add.w	r3, r7, #28
 8012532:	2201      	movs	r2, #1
 8012534:	4619      	mov	r1, r3
 8012536:	2010      	movs	r0, #16
 8012538:	f000 fcb6 	bl	8012ea8 <LoRaMacCommandsAddCmd>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d035      	beq.n	80125ae <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012542:	2313      	movs	r3, #19
 8012544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8012548:	e031      	b.n	80125ae <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801254a:	2300      	movs	r3, #0
 801254c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012550:	f107 031c 	add.w	r3, r7, #28
 8012554:	2200      	movs	r2, #0
 8012556:	4619      	mov	r1, r3
 8012558:	2012      	movs	r0, #18
 801255a:	f000 fca5 	bl	8012ea8 <LoRaMacCommandsAddCmd>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d026      	beq.n	80125b2 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012564:	2313      	movs	r3, #19
 8012566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801256a:	e022      	b.n	80125b2 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801256c:	2301      	movs	r3, #1
 801256e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012572:	f000 faa7 	bl	8012ac4 <LoRaMacClassBIsAcquisitionInProgress>
 8012576:	4603      	mov	r3, r0
 8012578:	f083 0301 	eor.w	r3, r3, #1
 801257c:	b2db      	uxtb	r3, r3
 801257e:	2b00      	cmp	r3, #0
 8012580:	d009      	beq.n	8012596 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012582:	2000      	movs	r0, #0
 8012584:	f000 fa80 	bl	8012a88 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012588:	2000      	movs	r0, #0
 801258a:	f000 faa2 	bl	8012ad2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801258e:	2300      	movs	r3, #0
 8012590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012594:	e00e      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8012596:	2301      	movs	r3, #1
 8012598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801259c:	e00a      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801259e:	bf00      	nop
 80125a0:	e008      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
            break;
 80125a2:	bf00      	nop
 80125a4:	e006      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
            break;
 80125a6:	bf00      	nop
 80125a8:	e004      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
            break;
 80125aa:	bf00      	nop
 80125ac:	e002      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
            break;
 80125ae:	bf00      	nop
 80125b0:	e000      	b.n	80125b4 <LoRaMacMlmeRequest+0x2b4>
            break;
 80125b2:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80125b4:	4b13      	ldr	r3, [pc, #76]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 80125b6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80125be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d010      	beq.n	80125e8 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80125c6:	f000 fffd 	bl	80135c4 <LoRaMacConfirmQueueGetCnt>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d110      	bne.n	80125f2 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 80125d0:	4b0c      	ldr	r3, [pc, #48]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 80125d2:	2200      	movs	r2, #0
 80125d4:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80125d8:	4a0a      	ldr	r2, [pc, #40]	; (8012604 <LoRaMacMlmeRequest+0x304>)
 80125da:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80125de:	f36f 0382 	bfc	r3, #2, #1
 80125e2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 80125e6:	e004      	b.n	80125f2 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80125e8:	f107 0320 	add.w	r3, r7, #32
 80125ec:	4618      	mov	r0, r3
 80125ee:	f000 fe9b 	bl	8013328 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80125f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3728      	adds	r7, #40	; 0x28
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	20000b70 	.word	0x20000b70
 8012604:	20000718 	.word	0x20000718
 8012608:	20000c38 	.word	0x20000c38

0801260c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801260c:	b5b0      	push	{r4, r5, r7, lr}
 801260e:	b092      	sub	sp, #72	; 0x48
 8012610:	af02      	add	r7, sp, #8
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	460b      	mov	r3, r1
 8012616:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012618:	2302      	movs	r3, #2
 801261a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801261e:	2300      	movs	r3, #0
 8012620:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012624:	2300      	movs	r3, #0
 8012626:	63bb      	str	r3, [r7, #56]	; 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012628:	2300      	movs	r3, #0
 801262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 801262e:	2300      	movs	r3, #0
 8012630:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d101      	bne.n	801263e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801263a:	2303      	movs	r3, #3
 801263c:	e113      	b.n	8012866 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2200      	movs	r2, #0
 8012642:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012644:	f7fc fada 	bl	800ebfc <LoRaMacIsBusy>
 8012648:	4603      	mov	r3, r0
 801264a:	2b00      	cmp	r3, #0
 801264c:	d001      	beq.n	8012652 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801264e:	2301      	movs	r3, #1
 8012650:	e109      	b.n	8012866 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f107 040c 	add.w	r4, r7, #12
 8012658:	461d      	mov	r5, r3
 801265a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801265c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801265e:	682b      	ldr	r3, [r5, #0]
 8012660:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012662:	2300      	movs	r3, #0
 8012664:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012668:	2214      	movs	r2, #20
 801266a:	2100      	movs	r1, #0
 801266c:	4880      	ldr	r0, [pc, #512]	; (8012870 <LoRaMacMcpsRequest+0x264>)
 801266e:	f005 ffd5 	bl	801861c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012672:	4b80      	ldr	r3, [pc, #512]	; (8012874 <LoRaMacMcpsRequest+0x268>)
 8012674:	2201      	movs	r2, #1
 8012676:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801267a:	4b7f      	ldr	r3, [pc, #508]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 801267c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8012680:	2b02      	cmp	r3, #2
 8012682:	d111      	bne.n	80126a8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012684:	4b7c      	ldr	r3, [pc, #496]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 8012686:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801268a:	2b02      	cmp	r3, #2
 801268c:	d10c      	bne.n	80126a8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801268e:	4b7a      	ldr	r3, [pc, #488]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 8012690:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8012694:	f083 0301 	eor.w	r3, r3, #1
 8012698:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801269a:	2b00      	cmp	r3, #0
 801269c:	d004      	beq.n	80126a8 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801269e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d101      	bne.n	80126a8 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 80126a4:	2301      	movs	r3, #1
 80126a6:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 80126a8:	7b3b      	ldrb	r3, [r7, #12]
 80126aa:	2b03      	cmp	r3, #3
 80126ac:	d030      	beq.n	8012710 <LoRaMacMcpsRequest+0x104>
 80126ae:	2b03      	cmp	r3, #3
 80126b0:	dc3f      	bgt.n	8012732 <LoRaMacMcpsRequest+0x126>
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d002      	beq.n	80126bc <LoRaMacMcpsRequest+0xb0>
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d015      	beq.n	80126e6 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80126ba:	e03a      	b.n	8012732 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 80126bc:	2301      	movs	r3, #1
 80126be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80126c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80126c6:	2202      	movs	r2, #2
 80126c8:	f362 1347 	bfi	r3, r2, #5, #3
 80126cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80126d0:	7c3b      	ldrb	r3, [r7, #16]
 80126d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80126da:	8b3b      	ldrh	r3, [r7, #24]
 80126dc:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80126de:	7ebb      	ldrb	r3, [r7, #26]
 80126e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80126e4:	e026      	b.n	8012734 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80126e6:	2301      	movs	r3, #1
 80126e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80126ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80126f0:	2204      	movs	r2, #4
 80126f2:	f362 1347 	bfi	r3, r2, #5, #3
 80126f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 80126fa:	7c3b      	ldrb	r3, [r7, #16]
 80126fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012704:	8b3b      	ldrh	r3, [r7, #24]
 8012706:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012708:	7ebb      	ldrb	r3, [r7, #26]
 801270a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801270e:	e011      	b.n	8012734 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012710:	2301      	movs	r3, #1
 8012712:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801271a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801271e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012726:	8abb      	ldrh	r3, [r7, #20]
 8012728:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 801272a:	7dbb      	ldrb	r3, [r7, #22]
 801272c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012730:	e000      	b.n	8012734 <LoRaMacMcpsRequest+0x128>
            break;
 8012732:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012734:	2302      	movs	r3, #2
 8012736:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801273a:	4b4f      	ldr	r3, [pc, #316]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 801273c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012740:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012744:	4b4c      	ldr	r3, [pc, #304]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 8012746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801274a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801274e:	4611      	mov	r1, r2
 8012750:	4618      	mov	r0, r3
 8012752:	f002 f92a 	bl	80149aa <RegionGetPhyParam>
 8012756:	4603      	mov	r3, r0
 8012758:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275c:	b25b      	sxtb	r3, r3
 801275e:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8012762:	4293      	cmp	r3, r2
 8012764:	bfb8      	it	lt
 8012766:	4613      	movlt	r3, r2
 8012768:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801276c:	4b42      	ldr	r3, [pc, #264]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 801276e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012772:	4a41      	ldr	r2, [pc, #260]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 8012774:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8012778:	4a3f      	ldr	r2, [pc, #252]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 801277a:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 801277e:	4618      	mov	r0, r3
 8012780:	f7fc fbd4 	bl	800ef2c <CheckForMinimumAbpDatarate>
 8012784:	4603      	mov	r3, r0
 8012786:	2b00      	cmp	r3, #0
 8012788:	d002      	beq.n	8012790 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8012790:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012794:	2b00      	cmp	r3, #0
 8012796:	d05f      	beq.n	8012858 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012798:	4b37      	ldr	r3, [pc, #220]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 801279a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801279e:	f083 0301 	eor.w	r3, r3, #1
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d10e      	bne.n	80127c6 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80127a8:	4b33      	ldr	r3, [pc, #204]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 80127aa:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80127ae:	4a32      	ldr	r2, [pc, #200]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 80127b0:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 80127b4:	4a30      	ldr	r2, [pc, #192]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 80127b6:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fc fbb6 	bl	800ef2c <CheckForMinimumAbpDatarate>
 80127c0:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d01c      	beq.n	8012800 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 80127c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80127ca:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80127ce:	4b2a      	ldr	r3, [pc, #168]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 80127d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80127d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80127d8:	4b27      	ldr	r3, [pc, #156]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 80127da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127de:	f107 0120 	add.w	r1, r7, #32
 80127e2:	2205      	movs	r2, #5
 80127e4:	4618      	mov	r0, r3
 80127e6:	f002 f930 	bl	8014a4a <RegionVerify>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d005      	beq.n	80127fc <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80127f0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80127f4:	4b20      	ldr	r3, [pc, #128]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 80127f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80127fa:	e001      	b.n	8012800 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80127fc:	2303      	movs	r3, #3
 80127fe:	e032      	b.n	8012866 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012800:	4b1d      	ldr	r3, [pc, #116]	; (8012878 <LoRaMacMcpsRequest+0x26c>)
 8012802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012806:	4a1b      	ldr	r2, [pc, #108]	; (8012874 <LoRaMacMcpsRequest+0x268>)
 8012808:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 801280c:	4611      	mov	r1, r2
 801280e:	4618      	mov	r0, r3
 8012810:	f7fc fc76 	bl	800f100 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012814:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012816:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 801281a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801281e:	78fb      	ldrb	r3, [r7, #3]
 8012820:	9300      	str	r3, [sp, #0]
 8012822:	4613      	mov	r3, r2
 8012824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012826:	f7fd fc0d 	bl	8010044 <Send>
 801282a:	4603      	mov	r3, r0
 801282c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8012830:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012834:	2b00      	cmp	r3, #0
 8012836:	d10b      	bne.n	8012850 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012838:	7b3a      	ldrb	r2, [r7, #12]
 801283a:	4b0e      	ldr	r3, [pc, #56]	; (8012874 <LoRaMacMcpsRequest+0x268>)
 801283c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012840:	4a0c      	ldr	r2, [pc, #48]	; (8012874 <LoRaMacMcpsRequest+0x268>)
 8012842:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012846:	f043 0301 	orr.w	r3, r3, #1
 801284a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 801284e:	e003      	b.n	8012858 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012850:	4b08      	ldr	r3, [pc, #32]	; (8012874 <LoRaMacMcpsRequest+0x268>)
 8012852:	2200      	movs	r2, #0
 8012854:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012858:	4b06      	ldr	r3, [pc, #24]	; (8012874 <LoRaMacMcpsRequest+0x268>)
 801285a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	611a      	str	r2, [r3, #16]

    return status;
 8012862:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012866:	4618      	mov	r0, r3
 8012868:	3740      	adds	r7, #64	; 0x40
 801286a:	46bd      	mov	sp, r7
 801286c:	bdb0      	pop	{r4, r5, r7, pc}
 801286e:	bf00      	nop
 8012870:	20000b5c 	.word	0x20000b5c
 8012874:	20000718 	.word	0x20000718
 8012878:	20000c38 	.word	0x20000c38

0801287c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	4603      	mov	r3, r0
 8012884:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012886:	79fb      	ldrb	r3, [r7, #7]
 8012888:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801288a:	4b0a      	ldr	r3, [pc, #40]	; (80128b4 <LoRaMacTestSetDutyCycleOn+0x38>)
 801288c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012890:	f107 010c 	add.w	r1, r7, #12
 8012894:	220f      	movs	r2, #15
 8012896:	4618      	mov	r0, r3
 8012898:	f002 f8d7 	bl	8014a4a <RegionVerify>
 801289c:	4603      	mov	r3, r0
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d003      	beq.n	80128aa <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80128a2:	4a04      	ldr	r2, [pc, #16]	; (80128b4 <LoRaMacTestSetDutyCycleOn+0x38>)
 80128a4:	79fb      	ldrb	r3, [r7, #7]
 80128a6:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 80128aa:	bf00      	nop
 80128ac:	3710      	adds	r7, #16
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	20000c38 	.word	0x20000c38

080128b8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80128bc:	f7fe ff26 	bl	801170c <LoRaMacStop>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d111      	bne.n	80128ea <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80128c6:	480a      	ldr	r0, [pc, #40]	; (80128f0 <LoRaMacDeInitialization+0x38>)
 80128c8:	f009 ffb8 	bl	801c83c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80128cc:	4809      	ldr	r0, [pc, #36]	; (80128f4 <LoRaMacDeInitialization+0x3c>)
 80128ce:	f009 ffb5 	bl	801c83c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80128d2:	4809      	ldr	r0, [pc, #36]	; (80128f8 <LoRaMacDeInitialization+0x40>)
 80128d4:	f009 ffb2 	bl	801c83c <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80128d8:	f000 f948 	bl	8012b6c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 80128dc:	f7fd ff18 	bl	8010710 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80128e0:	4b06      	ldr	r3, [pc, #24]	; (80128fc <LoRaMacDeInitialization+0x44>)
 80128e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e4:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80128e6:	2300      	movs	r3, #0
 80128e8:	e000      	b.n	80128ec <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80128ea:	2301      	movs	r3, #1
    }
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	20000a80 	.word	0x20000a80
 80128f4:	20000a98 	.word	0x20000a98
 80128f8:	20000ab0 	.word	0x20000ab0
 80128fc:	0801e0d4 	.word	0x0801e0d4

08012900 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b08c      	sub	sp, #48	; 0x30
 8012904:	af00      	add	r7, sp, #0
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
 801290c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801290e:	2300      	movs	r3, #0
 8012910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	7b1b      	ldrb	r3, [r3, #12]
 8012918:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	7b5b      	ldrb	r3, [r3, #13]
 8012920:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	7b9b      	ldrb	r3, [r3, #14]
 8012928:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	685a      	ldr	r2, [r3, #4]
 8012930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012932:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	785b      	ldrb	r3, [r3, #1]
 8012938:	2b00      	cmp	r3, #0
 801293a:	f000 8088 	beq.w	8012a4e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801293e:	2302      	movs	r3, #2
 8012940:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	7bdb      	ldrb	r3, [r3, #15]
 8012948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	7c1b      	ldrb	r3, [r3, #16]
 8012950:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012954:	4611      	mov	r1, r2
 8012956:	4618      	mov	r0, r3
 8012958:	f002 f827 	bl	80149aa <RegionGetPhyParam>
 801295c:	4603      	mov	r3, r0
 801295e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012960:	6a3b      	ldr	r3, [r7, #32]
 8012962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8012966:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 801296a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801296e:	4293      	cmp	r3, r2
 8012970:	bfb8      	it	lt
 8012972:	4613      	movlt	r3, r2
 8012974:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	68fa      	ldr	r2, [r7, #12]
 801297e:	8912      	ldrh	r2, [r2, #8]
 8012980:	4293      	cmp	r3, r2
 8012982:	d302      	bcc.n	801298a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012984:	2301      	movs	r3, #1
 8012986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	68fa      	ldr	r2, [r7, #12]
 8012990:	8912      	ldrh	r2, [r2, #8]
 8012992:	4611      	mov	r1, r2
 8012994:	68fa      	ldr	r2, [r7, #12]
 8012996:	8952      	ldrh	r2, [r2, #10]
 8012998:	440a      	add	r2, r1
 801299a:	4293      	cmp	r3, r2
 801299c:	d30f      	bcc.n	80129be <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801299e:	230a      	movs	r3, #10
 80129a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	7c1b      	ldrb	r3, [r3, #16]
 80129a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80129ac:	4611      	mov	r1, r2
 80129ae:	4618      	mov	r0, r3
 80129b0:	f001 fffb 	bl	80149aa <RegionGetPhyParam>
 80129b4:	4603      	mov	r3, r0
 80129b6:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	68fa      	ldr	r2, [r7, #12]
 80129c4:	8912      	ldrh	r2, [r2, #8]
 80129c6:	4611      	mov	r1, r2
 80129c8:	68fa      	ldr	r2, [r7, #12]
 80129ca:	8952      	ldrh	r2, [r2, #10]
 80129cc:	0052      	lsls	r2, r2, #1
 80129ce:	440a      	add	r2, r1
 80129d0:	4293      	cmp	r3, r2
 80129d2:	d33c      	bcc.n	8012a4e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	8912      	ldrh	r2, [r2, #8]
 80129dc:	1a9b      	subs	r3, r3, r2
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	8952      	ldrh	r2, [r2, #10]
 80129e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80129e6:	fb01 f202 	mul.w	r2, r1, r2
 80129ea:	1a9b      	subs	r3, r3, r2
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d12e      	bne.n	8012a4e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80129f0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80129f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d110      	bne.n	8012a1e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d009      	beq.n	8012a18 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012a04:	2302      	movs	r3, #2
 8012a06:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	7c1b      	ldrb	r3, [r3, #16]
 8012a0c:	f107 0210 	add.w	r2, r7, #16
 8012a10:	4611      	mov	r1, r2
 8012a12:	4618      	mov	r0, r3
 8012a14:	f002 f801 	bl	8014a1a <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012a18:	2301      	movs	r3, #1
 8012a1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012a1e:	2321      	movs	r3, #33	; 0x21
 8012a20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8012a24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	7bdb      	ldrb	r3, [r3, #15]
 8012a30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	7c1b      	ldrb	r3, [r3, #16]
 8012a38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012a3c:	4611      	mov	r1, r2
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f001 ffb3 	bl	80149aa <RegionGetPhyParam>
 8012a44:	4603      	mov	r3, r0
 8012a46:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012a48:	6a3b      	ldr	r3, [r7, #32]
 8012a4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8012a54:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a5c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012a64:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3730      	adds	r7, #48	; 0x30
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}

08012a72 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012a72:	b480      	push	{r7}
 8012a74:	b085      	sub	sp, #20
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	60f8      	str	r0, [r7, #12]
 8012a7a:	60b9      	str	r1, [r7, #8]
 8012a7c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012a7e:	bf00      	nop
 8012a80:	3714      	adds	r7, #20
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bc80      	pop	{r7}
 8012a86:	4770      	bx	lr

08012a88 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b083      	sub	sp, #12
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012a92:	bf00      	nop
 8012a94:	370c      	adds	r7, #12
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bc80      	pop	{r7}
 8012a9a:	4770      	bx	lr

08012a9c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012a9c:	b480      	push	{r7}
 8012a9e:	b083      	sub	sp, #12
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012aa6:	bf00      	nop
 8012aa8:	370c      	adds	r7, #12
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bc80      	pop	{r7}
 8012aae:	4770      	bx	lr

08012ab0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012aba:	bf00      	nop
 8012abc:	370c      	adds	r7, #12
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bc80      	pop	{r7}
 8012ac2:	4770      	bx	lr

08012ac4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012ac8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bc80      	pop	{r7}
 8012ad0:	4770      	bx	lr

08012ad2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012ad2:	b480      	push	{r7}
 8012ad4:	b083      	sub	sp, #12
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ada:	bf00      	nop
 8012adc:	370c      	adds	r7, #12
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bc80      	pop	{r7}
 8012ae2:	4770      	bx	lr

08012ae4 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012aec:	bf00      	nop
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bc80      	pop	{r7}
 8012af4:	4770      	bx	lr

08012af6 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012af6:	b480      	push	{r7}
 8012af8:	b083      	sub	sp, #12
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012afe:	bf00      	nop
 8012b00:	370c      	adds	r7, #12
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bc80      	pop	{r7}
 8012b06:	4770      	bx	lr

08012b08 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	460b      	mov	r3, r1
 8012b12:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012b14:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	370c      	adds	r7, #12
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bc80      	pop	{r7}
 8012b1e:	4770      	bx	lr

08012b20 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012b20:	b480      	push	{r7}
 8012b22:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bc80      	pop	{r7}
 8012b2c:	4770      	bx	lr

08012b2e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012b2e:	b480      	push	{r7}
 8012b30:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b32:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bc80      	pop	{r7}
 8012b3a:	4770      	bx	lr

08012b3c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b40:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bc80      	pop	{r7}
 8012b48:	4770      	bx	lr

08012b4a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012b4a:	b480      	push	{r7}
 8012b4c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012b4e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bc80      	pop	{r7}
 8012b56:	4770      	bx	lr

08012b58 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b083      	sub	sp, #12
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	4603      	mov	r3, r0
 8012b60:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b62:	bf00      	nop
 8012b64:	370c      	adds	r7, #12
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bc80      	pop	{r7}
 8012b6a:	4770      	bx	lr

08012b6c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b70:	bf00      	nop
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bc80      	pop	{r7}
 8012b76:	4770      	bx	lr

08012b78 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012b78:	b480      	push	{r7}
 8012b7a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b7c:	bf00      	nop
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bc80      	pop	{r7}
 8012b82:	4770      	bx	lr

08012b84 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b8e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bc80      	pop	{r7}
 8012b98:	4770      	bx	lr

08012b9a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012b9a:	b480      	push	{r7}
 8012b9c:	b083      	sub	sp, #12
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012ba2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bc80      	pop	{r7}
 8012bac:	4770      	bx	lr

08012bae <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012bae:	b480      	push	{r7}
 8012bb0:	b083      	sub	sp, #12
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012bb6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	370c      	adds	r7, #12
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bc80      	pop	{r7}
 8012bc0:	4770      	bx	lr

08012bc2 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012bc2:	b480      	push	{r7}
 8012bc4:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bc6:	bf00      	nop
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bc80      	pop	{r7}
 8012bcc:	4770      	bx	lr

08012bce <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012bce:	b480      	push	{r7}
 8012bd0:	b083      	sub	sp, #12
 8012bd2:	af00      	add	r7, sp, #0
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	6039      	str	r1, [r7, #0]
 8012bd8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012bda:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	370c      	adds	r7, #12
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bc80      	pop	{r7}
 8012be4:	4770      	bx	lr

08012be6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012be6:	b480      	push	{r7}
 8012be8:	b083      	sub	sp, #12
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	4603      	mov	r3, r0
 8012bee:	603a      	str	r2, [r7, #0]
 8012bf0:	80fb      	strh	r3, [r7, #6]
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012bf6:	bf00      	nop
 8012bf8:	370c      	adds	r7, #12
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bc80      	pop	{r7}
 8012bfe:	4770      	bx	lr

08012c00 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012c00:	b480      	push	{r7}
 8012c02:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c04:	bf00      	nop
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bc80      	pop	{r7}
 8012c0a:	4770      	bx	lr

08012c0c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012c14:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	370c      	adds	r7, #12
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bc80      	pop	{r7}
 8012c1e:	4770      	bx	lr

08012c20 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012c20:	b480      	push	{r7}
 8012c22:	b083      	sub	sp, #12
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012c28:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	370c      	adds	r7, #12
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bc80      	pop	{r7}
 8012c32:	4770      	bx	lr

08012c34 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012c34:	b480      	push	{r7}
 8012c36:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c38:	bf00      	nop
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bc80      	pop	{r7}
 8012c3e:	4770      	bx	lr

08012c40 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012c40:	b480      	push	{r7}
 8012c42:	b083      	sub	sp, #12
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c4c:	bf00      	nop
 8012c4e:	370c      	adds	r7, #12
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bc80      	pop	{r7}
 8012c54:	4770      	bx	lr

08012c56 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012c56:	b480      	push	{r7}
 8012c58:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c5a:	bf00      	nop
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bc80      	pop	{r7}
 8012c60:	4770      	bx	lr

08012c62 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012c62:	b480      	push	{r7}
 8012c64:	b085      	sub	sp, #20
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012c6e:	2300      	movs	r3, #0
 8012c70:	81fb      	strh	r3, [r7, #14]
 8012c72:	e00a      	b.n	8012c8a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012c74:	89fb      	ldrh	r3, [r7, #14]
 8012c76:	68ba      	ldr	r2, [r7, #8]
 8012c78:	4413      	add	r3, r2
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <IsSlotFree+0x22>
        {
            return false;
 8012c80:	2300      	movs	r3, #0
 8012c82:	e006      	b.n	8012c92 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012c84:	89fb      	ldrh	r3, [r7, #14]
 8012c86:	3301      	adds	r3, #1
 8012c88:	81fb      	strh	r3, [r7, #14]
 8012c8a:	89fb      	ldrh	r3, [r7, #14]
 8012c8c:	2b0f      	cmp	r3, #15
 8012c8e:	d9f1      	bls.n	8012c74 <IsSlotFree+0x12>
        }
    }
    return true;
 8012c90:	2301      	movs	r3, #1
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3714      	adds	r7, #20
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bc80      	pop	{r7}
 8012c9a:	4770      	bx	lr

08012c9c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012ca6:	e007      	b.n	8012cb8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012ca8:	79fb      	ldrb	r3, [r7, #7]
 8012caa:	3301      	adds	r3, #1
 8012cac:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012cae:	79fb      	ldrb	r3, [r7, #7]
 8012cb0:	2b20      	cmp	r3, #32
 8012cb2:	d101      	bne.n	8012cb8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	e012      	b.n	8012cde <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012cb8:	79fb      	ldrb	r3, [r7, #7]
 8012cba:	011b      	lsls	r3, r3, #4
 8012cbc:	3308      	adds	r3, #8
 8012cbe:	4a0a      	ldr	r2, [pc, #40]	; (8012ce8 <MallocNewMacCommandSlot+0x4c>)
 8012cc0:	4413      	add	r3, r2
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7ff ffcd 	bl	8012c62 <IsSlotFree>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	f083 0301 	eor.w	r3, r3, #1
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1e9      	bne.n	8012ca8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012cd4:	79fb      	ldrb	r3, [r7, #7]
 8012cd6:	011b      	lsls	r3, r3, #4
 8012cd8:	3308      	adds	r3, #8
 8012cda:	4a03      	ldr	r2, [pc, #12]	; (8012ce8 <MallocNewMacCommandSlot+0x4c>)
 8012cdc:	4413      	add	r3, r2
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3708      	adds	r7, #8
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	200017f8 	.word	0x200017f8

08012cec <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d101      	bne.n	8012cfe <FreeMacCommandSlot+0x12>
    {
        return false;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	e005      	b.n	8012d0a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012cfe:	2210      	movs	r2, #16
 8012d00:	2100      	movs	r1, #0
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f005 fc8a 	bl	801861c <memset1>

    return true;
 8012d08:	2301      	movs	r3, #1
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3708      	adds	r7, #8
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}

08012d12 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012d12:	b480      	push	{r7}
 8012d14:	b083      	sub	sp, #12
 8012d16:	af00      	add	r7, sp, #0
 8012d18:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d101      	bne.n	8012d24 <LinkedListInit+0x12>
    {
        return false;
 8012d20:	2300      	movs	r3, #0
 8012d22:	e006      	b.n	8012d32 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2200      	movs	r2, #0
 8012d28:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	605a      	str	r2, [r3, #4]

    return true;
 8012d30:	2301      	movs	r3, #1
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	370c      	adds	r7, #12
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bc80      	pop	{r7}
 8012d3a:	4770      	bx	lr

08012d3c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <LinkedListAdd+0x16>
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d101      	bne.n	8012d56 <LinkedListAdd+0x1a>
    {
        return false;
 8012d52:	2300      	movs	r3, #0
 8012d54:	e015      	b.n	8012d82 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d102      	bne.n	8012d64 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	683a      	ldr	r2, [r7, #0]
 8012d62:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d003      	beq.n	8012d74 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	683a      	ldr	r2, [r7, #0]
 8012d72:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	2200      	movs	r2, #0
 8012d78:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	605a      	str	r2, [r3, #4]

    return true;
 8012d80:	2301      	movs	r3, #1
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	370c      	adds	r7, #12
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bc80      	pop	{r7}
 8012d8a:	4770      	bx	lr

08012d8c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b085      	sub	sp, #20
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d002      	beq.n	8012da2 <LinkedListGetPrevious+0x16>
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d101      	bne.n	8012da6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012da2:	2300      	movs	r3, #0
 8012da4:	e016      	b.n	8012dd4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012dac:	683a      	ldr	r2, [r7, #0]
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d00c      	beq.n	8012dce <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012db4:	e002      	b.n	8012dbc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d007      	beq.n	8012dd2 <LinkedListGetPrevious+0x46>
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	683a      	ldr	r2, [r7, #0]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d1f4      	bne.n	8012db6 <LinkedListGetPrevious+0x2a>
 8012dcc:	e001      	b.n	8012dd2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3714      	adds	r7, #20
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bc80      	pop	{r7}
 8012ddc:	4770      	bx	lr

08012dde <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b084      	sub	sp, #16
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
 8012de6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d002      	beq.n	8012df4 <LinkedListRemove+0x16>
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d101      	bne.n	8012df8 <LinkedListRemove+0x1a>
    {
        return false;
 8012df4:	2300      	movs	r3, #0
 8012df6:	e020      	b.n	8012e3a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012df8:	6839      	ldr	r1, [r7, #0]
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7ff ffc6 	bl	8012d8c <LinkedListGetPrevious>
 8012e00:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	683a      	ldr	r2, [r7, #0]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d103      	bne.n	8012e14 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	683a      	ldr	r2, [r7, #0]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d102      	bne.n	8012e24 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	68fa      	ldr	r2, [r7, #12]
 8012e22:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d003      	beq.n	8012e32 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	681a      	ldr	r2, [r3, #0]
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	2200      	movs	r2, #0
 8012e36:	601a      	str	r2, [r3, #0]

    return true;
 8012e38:	2301      	movs	r3, #1
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3710      	adds	r7, #16
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
	...

08012e44 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012e44:	b480      	push	{r7}
 8012e46:	b083      	sub	sp, #12
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012e4e:	79fb      	ldrb	r3, [r7, #7]
 8012e50:	2b11      	cmp	r3, #17
 8012e52:	bf8c      	ite	hi
 8012e54:	2201      	movhi	r2, #1
 8012e56:	2200      	movls	r2, #0
 8012e58:	b2d2      	uxtb	r2, r2
 8012e5a:	2a00      	cmp	r2, #0
 8012e5c:	d10c      	bne.n	8012e78 <IsSticky+0x34>
 8012e5e:	2201      	movs	r2, #1
 8012e60:	409a      	lsls	r2, r3
 8012e62:	4b08      	ldr	r3, [pc, #32]	; (8012e84 <IsSticky+0x40>)
 8012e64:	4013      	ands	r3, r2
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	bf14      	ite	ne
 8012e6a:	2301      	movne	r3, #1
 8012e6c:	2300      	moveq	r3, #0
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d001      	beq.n	8012e78 <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012e74:	2301      	movs	r3, #1
 8012e76:	e000      	b.n	8012e7a <IsSticky+0x36>
        default:
            return false;
 8012e78:	2300      	movs	r3, #0
    }
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bc80      	pop	{r7}
 8012e82:	4770      	bx	lr
 8012e84:	00020720 	.word	0x00020720

08012e88 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012e8c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8012e90:	2100      	movs	r1, #0
 8012e92:	4804      	ldr	r0, [pc, #16]	; (8012ea4 <LoRaMacCommandsInit+0x1c>)
 8012e94:	f005 fbc2 	bl	801861c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012e98:	4802      	ldr	r0, [pc, #8]	; (8012ea4 <LoRaMacCommandsInit+0x1c>)
 8012e9a:	f7ff ff3a 	bl	8012d12 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	200017f8 	.word	0x200017f8

08012ea8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b086      	sub	sp, #24
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	4603      	mov	r3, r0
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
 8012eb4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d101      	bne.n	8012ec0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	e033      	b.n	8012f28 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012ec0:	f7ff feec 	bl	8012c9c <MallocNewMacCommandSlot>
 8012ec4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d101      	bne.n	8012ed0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012ecc:	2302      	movs	r3, #2
 8012ece:	e02b      	b.n	8012f28 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012ed0:	6979      	ldr	r1, [r7, #20]
 8012ed2:	4817      	ldr	r0, [pc, #92]	; (8012f30 <LoRaMacCommandsAddCmd+0x88>)
 8012ed4:	f7ff ff32 	bl	8012d3c <LinkedListAdd>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	f083 0301 	eor.w	r3, r3, #1
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d001      	beq.n	8012ee8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012ee4:	2305      	movs	r3, #5
 8012ee6:	e01f      	b.n	8012f28 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	7bfa      	ldrb	r2, [r7, #15]
 8012eec:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	3305      	adds	r3, #5
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	b292      	uxth	r2, r2
 8012efc:	68b9      	ldr	r1, [r7, #8]
 8012efe:	4618      	mov	r0, r3
 8012f00:	f005 fb51 	bl	80185a6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012f04:	7bfb      	ldrb	r3, [r7, #15]
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7ff ff9c 	bl	8012e44 <IsSticky>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	461a      	mov	r2, r3
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012f14:	4b06      	ldr	r3, [pc, #24]	; (8012f30 <LoRaMacCommandsAddCmd+0x88>)
 8012f16:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	3301      	adds	r3, #1
 8012f20:	4a03      	ldr	r2, [pc, #12]	; (8012f30 <LoRaMacCommandsAddCmd+0x88>)
 8012f22:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012f26:	2300      	movs	r3, #0
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3718      	adds	r7, #24
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	200017f8 	.word	0x200017f8

08012f34 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d101      	bne.n	8012f46 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012f42:	2301      	movs	r3, #1
 8012f44:	e021      	b.n	8012f8a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012f46:	6879      	ldr	r1, [r7, #4]
 8012f48:	4812      	ldr	r0, [pc, #72]	; (8012f94 <LoRaMacCommandsRemoveCmd+0x60>)
 8012f4a:	f7ff ff48 	bl	8012dde <LinkedListRemove>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	f083 0301 	eor.w	r3, r3, #1
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d001      	beq.n	8012f5e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012f5a:	2303      	movs	r3, #3
 8012f5c:	e015      	b.n	8012f8a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012f5e:	4b0d      	ldr	r3, [pc, #52]	; (8012f94 <LoRaMacCommandsRemoveCmd+0x60>)
 8012f60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	3b01      	subs	r3, #1
 8012f6c:	4a09      	ldr	r2, [pc, #36]	; (8012f94 <LoRaMacCommandsRemoveCmd+0x60>)
 8012f6e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7ff feba 	bl	8012cec <FreeMacCommandSlot>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	f083 0301 	eor.w	r3, r3, #1
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d001      	beq.n	8012f88 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012f84:	2305      	movs	r3, #5
 8012f86:	e000      	b.n	8012f8a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012f88:	2300      	movs	r3, #0
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	200017f8 	.word	0x200017f8

08012f98 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012f9e:	4b0f      	ldr	r3, [pc, #60]	; (8012fdc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012fa4:	e012      	b.n	8012fcc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	7b1b      	ldrb	r3, [r3, #12]
 8012faa:	f083 0301 	eor.w	r3, r3, #1
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d008      	beq.n	8012fc6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7ff ffba 	bl	8012f34 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	607b      	str	r3, [r7, #4]
 8012fc4:	e002      	b.n	8012fcc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d1e9      	bne.n	8012fa6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}
 8012fdc:	200017f8 	.word	0x200017f8

08012fe0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012fe6:	4b0e      	ldr	r3, [pc, #56]	; (8013020 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012fec:	e00f      	b.n	801300e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	791b      	ldrb	r3, [r3, #4]
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7ff ff23 	bl	8012e44 <IsSticky>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7ff ff95 	bl	8012f34 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d1ec      	bne.n	8012fee <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	3708      	adds	r7, #8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	200017f8 	.word	0x200017f8

08013024 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013024:	b480      	push	{r7}
 8013026:	b083      	sub	sp, #12
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d101      	bne.n	8013036 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013032:	2301      	movs	r3, #1
 8013034:	e005      	b.n	8013042 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013036:	4b05      	ldr	r3, [pc, #20]	; (801304c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013038:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013040:	2300      	movs	r3, #0
}
 8013042:	4618      	mov	r0, r3
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	bc80      	pop	{r7}
 801304a:	4770      	bx	lr
 801304c:	200017f8 	.word	0x200017f8

08013050 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b088      	sub	sp, #32
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801305c:	4b25      	ldr	r3, [pc, #148]	; (80130f4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013062:	2300      	movs	r3, #0
 8013064:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d002      	beq.n	8013072 <LoRaMacCommandsSerializeCmds+0x22>
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d126      	bne.n	80130c0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013072:	2301      	movs	r3, #1
 8013074:	e039      	b.n	80130ea <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013076:	7efb      	ldrb	r3, [r7, #27]
 8013078:	68fa      	ldr	r2, [r7, #12]
 801307a:	1ad2      	subs	r2, r2, r3
 801307c:	69fb      	ldr	r3, [r7, #28]
 801307e:	689b      	ldr	r3, [r3, #8]
 8013080:	3301      	adds	r3, #1
 8013082:	429a      	cmp	r2, r3
 8013084:	d320      	bcc.n	80130c8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013086:	7efb      	ldrb	r3, [r7, #27]
 8013088:	1c5a      	adds	r2, r3, #1
 801308a:	76fa      	strb	r2, [r7, #27]
 801308c:	461a      	mov	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	4413      	add	r3, r2
 8013092:	69fa      	ldr	r2, [r7, #28]
 8013094:	7912      	ldrb	r2, [r2, #4]
 8013096:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013098:	7efb      	ldrb	r3, [r7, #27]
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	18d0      	adds	r0, r2, r3
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	1d59      	adds	r1, r3, #5
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	689b      	ldr	r3, [r3, #8]
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	461a      	mov	r2, r3
 80130aa:	f005 fa7c 	bl	80185a6 <memcpy1>
            itr += curElement->PayloadSize;
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	b2da      	uxtb	r2, r3
 80130b4:	7efb      	ldrb	r3, [r7, #27]
 80130b6:	4413      	add	r3, r2
 80130b8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d1d7      	bne.n	8013076 <LoRaMacCommandsSerializeCmds+0x26>
 80130c6:	e009      	b.n	80130dc <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80130c8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80130ca:	e007      	b.n	80130dc <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80130d2:	69f8      	ldr	r0, [r7, #28]
 80130d4:	f7ff ff2e 	bl	8012f34 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d1f4      	bne.n	80130cc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80130e2:	68b8      	ldr	r0, [r7, #8]
 80130e4:	f7ff ff9e 	bl	8013024 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80130e8:	2300      	movs	r3, #0
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3720      	adds	r7, #32
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	200017f8 	.word	0x200017f8

080130f8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80130f8:	b480      	push	{r7}
 80130fa:	b085      	sub	sp, #20
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d101      	bne.n	801310a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013106:	2301      	movs	r3, #1
 8013108:	e016      	b.n	8013138 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801310a:	4b0e      	ldr	r3, [pc, #56]	; (8013144 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8013116:	e00b      	b.n	8013130 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	7b1b      	ldrb	r3, [r3, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d004      	beq.n	801312a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2201      	movs	r2, #1
 8013124:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8013126:	2300      	movs	r3, #0
 8013128:	e006      	b.n	8013138 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d1f0      	bne.n	8013118 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013136:	2300      	movs	r3, #0
}
 8013138:	4618      	mov	r0, r3
 801313a:	3714      	adds	r7, #20
 801313c:	46bd      	mov	sp, r7
 801313e:	bc80      	pop	{r7}
 8013140:	4770      	bx	lr
 8013142:	bf00      	nop
 8013144:	200017f8 	.word	0x200017f8

08013148 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013148:	b480      	push	{r7}
 801314a:	b085      	sub	sp, #20
 801314c:	af00      	add	r7, sp, #0
 801314e:	4603      	mov	r3, r0
 8013150:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013156:	79fb      	ldrb	r3, [r7, #7]
 8013158:	3b02      	subs	r3, #2
 801315a:	2b11      	cmp	r3, #17
 801315c:	d850      	bhi.n	8013200 <LoRaMacCommandsGetCmdSize+0xb8>
 801315e:	a201      	add	r2, pc, #4	; (adr r2, 8013164 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013164:	080131ad 	.word	0x080131ad
 8013168:	080131b3 	.word	0x080131b3
 801316c:	080131b9 	.word	0x080131b9
 8013170:	080131bf 	.word	0x080131bf
 8013174:	080131c5 	.word	0x080131c5
 8013178:	080131cb 	.word	0x080131cb
 801317c:	080131d1 	.word	0x080131d1
 8013180:	080131d7 	.word	0x080131d7
 8013184:	080131dd 	.word	0x080131dd
 8013188:	08013201 	.word	0x08013201
 801318c:	08013201 	.word	0x08013201
 8013190:	080131e3 	.word	0x080131e3
 8013194:	08013201 	.word	0x08013201
 8013198:	08013201 	.word	0x08013201
 801319c:	080131e9 	.word	0x080131e9
 80131a0:	080131ef 	.word	0x080131ef
 80131a4:	080131f5 	.word	0x080131f5
 80131a8:	080131fb 	.word	0x080131fb
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80131ac:	2303      	movs	r3, #3
 80131ae:	73fb      	strb	r3, [r7, #15]
            break;
 80131b0:	e027      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80131b2:	2305      	movs	r3, #5
 80131b4:	73fb      	strb	r3, [r7, #15]
            break;
 80131b6:	e024      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80131b8:	2302      	movs	r3, #2
 80131ba:	73fb      	strb	r3, [r7, #15]
            break;
 80131bc:	e021      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80131be:	2305      	movs	r3, #5
 80131c0:	73fb      	strb	r3, [r7, #15]
            break;
 80131c2:	e01e      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80131c4:	2301      	movs	r3, #1
 80131c6:	73fb      	strb	r3, [r7, #15]
            break;
 80131c8:	e01b      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80131ca:	2306      	movs	r3, #6
 80131cc:	73fb      	strb	r3, [r7, #15]
            break;
 80131ce:	e018      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80131d0:	2302      	movs	r3, #2
 80131d2:	73fb      	strb	r3, [r7, #15]
            break;
 80131d4:	e015      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80131d6:	2302      	movs	r3, #2
 80131d8:	73fb      	strb	r3, [r7, #15]
            break;
 80131da:	e012      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80131dc:	2305      	movs	r3, #5
 80131de:	73fb      	strb	r3, [r7, #15]
            break;
 80131e0:	e00f      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80131e2:	2306      	movs	r3, #6
 80131e4:	73fb      	strb	r3, [r7, #15]
            break;
 80131e6:	e00c      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80131e8:	2301      	movs	r3, #1
 80131ea:	73fb      	strb	r3, [r7, #15]
            break;
 80131ec:	e009      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80131ee:	2305      	movs	r3, #5
 80131f0:	73fb      	strb	r3, [r7, #15]
            break;
 80131f2:	e006      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80131f4:	2304      	movs	r3, #4
 80131f6:	73fb      	strb	r3, [r7, #15]
            break;
 80131f8:	e003      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80131fa:	2304      	movs	r3, #4
 80131fc:	73fb      	strb	r3, [r7, #15]
            break;
 80131fe:	e000      	b.n	8013202 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013200:	bf00      	nop
        }
    }
    return cidSize;
 8013202:	7bfb      	ldrb	r3, [r7, #15]
}
 8013204:	4618      	mov	r0, r3
 8013206:	3714      	adds	r7, #20
 8013208:	46bd      	mov	sp, r7
 801320a:	bc80      	pop	{r7}
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop

08013210 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	4a07      	ldr	r2, [pc, #28]	; (8013238 <IncreaseBufferPointer+0x28>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d102      	bne.n	8013226 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013220:	4b06      	ldr	r3, [pc, #24]	; (801323c <IncreaseBufferPointer+0x2c>)
 8013222:	607b      	str	r3, [r7, #4]
 8013224:	e002      	b.n	801322c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	3304      	adds	r3, #4
 801322a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801322c:	687b      	ldr	r3, [r7, #4]
}
 801322e:	4618      	mov	r0, r3
 8013230:	370c      	adds	r7, #12
 8013232:	46bd      	mov	sp, r7
 8013234:	bc80      	pop	{r7}
 8013236:	4770      	bx	lr
 8013238:	20001a20 	.word	0x20001a20
 801323c:	20001a10 	.word	0x20001a10

08013240 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	4603      	mov	r3, r0
 8013248:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801324a:	79fb      	ldrb	r3, [r7, #7]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d101      	bne.n	8013254 <IsListEmpty+0x14>
    {
        return true;
 8013250:	2301      	movs	r3, #1
 8013252:	e000      	b.n	8013256 <IsListEmpty+0x16>
    }
    return false;
 8013254:	2300      	movs	r3, #0
}
 8013256:	4618      	mov	r0, r3
 8013258:	370c      	adds	r7, #12
 801325a:	46bd      	mov	sp, r7
 801325c:	bc80      	pop	{r7}
 801325e:	4770      	bx	lr

08013260 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013260:	b480      	push	{r7}
 8013262:	b083      	sub	sp, #12
 8013264:	af00      	add	r7, sp, #0
 8013266:	4603      	mov	r3, r0
 8013268:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801326a:	79fb      	ldrb	r3, [r7, #7]
 801326c:	2b04      	cmp	r3, #4
 801326e:	d901      	bls.n	8013274 <IsListFull+0x14>
    {
        return true;
 8013270:	2301      	movs	r3, #1
 8013272:	e000      	b.n	8013276 <IsListFull+0x16>
    }
    return false;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	370c      	adds	r7, #12
 801327a:	46bd      	mov	sp, r7
 801327c:	bc80      	pop	{r7}
 801327e:	4770      	bx	lr

08013280 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b086      	sub	sp, #24
 8013284:	af00      	add	r7, sp, #0
 8013286:	4603      	mov	r3, r0
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	607a      	str	r2, [r7, #4]
 801328c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013292:	4b13      	ldr	r3, [pc, #76]	; (80132e0 <GetElement+0x60>)
 8013294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013298:	4618      	mov	r0, r3
 801329a:	f7ff ffd1 	bl	8013240 <IsListEmpty>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d001      	beq.n	80132a8 <GetElement+0x28>
    {
        return NULL;
 80132a4:	2300      	movs	r3, #0
 80132a6:	e017      	b.n	80132d8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80132a8:	2300      	movs	r3, #0
 80132aa:	74fb      	strb	r3, [r7, #19]
 80132ac:	e00d      	b.n	80132ca <GetElement+0x4a>
    {
        if( element->Request == request )
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	7bfa      	ldrb	r2, [r7, #15]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d101      	bne.n	80132bc <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	e00d      	b.n	80132d8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80132bc:	6978      	ldr	r0, [r7, #20]
 80132be:	f7ff ffa7 	bl	8013210 <IncreaseBufferPointer>
 80132c2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80132c4:	7cfb      	ldrb	r3, [r7, #19]
 80132c6:	3301      	adds	r3, #1
 80132c8:	74fb      	strb	r3, [r7, #19]
 80132ca:	4b05      	ldr	r3, [pc, #20]	; (80132e0 <GetElement+0x60>)
 80132cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80132d0:	7cfa      	ldrb	r2, [r7, #19]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d3eb      	bcc.n	80132ae <GetElement+0x2e>
    }

    return NULL;
 80132d6:	2300      	movs	r3, #0
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3718      	adds	r7, #24
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	20001a04 	.word	0x20001a04

080132e4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80132ec:	4a0c      	ldr	r2, [pc, #48]	; (8013320 <LoRaMacConfirmQueueInit+0x3c>)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80132f2:	4b0b      	ldr	r3, [pc, #44]	; (8013320 <LoRaMacConfirmQueueInit+0x3c>)
 80132f4:	2200      	movs	r2, #0
 80132f6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80132fa:	4b09      	ldr	r3, [pc, #36]	; (8013320 <LoRaMacConfirmQueueInit+0x3c>)
 80132fc:	4a09      	ldr	r2, [pc, #36]	; (8013324 <LoRaMacConfirmQueueInit+0x40>)
 80132fe:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013300:	4b07      	ldr	r3, [pc, #28]	; (8013320 <LoRaMacConfirmQueueInit+0x3c>)
 8013302:	4a08      	ldr	r2, [pc, #32]	; (8013324 <LoRaMacConfirmQueueInit+0x40>)
 8013304:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013306:	2214      	movs	r2, #20
 8013308:	21ff      	movs	r1, #255	; 0xff
 801330a:	4806      	ldr	r0, [pc, #24]	; (8013324 <LoRaMacConfirmQueueInit+0x40>)
 801330c:	f005 f986 	bl	801861c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013310:	4b03      	ldr	r3, [pc, #12]	; (8013320 <LoRaMacConfirmQueueInit+0x3c>)
 8013312:	2201      	movs	r2, #1
 8013314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013318:	bf00      	nop
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	20001a04 	.word	0x20001a04
 8013324:	20001a10 	.word	0x20001a10

08013328 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013330:	4b19      	ldr	r3, [pc, #100]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 8013332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013336:	4618      	mov	r0, r3
 8013338:	f7ff ff92 	bl	8013260 <IsListFull>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d001      	beq.n	8013346 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013342:	2300      	movs	r3, #0
 8013344:	e024      	b.n	8013390 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013346:	4b14      	ldr	r3, [pc, #80]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 8013348:	689b      	ldr	r3, [r3, #8]
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	7812      	ldrb	r2, [r2, #0]
 801334e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013350:	4b11      	ldr	r3, [pc, #68]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 8013352:	689b      	ldr	r3, [r3, #8]
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	7852      	ldrb	r2, [r2, #1]
 8013358:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801335a:	4b0f      	ldr	r3, [pc, #60]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 801335c:	689b      	ldr	r3, [r3, #8]
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	78d2      	ldrb	r2, [r2, #3]
 8013362:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013364:	4b0c      	ldr	r3, [pc, #48]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 8013366:	689b      	ldr	r3, [r3, #8]
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	7892      	ldrb	r2, [r2, #2]
 801336c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801336e:	4b0a      	ldr	r3, [pc, #40]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 8013370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013374:	3301      	adds	r3, #1
 8013376:	b2da      	uxtb	r2, r3
 8013378:	4b07      	ldr	r3, [pc, #28]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 801337a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801337e:	4b06      	ldr	r3, [pc, #24]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 8013380:	689b      	ldr	r3, [r3, #8]
 8013382:	4618      	mov	r0, r3
 8013384:	f7ff ff44 	bl	8013210 <IncreaseBufferPointer>
 8013388:	4603      	mov	r3, r0
 801338a:	4a03      	ldr	r2, [pc, #12]	; (8013398 <LoRaMacConfirmQueueAdd+0x70>)
 801338c:	6093      	str	r3, [r2, #8]

    return true;
 801338e:	2301      	movs	r3, #1
}
 8013390:	4618      	mov	r0, r3
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	20001a04 	.word	0x20001a04

0801339c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801339c:	b580      	push	{r7, lr}
 801339e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80133a0:	4b0e      	ldr	r3, [pc, #56]	; (80133dc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80133a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7ff ff4a 	bl	8013240 <IsListEmpty>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d001      	beq.n	80133b6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80133b2:	2300      	movs	r3, #0
 80133b4:	e010      	b.n	80133d8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80133b6:	4b09      	ldr	r3, [pc, #36]	; (80133dc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80133b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133bc:	3b01      	subs	r3, #1
 80133be:	b2da      	uxtb	r2, r3
 80133c0:	4b06      	ldr	r3, [pc, #24]	; (80133dc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80133c2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80133c6:	4b05      	ldr	r3, [pc, #20]	; (80133dc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7ff ff20 	bl	8013210 <IncreaseBufferPointer>
 80133d0:	4603      	mov	r3, r0
 80133d2:	4a02      	ldr	r2, [pc, #8]	; (80133dc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80133d4:	6053      	str	r3, [r2, #4]

    return true;
 80133d6:	2301      	movs	r3, #1
}
 80133d8:	4618      	mov	r0, r3
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	20001a04 	.word	0x20001a04

080133e0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	4603      	mov	r3, r0
 80133e8:	460a      	mov	r2, r1
 80133ea:	71fb      	strb	r3, [r7, #7]
 80133ec:	4613      	mov	r3, r2
 80133ee:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80133f0:	2300      	movs	r3, #0
 80133f2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80133f4:	4b10      	ldr	r3, [pc, #64]	; (8013438 <LoRaMacConfirmQueueSetStatus+0x58>)
 80133f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ff ff20 	bl	8013240 <IsListEmpty>
 8013400:	4603      	mov	r3, r0
 8013402:	f083 0301 	eor.w	r3, r3, #1
 8013406:	b2db      	uxtb	r3, r3
 8013408:	2b00      	cmp	r3, #0
 801340a:	d011      	beq.n	8013430 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801340c:	4b0a      	ldr	r3, [pc, #40]	; (8013438 <LoRaMacConfirmQueueSetStatus+0x58>)
 801340e:	6859      	ldr	r1, [r3, #4]
 8013410:	4b09      	ldr	r3, [pc, #36]	; (8013438 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013412:	689a      	ldr	r2, [r3, #8]
 8013414:	79bb      	ldrb	r3, [r7, #6]
 8013416:	4618      	mov	r0, r3
 8013418:	f7ff ff32 	bl	8013280 <GetElement>
 801341c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d005      	beq.n	8013430 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	79fa      	ldrb	r2, [r7, #7]
 8013428:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	2201      	movs	r2, #1
 801342e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013430:	bf00      	nop
 8013432:	3710      	adds	r7, #16
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	20001a04 	.word	0x20001a04

0801343c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	4603      	mov	r3, r0
 8013444:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013446:	2300      	movs	r3, #0
 8013448:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801344a:	4b10      	ldr	r3, [pc, #64]	; (801348c <LoRaMacConfirmQueueGetStatus+0x50>)
 801344c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013450:	4618      	mov	r0, r3
 8013452:	f7ff fef5 	bl	8013240 <IsListEmpty>
 8013456:	4603      	mov	r3, r0
 8013458:	f083 0301 	eor.w	r3, r3, #1
 801345c:	b2db      	uxtb	r3, r3
 801345e:	2b00      	cmp	r3, #0
 8013460:	d00e      	beq.n	8013480 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013462:	4b0a      	ldr	r3, [pc, #40]	; (801348c <LoRaMacConfirmQueueGetStatus+0x50>)
 8013464:	6859      	ldr	r1, [r3, #4]
 8013466:	4b09      	ldr	r3, [pc, #36]	; (801348c <LoRaMacConfirmQueueGetStatus+0x50>)
 8013468:	689a      	ldr	r2, [r3, #8]
 801346a:	79fb      	ldrb	r3, [r7, #7]
 801346c:	4618      	mov	r0, r3
 801346e:	f7ff ff07 	bl	8013280 <GetElement>
 8013472:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d002      	beq.n	8013480 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	785b      	ldrb	r3, [r3, #1]
 801347e:	e000      	b.n	8013482 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013480:	2301      	movs	r3, #1
}
 8013482:	4618      	mov	r0, r3
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	20001a04 	.word	0x20001a04

08013490 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	4603      	mov	r3, r0
 8013498:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801349a:	4b16      	ldr	r3, [pc, #88]	; (80134f4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80134a0:	4a14      	ldr	r2, [pc, #80]	; (80134f4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80134a2:	79fb      	ldrb	r3, [r7, #7]
 80134a4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80134a8:	4b12      	ldr	r3, [pc, #72]	; (80134f4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80134aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7ff fec6 	bl	8013240 <IsListEmpty>
 80134b4:	4603      	mov	r3, r0
 80134b6:	f083 0301 	eor.w	r3, r3, #1
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d015      	beq.n	80134ec <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	79fa      	ldrb	r2, [r7, #7]
 80134c4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	78db      	ldrb	r3, [r3, #3]
 80134ca:	f083 0301 	eor.w	r3, r3, #1
 80134ce:	b2db      	uxtb	r3, r3
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2201      	movs	r2, #1
 80134d8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80134da:	68f8      	ldr	r0, [r7, #12]
 80134dc:	f7ff fe98 	bl	8013210 <IncreaseBufferPointer>
 80134e0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80134e2:	4b04      	ldr	r3, [pc, #16]	; (80134f4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	68fa      	ldr	r2, [r7, #12]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d1e9      	bne.n	80134c0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80134ec:	bf00      	nop
 80134ee:	3710      	adds	r7, #16
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	20001a04 	.word	0x20001a04

080134f8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013502:	4b09      	ldr	r3, [pc, #36]	; (8013528 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013504:	6859      	ldr	r1, [r3, #4]
 8013506:	4b08      	ldr	r3, [pc, #32]	; (8013528 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013508:	689a      	ldr	r2, [r3, #8]
 801350a:	79fb      	ldrb	r3, [r7, #7]
 801350c:	4618      	mov	r0, r3
 801350e:	f7ff feb7 	bl	8013280 <GetElement>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013518:	2301      	movs	r3, #1
 801351a:	e000      	b.n	801351e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801351c:	2300      	movs	r3, #0
}
 801351e:	4618      	mov	r0, r3
 8013520:	3708      	adds	r7, #8
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	20001a04 	.word	0x20001a04

0801352c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013534:	4b22      	ldr	r3, [pc, #136]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013536:	f893 3020 	ldrb.w	r3, [r3, #32]
 801353a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801353c:	2300      	movs	r3, #0
 801353e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013540:	2300      	movs	r3, #0
 8013542:	73fb      	strb	r3, [r7, #15]
 8013544:	e032      	b.n	80135ac <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013546:	4b1e      	ldr	r3, [pc, #120]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	781a      	ldrb	r2, [r3, #0]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013550:	4b1b      	ldr	r3, [pc, #108]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	785a      	ldrb	r2, [r3, #1]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801355a:	4b19      	ldr	r3, [pc, #100]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	789b      	ldrb	r3, [r3, #2]
 8013560:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013562:	7b7b      	ldrb	r3, [r7, #13]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d005      	beq.n	8013574 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013568:	4b15      	ldr	r3, [pc, #84]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	4798      	blx	r3
 8013572:	e00b      	b.n	801358c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013574:	4b12      	ldr	r3, [pc, #72]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801357c:	4b10      	ldr	r3, [pc, #64]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	785b      	ldrb	r3, [r3, #1]
 8013582:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013584:	4b0e      	ldr	r3, [pc, #56]	; (80135c0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	78db      	ldrb	r3, [r3, #3]
 801358a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801358c:	f7ff ff06 	bl	801339c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013590:	7b7b      	ldrb	r3, [r7, #13]
 8013592:	f083 0301 	eor.w	r3, r3, #1
 8013596:	b2db      	uxtb	r3, r3
 8013598:	2b00      	cmp	r3, #0
 801359a:	d004      	beq.n	80135a6 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801359c:	f107 0308 	add.w	r3, r7, #8
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7ff fec1 	bl	8013328 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80135a6:	7bfb      	ldrb	r3, [r7, #15]
 80135a8:	3301      	adds	r3, #1
 80135aa:	73fb      	strb	r3, [r7, #15]
 80135ac:	7bfa      	ldrb	r2, [r7, #15]
 80135ae:	7bbb      	ldrb	r3, [r7, #14]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d3c8      	bcc.n	8013546 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 80135b4:	bf00      	nop
 80135b6:	bf00      	nop
 80135b8:	3710      	adds	r7, #16
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	20001a04 	.word	0x20001a04

080135c4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80135c4:	b480      	push	{r7}
 80135c6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80135c8:	4b03      	ldr	r3, [pc, #12]	; (80135d8 <LoRaMacConfirmQueueGetCnt+0x14>)
 80135ca:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bc80      	pop	{r7}
 80135d4:	4770      	bx	lr
 80135d6:	bf00      	nop
 80135d8:	20001a04 	.word	0x20001a04

080135dc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80135e0:	4b06      	ldr	r3, [pc, #24]	; (80135fc <LoRaMacConfirmQueueIsFull+0x20>)
 80135e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7ff fe3a 	bl	8013260 <IsListFull>
 80135ec:	4603      	mov	r3, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d001      	beq.n	80135f6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80135f2:	2301      	movs	r3, #1
 80135f4:	e000      	b.n	80135f8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80135f6:	2300      	movs	r3, #0
    }
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	20001a04 	.word	0x20001a04

08013600 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b08e      	sub	sp, #56	; 0x38
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	607b      	str	r3, [r7, #4]
 801360a:	460b      	mov	r3, r1
 801360c:	817b      	strh	r3, [r7, #10]
 801360e:	4613      	mov	r3, r2
 8013610:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d101      	bne.n	801361c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013618:	2309      	movs	r3, #9
 801361a:	e086      	b.n	801372a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 801361c:	2300      	movs	r3, #0
 801361e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013622:	2301      	movs	r3, #1
 8013624:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013626:	2300      	movs	r3, #0
 8013628:	623b      	str	r3, [r7, #32]
 801362a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801362e:	2200      	movs	r2, #0
 8013630:	601a      	str	r2, [r3, #0]
 8013632:	605a      	str	r2, [r3, #4]
 8013634:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013636:	2300      	movs	r3, #0
 8013638:	613b      	str	r3, [r7, #16]
 801363a:	f107 0314 	add.w	r3, r7, #20
 801363e:	2200      	movs	r2, #0
 8013640:	601a      	str	r2, [r3, #0]
 8013642:	605a      	str	r2, [r3, #4]
 8013644:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013646:	2301      	movs	r3, #1
 8013648:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801364a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801364e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	b2db      	uxtb	r3, r3
 8013654:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	0a1b      	lsrs	r3, r3, #8
 801365a:	b2db      	uxtb	r3, r3
 801365c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	0c1b      	lsrs	r3, r3, #16
 8013662:	b2db      	uxtb	r3, r3
 8013664:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	0e1b      	lsrs	r3, r3, #24
 801366a:	b2db      	uxtb	r3, r3
 801366c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013670:	b2db      	uxtb	r3, r3
 8013672:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013676:	0a1b      	lsrs	r3, r3, #8
 8013678:	b2db      	uxtb	r3, r3
 801367a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801367c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801367e:	0c1b      	lsrs	r3, r3, #16
 8013680:	b2db      	uxtb	r3, r3
 8013682:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013686:	0e1b      	lsrs	r3, r3, #24
 8013688:	b2db      	uxtb	r3, r3
 801368a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801368c:	e048      	b.n	8013720 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801368e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013690:	b2db      	uxtb	r3, r3
 8013692:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013694:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013696:	3301      	adds	r3, #1
 8013698:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801369a:	f107 0320 	add.w	r3, r7, #32
 801369e:	7a7a      	ldrb	r2, [r7, #9]
 80136a0:	f107 0010 	add.w	r0, r7, #16
 80136a4:	2110      	movs	r1, #16
 80136a6:	f7f8 fcee 	bl	800c086 <SecureElementAesEncrypt>
 80136aa:	4603      	mov	r3, r0
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136b0:	230e      	movs	r3, #14
 80136b2:	e03a      	b.n	801372a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80136b4:	2300      	movs	r3, #0
 80136b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80136ba:	e01e      	b.n	80136fa <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80136bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80136c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80136c4:	4413      	add	r3, r2
 80136c6:	461a      	mov	r2, r3
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	4413      	add	r3, r2
 80136cc:	7819      	ldrb	r1, [r3, #0]
 80136ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80136d2:	3338      	adds	r3, #56	; 0x38
 80136d4:	443b      	add	r3, r7
 80136d6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80136da:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80136de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80136e2:	4403      	add	r3, r0
 80136e4:	4618      	mov	r0, r3
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	4403      	add	r3, r0
 80136ea:	404a      	eors	r2, r1
 80136ec:	b2d2      	uxtb	r2, r2
 80136ee:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80136f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80136f4:	3301      	adds	r3, #1
 80136f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80136fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80136fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013702:	2a10      	cmp	r2, #16
 8013704:	bfa8      	it	ge
 8013706:	2210      	movge	r2, #16
 8013708:	b212      	sxth	r2, r2
 801370a:	4293      	cmp	r3, r2
 801370c:	dbd6      	blt.n	80136bc <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801370e:	897b      	ldrh	r3, [r7, #10]
 8013710:	3b10      	subs	r3, #16
 8013712:	b29b      	uxth	r3, r3
 8013714:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801371a:	3310      	adds	r3, #16
 801371c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013720:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013724:	2b00      	cmp	r3, #0
 8013726:	dcb2      	bgt.n	801368e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013728:	2300      	movs	r3, #0
}
 801372a:	4618      	mov	r0, r3
 801372c:	3738      	adds	r7, #56	; 0x38
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}

08013732 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013732:	b490      	push	{r4, r7}
 8013734:	b082      	sub	sp, #8
 8013736:	af00      	add	r7, sp, #0
 8013738:	4604      	mov	r4, r0
 801373a:	4608      	mov	r0, r1
 801373c:	4611      	mov	r1, r2
 801373e:	461a      	mov	r2, r3
 8013740:	4623      	mov	r3, r4
 8013742:	80fb      	strh	r3, [r7, #6]
 8013744:	4603      	mov	r3, r0
 8013746:	717b      	strb	r3, [r7, #5]
 8013748:	460b      	mov	r3, r1
 801374a:	713b      	strb	r3, [r7, #4]
 801374c:	4613      	mov	r3, r2
 801374e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d101      	bne.n	801375a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013756:	2309      	movs	r3, #9
 8013758:	e04e      	b.n	80137f8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	2249      	movs	r2, #73	; 0x49
 801375e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	3301      	adds	r3, #1
 8013764:	2200      	movs	r2, #0
 8013766:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	3302      	adds	r3, #2
 801376c:	2200      	movs	r2, #0
 801376e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	3303      	adds	r3, #3
 8013774:	2200      	movs	r2, #0
 8013776:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	3304      	adds	r3, #4
 801377c:	2200      	movs	r2, #0
 801377e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	3305      	adds	r3, #5
 8013784:	78fa      	ldrb	r2, [r7, #3]
 8013786:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	3306      	adds	r3, #6
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	b2d2      	uxtb	r2, r2
 8013790:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	0a1a      	lsrs	r2, r3, #8
 8013796:	69bb      	ldr	r3, [r7, #24]
 8013798:	3307      	adds	r3, #7
 801379a:	b2d2      	uxtb	r2, r2
 801379c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801379e:	693b      	ldr	r3, [r7, #16]
 80137a0:	0c1a      	lsrs	r2, r3, #16
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	3308      	adds	r3, #8
 80137a6:	b2d2      	uxtb	r2, r2
 80137a8:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	0e1a      	lsrs	r2, r3, #24
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	3309      	adds	r3, #9
 80137b2:	b2d2      	uxtb	r2, r2
 80137b4:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	330a      	adds	r3, #10
 80137ba:	697a      	ldr	r2, [r7, #20]
 80137bc:	b2d2      	uxtb	r2, r2
 80137be:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	0a1a      	lsrs	r2, r3, #8
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	330b      	adds	r3, #11
 80137c8:	b2d2      	uxtb	r2, r2
 80137ca:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	0c1a      	lsrs	r2, r3, #16
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	330c      	adds	r3, #12
 80137d4:	b2d2      	uxtb	r2, r2
 80137d6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	0e1a      	lsrs	r2, r3, #24
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	330d      	adds	r3, #13
 80137e0:	b2d2      	uxtb	r2, r2
 80137e2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	330e      	adds	r3, #14
 80137e8:	2200      	movs	r2, #0
 80137ea:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	330f      	adds	r3, #15
 80137f0:	88fa      	ldrh	r2, [r7, #6]
 80137f2:	b2d2      	uxtb	r2, r2
 80137f4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80137f6:	2300      	movs	r3, #0
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bc90      	pop	{r4, r7}
 8013800:	4770      	bx	lr

08013802 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013802:	b590      	push	{r4, r7, lr}
 8013804:	b08b      	sub	sp, #44	; 0x2c
 8013806:	af04      	add	r7, sp, #16
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	4608      	mov	r0, r1
 801380c:	4611      	mov	r1, r2
 801380e:	461a      	mov	r2, r3
 8013810:	4603      	mov	r3, r0
 8013812:	807b      	strh	r3, [r7, #2]
 8013814:	460b      	mov	r3, r1
 8013816:	707b      	strb	r3, [r7, #1]
 8013818:	4613      	mov	r3, r2
 801381a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d002      	beq.n	8013828 <ComputeCmacB0+0x26>
 8013822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013824:	2b00      	cmp	r3, #0
 8013826:	d101      	bne.n	801382c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013828:	2309      	movs	r3, #9
 801382a:	e024      	b.n	8013876 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801382c:	887b      	ldrh	r3, [r7, #2]
 801382e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013832:	d901      	bls.n	8013838 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013834:	230d      	movs	r3, #13
 8013836:	e01e      	b.n	8013876 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013838:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 801383c:	783a      	ldrb	r2, [r7, #0]
 801383e:	7879      	ldrb	r1, [r7, #1]
 8013840:	8878      	ldrh	r0, [r7, #2]
 8013842:	f107 0308 	add.w	r3, r7, #8
 8013846:	9302      	str	r3, [sp, #8]
 8013848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384a:	9301      	str	r3, [sp, #4]
 801384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	4623      	mov	r3, r4
 8013852:	f7ff ff6e 	bl	8013732 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013856:	7879      	ldrb	r1, [r7, #1]
 8013858:	887a      	ldrh	r2, [r7, #2]
 801385a:	f107 0008 	add.w	r0, r7, #8
 801385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013860:	9300      	str	r3, [sp, #0]
 8013862:	460b      	mov	r3, r1
 8013864:	6879      	ldr	r1, [r7, #4]
 8013866:	f7f8 fbc1 	bl	800bfec <SecureElementComputeAesCmac>
 801386a:	4603      	mov	r3, r0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d001      	beq.n	8013874 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013870:	230e      	movs	r3, #14
 8013872:	e000      	b.n	8013876 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013874:	2300      	movs	r3, #0
}
 8013876:	4618      	mov	r0, r3
 8013878:	371c      	adds	r7, #28
 801387a:	46bd      	mov	sp, r7
 801387c:	bd90      	pop	{r4, r7, pc}

0801387e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801387e:	b590      	push	{r4, r7, lr}
 8013880:	b0cd      	sub	sp, #308	; 0x134
 8013882:	af04      	add	r7, sp, #16
 8013884:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8013888:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 801388c:	6020      	str	r0, [r4, #0]
 801388e:	460c      	mov	r4, r1
 8013890:	4610      	mov	r0, r2
 8013892:	4619      	mov	r1, r3
 8013894:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013898:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801389c:	4622      	mov	r2, r4
 801389e:	801a      	strh	r2, [r3, #0]
 80138a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138a4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80138a8:	4602      	mov	r2, r0
 80138aa:	701a      	strb	r2, [r3, #0]
 80138ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80138b4:	460a      	mov	r2, r1
 80138b6:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80138b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d101      	bne.n	80138ca <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80138c6:	2309      	movs	r3, #9
 80138c8:	e063      	b.n	8013992 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80138ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138ce:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80138d2:	881b      	ldrh	r3, [r3, #0]
 80138d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80138d8:	d901      	bls.n	80138de <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80138da:	230d      	movs	r3, #13
 80138dc:	e059      	b.n	8013992 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80138de:	f107 030c 	add.w	r3, r7, #12
 80138e2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80138e6:	2100      	movs	r1, #0
 80138e8:	4618      	mov	r0, r3
 80138ea:	f004 fe97 	bl	801861c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80138ee:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80138f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80138f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80138fa:	781a      	ldrb	r2, [r3, #0]
 80138fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013900:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013904:	7819      	ldrb	r1, [r3, #0]
 8013906:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801390a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801390e:	8818      	ldrh	r0, [r3, #0]
 8013910:	f107 030c 	add.w	r3, r7, #12
 8013914:	9302      	str	r3, [sp, #8]
 8013916:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801391a:	9301      	str	r3, [sp, #4]
 801391c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013920:	9300      	str	r3, [sp, #0]
 8013922:	4623      	mov	r3, r4
 8013924:	f7ff ff05 	bl	8013732 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013928:	f107 030c 	add.w	r3, r7, #12
 801392c:	3310      	adds	r3, #16
 801392e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8013932:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8013936:	8812      	ldrh	r2, [r2, #0]
 8013938:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801393c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8013940:	6809      	ldr	r1, [r1, #0]
 8013942:	4618      	mov	r0, r3
 8013944:	f004 fe2f 	bl	80185a6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013948:	2306      	movs	r3, #6
 801394a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801394e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013952:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013956:	881b      	ldrh	r3, [r3, #0]
 8013958:	3310      	adds	r3, #16
 801395a:	b299      	uxth	r1, r3
 801395c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013960:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	f107 000c 	add.w	r0, r7, #12
 801396a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801396e:	f7f8 fb5b 	bl	800c028 <SecureElementVerifyAesCmac>
 8013972:	4603      	mov	r3, r0
 8013974:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801397c:	2b00      	cmp	r3, #0
 801397e:	d101      	bne.n	8013984 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013980:	2300      	movs	r3, #0
 8013982:	e006      	b.n	8013992 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013984:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013988:	2b01      	cmp	r3, #1
 801398a:	d101      	bne.n	8013990 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801398c:	2301      	movs	r3, #1
 801398e:	e000      	b.n	8013992 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013990:	230e      	movs	r3, #14
}
 8013992:	4618      	mov	r0, r3
 8013994:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8013998:	46bd      	mov	sp, r7
 801399a:	bd90      	pop	{r4, r7, pc}

0801399c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801399c:	b480      	push	{r7}
 801399e:	b085      	sub	sp, #20
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	4603      	mov	r3, r0
 80139a4:	6039      	str	r1, [r7, #0]
 80139a6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80139a8:	2300      	movs	r3, #0
 80139aa:	73fb      	strb	r3, [r7, #15]
 80139ac:	e011      	b.n	80139d2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80139ae:	7bfb      	ldrb	r3, [r7, #15]
 80139b0:	4a0c      	ldr	r2, [pc, #48]	; (80139e4 <GetKeyAddrItem+0x48>)
 80139b2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80139b6:	79fa      	ldrb	r2, [r7, #7]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d107      	bne.n	80139cc <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80139bc:	7bfb      	ldrb	r3, [r7, #15]
 80139be:	009b      	lsls	r3, r3, #2
 80139c0:	4a08      	ldr	r2, [pc, #32]	; (80139e4 <GetKeyAddrItem+0x48>)
 80139c2:	441a      	add	r2, r3
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80139c8:	2300      	movs	r3, #0
 80139ca:	e006      	b.n	80139da <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80139cc:	7bfb      	ldrb	r3, [r7, #15]
 80139ce:	3301      	adds	r3, #1
 80139d0:	73fb      	strb	r3, [r7, #15]
 80139d2:	7bfb      	ldrb	r3, [r7, #15]
 80139d4:	2b01      	cmp	r3, #1
 80139d6:	d9ea      	bls.n	80139ae <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80139d8:	230b      	movs	r3, #11
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3714      	adds	r7, #20
 80139de:	46bd      	mov	sp, r7
 80139e0:	bc80      	pop	{r7}
 80139e2:	4770      	bx	lr
 80139e4:	20000120 	.word	0x20000120

080139e8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b088      	sub	sp, #32
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60b9      	str	r1, [r7, #8]
 80139f0:	607a      	str	r2, [r7, #4]
 80139f2:	461a      	mov	r2, r3
 80139f4:	4603      	mov	r3, r0
 80139f6:	73fb      	strb	r3, [r7, #15]
 80139f8:	4613      	mov	r3, r2
 80139fa:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80139fc:	2300      	movs	r3, #0
 80139fe:	613b      	str	r3, [r7, #16]
 8013a00:	f107 0314 	add.w	r3, r7, #20
 8013a04:	2200      	movs	r2, #0
 8013a06:	601a      	str	r2, [r3, #0]
 8013a08:	605a      	str	r2, [r3, #4]
 8013a0a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013a0c:	7bfb      	ldrb	r3, [r7, #15]
 8013a0e:	2b02      	cmp	r3, #2
 8013a10:	d002      	beq.n	8013a18 <DeriveSessionKey10x+0x30>
 8013a12:	2b03      	cmp	r3, #3
 8013a14:	d003      	beq.n	8013a1e <DeriveSessionKey10x+0x36>
 8013a16:	e005      	b.n	8013a24 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013a18:	2301      	movs	r3, #1
 8013a1a:	743b      	strb	r3, [r7, #16]
            break;
 8013a1c:	e004      	b.n	8013a28 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013a1e:	2302      	movs	r3, #2
 8013a20:	743b      	strb	r3, [r7, #16]
            break;
 8013a22:	e001      	b.n	8013a28 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013a24:	230a      	movs	r3, #10
 8013a26:	e02a      	b.n	8013a7e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	0a1b      	lsrs	r3, r3, #8
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	0c1b      	lsrs	r3, r3, #16
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	0a1b      	lsrs	r3, r3, #8
 8013a48:	b2db      	uxtb	r3, r3
 8013a4a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	0c1b      	lsrs	r3, r3, #16
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013a54:	89bb      	ldrh	r3, [r7, #12]
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013a5a:	89bb      	ldrh	r3, [r7, #12]
 8013a5c:	0a1b      	lsrs	r3, r3, #8
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013a64:	7bfa      	ldrb	r2, [r7, #15]
 8013a66:	f107 0310 	add.w	r3, r7, #16
 8013a6a:	2101      	movs	r1, #1
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7f8 fb71 	bl	800c154 <SecureElementDeriveAndStoreKey>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d001      	beq.n	8013a7c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a78:	230e      	movs	r3, #14
 8013a7a:	e000      	b.n	8013a7e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3720      	adds	r7, #32
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
	...

08013a88 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	4603      	mov	r3, r0
 8013a90:	6039      	str	r1, [r7, #0]
 8013a92:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d101      	bne.n	8013a9e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a9a:	2309      	movs	r3, #9
 8013a9c:	e03b      	b.n	8013b16 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013a9e:	79fb      	ldrb	r3, [r7, #7]
 8013aa0:	3b01      	subs	r3, #1
 8013aa2:	2b03      	cmp	r3, #3
 8013aa4:	d834      	bhi.n	8013b10 <GetLastFcntDown+0x88>
 8013aa6:	a201      	add	r2, pc, #4	; (adr r2, 8013aac <GetLastFcntDown+0x24>)
 8013aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013aac:	08013abd 	.word	0x08013abd
 8013ab0:	08013ad5 	.word	0x08013ad5
 8013ab4:	08013aed 	.word	0x08013aed
 8013ab8:	08013b05 	.word	0x08013b05
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013abc:	4b18      	ldr	r3, [pc, #96]	; (8013b20 <GetLastFcntDown+0x98>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	691a      	ldr	r2, [r3, #16]
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013ac6:	4b16      	ldr	r3, [pc, #88]	; (8013b20 <GetLastFcntDown+0x98>)
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	4b15      	ldr	r3, [pc, #84]	; (8013b20 <GetLastFcntDown+0x98>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	6912      	ldr	r2, [r2, #16]
 8013ad0:	621a      	str	r2, [r3, #32]
            break;
 8013ad2:	e01f      	b.n	8013b14 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013ad4:	4b12      	ldr	r3, [pc, #72]	; (8013b20 <GetLastFcntDown+0x98>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	695a      	ldr	r2, [r3, #20]
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013ade:	4b10      	ldr	r3, [pc, #64]	; (8013b20 <GetLastFcntDown+0x98>)
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	4b0f      	ldr	r3, [pc, #60]	; (8013b20 <GetLastFcntDown+0x98>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	6952      	ldr	r2, [r2, #20]
 8013ae8:	621a      	str	r2, [r3, #32]
            break;
 8013aea:	e013      	b.n	8013b14 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013aec:	4b0c      	ldr	r3, [pc, #48]	; (8013b20 <GetLastFcntDown+0x98>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	699a      	ldr	r2, [r3, #24]
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013af6:	4b0a      	ldr	r3, [pc, #40]	; (8013b20 <GetLastFcntDown+0x98>)
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	4b09      	ldr	r3, [pc, #36]	; (8013b20 <GetLastFcntDown+0x98>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	6992      	ldr	r2, [r2, #24]
 8013b00:	621a      	str	r2, [r3, #32]
            break;
 8013b02:	e007      	b.n	8013b14 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013b04:	4b06      	ldr	r3, [pc, #24]	; (8013b20 <GetLastFcntDown+0x98>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	69da      	ldr	r2, [r3, #28]
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	601a      	str	r2, [r3, #0]
            break;
 8013b0e:	e001      	b.n	8013b14 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013b10:	2305      	movs	r3, #5
 8013b12:	e000      	b.n	8013b16 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013b14:	2300      	movs	r3, #0
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	370c      	adds	r7, #12
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bc80      	pop	{r7}
 8013b1e:	4770      	bx	lr
 8013b20:	20001a28 	.word	0x20001a28

08013b24 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	6039      	str	r1, [r7, #0]
 8013b2e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013b30:	2300      	movs	r3, #0
 8013b32:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013b34:	f107 020c 	add.w	r2, r7, #12
 8013b38:	79fb      	ldrb	r3, [r7, #7]
 8013b3a:	4611      	mov	r1, r2
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7ff ffa3 	bl	8013a88 <GetLastFcntDown>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d001      	beq.n	8013b4c <CheckFCntDown+0x28>
    {
        return false;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	e00a      	b.n	8013b62 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	683a      	ldr	r2, [r7, #0]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d803      	bhi.n	8013b5c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013b54:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b5a:	d101      	bne.n	8013b60 <CheckFCntDown+0x3c>
    {
        return true;
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	e000      	b.n	8013b62 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013b60:	2300      	movs	r3, #0
    }
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3710      	adds	r7, #16
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}
	...

08013b6c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	4603      	mov	r3, r0
 8013b74:	6039      	str	r1, [r7, #0]
 8013b76:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013b78:	79fb      	ldrb	r3, [r7, #7]
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d81f      	bhi.n	8013bc0 <UpdateFCntDown+0x54>
 8013b80:	a201      	add	r2, pc, #4	; (adr r2, 8013b88 <UpdateFCntDown+0x1c>)
 8013b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b86:	bf00      	nop
 8013b88:	08013b99 	.word	0x08013b99
 8013b8c:	08013ba3 	.word	0x08013ba3
 8013b90:	08013bad 	.word	0x08013bad
 8013b94:	08013bb7 	.word	0x08013bb7
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013b98:	4b0c      	ldr	r3, [pc, #48]	; (8013bcc <UpdateFCntDown+0x60>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	683a      	ldr	r2, [r7, #0]
 8013b9e:	611a      	str	r2, [r3, #16]
            break;
 8013ba0:	e00f      	b.n	8013bc2 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013ba2:	4b0a      	ldr	r3, [pc, #40]	; (8013bcc <UpdateFCntDown+0x60>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	683a      	ldr	r2, [r7, #0]
 8013ba8:	615a      	str	r2, [r3, #20]
            break;
 8013baa:	e00a      	b.n	8013bc2 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <UpdateFCntDown+0x60>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	683a      	ldr	r2, [r7, #0]
 8013bb2:	619a      	str	r2, [r3, #24]
            break;
 8013bb4:	e005      	b.n	8013bc2 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013bb6:	4b05      	ldr	r3, [pc, #20]	; (8013bcc <UpdateFCntDown+0x60>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	683a      	ldr	r2, [r7, #0]
 8013bbc:	61da      	str	r2, [r3, #28]
            break;
 8013bbe:	e000      	b.n	8013bc2 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013bc0:	bf00      	nop
    }
}
 8013bc2:	bf00      	nop
 8013bc4:	370c      	adds	r7, #12
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bc80      	pop	{r7}
 8013bca:	4770      	bx	lr
 8013bcc:	20001a28 	.word	0x20001a28

08013bd0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013bd6:	4b18      	ldr	r3, [pc, #96]	; (8013c38 <ResetFCnts+0x68>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013bde:	4b16      	ldr	r3, [pc, #88]	; (8013c38 <ResetFCnts+0x68>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	f04f 32ff 	mov.w	r2, #4294967295
 8013be6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013be8:	4b13      	ldr	r3, [pc, #76]	; (8013c38 <ResetFCnts+0x68>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f04f 32ff 	mov.w	r2, #4294967295
 8013bf0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013bf2:	4b11      	ldr	r3, [pc, #68]	; (8013c38 <ResetFCnts+0x68>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8013bfa:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013bfc:	4b0e      	ldr	r3, [pc, #56]	; (8013c38 <ResetFCnts+0x68>)
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	4b0d      	ldr	r3, [pc, #52]	; (8013c38 <ResetFCnts+0x68>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	6992      	ldr	r2, [r2, #24]
 8013c06:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013c08:	2300      	movs	r3, #0
 8013c0a:	607b      	str	r3, [r7, #4]
 8013c0c:	e00b      	b.n	8013c26 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013c0e:	4b0a      	ldr	r3, [pc, #40]	; (8013c38 <ResetFCnts+0x68>)
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3306      	adds	r3, #6
 8013c16:	009b      	lsls	r3, r3, #2
 8013c18:	4413      	add	r3, r2
 8013c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c1e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	3301      	adds	r3, #1
 8013c24:	607b      	str	r3, [r7, #4]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	ddf0      	ble.n	8013c0e <ResetFCnts+0x3e>
    }
}
 8013c2c:	bf00      	nop
 8013c2e:	bf00      	nop
 8013c30:	370c      	adds	r7, #12
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bc80      	pop	{r7}
 8013c36:	4770      	bx	lr
 8013c38:	20001a28 	.word	0x20001a28

08013c3c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d101      	bne.n	8013c4e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013c4a:	2308      	movs	r3, #8
 8013c4c:	e01c      	b.n	8013c88 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013c4e:	4a10      	ldr	r2, [pc, #64]	; (8013c90 <LoRaMacCryptoInit+0x54>)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013c54:	4b0e      	ldr	r3, [pc, #56]	; (8013c90 <LoRaMacCryptoInit+0x54>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2228      	movs	r2, #40	; 0x28
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f004 fcdd 	bl	801861c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013c62:	4b0b      	ldr	r3, [pc, #44]	; (8013c90 <LoRaMacCryptoInit+0x54>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2201      	movs	r2, #1
 8013c68:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013c6a:	4b09      	ldr	r3, [pc, #36]	; (8013c90 <LoRaMacCryptoInit+0x54>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2201      	movs	r2, #1
 8013c70:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013c72:	4b07      	ldr	r3, [pc, #28]	; (8013c90 <LoRaMacCryptoInit+0x54>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	2201      	movs	r2, #1
 8013c78:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013c7a:	4b05      	ldr	r3, [pc, #20]	; (8013c90 <LoRaMacCryptoInit+0x54>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013c82:	f7ff ffa5 	bl	8013bd0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013c86:	2300      	movs	r3, #0
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	20001a28 	.word	0x20001a28

08013c94 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013c94:	b480      	push	{r7}
 8013c96:	b083      	sub	sp, #12
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013c9c:	4b04      	ldr	r3, [pc, #16]	; (8013cb0 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	687a      	ldr	r2, [r7, #4]
 8013ca2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013ca4:	2300      	movs	r3, #0
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	370c      	adds	r7, #12
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bc80      	pop	{r7}
 8013cae:	4770      	bx	lr
 8013cb0:	20001a28 	.word	0x20001a28

08013cb4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d101      	bne.n	8013cc6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013cc2:	2309      	movs	r3, #9
 8013cc4:	e006      	b.n	8013cd4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013cc6:	4b06      	ldr	r3, [pc, #24]	; (8013ce0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	1c5a      	adds	r2, r3, #1
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	370c      	adds	r7, #12
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bc80      	pop	{r7}
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	20001a28 	.word	0x20001a28

08013ce4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b088      	sub	sp, #32
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	4603      	mov	r3, r0
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
 8013cf0:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013cfa:	2312      	movs	r3, #18
 8013cfc:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d101      	bne.n	8013d08 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d04:	2309      	movs	r3, #9
 8013d06:	e035      	b.n	8013d74 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013d08:	f107 0214 	add.w	r2, r7, #20
 8013d0c:	7bfb      	ldrb	r3, [r7, #15]
 8013d0e:	4611      	mov	r1, r2
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7ff feb9 	bl	8013a88 <GetLastFcntDown>
 8013d16:	4603      	mov	r3, r0
 8013d18:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013d1a:	7efb      	ldrb	r3, [r7, #27]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d001      	beq.n	8013d24 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013d20:	7efb      	ldrb	r3, [r7, #27]
 8013d22:	e027      	b.n	8013d74 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d2a:	d103      	bne.n	8013d34 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	e01e      	b.n	8013d72 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	b29b      	uxth	r3, r3
 8013d38:	68ba      	ldr	r2, [r7, #8]
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	dd05      	ble.n	8013d50 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013d44:	697a      	ldr	r2, [r7, #20]
 8013d46:	69fb      	ldr	r3, [r7, #28]
 8013d48:	441a      	add	r2, r3
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	e010      	b.n	8013d72 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d104      	bne.n	8013d60 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013d56:	697a      	ldr	r2, [r7, #20]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013d5c:	2307      	movs	r3, #7
 8013d5e:	e009      	b.n	8013d74 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	0c1b      	lsrs	r3, r3, #16
 8013d64:	041b      	lsls	r3, r3, #16
 8013d66:	68ba      	ldr	r2, [r7, #8]
 8013d68:	4413      	add	r3, r2
 8013d6a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013d72:	2300      	movs	r3, #0
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3720      	adds	r7, #32
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d101      	bne.n	8013d8e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d8a:	2309      	movs	r3, #9
 8013d8c:	e017      	b.n	8013dbe <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013d8e:	2300      	movs	r3, #0
 8013d90:	60fb      	str	r3, [r7, #12]
 8013d92:	e010      	b.n	8013db6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013d94:	4b0c      	ldr	r3, [pc, #48]	; (8013dc8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013d96:	6819      	ldr	r1, [r3, #0]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	222c      	movs	r2, #44	; 0x2c
 8013d9c:	fb02 f303 	mul.w	r3, r2, r3
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	4413      	add	r3, r2
 8013da4:	68fa      	ldr	r2, [r7, #12]
 8013da6:	3206      	adds	r2, #6
 8013da8:	0092      	lsls	r2, r2, #2
 8013daa:	440a      	add	r2, r1
 8013dac:	3204      	adds	r2, #4
 8013dae:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	3301      	adds	r3, #1
 8013db4:	60fb      	str	r3, [r7, #12]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	ddeb      	ble.n	8013d94 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3714      	adds	r7, #20
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bc80      	pop	{r7}
 8013dc6:	4770      	bx	lr
 8013dc8:	20001a28 	.word	0x20001a28

08013dcc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	6039      	str	r1, [r7, #0]
 8013dd6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013dd8:	79fb      	ldrb	r3, [r7, #7]
 8013dda:	6839      	ldr	r1, [r7, #0]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7f8 f8a7 	bl	800bf30 <SecureElementSetKey>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d001      	beq.n	8013dec <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013de8:	230e      	movs	r3, #14
 8013dea:	e018      	b.n	8013e1e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013dec:	79fb      	ldrb	r3, [r7, #7]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d114      	bne.n	8013e1c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013df2:	4b0d      	ldr	r3, [pc, #52]	; (8013e28 <LoRaMacCryptoSetKey+0x5c>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	789b      	ldrb	r3, [r3, #2]
 8013df8:	79fa      	ldrb	r2, [r7, #7]
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f000 fa39 	bl	8014274 <LoRaMacCryptoDeriveMcRootKey>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d001      	beq.n	8013e0c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e08:	230e      	movs	r3, #14
 8013e0a:	e008      	b.n	8013e1e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013e0c:	2004      	movs	r0, #4
 8013e0e:	f000 fa5c 	bl	80142ca <LoRaMacCryptoDeriveMcKEKey>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d001      	beq.n	8013e1c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e18:	230e      	movs	r3, #14
 8013e1a:	e000      	b.n	8013e1e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013e1c:	2300      	movs	r3, #0
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3708      	adds	r7, #8
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
 8013e26:	bf00      	nop
 8013e28:	20001a28 	.word	0x20001a28

08013e2c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af02      	add	r7, sp, #8
 8013e32:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d101      	bne.n	8013e3e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e3a:	2309      	movs	r3, #9
 8013e3c:	e02d      	b.n	8013e9a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013e3e:	2301      	movs	r3, #1
 8013e40:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8013e42:	4b18      	ldr	r3, [pc, #96]	; (8013ea4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	889a      	ldrh	r2, [r3, #4]
 8013e48:	3201      	adds	r2, #1
 8013e4a:	b292      	uxth	r2, r2
 8013e4c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013e4e:	4b15      	ldr	r3, [pc, #84]	; (8013ea4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	889a      	ldrh	r2, [r3, #4]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f000 fc18 	bl	801468e <LoRaMacSerializerJoinRequest>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d001      	beq.n	8013e68 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013e64:	2310      	movs	r3, #16
 8013e66:	e018      	b.n	8013e9a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	6819      	ldr	r1, [r3, #0]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	3318      	adds	r3, #24
 8013e70:	7bfa      	ldrb	r2, [r7, #15]
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	4613      	mov	r3, r2
 8013e76:	2213      	movs	r2, #19
 8013e78:	2000      	movs	r0, #0
 8013e7a:	f7f8 f8b7 	bl	800bfec <SecureElementComputeAesCmac>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d001      	beq.n	8013e88 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e84:	230e      	movs	r3, #14
 8013e86:	e008      	b.n	8013e9a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 fc00 	bl	801468e <LoRaMacSerializerJoinRequest>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d001      	beq.n	8013e98 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013e94:	2310      	movs	r3, #16
 8013e96:	e000      	b.n	8013e9a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e98:	2300      	movs	r3, #0
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3710      	adds	r7, #16
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
 8013ea2:	bf00      	nop
 8013ea4:	20001a28 	.word	0x20001a28

08013ea8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013ea8:	b590      	push	{r4, r7, lr}
 8013eaa:	b097      	sub	sp, #92	; 0x5c
 8013eac:	af04      	add	r7, sp, #16
 8013eae:	4603      	mov	r3, r0
 8013eb0:	60b9      	str	r1, [r7, #8]
 8013eb2:	607a      	str	r2, [r7, #4]
 8013eb4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d002      	beq.n	8013ec2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d101      	bne.n	8013ec6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ec2:	2309      	movs	r3, #9
 8013ec4:	e0bd      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013ec6:	2312      	movs	r3, #18
 8013ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013ecc:	2300      	movs	r3, #0
 8013ece:	61bb      	str	r3, [r7, #24]
 8013ed0:	f107 031c 	add.w	r3, r7, #28
 8013ed4:	221d      	movs	r2, #29
 8013ed6:	2100      	movs	r1, #0
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f009 f955 	bl	801d188 <memset>
    uint8_t versionMinor         = 0;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013ee2:	4b5a      	ldr	r3, [pc, #360]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	889b      	ldrh	r3, [r3, #4]
 8013ee8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681c      	ldr	r4, [r3, #0]
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	791b      	ldrb	r3, [r3, #4]
 8013ef4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013ef8:	7bf8      	ldrb	r0, [r7, #15]
 8013efa:	f107 0217 	add.w	r2, r7, #23
 8013efe:	9202      	str	r2, [sp, #8]
 8013f00:	f107 0218 	add.w	r2, r7, #24
 8013f04:	9201      	str	r2, [sp, #4]
 8013f06:	9300      	str	r3, [sp, #0]
 8013f08:	4623      	mov	r3, r4
 8013f0a:	460a      	mov	r2, r1
 8013f0c:	68b9      	ldr	r1, [r7, #8]
 8013f0e:	f7f8 f961 	bl	800c1d4 <SecureElementProcessJoinAccept>
 8013f12:	4603      	mov	r3, r0
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d001      	beq.n	8013f1c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f18:	230e      	movs	r3, #14
 8013f1a:	e092      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6818      	ldr	r0, [r3, #0]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	791b      	ldrb	r3, [r3, #4]
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	f107 0318 	add.w	r3, r7, #24
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	f004 fb3b 	bl	80185a6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f000 f9ed 	bl	8014310 <LoRaMacParserJoinAccept>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d001      	beq.n	8013f40 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013f3c:	230f      	movs	r3, #15
 8013f3e:	e080      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	799b      	ldrb	r3, [r3, #6]
 8013f44:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	79db      	ldrb	r3, [r3, #7]
 8013f4a:	021b      	lsls	r3, r3, #8
 8013f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f4e:	4313      	orrs	r3, r2
 8013f50:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	7a1b      	ldrb	r3, [r3, #8]
 8013f56:	041b      	lsls	r3, r3, #16
 8013f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f5a:	4313      	orrs	r3, r2
 8013f5c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013f5e:	4b3b      	ldr	r3, [pc, #236]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d010      	beq.n	8013f8c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013f6a:	4b38      	ldr	r3, [pc, #224]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f70:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013f72:	7dfb      	ldrb	r3, [r7, #23]
 8013f74:	2100      	movs	r1, #0
 8013f76:	4618      	mov	r0, r3
 8013f78:	f000 f97c 	bl	8014274 <LoRaMacCryptoDeriveMcRootKey>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013f82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d005      	beq.n	8013f96 <LoRaMacCryptoHandleJoinAccept+0xee>
 8013f8a:	e001      	b.n	8013f90 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013f8c:	2303      	movs	r3, #3
 8013f8e:	e058      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013f90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013f94:	e055      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013f96:	2004      	movs	r0, #4
 8013f98:	f000 f997 	bl	80142ca <LoRaMacCryptoDeriveMcKEKey>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013fa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d002      	beq.n	8013fb0 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013faa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013fae:	e048      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	7a5b      	ldrb	r3, [r3, #9]
 8013fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	7a9b      	ldrb	r3, [r3, #10]
 8013fba:	021b      	lsls	r3, r3, #8
 8013fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	7adb      	ldrb	r3, [r3, #11]
 8013fc6:	041b      	lsls	r3, r3, #16
 8013fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fca:	4313      	orrs	r3, r2
 8013fcc:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013fce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013fd6:	2003      	movs	r0, #3
 8013fd8:	f7ff fd06 	bl	80139e8 <DeriveSessionKey10x>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013fe2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d002      	beq.n	8013ff0 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013fea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013fee:	e028      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013ff0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013ff8:	2002      	movs	r0, #2
 8013ffa:	f7ff fcf5 	bl	80139e8 <DeriveSessionKey10x>
 8013ffe:	4603      	mov	r3, r0
 8014000:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014004:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014008:	2b00      	cmp	r3, #0
 801400a:	d002      	beq.n	8014012 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801400c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014010:	e017      	b.n	8014042 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014012:	4b0e      	ldr	r3, [pc, #56]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	7dfa      	ldrb	r2, [r7, #23]
 8014018:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801401a:	4b0c      	ldr	r3, [pc, #48]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2200      	movs	r2, #0
 8014020:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014022:	4b0a      	ldr	r3, [pc, #40]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	f04f 32ff 	mov.w	r2, #4294967295
 801402a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801402c:	4b07      	ldr	r3, [pc, #28]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f04f 32ff 	mov.w	r2, #4294967295
 8014034:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014036:	4b05      	ldr	r3, [pc, #20]	; (801404c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	f04f 32ff 	mov.w	r2, #4294967295
 801403e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014040:	2300      	movs	r3, #0
}
 8014042:	4618      	mov	r0, r3
 8014044:	374c      	adds	r7, #76	; 0x4c
 8014046:	46bd      	mov	sp, r7
 8014048:	bd90      	pop	{r4, r7, pc}
 801404a:	bf00      	nop
 801404c:	20001a28 	.word	0x20001a28

08014050 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014050:	b590      	push	{r4, r7, lr}
 8014052:	b08b      	sub	sp, #44	; 0x2c
 8014054:	af04      	add	r7, sp, #16
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	607b      	str	r3, [r7, #4]
 801405a:	460b      	mov	r3, r1
 801405c:	72fb      	strb	r3, [r7, #11]
 801405e:	4613      	mov	r3, r2
 8014060:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014062:	2312      	movs	r3, #18
 8014064:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014066:	2303      	movs	r3, #3
 8014068:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d101      	bne.n	8014074 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014070:	2309      	movs	r3, #9
 8014072:	e05f      	b.n	8014134 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014074:	4b31      	ldr	r3, [pc, #196]	; (801413c <LoRaMacCryptoSecureMessage+0xec>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	68fa      	ldr	r2, [r7, #12]
 801407c:	429a      	cmp	r2, r3
 801407e:	d201      	bcs.n	8014084 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014080:	2306      	movs	r3, #6
 8014082:	e057      	b.n	8014134 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f893 3020 	ldrb.w	r3, [r3, #32]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d101      	bne.n	8014092 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801408e:	2302      	movs	r3, #2
 8014090:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014092:	4b2a      	ldr	r3, [pc, #168]	; (801413c <LoRaMacCryptoSecureMessage+0xec>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	68db      	ldr	r3, [r3, #12]
 8014098:	68fa      	ldr	r2, [r7, #12]
 801409a:	429a      	cmp	r2, r3
 801409c:	d916      	bls.n	80140cc <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140a8:	b219      	sxth	r1, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	689c      	ldr	r4, [r3, #8]
 80140ae:	7dfa      	ldrb	r2, [r7, #23]
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	2300      	movs	r3, #0
 80140b6:	9300      	str	r3, [sp, #0]
 80140b8:	4623      	mov	r3, r4
 80140ba:	f7ff faa1 	bl	8013600 <PayloadEncrypt>
 80140be:	4603      	mov	r3, r0
 80140c0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80140c2:	7dbb      	ldrb	r3, [r7, #22]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d001      	beq.n	80140cc <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80140c8:	7dbb      	ldrb	r3, [r7, #22]
 80140ca:	e033      	b.n	8014134 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f000 fb60 	bl	8014792 <LoRaMacSerializerData>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d001      	beq.n	80140dc <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80140d8:	2310      	movs	r3, #16
 80140da:	e02b      	b.n	8014134 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80140dc:	2302      	movs	r3, #2
 80140de:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6818      	ldr	r0, [r3, #0]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	791b      	ldrb	r3, [r3, #4]
 80140e8:	b29b      	uxth	r3, r3
 80140ea:	3b04      	subs	r3, #4
 80140ec:	b299      	uxth	r1, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	689b      	ldr	r3, [r3, #8]
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	322c      	adds	r2, #44	; 0x2c
 80140f6:	7dfc      	ldrb	r4, [r7, #23]
 80140f8:	9203      	str	r2, [sp, #12]
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	9202      	str	r2, [sp, #8]
 80140fe:	9301      	str	r3, [sp, #4]
 8014100:	2300      	movs	r3, #0
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	2300      	movs	r3, #0
 8014106:	4622      	mov	r2, r4
 8014108:	f7ff fb7b 	bl	8013802 <ComputeCmacB0>
 801410c:	4603      	mov	r3, r0
 801410e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014110:	7dbb      	ldrb	r3, [r7, #22]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d001      	beq.n	801411a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014116:	7dbb      	ldrb	r3, [r7, #22]
 8014118:	e00c      	b.n	8014134 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fb39 	bl	8014792 <LoRaMacSerializerData>
 8014120:	4603      	mov	r3, r0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d001      	beq.n	801412a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014126:	2310      	movs	r3, #16
 8014128:	e004      	b.n	8014134 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801412a:	4b04      	ldr	r3, [pc, #16]	; (801413c <LoRaMacCryptoSecureMessage+0xec>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014132:	2300      	movs	r3, #0
}
 8014134:	4618      	mov	r0, r3
 8014136:	371c      	adds	r7, #28
 8014138:	46bd      	mov	sp, r7
 801413a:	bd90      	pop	{r4, r7, pc}
 801413c:	20001a28 	.word	0x20001a28

08014140 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014140:	b590      	push	{r4, r7, lr}
 8014142:	b08b      	sub	sp, #44	; 0x2c
 8014144:	af04      	add	r7, sp, #16
 8014146:	60b9      	str	r1, [r7, #8]
 8014148:	607b      	str	r3, [r7, #4]
 801414a:	4603      	mov	r3, r0
 801414c:	73fb      	strb	r3, [r7, #15]
 801414e:	4613      	mov	r3, r2
 8014150:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014154:	2b00      	cmp	r3, #0
 8014156:	d101      	bne.n	801415c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014158:	2309      	movs	r3, #9
 801415a:	e084      	b.n	8014266 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801415c:	7bbb      	ldrb	r3, [r7, #14]
 801415e:	6879      	ldr	r1, [r7, #4]
 8014160:	4618      	mov	r0, r3
 8014162:	f7ff fcdf 	bl	8013b24 <CheckFCntDown>
 8014166:	4603      	mov	r3, r0
 8014168:	f083 0301 	eor.w	r3, r3, #1
 801416c:	b2db      	uxtb	r3, r3
 801416e:	2b00      	cmp	r3, #0
 8014170:	d001      	beq.n	8014176 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014172:	2306      	movs	r3, #6
 8014174:	e077      	b.n	8014266 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014176:	2312      	movs	r3, #18
 8014178:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801417a:	2303      	movs	r3, #3
 801417c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801417e:	2302      	movs	r3, #2
 8014180:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014184:	f000 f98f 	bl	80144a6 <LoRaMacParserData>
 8014188:	4603      	mov	r3, r0
 801418a:	2b00      	cmp	r3, #0
 801418c:	d001      	beq.n	8014192 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801418e:	230f      	movs	r3, #15
 8014190:	e069      	b.n	8014266 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014192:	f107 0210 	add.w	r2, r7, #16
 8014196:	7bfb      	ldrb	r3, [r7, #15]
 8014198:	4611      	mov	r1, r2
 801419a:	4618      	mov	r0, r3
 801419c:	f7ff fbfe 	bl	801399c <GetKeyAddrItem>
 80141a0:	4603      	mov	r3, r0
 80141a2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141a4:	7d7b      	ldrb	r3, [r7, #21]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d001      	beq.n	80141ae <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80141aa:	7d7b      	ldrb	r3, [r7, #21]
 80141ac:	e05b      	b.n	8014266 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	785b      	ldrb	r3, [r3, #1]
 80141b2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	789b      	ldrb	r3, [r3, #2]
 80141b8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80141ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141bc:	689b      	ldr	r3, [r3, #8]
 80141be:	68ba      	ldr	r2, [r7, #8]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d001      	beq.n	80141c8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80141c4:	2302      	movs	r3, #2
 80141c6:	e04e      	b.n	8014266 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80141c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ca:	7b1b      	ldrb	r3, [r3, #12]
 80141cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80141d0:	b2db      	uxtb	r3, r3
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	bf14      	ite	ne
 80141d6:	2301      	movne	r3, #1
 80141d8:	2300      	moveq	r3, #0
 80141da:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80141dc:	4b24      	ldr	r3, [pc, #144]	; (8014270 <LoRaMacCryptoUnsecureMessage+0x130>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	789b      	ldrb	r3, [r3, #2]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d101      	bne.n	80141ea <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80141e6:	2300      	movs	r3, #0
 80141e8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80141ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ec:	6818      	ldr	r0, [r3, #0]
 80141ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f0:	791b      	ldrb	r3, [r3, #4]
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	3b04      	subs	r3, #4
 80141f6:	b299      	uxth	r1, r3
 80141f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141fc:	7dbc      	ldrb	r4, [r7, #22]
 80141fe:	7d3a      	ldrb	r2, [r7, #20]
 8014200:	9303      	str	r3, [sp, #12]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	9302      	str	r3, [sp, #8]
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	9301      	str	r3, [sp, #4]
 801420a:	2301      	movs	r3, #1
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	4623      	mov	r3, r4
 8014210:	f7ff fb35 	bl	801387e <VerifyCmacB0>
 8014214:	4603      	mov	r3, r0
 8014216:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014218:	7d7b      	ldrb	r3, [r7, #21]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d001      	beq.n	8014222 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801421e:	7d7b      	ldrb	r3, [r7, #21]
 8014220:	e021      	b.n	8014266 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d101      	bne.n	8014230 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801422c:	2302      	movs	r3, #2
 801422e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014232:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801423a:	b219      	sxth	r1, r3
 801423c:	7dfa      	ldrb	r2, [r7, #23]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	9301      	str	r3, [sp, #4]
 8014242:	2301      	movs	r3, #1
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	f7ff f9da 	bl	8013600 <PayloadEncrypt>
 801424c:	4603      	mov	r3, r0
 801424e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014250:	7d7b      	ldrb	r3, [r7, #21]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d001      	beq.n	801425a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014256:	7d7b      	ldrb	r3, [r7, #21]
 8014258:	e005      	b.n	8014266 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801425a:	7bbb      	ldrb	r3, [r7, #14]
 801425c:	6879      	ldr	r1, [r7, #4]
 801425e:	4618      	mov	r0, r3
 8014260:	f7ff fc84 	bl	8013b6c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014264:	2300      	movs	r3, #0
}
 8014266:	4618      	mov	r0, r3
 8014268:	371c      	adds	r7, #28
 801426a:	46bd      	mov	sp, r7
 801426c:	bd90      	pop	{r4, r7, pc}
 801426e:	bf00      	nop
 8014270:	20001a28 	.word	0x20001a28

08014274 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b086      	sub	sp, #24
 8014278:	af00      	add	r7, sp, #0
 801427a:	4603      	mov	r3, r0
 801427c:	460a      	mov	r2, r1
 801427e:	71fb      	strb	r3, [r7, #7]
 8014280:	4613      	mov	r3, r2
 8014282:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014284:	79bb      	ldrb	r3, [r7, #6]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d001      	beq.n	801428e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801428a:	230a      	movs	r3, #10
 801428c:	e019      	b.n	80142c2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801428e:	2300      	movs	r3, #0
 8014290:	60bb      	str	r3, [r7, #8]
 8014292:	f107 030c 	add.w	r3, r7, #12
 8014296:	2200      	movs	r2, #0
 8014298:	601a      	str	r2, [r3, #0]
 801429a:	605a      	str	r2, [r3, #4]
 801429c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801429e:	79fb      	ldrb	r3, [r7, #7]
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	d101      	bne.n	80142a8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80142a4:	2320      	movs	r3, #32
 80142a6:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80142a8:	79b9      	ldrb	r1, [r7, #6]
 80142aa:	f107 0308 	add.w	r3, r7, #8
 80142ae:	2204      	movs	r2, #4
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7f7 ff4f 	bl	800c154 <SecureElementDeriveAndStoreKey>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d001      	beq.n	80142c0 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80142bc:	230e      	movs	r3, #14
 80142be:	e000      	b.n	80142c2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80142c0:	2300      	movs	r3, #0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3718      	adds	r7, #24
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}

080142ca <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80142ca:	b580      	push	{r7, lr}
 80142cc:	b086      	sub	sp, #24
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	4603      	mov	r3, r0
 80142d2:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80142d4:	79fb      	ldrb	r3, [r7, #7]
 80142d6:	2b04      	cmp	r3, #4
 80142d8:	d001      	beq.n	80142de <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80142da:	230a      	movs	r3, #10
 80142dc:	e014      	b.n	8014308 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80142de:	2300      	movs	r3, #0
 80142e0:	60bb      	str	r3, [r7, #8]
 80142e2:	f107 030c 	add.w	r3, r7, #12
 80142e6:	2200      	movs	r2, #0
 80142e8:	601a      	str	r2, [r3, #0]
 80142ea:	605a      	str	r2, [r3, #4]
 80142ec:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80142ee:	79f9      	ldrb	r1, [r7, #7]
 80142f0:	f107 0308 	add.w	r3, r7, #8
 80142f4:	227f      	movs	r2, #127	; 0x7f
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7f7 ff2c 	bl	800c154 <SecureElementDeriveAndStoreKey>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d001      	beq.n	8014306 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014302:	230e      	movs	r3, #14
 8014304:	e000      	b.n	8014308 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014306:	2300      	movs	r3, #0
}
 8014308:	4618      	mov	r0, r3
 801430a:	3718      	adds	r7, #24
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b084      	sub	sp, #16
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d003      	beq.n	8014326 <LoRaMacParserJoinAccept+0x16>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d101      	bne.n	801432a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014326:	2302      	movs	r3, #2
 8014328:	e0b9      	b.n	801449e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801432a:	2300      	movs	r3, #0
 801432c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681a      	ldr	r2, [r3, #0]
 8014332:	89fb      	ldrh	r3, [r7, #14]
 8014334:	1c59      	adds	r1, r3, #1
 8014336:	81f9      	strh	r1, [r7, #14]
 8014338:	4413      	add	r3, r2
 801433a:	781a      	ldrb	r2, [r3, #0]
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	1d98      	adds	r0, r3, #6
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	89fb      	ldrh	r3, [r7, #14]
 801434a:	4413      	add	r3, r2
 801434c:	2203      	movs	r2, #3
 801434e:	4619      	mov	r1, r3
 8014350:	f004 f929 	bl	80185a6 <memcpy1>
    bufItr = bufItr + 3;
 8014354:	89fb      	ldrh	r3, [r7, #14]
 8014356:	3303      	adds	r3, #3
 8014358:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f103 0009 	add.w	r0, r3, #9
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681a      	ldr	r2, [r3, #0]
 8014364:	89fb      	ldrh	r3, [r7, #14]
 8014366:	4413      	add	r3, r2
 8014368:	2203      	movs	r2, #3
 801436a:	4619      	mov	r1, r3
 801436c:	f004 f91b 	bl	80185a6 <memcpy1>
    bufItr = bufItr + 3;
 8014370:	89fb      	ldrh	r3, [r7, #14]
 8014372:	3303      	adds	r3, #3
 8014374:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	89fb      	ldrh	r3, [r7, #14]
 801437c:	1c59      	adds	r1, r3, #1
 801437e:	81f9      	strh	r1, [r7, #14]
 8014380:	4413      	add	r3, r2
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	461a      	mov	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	89fb      	ldrh	r3, [r7, #14]
 8014390:	1c59      	adds	r1, r3, #1
 8014392:	81f9      	strh	r1, [r7, #14]
 8014394:	4413      	add	r3, r2
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	021a      	lsls	r2, r3, #8
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	431a      	orrs	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	89fb      	ldrh	r3, [r7, #14]
 80143aa:	1c59      	adds	r1, r3, #1
 80143ac:	81f9      	strh	r1, [r7, #14]
 80143ae:	4413      	add	r3, r2
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	041a      	lsls	r2, r3, #16
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	68db      	ldr	r3, [r3, #12]
 80143b8:	431a      	orrs	r2, r3
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681a      	ldr	r2, [r3, #0]
 80143c2:	89fb      	ldrh	r3, [r7, #14]
 80143c4:	1c59      	adds	r1, r3, #1
 80143c6:	81f9      	strh	r1, [r7, #14]
 80143c8:	4413      	add	r3, r2
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	061a      	lsls	r2, r3, #24
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	431a      	orrs	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	89fb      	ldrh	r3, [r7, #14]
 80143de:	1c59      	adds	r1, r3, #1
 80143e0:	81f9      	strh	r1, [r7, #14]
 80143e2:	4413      	add	r3, r2
 80143e4:	781a      	ldrb	r2, [r3, #0]
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681a      	ldr	r2, [r3, #0]
 80143ee:	89fb      	ldrh	r3, [r7, #14]
 80143f0:	1c59      	adds	r1, r3, #1
 80143f2:	81f9      	strh	r1, [r7, #14]
 80143f4:	4413      	add	r3, r2
 80143f6:	781a      	ldrb	r2, [r3, #0]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	791b      	ldrb	r3, [r3, #4]
 8014400:	1f1a      	subs	r2, r3, #4
 8014402:	89fb      	ldrh	r3, [r7, #14]
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	2b10      	cmp	r3, #16
 8014408:	d10e      	bne.n	8014428 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f103 0012 	add.w	r0, r3, #18
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	89fb      	ldrh	r3, [r7, #14]
 8014416:	4413      	add	r3, r2
 8014418:	2210      	movs	r2, #16
 801441a:	4619      	mov	r1, r3
 801441c:	f004 f8c3 	bl	80185a6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014420:	89fb      	ldrh	r3, [r7, #14]
 8014422:	3310      	adds	r3, #16
 8014424:	81fb      	strh	r3, [r7, #14]
 8014426:	e008      	b.n	801443a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	791b      	ldrb	r3, [r3, #4]
 801442c:	1f1a      	subs	r2, r3, #4
 801442e:	89fb      	ldrh	r3, [r7, #14]
 8014430:	1ad3      	subs	r3, r2, r3
 8014432:	2b00      	cmp	r3, #0
 8014434:	dd01      	ble.n	801443a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014436:	2301      	movs	r3, #1
 8014438:	e031      	b.n	801449e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681a      	ldr	r2, [r3, #0]
 801443e:	89fb      	ldrh	r3, [r7, #14]
 8014440:	1c59      	adds	r1, r3, #1
 8014442:	81f9      	strh	r1, [r7, #14]
 8014444:	4413      	add	r3, r2
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	461a      	mov	r2, r3
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681a      	ldr	r2, [r3, #0]
 8014452:	89fb      	ldrh	r3, [r7, #14]
 8014454:	1c59      	adds	r1, r3, #1
 8014456:	81f9      	strh	r1, [r7, #14]
 8014458:	4413      	add	r3, r2
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	021a      	lsls	r2, r3, #8
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014462:	431a      	orrs	r2, r3
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681a      	ldr	r2, [r3, #0]
 801446c:	89fb      	ldrh	r3, [r7, #14]
 801446e:	1c59      	adds	r1, r3, #1
 8014470:	81f9      	strh	r1, [r7, #14]
 8014472:	4413      	add	r3, r2
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	041a      	lsls	r2, r3, #16
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447c:	431a      	orrs	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	89fb      	ldrh	r3, [r7, #14]
 8014488:	1c59      	adds	r1, r3, #1
 801448a:	81f9      	strh	r1, [r7, #14]
 801448c:	4413      	add	r3, r2
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	061a      	lsls	r2, r3, #24
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014496:	431a      	orrs	r2, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801449c:	2300      	movs	r3, #0
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3710      	adds	r7, #16
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80144a6:	b580      	push	{r7, lr}
 80144a8:	b084      	sub	sp, #16
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d003      	beq.n	80144bc <LoRaMacParserData+0x16>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d101      	bne.n	80144c0 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80144bc:	2302      	movs	r3, #2
 80144be:	e0e2      	b.n	8014686 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80144c0:	2300      	movs	r3, #0
 80144c2:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	89fb      	ldrh	r3, [r7, #14]
 80144ca:	1c59      	adds	r1, r3, #1
 80144cc:	81f9      	strh	r1, [r7, #14]
 80144ce:	4413      	add	r3, r2
 80144d0:	781a      	ldrb	r2, [r3, #0]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681a      	ldr	r2, [r3, #0]
 80144da:	89fb      	ldrh	r3, [r7, #14]
 80144dc:	1c59      	adds	r1, r3, #1
 80144de:	81f9      	strh	r1, [r7, #14]
 80144e0:	4413      	add	r3, r2
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	461a      	mov	r2, r3
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	89fb      	ldrh	r3, [r7, #14]
 80144f0:	1c59      	adds	r1, r3, #1
 80144f2:	81f9      	strh	r1, [r7, #14]
 80144f4:	4413      	add	r3, r2
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	021a      	lsls	r2, r3, #8
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	689b      	ldr	r3, [r3, #8]
 80144fe:	431a      	orrs	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	89fb      	ldrh	r3, [r7, #14]
 801450a:	1c59      	adds	r1, r3, #1
 801450c:	81f9      	strh	r1, [r7, #14]
 801450e:	4413      	add	r3, r2
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	041a      	lsls	r2, r3, #16
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	689b      	ldr	r3, [r3, #8]
 8014518:	431a      	orrs	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681a      	ldr	r2, [r3, #0]
 8014522:	89fb      	ldrh	r3, [r7, #14]
 8014524:	1c59      	adds	r1, r3, #1
 8014526:	81f9      	strh	r1, [r7, #14]
 8014528:	4413      	add	r3, r2
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	061a      	lsls	r2, r3, #24
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	431a      	orrs	r2, r3
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	89fb      	ldrh	r3, [r7, #14]
 801453e:	1c59      	adds	r1, r3, #1
 8014540:	81f9      	strh	r1, [r7, #14]
 8014542:	4413      	add	r3, r2
 8014544:	781a      	ldrb	r2, [r3, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	89fb      	ldrh	r3, [r7, #14]
 8014550:	1c59      	adds	r1, r3, #1
 8014552:	81f9      	strh	r1, [r7, #14]
 8014554:	4413      	add	r3, r2
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	b29a      	uxth	r2, r3
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681a      	ldr	r2, [r3, #0]
 8014562:	89fb      	ldrh	r3, [r7, #14]
 8014564:	1c59      	adds	r1, r3, #1
 8014566:	81f9      	strh	r1, [r7, #14]
 8014568:	4413      	add	r3, r2
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	0219      	lsls	r1, r3, #8
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	89db      	ldrh	r3, [r3, #14]
 8014572:	b21a      	sxth	r2, r3
 8014574:	b20b      	sxth	r3, r1
 8014576:	4313      	orrs	r3, r2
 8014578:	b21b      	sxth	r3, r3
 801457a:	b29a      	uxth	r2, r3
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f103 0010 	add.w	r0, r3, #16
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	681a      	ldr	r2, [r3, #0]
 801458a:	89fb      	ldrh	r3, [r7, #14]
 801458c:	18d1      	adds	r1, r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	7b1b      	ldrb	r3, [r3, #12]
 8014592:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014596:	b2db      	uxtb	r3, r3
 8014598:	b29b      	uxth	r3, r3
 801459a:	461a      	mov	r2, r3
 801459c:	f004 f803 	bl	80185a6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	7b1b      	ldrb	r3, [r3, #12]
 80145a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80145a8:	b2db      	uxtb	r3, r3
 80145aa:	b29a      	uxth	r2, r3
 80145ac:	89fb      	ldrh	r3, [r7, #14]
 80145ae:	4413      	add	r3, r2
 80145b0:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2200      	movs	r2, #0
 80145b6:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2200      	movs	r2, #0
 80145be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	791b      	ldrb	r3, [r3, #4]
 80145c6:	461a      	mov	r2, r3
 80145c8:	89fb      	ldrh	r3, [r7, #14]
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	2b04      	cmp	r3, #4
 80145ce:	dd28      	ble.n	8014622 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681a      	ldr	r2, [r3, #0]
 80145d4:	89fb      	ldrh	r3, [r7, #14]
 80145d6:	1c59      	adds	r1, r3, #1
 80145d8:	81f9      	strh	r1, [r7, #14]
 80145da:	4413      	add	r3, r2
 80145dc:	781a      	ldrb	r2, [r3, #0]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	791a      	ldrb	r2, [r3, #4]
 80145e8:	89fb      	ldrh	r3, [r7, #14]
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	3b04      	subs	r3, #4
 80145f2:	b2da      	uxtb	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	89fb      	ldrh	r3, [r7, #14]
 8014604:	18d1      	adds	r1, r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801460c:	b29b      	uxth	r3, r3
 801460e:	461a      	mov	r2, r3
 8014610:	f003 ffc9 	bl	80185a6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801461a:	b29a      	uxth	r2, r3
 801461c:	89fb      	ldrh	r3, [r7, #14]
 801461e:	4413      	add	r3, r2
 8014620:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	791b      	ldrb	r3, [r3, #4]
 801462a:	3b04      	subs	r3, #4
 801462c:	4413      	add	r3, r2
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	461a      	mov	r2, r3
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	6819      	ldr	r1, [r3, #0]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	791b      	ldrb	r3, [r3, #4]
 8014642:	3b03      	subs	r3, #3
 8014644:	440b      	add	r3, r1
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	021b      	lsls	r3, r3, #8
 801464a:	431a      	orrs	r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6819      	ldr	r1, [r3, #0]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	791b      	ldrb	r3, [r3, #4]
 801465c:	3b02      	subs	r3, #2
 801465e:	440b      	add	r3, r1
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	041b      	lsls	r3, r3, #16
 8014664:	431a      	orrs	r2, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6819      	ldr	r1, [r3, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	791b      	ldrb	r3, [r3, #4]
 8014676:	3b01      	subs	r3, #1
 8014678:	440b      	add	r3, r1
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	061b      	lsls	r3, r3, #24
 801467e:	431a      	orrs	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014684:	2300      	movs	r3, #0
}
 8014686:	4618      	mov	r0, r3
 8014688:	3710      	adds	r7, #16
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}

0801468e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801468e:	b580      	push	{r7, lr}
 8014690:	b084      	sub	sp, #16
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d003      	beq.n	80146a4 <LoRaMacSerializerJoinRequest+0x16>
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d101      	bne.n	80146a8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80146a4:	2301      	movs	r3, #1
 80146a6:	e070      	b.n	801478a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80146a8:	2300      	movs	r3, #0
 80146aa:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	791b      	ldrb	r3, [r3, #4]
 80146b0:	2b16      	cmp	r3, #22
 80146b2:	d801      	bhi.n	80146b8 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80146b4:	2302      	movs	r3, #2
 80146b6:	e068      	b.n	801478a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	89fb      	ldrh	r3, [r7, #14]
 80146be:	1c59      	adds	r1, r3, #1
 80146c0:	81f9      	strh	r1, [r7, #14]
 80146c2:	4413      	add	r3, r2
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	7952      	ldrb	r2, [r2, #5]
 80146c8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	681a      	ldr	r2, [r3, #0]
 80146ce:	89fb      	ldrh	r3, [r7, #14]
 80146d0:	18d0      	adds	r0, r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	3306      	adds	r3, #6
 80146d6:	2208      	movs	r2, #8
 80146d8:	4619      	mov	r1, r3
 80146da:	f003 ff7f 	bl	80185dc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80146de:	89fb      	ldrh	r3, [r7, #14]
 80146e0:	3308      	adds	r3, #8
 80146e2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681a      	ldr	r2, [r3, #0]
 80146e8:	89fb      	ldrh	r3, [r7, #14]
 80146ea:	18d0      	adds	r0, r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	330e      	adds	r3, #14
 80146f0:	2208      	movs	r2, #8
 80146f2:	4619      	mov	r1, r3
 80146f4:	f003 ff72 	bl	80185dc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80146f8:	89fb      	ldrh	r3, [r7, #14]
 80146fa:	3308      	adds	r3, #8
 80146fc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	8ad9      	ldrh	r1, [r3, #22]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	89fb      	ldrh	r3, [r7, #14]
 8014708:	1c58      	adds	r0, r3, #1
 801470a:	81f8      	strh	r0, [r7, #14]
 801470c:	4413      	add	r3, r2
 801470e:	b2ca      	uxtb	r2, r1
 8014710:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	8adb      	ldrh	r3, [r3, #22]
 8014716:	0a1b      	lsrs	r3, r3, #8
 8014718:	b299      	uxth	r1, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681a      	ldr	r2, [r3, #0]
 801471e:	89fb      	ldrh	r3, [r7, #14]
 8014720:	1c58      	adds	r0, r3, #1
 8014722:	81f8      	strh	r0, [r7, #14]
 8014724:	4413      	add	r3, r2
 8014726:	b2ca      	uxtb	r2, r1
 8014728:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6999      	ldr	r1, [r3, #24]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	89fb      	ldrh	r3, [r7, #14]
 8014734:	1c58      	adds	r0, r3, #1
 8014736:	81f8      	strh	r0, [r7, #14]
 8014738:	4413      	add	r3, r2
 801473a:	b2ca      	uxtb	r2, r1
 801473c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	699b      	ldr	r3, [r3, #24]
 8014742:	0a19      	lsrs	r1, r3, #8
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	89fb      	ldrh	r3, [r7, #14]
 801474a:	1c58      	adds	r0, r3, #1
 801474c:	81f8      	strh	r0, [r7, #14]
 801474e:	4413      	add	r3, r2
 8014750:	b2ca      	uxtb	r2, r1
 8014752:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	699b      	ldr	r3, [r3, #24]
 8014758:	0c19      	lsrs	r1, r3, #16
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	89fb      	ldrh	r3, [r7, #14]
 8014760:	1c58      	adds	r0, r3, #1
 8014762:	81f8      	strh	r0, [r7, #14]
 8014764:	4413      	add	r3, r2
 8014766:	b2ca      	uxtb	r2, r1
 8014768:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	699b      	ldr	r3, [r3, #24]
 801476e:	0e19      	lsrs	r1, r3, #24
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681a      	ldr	r2, [r3, #0]
 8014774:	89fb      	ldrh	r3, [r7, #14]
 8014776:	1c58      	adds	r0, r3, #1
 8014778:	81f8      	strh	r0, [r7, #14]
 801477a:	4413      	add	r3, r2
 801477c:	b2ca      	uxtb	r2, r1
 801477e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014780:	89fb      	ldrh	r3, [r7, #14]
 8014782:	b2da      	uxtb	r2, r3
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014788:	2300      	movs	r3, #0
}
 801478a:	4618      	mov	r0, r3
 801478c:	3710      	adds	r7, #16
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}

08014792 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014792:	b580      	push	{r7, lr}
 8014794:	b084      	sub	sp, #16
 8014796:	af00      	add	r7, sp, #0
 8014798:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d003      	beq.n	80147a8 <LoRaMacSerializerData+0x16>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d101      	bne.n	80147ac <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80147a8:	2301      	movs	r3, #1
 80147aa:	e0e5      	b.n	8014978 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80147ac:	2300      	movs	r3, #0
 80147ae:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80147b0:	2308      	movs	r3, #8
 80147b2:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	7b1b      	ldrb	r3, [r3, #12]
 80147b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80147bc:	b2db      	uxtb	r3, r3
 80147be:	b29a      	uxth	r2, r3
 80147c0:	89bb      	ldrh	r3, [r7, #12]
 80147c2:	4413      	add	r3, r2
 80147c4:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d002      	beq.n	80147d6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80147d0:	89bb      	ldrh	r3, [r7, #12]
 80147d2:	3301      	adds	r3, #1
 80147d4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147dc:	b29a      	uxth	r2, r3
 80147de:	89bb      	ldrh	r3, [r7, #12]
 80147e0:	4413      	add	r3, r2
 80147e2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80147e4:	89bb      	ldrh	r3, [r7, #12]
 80147e6:	3304      	adds	r3, #4
 80147e8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	791b      	ldrb	r3, [r3, #4]
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	89ba      	ldrh	r2, [r7, #12]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d901      	bls.n	80147fa <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80147f6:	2302      	movs	r3, #2
 80147f8:	e0be      	b.n	8014978 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	89fb      	ldrh	r3, [r7, #14]
 8014800:	1c59      	adds	r1, r3, #1
 8014802:	81f9      	strh	r1, [r7, #14]
 8014804:	4413      	add	r3, r2
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	7952      	ldrb	r2, [r2, #5]
 801480a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6899      	ldr	r1, [r3, #8]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681a      	ldr	r2, [r3, #0]
 8014814:	89fb      	ldrh	r3, [r7, #14]
 8014816:	1c58      	adds	r0, r3, #1
 8014818:	81f8      	strh	r0, [r7, #14]
 801481a:	4413      	add	r3, r2
 801481c:	b2ca      	uxtb	r2, r1
 801481e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	689b      	ldr	r3, [r3, #8]
 8014824:	0a19      	lsrs	r1, r3, #8
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681a      	ldr	r2, [r3, #0]
 801482a:	89fb      	ldrh	r3, [r7, #14]
 801482c:	1c58      	adds	r0, r3, #1
 801482e:	81f8      	strh	r0, [r7, #14]
 8014830:	4413      	add	r3, r2
 8014832:	b2ca      	uxtb	r2, r1
 8014834:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	689b      	ldr	r3, [r3, #8]
 801483a:	0c19      	lsrs	r1, r3, #16
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	89fb      	ldrh	r3, [r7, #14]
 8014842:	1c58      	adds	r0, r3, #1
 8014844:	81f8      	strh	r0, [r7, #14]
 8014846:	4413      	add	r3, r2
 8014848:	b2ca      	uxtb	r2, r1
 801484a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	689b      	ldr	r3, [r3, #8]
 8014850:	0e19      	lsrs	r1, r3, #24
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	89fb      	ldrh	r3, [r7, #14]
 8014858:	1c58      	adds	r0, r3, #1
 801485a:	81f8      	strh	r0, [r7, #14]
 801485c:	4413      	add	r3, r2
 801485e:	b2ca      	uxtb	r2, r1
 8014860:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	89fb      	ldrh	r3, [r7, #14]
 8014868:	1c59      	adds	r1, r3, #1
 801486a:	81f9      	strh	r1, [r7, #14]
 801486c:	4413      	add	r3, r2
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	7b12      	ldrb	r2, [r2, #12]
 8014872:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	89d9      	ldrh	r1, [r3, #14]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	89fb      	ldrh	r3, [r7, #14]
 801487e:	1c58      	adds	r0, r3, #1
 8014880:	81f8      	strh	r0, [r7, #14]
 8014882:	4413      	add	r3, r2
 8014884:	b2ca      	uxtb	r2, r1
 8014886:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	89db      	ldrh	r3, [r3, #14]
 801488c:	0a1b      	lsrs	r3, r3, #8
 801488e:	b299      	uxth	r1, r3
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	89fb      	ldrh	r3, [r7, #14]
 8014896:	1c58      	adds	r0, r3, #1
 8014898:	81f8      	strh	r0, [r7, #14]
 801489a:	4413      	add	r3, r2
 801489c:	b2ca      	uxtb	r2, r1
 801489e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681a      	ldr	r2, [r3, #0]
 80148a4:	89fb      	ldrh	r3, [r7, #14]
 80148a6:	18d0      	adds	r0, r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f103 0110 	add.w	r1, r3, #16
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	7b1b      	ldrb	r3, [r3, #12]
 80148b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	461a      	mov	r2, r3
 80148bc:	f003 fe73 	bl	80185a6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	7b1b      	ldrb	r3, [r3, #12]
 80148c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80148c8:	b2db      	uxtb	r3, r3
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	89fb      	ldrh	r3, [r7, #14]
 80148ce:	4413      	add	r3, r2
 80148d0:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d009      	beq.n	80148f0 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	89fb      	ldrh	r3, [r7, #14]
 80148e2:	1c59      	adds	r1, r3, #1
 80148e4:	81f9      	strh	r1, [r7, #14]
 80148e6:	4413      	add	r3, r2
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80148ee:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	89fb      	ldrh	r3, [r7, #14]
 80148f6:	18d0      	adds	r0, r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014902:	b29b      	uxth	r3, r3
 8014904:	461a      	mov	r2, r3
 8014906:	f003 fe4e 	bl	80185a6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014910:	b29a      	uxth	r2, r3
 8014912:	89fb      	ldrh	r3, [r7, #14]
 8014914:	4413      	add	r3, r2
 8014916:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	89fb      	ldrh	r3, [r7, #14]
 8014922:	1c58      	adds	r0, r3, #1
 8014924:	81f8      	strh	r0, [r7, #14]
 8014926:	4413      	add	r3, r2
 8014928:	b2ca      	uxtb	r2, r1
 801492a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014930:	0a19      	lsrs	r1, r3, #8
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	89fb      	ldrh	r3, [r7, #14]
 8014938:	1c58      	adds	r0, r3, #1
 801493a:	81f8      	strh	r0, [r7, #14]
 801493c:	4413      	add	r3, r2
 801493e:	b2ca      	uxtb	r2, r1
 8014940:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014946:	0c19      	lsrs	r1, r3, #16
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681a      	ldr	r2, [r3, #0]
 801494c:	89fb      	ldrh	r3, [r7, #14]
 801494e:	1c58      	adds	r0, r3, #1
 8014950:	81f8      	strh	r0, [r7, #14]
 8014952:	4413      	add	r3, r2
 8014954:	b2ca      	uxtb	r2, r1
 8014956:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801495c:	0e19      	lsrs	r1, r3, #24
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	89fb      	ldrh	r3, [r7, #14]
 8014964:	1c58      	adds	r0, r3, #1
 8014966:	81f8      	strh	r0, [r7, #14]
 8014968:	4413      	add	r3, r2
 801496a:	b2ca      	uxtb	r2, r1
 801496c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801496e:	89fb      	ldrh	r3, [r7, #14]
 8014970:	b2da      	uxtb	r2, r3
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014976:	2300      	movs	r3, #0
}
 8014978:	4618      	mov	r0, r3
 801497a:	3710      	adds	r7, #16
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014980:	b480      	push	{r7}
 8014982:	b083      	sub	sp, #12
 8014984:	af00      	add	r7, sp, #0
 8014986:	4603      	mov	r3, r0
 8014988:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801498a:	79fb      	ldrb	r3, [r7, #7]
 801498c:	2b05      	cmp	r3, #5
 801498e:	d002      	beq.n	8014996 <RegionIsActive+0x16>
 8014990:	2b08      	cmp	r3, #8
 8014992:	d002      	beq.n	801499a <RegionIsActive+0x1a>
 8014994:	e003      	b.n	801499e <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8014996:	2301      	movs	r3, #1
 8014998:	e002      	b.n	80149a0 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 801499a:	2301      	movs	r3, #1
 801499c:	e000      	b.n	80149a0 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801499e:	2300      	movs	r3, #0
        }
    }
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	370c      	adds	r7, #12
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bc80      	pop	{r7}
 80149a8:	4770      	bx	lr

080149aa <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80149aa:	b580      	push	{r7, lr}
 80149ac:	b084      	sub	sp, #16
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	4603      	mov	r3, r0
 80149b2:	6039      	str	r1, [r7, #0]
 80149b4:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80149b6:	2300      	movs	r3, #0
 80149b8:	60bb      	str	r3, [r7, #8]
    switch( region )
 80149ba:	79fb      	ldrb	r3, [r7, #7]
 80149bc:	2b05      	cmp	r3, #5
 80149be:	d002      	beq.n	80149c6 <RegionGetPhyParam+0x1c>
 80149c0:	2b08      	cmp	r3, #8
 80149c2:	d006      	beq.n	80149d2 <RegionGetPhyParam+0x28>
 80149c4:	e00b      	b.n	80149de <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80149c6:	6838      	ldr	r0, [r7, #0]
 80149c8:	f001 fad4 	bl	8015f74 <RegionEU868GetPhyParam>
 80149cc:	4603      	mov	r3, r0
 80149ce:	60fb      	str	r3, [r7, #12]
 80149d0:	e007      	b.n	80149e2 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80149d2:	6838      	ldr	r0, [r7, #0]
 80149d4:	f002 fc4e 	bl	8017274 <RegionUS915GetPhyParam>
 80149d8:	4603      	mov	r3, r0
 80149da:	60fb      	str	r3, [r7, #12]
 80149dc:	e001      	b.n	80149e2 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	4618      	mov	r0, r3
 80149e6:	3710      	adds	r7, #16
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	4603      	mov	r3, r0
 80149f4:	6039      	str	r1, [r7, #0]
 80149f6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80149f8:	79fb      	ldrb	r3, [r7, #7]
 80149fa:	2b05      	cmp	r3, #5
 80149fc:	d002      	beq.n	8014a04 <RegionSetBandTxDone+0x18>
 80149fe:	2b08      	cmp	r3, #8
 8014a00:	d004      	beq.n	8014a0c <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014a02:	e007      	b.n	8014a14 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8014a04:	6838      	ldr	r0, [r7, #0]
 8014a06:	f001 fbfb 	bl	8016200 <RegionEU868SetBandTxDone>
 8014a0a:	e003      	b.n	8014a14 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8014a0c:	6838      	ldr	r0, [r7, #0]
 8014a0e:	f002 fd8d 	bl	801752c <RegionUS915SetBandTxDone>
 8014a12:	bf00      	nop
        }
    }
}
 8014a14:	3708      	adds	r7, #8
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd80      	pop	{r7, pc}

08014a1a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014a1a:	b580      	push	{r7, lr}
 8014a1c:	b082      	sub	sp, #8
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	4603      	mov	r3, r0
 8014a22:	6039      	str	r1, [r7, #0]
 8014a24:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014a26:	79fb      	ldrb	r3, [r7, #7]
 8014a28:	2b05      	cmp	r3, #5
 8014a2a:	d002      	beq.n	8014a32 <RegionInitDefaults+0x18>
 8014a2c:	2b08      	cmp	r3, #8
 8014a2e:	d004      	beq.n	8014a3a <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014a30:	e007      	b.n	8014a42 <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 8014a32:	6838      	ldr	r0, [r7, #0]
 8014a34:	f001 fc10 	bl	8016258 <RegionEU868InitDefaults>
 8014a38:	e003      	b.n	8014a42 <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 8014a3a:	6838      	ldr	r0, [r7, #0]
 8014a3c:	f002 fda2 	bl	8017584 <RegionUS915InitDefaults>
 8014a40:	bf00      	nop
        }
    }
}
 8014a42:	bf00      	nop
 8014a44:	3708      	adds	r7, #8
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}

08014a4a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014a4a:	b580      	push	{r7, lr}
 8014a4c:	b082      	sub	sp, #8
 8014a4e:	af00      	add	r7, sp, #0
 8014a50:	4603      	mov	r3, r0
 8014a52:	6039      	str	r1, [r7, #0]
 8014a54:	71fb      	strb	r3, [r7, #7]
 8014a56:	4613      	mov	r3, r2
 8014a58:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014a5a:	79fb      	ldrb	r3, [r7, #7]
 8014a5c:	2b05      	cmp	r3, #5
 8014a5e:	d002      	beq.n	8014a66 <RegionVerify+0x1c>
 8014a60:	2b08      	cmp	r3, #8
 8014a62:	d007      	beq.n	8014a74 <RegionVerify+0x2a>
 8014a64:	e00d      	b.n	8014a82 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014a66:	79bb      	ldrb	r3, [r7, #6]
 8014a68:	4619      	mov	r1, r3
 8014a6a:	6838      	ldr	r0, [r7, #0]
 8014a6c:	f001 fc92 	bl	8016394 <RegionEU868Verify>
 8014a70:	4603      	mov	r3, r0
 8014a72:	e007      	b.n	8014a84 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8014a74:	79bb      	ldrb	r3, [r7, #6]
 8014a76:	4619      	mov	r1, r3
 8014a78:	6838      	ldr	r0, [r7, #0]
 8014a7a:	f002 feb5 	bl	80177e8 <RegionUS915Verify>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	e000      	b.n	8014a84 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8014a82:	2300      	movs	r3, #0
        }
    }
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3708      	adds	r7, #8
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	4603      	mov	r3, r0
 8014a94:	6039      	str	r1, [r7, #0]
 8014a96:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014a98:	79fb      	ldrb	r3, [r7, #7]
 8014a9a:	2b05      	cmp	r3, #5
 8014a9c:	d002      	beq.n	8014aa4 <RegionApplyCFList+0x18>
 8014a9e:	2b08      	cmp	r3, #8
 8014aa0:	d004      	beq.n	8014aac <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014aa2:	e007      	b.n	8014ab4 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8014aa4:	6838      	ldr	r0, [r7, #0]
 8014aa6:	f001 fcf1 	bl	801648c <RegionEU868ApplyCFList>
 8014aaa:	e003      	b.n	8014ab4 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 8014aac:	6838      	ldr	r0, [r7, #0]
 8014aae:	f002 ff11 	bl	80178d4 <RegionUS915ApplyCFList>
 8014ab2:	bf00      	nop
        }
    }
}
 8014ab4:	bf00      	nop
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	6039      	str	r1, [r7, #0]
 8014ac6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ac8:	79fb      	ldrb	r3, [r7, #7]
 8014aca:	2b05      	cmp	r3, #5
 8014acc:	d002      	beq.n	8014ad4 <RegionChanMaskSet+0x18>
 8014ace:	2b08      	cmp	r3, #8
 8014ad0:	d005      	beq.n	8014ade <RegionChanMaskSet+0x22>
 8014ad2:	e009      	b.n	8014ae8 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8014ad4:	6838      	ldr	r0, [r7, #0]
 8014ad6:	f001 fd4d 	bl	8016574 <RegionEU868ChanMaskSet>
 8014ada:	4603      	mov	r3, r0
 8014adc:	e005      	b.n	8014aea <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8014ade:	6838      	ldr	r0, [r7, #0]
 8014ae0:	f002 ff6c 	bl	80179bc <RegionUS915ChanMaskSet>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	e000      	b.n	8014aea <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014ae8:	2300      	movs	r3, #0
        }
    }
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}

08014af2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014af2:	b580      	push	{r7, lr}
 8014af4:	b082      	sub	sp, #8
 8014af6:	af00      	add	r7, sp, #0
 8014af8:	603b      	str	r3, [r7, #0]
 8014afa:	4603      	mov	r3, r0
 8014afc:	71fb      	strb	r3, [r7, #7]
 8014afe:	460b      	mov	r3, r1
 8014b00:	71bb      	strb	r3, [r7, #6]
 8014b02:	4613      	mov	r3, r2
 8014b04:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014b06:	79fb      	ldrb	r3, [r7, #7]
 8014b08:	2b05      	cmp	r3, #5
 8014b0a:	d002      	beq.n	8014b12 <RegionComputeRxWindowParameters+0x20>
 8014b0c:	2b08      	cmp	r3, #8
 8014b0e:	d008      	beq.n	8014b22 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014b10:	e00f      	b.n	8014b32 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014b12:	7979      	ldrb	r1, [r7, #5]
 8014b14:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	683a      	ldr	r2, [r7, #0]
 8014b1c:	f001 fd54 	bl	80165c8 <RegionEU868ComputeRxWindowParameters>
 8014b20:	e007      	b.n	8014b32 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014b22:	7979      	ldrb	r1, [r7, #5]
 8014b24:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	683a      	ldr	r2, [r7, #0]
 8014b2c:	f002 ffae 	bl	8017a8c <RegionUS915ComputeRxWindowParameters>
 8014b30:	bf00      	nop
        }
    }
}
 8014b32:	bf00      	nop
 8014b34:	3708      	adds	r7, #8
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}

08014b3a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014b3a:	b580      	push	{r7, lr}
 8014b3c:	b084      	sub	sp, #16
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	4603      	mov	r3, r0
 8014b42:	60b9      	str	r1, [r7, #8]
 8014b44:	607a      	str	r2, [r7, #4]
 8014b46:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014b48:	7bfb      	ldrb	r3, [r7, #15]
 8014b4a:	2b05      	cmp	r3, #5
 8014b4c:	d002      	beq.n	8014b54 <RegionRxConfig+0x1a>
 8014b4e:	2b08      	cmp	r3, #8
 8014b50:	d006      	beq.n	8014b60 <RegionRxConfig+0x26>
 8014b52:	e00b      	b.n	8014b6c <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8014b54:	6879      	ldr	r1, [r7, #4]
 8014b56:	68b8      	ldr	r0, [r7, #8]
 8014b58:	f001 fd90 	bl	801667c <RegionEU868RxConfig>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	e006      	b.n	8014b6e <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8014b60:	6879      	ldr	r1, [r7, #4]
 8014b62:	68b8      	ldr	r0, [r7, #8]
 8014b64:	f002 ffdc 	bl	8017b20 <RegionUS915RxConfig>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	e000      	b.n	8014b6e <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014b6c:	2300      	movs	r3, #0
        }
    }
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3710      	adds	r7, #16
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b084      	sub	sp, #16
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
 8014b80:	603b      	str	r3, [r7, #0]
 8014b82:	4603      	mov	r3, r0
 8014b84:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014b86:	7bfb      	ldrb	r3, [r7, #15]
 8014b88:	2b05      	cmp	r3, #5
 8014b8a:	d002      	beq.n	8014b92 <RegionTxConfig+0x1c>
 8014b8c:	2b08      	cmp	r3, #8
 8014b8e:	d007      	beq.n	8014ba0 <RegionTxConfig+0x2a>
 8014b90:	e00d      	b.n	8014bae <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014b92:	683a      	ldr	r2, [r7, #0]
 8014b94:	6879      	ldr	r1, [r7, #4]
 8014b96:	68b8      	ldr	r0, [r7, #8]
 8014b98:	f001 fe40 	bl	801681c <RegionEU868TxConfig>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	e007      	b.n	8014bb0 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8014ba0:	683a      	ldr	r2, [r7, #0]
 8014ba2:	6879      	ldr	r1, [r7, #4]
 8014ba4:	68b8      	ldr	r0, [r7, #8]
 8014ba6:	f003 f83f 	bl	8017c28 <RegionUS915TxConfig>
 8014baa:	4603      	mov	r3, r0
 8014bac:	e000      	b.n	8014bb0 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014bae:	2300      	movs	r3, #0
        }
    }
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3710      	adds	r7, #16
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af02      	add	r7, sp, #8
 8014bbe:	60b9      	str	r1, [r7, #8]
 8014bc0:	607a      	str	r2, [r7, #4]
 8014bc2:	603b      	str	r3, [r7, #0]
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014bc8:	7bfb      	ldrb	r3, [r7, #15]
 8014bca:	2b05      	cmp	r3, #5
 8014bcc:	d002      	beq.n	8014bd4 <RegionLinkAdrReq+0x1c>
 8014bce:	2b08      	cmp	r3, #8
 8014bd0:	d00a      	beq.n	8014be8 <RegionLinkAdrReq+0x30>
 8014bd2:	e013      	b.n	8014bfc <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	9300      	str	r3, [sp, #0]
 8014bd8:	69bb      	ldr	r3, [r7, #24]
 8014bda:	683a      	ldr	r2, [r7, #0]
 8014bdc:	6879      	ldr	r1, [r7, #4]
 8014bde:	68b8      	ldr	r0, [r7, #8]
 8014be0:	f001 feec 	bl	80169bc <RegionEU868LinkAdrReq>
 8014be4:	4603      	mov	r3, r0
 8014be6:	e00a      	b.n	8014bfe <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	9300      	str	r3, [sp, #0]
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	683a      	ldr	r2, [r7, #0]
 8014bf0:	6879      	ldr	r1, [r7, #4]
 8014bf2:	68b8      	ldr	r0, [r7, #8]
 8014bf4:	f003 f8c2 	bl	8017d7c <RegionUS915LinkAdrReq>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	e000      	b.n	8014bfe <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014bfc:	2300      	movs	r3, #0
        }
    }
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3710      	adds	r7, #16
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}

08014c06 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014c06:	b580      	push	{r7, lr}
 8014c08:	b082      	sub	sp, #8
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	6039      	str	r1, [r7, #0]
 8014c10:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c12:	79fb      	ldrb	r3, [r7, #7]
 8014c14:	2b05      	cmp	r3, #5
 8014c16:	d002      	beq.n	8014c1e <RegionRxParamSetupReq+0x18>
 8014c18:	2b08      	cmp	r3, #8
 8014c1a:	d005      	beq.n	8014c28 <RegionRxParamSetupReq+0x22>
 8014c1c:	e009      	b.n	8014c32 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8014c1e:	6838      	ldr	r0, [r7, #0]
 8014c20:	f001 ffee 	bl	8016c00 <RegionEU868RxParamSetupReq>
 8014c24:	4603      	mov	r3, r0
 8014c26:	e005      	b.n	8014c34 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8014c28:	6838      	ldr	r0, [r7, #0]
 8014c2a:	f003 fac1 	bl	80181b0 <RegionUS915RxParamSetupReq>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	e000      	b.n	8014c34 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014c32:	2300      	movs	r3, #0
        }
    }
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3708      	adds	r7, #8
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	4603      	mov	r3, r0
 8014c44:	6039      	str	r1, [r7, #0]
 8014c46:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c48:	79fb      	ldrb	r3, [r7, #7]
 8014c4a:	2b05      	cmp	r3, #5
 8014c4c:	d002      	beq.n	8014c54 <RegionNewChannelReq+0x18>
 8014c4e:	2b08      	cmp	r3, #8
 8014c50:	d005      	beq.n	8014c5e <RegionNewChannelReq+0x22>
 8014c52:	e009      	b.n	8014c68 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014c54:	6838      	ldr	r0, [r7, #0]
 8014c56:	f002 f811 	bl	8016c7c <RegionEU868NewChannelReq>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	e005      	b.n	8014c6a <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8014c5e:	6838      	ldr	r0, [r7, #0]
 8014c60:	f003 faf2 	bl	8018248 <RegionUS915NewChannelReq>
 8014c64:	4603      	mov	r3, r0
 8014c66:	e000      	b.n	8014c6a <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014c68:	2300      	movs	r3, #0
        }
    }
}
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3708      	adds	r7, #8
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b082      	sub	sp, #8
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	4603      	mov	r3, r0
 8014c7a:	6039      	str	r1, [r7, #0]
 8014c7c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c7e:	79fb      	ldrb	r3, [r7, #7]
 8014c80:	2b05      	cmp	r3, #5
 8014c82:	d002      	beq.n	8014c8a <RegionTxParamSetupReq+0x18>
 8014c84:	2b08      	cmp	r3, #8
 8014c86:	d005      	beq.n	8014c94 <RegionTxParamSetupReq+0x22>
 8014c88:	e009      	b.n	8014c9e <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014c8a:	6838      	ldr	r0, [r7, #0]
 8014c8c:	f002 f854 	bl	8016d38 <RegionEU868TxParamSetupReq>
 8014c90:	4603      	mov	r3, r0
 8014c92:	e005      	b.n	8014ca0 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8014c94:	6838      	ldr	r0, [r7, #0]
 8014c96:	f003 fae2 	bl	801825e <RegionUS915TxParamSetupReq>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	e000      	b.n	8014ca0 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014c9e:	2300      	movs	r3, #0
        }
    }
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3708      	adds	r7, #8
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	4603      	mov	r3, r0
 8014cb0:	6039      	str	r1, [r7, #0]
 8014cb2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014cb4:	79fb      	ldrb	r3, [r7, #7]
 8014cb6:	2b05      	cmp	r3, #5
 8014cb8:	d002      	beq.n	8014cc0 <RegionDlChannelReq+0x18>
 8014cba:	2b08      	cmp	r3, #8
 8014cbc:	d005      	beq.n	8014cca <RegionDlChannelReq+0x22>
 8014cbe:	e009      	b.n	8014cd4 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014cc0:	6838      	ldr	r0, [r7, #0]
 8014cc2:	f002 f845 	bl	8016d50 <RegionEU868DlChannelReq>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	e005      	b.n	8014cd6 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8014cca:	6838      	ldr	r0, [r7, #0]
 8014ccc:	f003 fad2 	bl	8018274 <RegionUS915DlChannelReq>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	e000      	b.n	8014cd6 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014cd4:	2300      	movs	r3, #0
        }
    }
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3708      	adds	r7, #8
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}

08014cde <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014cde:	b580      	push	{r7, lr}
 8014ce0:	b082      	sub	sp, #8
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	71fb      	strb	r3, [r7, #7]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	71bb      	strb	r3, [r7, #6]
 8014cec:	4613      	mov	r3, r2
 8014cee:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014cf0:	79fb      	ldrb	r3, [r7, #7]
 8014cf2:	2b05      	cmp	r3, #5
 8014cf4:	d002      	beq.n	8014cfc <RegionAlternateDr+0x1e>
 8014cf6:	2b08      	cmp	r3, #8
 8014cf8:	d009      	beq.n	8014d0e <RegionAlternateDr+0x30>
 8014cfa:	e011      	b.n	8014d20 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014cfc:	797a      	ldrb	r2, [r7, #5]
 8014cfe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014d02:	4611      	mov	r1, r2
 8014d04:	4618      	mov	r0, r3
 8014d06:	f002 f867 	bl	8016dd8 <RegionEU868AlternateDr>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	e009      	b.n	8014d22 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8014d0e:	797a      	ldrb	r2, [r7, #5]
 8014d10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014d14:	4611      	mov	r1, r2
 8014d16:	4618      	mov	r0, r3
 8014d18:	f003 fab8 	bl	801828c <RegionUS915AlternateDr>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	e000      	b.n	8014d22 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014d20:	2300      	movs	r3, #0
        }
    }
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b084      	sub	sp, #16
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	60b9      	str	r1, [r7, #8]
 8014d32:	607a      	str	r2, [r7, #4]
 8014d34:	603b      	str	r3, [r7, #0]
 8014d36:	4603      	mov	r3, r0
 8014d38:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014d3a:	7bfb      	ldrb	r3, [r7, #15]
 8014d3c:	2b05      	cmp	r3, #5
 8014d3e:	d002      	beq.n	8014d46 <RegionNextChannel+0x1c>
 8014d40:	2b08      	cmp	r3, #8
 8014d42:	d008      	beq.n	8014d56 <RegionNextChannel+0x2c>
 8014d44:	e00f      	b.n	8014d66 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014d46:	69bb      	ldr	r3, [r7, #24]
 8014d48:	683a      	ldr	r2, [r7, #0]
 8014d4a:	6879      	ldr	r1, [r7, #4]
 8014d4c:	68b8      	ldr	r0, [r7, #8]
 8014d4e:	f002 f853 	bl	8016df8 <RegionEU868NextChannel>
 8014d52:	4603      	mov	r3, r0
 8014d54:	e008      	b.n	8014d68 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	683a      	ldr	r2, [r7, #0]
 8014d5a:	6879      	ldr	r1, [r7, #4]
 8014d5c:	68b8      	ldr	r0, [r7, #8]
 8014d5e:	f003 facb 	bl	80182f8 <RegionUS915NextChannel>
 8014d62:	4603      	mov	r3, r0
 8014d64:	e000      	b.n	8014d68 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014d66:	2309      	movs	r3, #9
        }
    }
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3710      	adds	r7, #16
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014d70:	b590      	push	{r4, r7, lr}
 8014d72:	b083      	sub	sp, #12
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	4604      	mov	r4, r0
 8014d78:	4608      	mov	r0, r1
 8014d7a:	4611      	mov	r1, r2
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	4623      	mov	r3, r4
 8014d80:	71fb      	strb	r3, [r7, #7]
 8014d82:	4603      	mov	r3, r0
 8014d84:	71bb      	strb	r3, [r7, #6]
 8014d86:	460b      	mov	r3, r1
 8014d88:	717b      	strb	r3, [r7, #5]
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014d8e:	79fb      	ldrb	r3, [r7, #7]
 8014d90:	2b05      	cmp	r3, #5
 8014d92:	d002      	beq.n	8014d9a <RegionApplyDrOffset+0x2a>
 8014d94:	2b08      	cmp	r3, #8
 8014d96:	d00a      	beq.n	8014dae <RegionApplyDrOffset+0x3e>
 8014d98:	e013      	b.n	8014dc2 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8014d9a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014d9e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014da2:	79bb      	ldrb	r3, [r7, #6]
 8014da4:	4618      	mov	r0, r3
 8014da6:	f002 f9a1 	bl	80170ec <RegionEU868ApplyDrOffset>
 8014daa:	4603      	mov	r3, r0
 8014dac:	e00a      	b.n	8014dc4 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8014dae:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014db2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014db6:	79bb      	ldrb	r3, [r7, #6]
 8014db8:	4618      	mov	r0, r3
 8014dba:	f003 fb8b 	bl	80184d4 <RegionUS915ApplyDrOffset>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	e000      	b.n	8014dc4 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014dc2:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	370c      	adds	r7, #12
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd90      	pop	{r4, r7, pc}

08014dcc <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014dd2:	4b04      	ldr	r3, [pc, #16]	; (8014de4 <RegionGetVersion+0x18>)
 8014dd4:	607b      	str	r3, [r7, #4]

    return version;
 8014dd6:	687b      	ldr	r3, [r7, #4]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	370c      	adds	r7, #12
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bc80      	pop	{r7}
 8014de0:	4770      	bx	lr
 8014de2:	bf00      	nop
 8014de4:	02010001 	.word	0x02010001

08014de8 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8014de8:	b480      	push	{r7}
 8014dea:	b087      	sub	sp, #28
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	4603      	mov	r3, r0
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
 8014df4:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d002      	beq.n	8014e02 <FindAvailable125kHzChannels+0x1a>
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d101      	bne.n	8014e06 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014e02:	2303      	movs	r3, #3
 8014e04:	e021      	b.n	8014e4a <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	75fb      	strb	r3, [r7, #23]
 8014e10:	e017      	b.n	8014e42 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8014e12:	89fa      	ldrh	r2, [r7, #14]
 8014e14:	7dfb      	ldrb	r3, [r7, #23]
 8014e16:	fa42 f303 	asr.w	r3, r2, r3
 8014e1a:	f003 0301 	and.w	r3, r3, #1
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d00c      	beq.n	8014e3c <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	4413      	add	r3, r2
 8014e2c:	7dfa      	ldrb	r2, [r7, #23]
 8014e2e:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	3301      	adds	r3, #1
 8014e36:	b2da      	uxtb	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8014e3c:	7dfb      	ldrb	r3, [r7, #23]
 8014e3e:	3301      	adds	r3, #1
 8014e40:	75fb      	strb	r3, [r7, #23]
 8014e42:	7dfb      	ldrb	r3, [r7, #23]
 8014e44:	2b07      	cmp	r3, #7
 8014e46:	d9e4      	bls.n	8014e12 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8014e48:	2300      	movs	r3, #0
}
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	371c      	adds	r7, #28
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bc80      	pop	{r7}
 8014e52:	4770      	bx	lr

08014e54 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8014e54:	b590      	push	{r4, r7, lr}
 8014e56:	b089      	sub	sp, #36	; 0x24
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	60b9      	str	r1, [r7, #8]
 8014e5e:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8014e60:	2300      	movs	r3, #0
 8014e62:	617b      	str	r3, [r7, #20]
 8014e64:	2300      	movs	r3, #0
 8014e66:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d005      	beq.n	8014e7e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d002      	beq.n	8014e7e <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d101      	bne.n	8014e82 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014e7e:	2303      	movs	r3, #3
 8014e80:	e055      	b.n	8014f2e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8014e88:	7f7b      	ldrb	r3, [r7, #29]
 8014e8a:	085b      	lsrs	r3, r3, #1
 8014e8c:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8014e8e:	7f7b      	ldrb	r3, [r7, #29]
 8014e90:	f003 0301 	and.w	r3, r3, #1
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d107      	bne.n	8014eaa <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8014e9a:	7f3b      	ldrb	r3, [r7, #28]
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	68fa      	ldr	r2, [r7, #12]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	881b      	ldrh	r3, [r3, #0]
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	83fb      	strh	r3, [r7, #30]
 8014ea8:	e006      	b.n	8014eb8 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8014eaa:	7f3b      	ldrb	r3, [r7, #28]
 8014eac:	005b      	lsls	r3, r3, #1
 8014eae:	68fa      	ldr	r2, [r7, #12]
 8014eb0:	4413      	add	r3, r2
 8014eb2:	881b      	ldrh	r3, [r3, #0]
 8014eb4:	0a1b      	lsrs	r3, r3, #8
 8014eb6:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8014eb8:	f107 0213 	add.w	r2, r7, #19
 8014ebc:	f107 0114 	add.w	r1, r7, #20
 8014ec0:	8bfb      	ldrh	r3, [r7, #30]
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7ff ff90 	bl	8014de8 <FindAvailable125kHzChannels>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b03      	cmp	r3, #3
 8014ecc:	d101      	bne.n	8014ed2 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ece:	2303      	movs	r3, #3
 8014ed0:	e02d      	b.n	8014f2e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8014ed2:	7cfb      	ldrb	r3, [r7, #19]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d011      	beq.n	8014efc <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8014ed8:	7f7b      	ldrb	r3, [r7, #29]
 8014eda:	00db      	lsls	r3, r3, #3
 8014edc:	b2dc      	uxtb	r4, r3
 8014ede:	7cfb      	ldrb	r3, [r7, #19]
 8014ee0:	3b01      	subs	r3, #1
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	f003 fb47 	bl	8018578 <randr>
 8014eea:	4603      	mov	r3, r0
 8014eec:	3320      	adds	r3, #32
 8014eee:	443b      	add	r3, r7
 8014ef0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8014ef4:	4423      	add	r3, r4
 8014ef6:	b2da      	uxtb	r2, r3
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8014efc:	7f7b      	ldrb	r3, [r7, #29]
 8014efe:	3301      	adds	r3, #1
 8014f00:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8014f02:	7f7b      	ldrb	r3, [r7, #29]
 8014f04:	2b07      	cmp	r3, #7
 8014f06:	d901      	bls.n	8014f0c <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8014f0c:	7cfb      	ldrb	r3, [r7, #19]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d104      	bne.n	8014f1c <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	7f7a      	ldrb	r2, [r7, #29]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d1b5      	bne.n	8014e88 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8014f1c:	7cfb      	ldrb	r3, [r7, #19]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d004      	beq.n	8014f2c <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	7f7a      	ldrb	r2, [r7, #29]
 8014f26:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	e000      	b.n	8014f2e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014f2c:	2303      	movs	r3, #3
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3724      	adds	r7, #36	; 0x24
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd90      	pop	{r4, r7, pc}

08014f36 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8014f36:	b480      	push	{r7}
 8014f38:	b085      	sub	sp, #20
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	60b9      	str	r1, [r7, #8]
 8014f40:	607a      	str	r2, [r7, #4]
 8014f42:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8014f44:	7bfb      	ldrb	r3, [r7, #15]
 8014f46:	687a      	ldr	r2, [r7, #4]
 8014f48:	fb03 f202 	mul.w	r2, r3, r2
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	4413      	add	r3, r2
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3714      	adds	r7, #20
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bc80      	pop	{r7}
 8014f58:	4770      	bx	lr

08014f5a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014f5a:	b480      	push	{r7}
 8014f5c:	b087      	sub	sp, #28
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	60f8      	str	r0, [r7, #12]
 8014f62:	4608      	mov	r0, r1
 8014f64:	4639      	mov	r1, r7
 8014f66:	e881 000c 	stmia.w	r1, {r2, r3}
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	881b      	ldrh	r3, [r3, #0]
 8014f72:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014f74:	7afb      	ldrb	r3, [r7, #11]
 8014f76:	f083 0301 	eor.w	r3, r3, #1
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d01b      	beq.n	8014fb8 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014f80:	f242 7310 	movw	r3, #10000	; 0x2710
 8014f84:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014f8c:	d202      	bcs.n	8014f94 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014f8e:	2364      	movs	r3, #100	; 0x64
 8014f90:	82bb      	strh	r3, [r7, #20]
 8014f92:	e00b      	b.n	8014fac <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014f9a:	4293      	cmp	r3, r2
 8014f9c:	d803      	bhi.n	8014fa6 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014fa2:	82bb      	strh	r3, [r7, #20]
 8014fa4:	e002      	b.n	8014fac <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014fa6:	f242 7310 	movw	r3, #10000	; 0x2710
 8014faa:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014fac:	8aba      	ldrh	r2, [r7, #20]
 8014fae:	8afb      	ldrh	r3, [r7, #22]
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	bf38      	it	cc
 8014fb4:	4613      	movcc	r3, r2
 8014fb6:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014fb8:	8afb      	ldrh	r3, [r7, #22]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d101      	bne.n	8014fc2 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014fbe:	2301      	movs	r3, #1
 8014fc0:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014fc2:	8afb      	ldrh	r3, [r7, #22]
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	371c      	adds	r7, #28
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bc80      	pop	{r7}
 8014fcc:	4770      	bx	lr
	...

08014fd0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b08e      	sub	sp, #56	; 0x38
 8014fd4:	af02      	add	r7, sp, #8
 8014fd6:	60f8      	str	r0, [r7, #12]
 8014fd8:	4608      	mov	r0, r1
 8014fda:	4639      	mov	r1, r7
 8014fdc:	e881 000c 	stmia.w	r1, {r2, r3}
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	881b      	ldrh	r3, [r3, #0]
 8014fe8:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014fea:	4b4b      	ldr	r3, [pc, #300]	; (8015118 <SetMaxTimeCredits+0x148>)
 8014fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014fee:	463b      	mov	r3, r7
 8014ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ff4:	f006 ff0e 	bl	801be14 <SysTimeToMs>
 8014ff8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014ffa:	f107 0314 	add.w	r3, r7, #20
 8014ffe:	2200      	movs	r2, #0
 8015000:	601a      	str	r2, [r3, #0]
 8015002:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015004:	7af9      	ldrb	r1, [r7, #11]
 8015006:	463b      	mov	r3, r7
 8015008:	cb0c      	ldmia	r3, {r2, r3}
 801500a:	68f8      	ldr	r0, [r7, #12]
 801500c:	f7ff ffa5 	bl	8014f5a <GetDutyCycle>
 8015010:	4603      	mov	r3, r0
 8015012:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8015014:	7afb      	ldrb	r3, [r7, #11]
 8015016:	f083 0301 	eor.w	r3, r3, #1
 801501a:	b2db      	uxtb	r3, r3
 801501c:	2b00      	cmp	r3, #0
 801501e:	d062      	beq.n	80150e6 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015020:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015022:	2b64      	cmp	r3, #100	; 0x64
 8015024:	d105      	bne.n	8015032 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015026:	4b3c      	ldr	r3, [pc, #240]	; (8015118 <SetMaxTimeCredits+0x148>)
 8015028:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801502e:	609a      	str	r2, [r3, #8]
 8015030:	e00b      	b.n	801504a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015032:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015038:	d105      	bne.n	8015046 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801503a:	4b38      	ldr	r3, [pc, #224]	; (801511c <SetMaxTimeCredits+0x14c>)
 801503c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015042:	609a      	str	r2, [r3, #8]
 8015044:	e001      	b.n	801504a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015046:	4b36      	ldr	r3, [pc, #216]	; (8015120 <SetMaxTimeCredits+0x150>)
 8015048:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	689a      	ldr	r2, [r3, #8]
 801504e:	f107 031c 	add.w	r3, r7, #28
 8015052:	4611      	mov	r1, r2
 8015054:	4618      	mov	r0, r3
 8015056:	f006 ff05 	bl	801be64 <SysTimeFromMs>
 801505a:	f107 0014 	add.w	r0, r7, #20
 801505e:	6a3b      	ldr	r3, [r7, #32]
 8015060:	9300      	str	r3, [sp, #0]
 8015062:	69fb      	ldr	r3, [r7, #28]
 8015064:	463a      	mov	r2, r7
 8015066:	ca06      	ldmia	r2, {r1, r2}
 8015068:	f006 fe15 	bl	801bc96 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801506c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015070:	f083 0301 	eor.w	r3, r3, #1
 8015074:	b2db      	uxtb	r3, r3
 8015076:	2b00      	cmp	r3, #0
 8015078:	d006      	beq.n	8015088 <SetMaxTimeCredits+0xb8>
 801507a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801507e:	f083 0301 	eor.w	r3, r3, #1
 8015082:	b2db      	uxtb	r3, r3
 8015084:	2b00      	cmp	r3, #0
 8015086:	d108      	bne.n	801509a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801508c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801508e:	429a      	cmp	r2, r3
 8015090:	d103      	bne.n	801509a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015092:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015094:	4a23      	ldr	r2, [pc, #140]	; (8015124 <SetMaxTimeCredits+0x154>)
 8015096:	4293      	cmp	r3, r2
 8015098:	d92f      	bls.n	80150fa <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801509e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	4a21      	ldr	r2, [pc, #132]	; (8015128 <SetMaxTimeCredits+0x158>)
 80150a4:	4293      	cmp	r3, r2
 80150a6:	d928      	bls.n	80150fa <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80150ae:	3b30      	subs	r3, #48	; 0x30
 80150b0:	4a1e      	ldr	r2, [pc, #120]	; (801512c <SetMaxTimeCredits+0x15c>)
 80150b2:	fba2 2303 	umull	r2, r3, r2, r3
 80150b6:	0c1b      	lsrs	r3, r3, #16
 80150b8:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	4a1c      	ldr	r2, [pc, #112]	; (8015130 <SetMaxTimeCredits+0x160>)
 80150be:	fb02 f303 	mul.w	r3, r2, r3
 80150c2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80150ca:	3330      	adds	r3, #48	; 0x30
 80150cc:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80150ce:	2300      	movs	r3, #0
 80150d0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80150d2:	f107 0314 	add.w	r3, r7, #20
 80150d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80150da:	f006 fe9b 	bl	801be14 <SysTimeToMs>
 80150de:	4602      	mov	r2, r0
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	609a      	str	r2, [r3, #8]
 80150e4:	e009      	b.n	80150fa <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80150e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80150ea:	f083 0301 	eor.w	r3, r3, #1
 80150ee:	b2db      	uxtb	r3, r3
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d002      	beq.n	80150fa <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150f8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d102      	bne.n	8015108 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015106:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801510c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801510e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8015110:	4618      	mov	r0, r3
 8015112:	3730      	adds	r7, #48	; 0x30
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	001b7740 	.word	0x001b7740
 801511c:	0112a880 	.word	0x0112a880
 8015120:	02932e00 	.word	0x02932e00
 8015124:	0001517f 	.word	0x0001517f
 8015128:	0001ec2f 	.word	0x0001ec2f
 801512c:	c22e4507 	.word	0xc22e4507
 8015130:	00015180 	.word	0x00015180

08015134 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b086      	sub	sp, #24
 8015138:	af02      	add	r7, sp, #8
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	4608      	mov	r0, r1
 801513e:	4611      	mov	r1, r2
 8015140:	461a      	mov	r2, r3
 8015142:	4603      	mov	r3, r0
 8015144:	70fb      	strb	r3, [r7, #3]
 8015146:	460b      	mov	r3, r1
 8015148:	70bb      	strb	r3, [r7, #2]
 801514a:	4613      	mov	r3, r2
 801514c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801514e:	78f9      	ldrb	r1, [r7, #3]
 8015150:	787b      	ldrb	r3, [r7, #1]
 8015152:	9301      	str	r3, [sp, #4]
 8015154:	78bb      	ldrb	r3, [r7, #2]
 8015156:	9300      	str	r3, [sp, #0]
 8015158:	f107 0318 	add.w	r3, r7, #24
 801515c:	cb0c      	ldmia	r3, {r2, r3}
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f7ff ff36 	bl	8014fd0 <SetMaxTimeCredits>
 8015164:	4603      	mov	r3, r0
 8015166:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015168:	78fb      	ldrb	r3, [r7, #3]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d00a      	beq.n	8015184 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	4618      	mov	r0, r3
 8015174:	f007 fc8e 	bl	801ca94 <UTIL_TIMER_GetElapsedTime>
 8015178:	4602      	mov	r2, r0
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	68db      	ldr	r3, [r3, #12]
 801517e:	441a      	add	r2, r3
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	68da      	ldr	r2, [r3, #12]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	691b      	ldr	r3, [r3, #16]
 801518c:	429a      	cmp	r2, r3
 801518e:	d903      	bls.n	8015198 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	691a      	ldr	r2, [r3, #16]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6a3a      	ldr	r2, [r7, #32]
 801519c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801519e:	89fb      	ldrh	r3, [r7, #14]
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3710      	adds	r7, #16
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80151a8:	b480      	push	{r7}
 80151aa:	b085      	sub	sp, #20
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	4603      	mov	r3, r0
 80151b0:	460a      	mov	r2, r1
 80151b2:	80fb      	strh	r3, [r7, #6]
 80151b4:	4613      	mov	r3, r2
 80151b6:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80151b8:	2300      	movs	r3, #0
 80151ba:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80151bc:	2300      	movs	r3, #0
 80151be:	73bb      	strb	r3, [r7, #14]
 80151c0:	e011      	b.n	80151e6 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80151c2:	88fa      	ldrh	r2, [r7, #6]
 80151c4:	7bbb      	ldrb	r3, [r7, #14]
 80151c6:	2101      	movs	r1, #1
 80151c8:	fa01 f303 	lsl.w	r3, r1, r3
 80151cc:	401a      	ands	r2, r3
 80151ce:	7bbb      	ldrb	r3, [r7, #14]
 80151d0:	2101      	movs	r1, #1
 80151d2:	fa01 f303 	lsl.w	r3, r1, r3
 80151d6:	429a      	cmp	r2, r3
 80151d8:	d102      	bne.n	80151e0 <CountChannels+0x38>
        {
            nbActiveBits++;
 80151da:	7bfb      	ldrb	r3, [r7, #15]
 80151dc:	3301      	adds	r3, #1
 80151de:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80151e0:	7bbb      	ldrb	r3, [r7, #14]
 80151e2:	3301      	adds	r3, #1
 80151e4:	73bb      	strb	r3, [r7, #14]
 80151e6:	7bba      	ldrb	r2, [r7, #14]
 80151e8:	797b      	ldrb	r3, [r7, #5]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d3e9      	bcc.n	80151c2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80151ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3714      	adds	r7, #20
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bc80      	pop	{r7}
 80151f8:	4770      	bx	lr

080151fa <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80151fa:	b580      	push	{r7, lr}
 80151fc:	b084      	sub	sp, #16
 80151fe:	af00      	add	r7, sp, #0
 8015200:	6039      	str	r1, [r7, #0]
 8015202:	4611      	mov	r1, r2
 8015204:	461a      	mov	r2, r3
 8015206:	4603      	mov	r3, r0
 8015208:	71fb      	strb	r3, [r7, #7]
 801520a:	460b      	mov	r3, r1
 801520c:	71bb      	strb	r3, [r7, #6]
 801520e:	4613      	mov	r3, r2
 8015210:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015212:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015216:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801521a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801521e:	4618      	mov	r0, r3
 8015220:	f000 f85d 	bl	80152de <RegionCommonValueInRange>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d101      	bne.n	801522e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801522a:	2300      	movs	r3, #0
 801522c:	e053      	b.n	80152d6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801522e:	2300      	movs	r3, #0
 8015230:	73fb      	strb	r3, [r7, #15]
 8015232:	2300      	movs	r3, #0
 8015234:	73bb      	strb	r3, [r7, #14]
 8015236:	e049      	b.n	80152cc <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015238:	2300      	movs	r3, #0
 801523a:	737b      	strb	r3, [r7, #13]
 801523c:	e03d      	b.n	80152ba <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801523e:	7bbb      	ldrb	r3, [r7, #14]
 8015240:	005b      	lsls	r3, r3, #1
 8015242:	683a      	ldr	r2, [r7, #0]
 8015244:	4413      	add	r3, r2
 8015246:	881b      	ldrh	r3, [r3, #0]
 8015248:	461a      	mov	r2, r3
 801524a:	7b7b      	ldrb	r3, [r7, #13]
 801524c:	fa42 f303 	asr.w	r3, r2, r3
 8015250:	f003 0301 	and.w	r3, r3, #1
 8015254:	2b00      	cmp	r3, #0
 8015256:	d02d      	beq.n	80152b4 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015258:	7bfa      	ldrb	r2, [r7, #15]
 801525a:	7b7b      	ldrb	r3, [r7, #13]
 801525c:	4413      	add	r3, r2
 801525e:	461a      	mov	r2, r3
 8015260:	4613      	mov	r3, r2
 8015262:	005b      	lsls	r3, r3, #1
 8015264:	4413      	add	r3, r2
 8015266:	009b      	lsls	r3, r3, #2
 8015268:	461a      	mov	r2, r3
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	4413      	add	r3, r2
 801526e:	7a1b      	ldrb	r3, [r3, #8]
 8015270:	f343 0303 	sbfx	r3, r3, #0, #4
 8015274:	b25b      	sxtb	r3, r3
 8015276:	f003 030f 	and.w	r3, r3, #15
 801527a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801527c:	7bfa      	ldrb	r2, [r7, #15]
 801527e:	7b7b      	ldrb	r3, [r7, #13]
 8015280:	4413      	add	r3, r2
 8015282:	461a      	mov	r2, r3
 8015284:	4613      	mov	r3, r2
 8015286:	005b      	lsls	r3, r3, #1
 8015288:	4413      	add	r3, r2
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	461a      	mov	r2, r3
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	4413      	add	r3, r2
 8015292:	7a1b      	ldrb	r3, [r3, #8]
 8015294:	f343 1303 	sbfx	r3, r3, #4, #4
 8015298:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801529a:	f003 030f 	and.w	r3, r3, #15
 801529e:	b25a      	sxtb	r2, r3
 80152a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80152a4:	4618      	mov	r0, r3
 80152a6:	f000 f81a 	bl	80152de <RegionCommonValueInRange>
 80152aa:	4603      	mov	r3, r0
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	d101      	bne.n	80152b4 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80152b0:	2301      	movs	r3, #1
 80152b2:	e010      	b.n	80152d6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80152b4:	7b7b      	ldrb	r3, [r7, #13]
 80152b6:	3301      	adds	r3, #1
 80152b8:	737b      	strb	r3, [r7, #13]
 80152ba:	7b7b      	ldrb	r3, [r7, #13]
 80152bc:	2b0f      	cmp	r3, #15
 80152be:	d9be      	bls.n	801523e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80152c0:	7bfb      	ldrb	r3, [r7, #15]
 80152c2:	3310      	adds	r3, #16
 80152c4:	73fb      	strb	r3, [r7, #15]
 80152c6:	7bbb      	ldrb	r3, [r7, #14]
 80152c8:	3301      	adds	r3, #1
 80152ca:	73bb      	strb	r3, [r7, #14]
 80152cc:	7bfa      	ldrb	r2, [r7, #15]
 80152ce:	79fb      	ldrb	r3, [r7, #7]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d3b1      	bcc.n	8015238 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}

080152de <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80152de:	b480      	push	{r7}
 80152e0:	b083      	sub	sp, #12
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	4603      	mov	r3, r0
 80152e6:	71fb      	strb	r3, [r7, #7]
 80152e8:	460b      	mov	r3, r1
 80152ea:	71bb      	strb	r3, [r7, #6]
 80152ec:	4613      	mov	r3, r2
 80152ee:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80152f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80152f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	db07      	blt.n	801530c <RegionCommonValueInRange+0x2e>
 80152fc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015300:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015304:	429a      	cmp	r2, r3
 8015306:	dc01      	bgt.n	801530c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015308:	2301      	movs	r3, #1
 801530a:	e000      	b.n	801530e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	370c      	adds	r7, #12
 8015312:	46bd      	mov	sp, r7
 8015314:	bc80      	pop	{r7}
 8015316:	4770      	bx	lr

08015318 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015318:	b480      	push	{r7}
 801531a:	b085      	sub	sp, #20
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	460b      	mov	r3, r1
 8015322:	70fb      	strb	r3, [r7, #3]
 8015324:	4613      	mov	r3, r2
 8015326:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015328:	78fb      	ldrb	r3, [r7, #3]
 801532a:	091b      	lsrs	r3, r3, #4
 801532c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801532e:	78bb      	ldrb	r3, [r7, #2]
 8015330:	091b      	lsrs	r3, r3, #4
 8015332:	b2db      	uxtb	r3, r3
 8015334:	7bfa      	ldrb	r2, [r7, #15]
 8015336:	429a      	cmp	r2, r3
 8015338:	d803      	bhi.n	8015342 <RegionCommonChanDisable+0x2a>
 801533a:	78fa      	ldrb	r2, [r7, #3]
 801533c:	78bb      	ldrb	r3, [r7, #2]
 801533e:	429a      	cmp	r2, r3
 8015340:	d301      	bcc.n	8015346 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015342:	2300      	movs	r3, #0
 8015344:	e017      	b.n	8015376 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015346:	7bfb      	ldrb	r3, [r7, #15]
 8015348:	005b      	lsls	r3, r3, #1
 801534a:	687a      	ldr	r2, [r7, #4]
 801534c:	4413      	add	r3, r2
 801534e:	881b      	ldrh	r3, [r3, #0]
 8015350:	b21a      	sxth	r2, r3
 8015352:	78fb      	ldrb	r3, [r7, #3]
 8015354:	f003 030f 	and.w	r3, r3, #15
 8015358:	2101      	movs	r1, #1
 801535a:	fa01 f303 	lsl.w	r3, r1, r3
 801535e:	b21b      	sxth	r3, r3
 8015360:	43db      	mvns	r3, r3
 8015362:	b21b      	sxth	r3, r3
 8015364:	4013      	ands	r3, r2
 8015366:	b219      	sxth	r1, r3
 8015368:	7bfb      	ldrb	r3, [r7, #15]
 801536a:	005b      	lsls	r3, r3, #1
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	4413      	add	r3, r2
 8015370:	b28a      	uxth	r2, r1
 8015372:	801a      	strh	r2, [r3, #0]

    return true;
 8015374:	2301      	movs	r3, #1
}
 8015376:	4618      	mov	r0, r3
 8015378:	3714      	adds	r7, #20
 801537a:	46bd      	mov	sp, r7
 801537c:	bc80      	pop	{r7}
 801537e:	4770      	bx	lr

08015380 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	460b      	mov	r3, r1
 801538a:	70fb      	strb	r3, [r7, #3]
 801538c:	4613      	mov	r3, r2
 801538e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015390:	2300      	movs	r3, #0
 8015392:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d101      	bne.n	801539e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801539a:	2300      	movs	r3, #0
 801539c:	e018      	b.n	80153d0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801539e:	78fb      	ldrb	r3, [r7, #3]
 80153a0:	73bb      	strb	r3, [r7, #14]
 80153a2:	e010      	b.n	80153c6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80153a4:	7bbb      	ldrb	r3, [r7, #14]
 80153a6:	005b      	lsls	r3, r3, #1
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	4413      	add	r3, r2
 80153ac:	881b      	ldrh	r3, [r3, #0]
 80153ae:	2110      	movs	r1, #16
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7ff fef9 	bl	80151a8 <CountChannels>
 80153b6:	4603      	mov	r3, r0
 80153b8:	461a      	mov	r2, r3
 80153ba:	7bfb      	ldrb	r3, [r7, #15]
 80153bc:	4413      	add	r3, r2
 80153be:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80153c0:	7bbb      	ldrb	r3, [r7, #14]
 80153c2:	3301      	adds	r3, #1
 80153c4:	73bb      	strb	r3, [r7, #14]
 80153c6:	7bba      	ldrb	r2, [r7, #14]
 80153c8:	78bb      	ldrb	r3, [r7, #2]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d3ea      	bcc.n	80153a4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80153ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80153d8:	b480      	push	{r7}
 80153da:	b087      	sub	sp, #28
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	4613      	mov	r3, r2
 80153e4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d016      	beq.n	801541a <RegionCommonChanMaskCopy+0x42>
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d013      	beq.n	801541a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80153f2:	2300      	movs	r3, #0
 80153f4:	75fb      	strb	r3, [r7, #23]
 80153f6:	e00c      	b.n	8015412 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80153f8:	7dfb      	ldrb	r3, [r7, #23]
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	68ba      	ldr	r2, [r7, #8]
 80153fe:	441a      	add	r2, r3
 8015400:	7dfb      	ldrb	r3, [r7, #23]
 8015402:	005b      	lsls	r3, r3, #1
 8015404:	68f9      	ldr	r1, [r7, #12]
 8015406:	440b      	add	r3, r1
 8015408:	8812      	ldrh	r2, [r2, #0]
 801540a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801540c:	7dfb      	ldrb	r3, [r7, #23]
 801540e:	3301      	adds	r3, #1
 8015410:	75fb      	strb	r3, [r7, #23]
 8015412:	7dfa      	ldrb	r2, [r7, #23]
 8015414:	79fb      	ldrb	r3, [r7, #7]
 8015416:	429a      	cmp	r2, r3
 8015418:	d3ee      	bcc.n	80153f8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801541a:	bf00      	nop
 801541c:	371c      	adds	r7, #28
 801541e:	46bd      	mov	sp, r7
 8015420:	bc80      	pop	{r7}
 8015422:	4770      	bx	lr

08015424 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015424:	b082      	sub	sp, #8
 8015426:	b580      	push	{r7, lr}
 8015428:	b086      	sub	sp, #24
 801542a:	af00      	add	r7, sp, #0
 801542c:	60f8      	str	r0, [r7, #12]
 801542e:	60b9      	str	r1, [r7, #8]
 8015430:	627b      	str	r3, [r7, #36]	; 0x24
 8015432:	4613      	mov	r3, r2
 8015434:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015436:	79f9      	ldrb	r1, [r7, #7]
 8015438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801543c:	cb0c      	ldmia	r3, {r2, r3}
 801543e:	68f8      	ldr	r0, [r7, #12]
 8015440:	f7ff fd8b 	bl	8014f5a <GetDutyCycle>
 8015444:	4603      	mov	r3, r0
 8015446:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	68da      	ldr	r2, [r3, #12]
 801544c:	8afb      	ldrh	r3, [r7, #22]
 801544e:	68b9      	ldr	r1, [r7, #8]
 8015450:	fb01 f303 	mul.w	r3, r1, r3
 8015454:	429a      	cmp	r2, r3
 8015456:	d909      	bls.n	801546c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	68da      	ldr	r2, [r3, #12]
 801545c:	8afb      	ldrh	r3, [r7, #22]
 801545e:	68b9      	ldr	r1, [r7, #8]
 8015460:	fb01 f303 	mul.w	r3, r1, r3
 8015464:	1ad2      	subs	r2, r2, r3
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801546a:	e002      	b.n	8015472 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	2200      	movs	r2, #0
 8015470:	60da      	str	r2, [r3, #12]
}
 8015472:	bf00      	nop
 8015474:	3718      	adds	r7, #24
 8015476:	46bd      	mov	sp, r7
 8015478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801547c:	b002      	add	sp, #8
 801547e:	4770      	bx	lr

08015480 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015482:	b08f      	sub	sp, #60	; 0x3c
 8015484:	af04      	add	r7, sp, #16
 8015486:	6039      	str	r1, [r7, #0]
 8015488:	4611      	mov	r1, r2
 801548a:	461a      	mov	r2, r3
 801548c:	4603      	mov	r3, r0
 801548e:	71fb      	strb	r3, [r7, #7]
 8015490:	460b      	mov	r3, r1
 8015492:	71bb      	strb	r3, [r7, #6]
 8015494:	4613      	mov	r3, r2
 8015496:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015498:	f04f 33ff 	mov.w	r3, #4294967295
 801549c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801549e:	f007 fae7 	bl	801ca70 <UTIL_TIMER_GetCurrentTime>
 80154a2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80154a4:	2300      	movs	r3, #0
 80154a6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80154a8:	2301      	movs	r3, #1
 80154aa:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80154ac:	2300      	movs	r3, #0
 80154ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80154b2:	2300      	movs	r3, #0
 80154b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80154b8:	e0ba      	b.n	8015630 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80154ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80154be:	4613      	mov	r3, r2
 80154c0:	005b      	lsls	r3, r3, #1
 80154c2:	4413      	add	r3, r2
 80154c4:	00db      	lsls	r3, r3, #3
 80154c6:	461a      	mov	r2, r3
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	189c      	adds	r4, r3, r2
 80154cc:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80154d0:	797a      	ldrb	r2, [r7, #5]
 80154d2:	79fd      	ldrb	r5, [r7, #7]
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	9302      	str	r3, [sp, #8]
 80154d8:	46ec      	mov	ip, sp
 80154da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80154de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80154e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80154e6:	4633      	mov	r3, r6
 80154e8:	4629      	mov	r1, r5
 80154ea:	4620      	mov	r0, r4
 80154ec:	f7ff fe22 	bl	8015134 <UpdateTimeCredits>
 80154f0:	4603      	mov	r3, r0
 80154f2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80154f4:	8afa      	ldrh	r2, [r7, #22]
 80154f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154f8:	fb02 f303 	mul.w	r3, r2, r3
 80154fc:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80154fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015502:	4613      	mov	r3, r2
 8015504:	005b      	lsls	r3, r3, #1
 8015506:	4413      	add	r3, r2
 8015508:	00db      	lsls	r3, r3, #3
 801550a:	461a      	mov	r2, r3
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	4413      	add	r3, r2
 8015510:	68db      	ldr	r3, [r3, #12]
 8015512:	69ba      	ldr	r2, [r7, #24]
 8015514:	429a      	cmp	r2, r3
 8015516:	d308      	bcc.n	801552a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015518:	797b      	ldrb	r3, [r7, #5]
 801551a:	f083 0301 	eor.w	r3, r3, #1
 801551e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015520:	2b00      	cmp	r3, #0
 8015522:	d013      	beq.n	801554c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015524:	79fb      	ldrb	r3, [r7, #7]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d010      	beq.n	801554c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801552a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801552e:	4613      	mov	r3, r2
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	4413      	add	r3, r2
 8015534:	00db      	lsls	r3, r3, #3
 8015536:	461a      	mov	r2, r3
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	4413      	add	r3, r2
 801553c:	2201      	movs	r2, #1
 801553e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015544:	3301      	adds	r3, #1
 8015546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801554a:	e06c      	b.n	8015626 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801554c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015550:	4613      	mov	r3, r2
 8015552:	005b      	lsls	r3, r3, #1
 8015554:	4413      	add	r3, r2
 8015556:	00db      	lsls	r3, r3, #3
 8015558:	461a      	mov	r2, r3
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	4413      	add	r3, r2
 801555e:	2200      	movs	r2, #0
 8015560:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015562:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015566:	4613      	mov	r3, r2
 8015568:	005b      	lsls	r3, r3, #1
 801556a:	4413      	add	r3, r2
 801556c:	00db      	lsls	r3, r3, #3
 801556e:	461a      	mov	r2, r3
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	4413      	add	r3, r2
 8015574:	691b      	ldr	r3, [r3, #16]
 8015576:	69ba      	ldr	r2, [r7, #24]
 8015578:	429a      	cmp	r2, r3
 801557a:	d215      	bcs.n	80155a8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801557c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015580:	4613      	mov	r3, r2
 8015582:	005b      	lsls	r3, r3, #1
 8015584:	4413      	add	r3, r2
 8015586:	00db      	lsls	r3, r3, #3
 8015588:	461a      	mov	r2, r3
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	4413      	add	r3, r2
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	69ba      	ldr	r2, [r7, #24]
 8015592:	1ad3      	subs	r3, r2, r3
 8015594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015596:	4293      	cmp	r3, r2
 8015598:	bf28      	it	cs
 801559a:	4613      	movcs	r3, r2
 801559c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801559e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80155a2:	3301      	adds	r3, #1
 80155a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80155a8:	79fb      	ldrb	r3, [r7, #7]
 80155aa:	f083 0301 	eor.w	r3, r3, #1
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d038      	beq.n	8015626 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80155b4:	2300      	movs	r3, #0
 80155b6:	60fb      	str	r3, [r7, #12]
 80155b8:	2300      	movs	r3, #0
 80155ba:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80155bc:	8afb      	ldrh	r3, [r7, #22]
 80155be:	2b64      	cmp	r3, #100	; 0x64
 80155c0:	d103      	bne.n	80155ca <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80155c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80155c6:	60fb      	str	r3, [r7, #12]
 80155c8:	e009      	b.n	80155de <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80155ca:	8afb      	ldrh	r3, [r7, #22]
 80155cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80155d0:	d103      	bne.n	80155da <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80155d2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80155d6:	60fb      	str	r3, [r7, #12]
 80155d8:	e001      	b.n	80155de <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80155da:	4b1e      	ldr	r3, [pc, #120]	; (8015654 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80155dc:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80155de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155e0:	4a1c      	ldr	r2, [pc, #112]	; (8015654 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80155e2:	4293      	cmp	r3, r2
 80155e4:	d90e      	bls.n	8015604 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155ea:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80155ee:	3b30      	subs	r3, #48	; 0x30
 80155f0:	4919      	ldr	r1, [pc, #100]	; (8015658 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80155f2:	fba1 1303 	umull	r1, r3, r1, r3
 80155f6:	0c1b      	lsrs	r3, r3, #16
 80155f8:	3301      	adds	r3, #1
 80155fa:	4918      	ldr	r1, [pc, #96]	; (801565c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80155fc:	fb01 f303 	mul.w	r3, r1, r3
 8015600:	4413      	add	r3, r2
 8015602:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015604:	f107 000c 	add.w	r0, r7, #12
 8015608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801560a:	9300      	str	r3, [sp, #0]
 801560c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801560e:	f107 020c 	add.w	r2, r7, #12
 8015612:	ca06      	ldmia	r2, {r1, r2}
 8015614:	f006 fb3f 	bl	801bc96 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015618:	f107 030c 	add.w	r3, r7, #12
 801561c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015620:	f006 fbf8 	bl	801be14 <SysTimeToMs>
 8015624:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015626:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801562a:	3301      	adds	r3, #1
 801562c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015630:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015634:	79bb      	ldrb	r3, [r7, #6]
 8015636:	429a      	cmp	r2, r3
 8015638:	f4ff af3f 	bcc.w	80154ba <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801563c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015640:	2b00      	cmp	r3, #0
 8015642:	d102      	bne.n	801564a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015644:	f04f 33ff 	mov.w	r3, #4294967295
 8015648:	e000      	b.n	801564c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801564c:	4618      	mov	r0, r3
 801564e:	372c      	adds	r7, #44	; 0x2c
 8015650:	46bd      	mov	sp, r7
 8015652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015654:	0001ec30 	.word	0x0001ec30
 8015658:	c22e4507 	.word	0xc22e4507
 801565c:	00015180 	.word	0x00015180

08015660 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015660:	b480      	push	{r7}
 8015662:	b085      	sub	sp, #20
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
 8015668:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801566a:	2300      	movs	r3, #0
 801566c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	2b03      	cmp	r3, #3
 8015674:	d13f      	bne.n	80156f6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	3301      	adds	r3, #1
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	b25a      	sxtb	r2, r3
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015688:	f003 030f 	and.w	r3, r3, #15
 801568c:	b25a      	sxtb	r2, r3
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015698:	b2db      	uxtb	r3, r3
 801569a:	091b      	lsrs	r3, r3, #4
 801569c:	b2db      	uxtb	r3, r3
 801569e:	b25a      	sxtb	r2, r3
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	3302      	adds	r3, #2
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	b29a      	uxth	r2, r3
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	889b      	ldrh	r3, [r3, #4]
 80156b4:	b21a      	sxth	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	3303      	adds	r3, #3
 80156ba:	781b      	ldrb	r3, [r3, #0]
 80156bc:	021b      	lsls	r3, r3, #8
 80156be:	b21b      	sxth	r3, r3
 80156c0:	4313      	orrs	r3, r2
 80156c2:	b21b      	sxth	r3, r3
 80156c4:	b29a      	uxth	r2, r3
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	791a      	ldrb	r2, [r3, #4]
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	091b      	lsrs	r3, r3, #4
 80156d8:	b2db      	uxtb	r3, r3
 80156da:	f003 0307 	and.w	r3, r3, #7
 80156de:	b2da      	uxtb	r2, r3
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	f003 030f 	and.w	r3, r3, #15
 80156ec:	b2da      	uxtb	r2, r3
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80156f2:	2305      	movs	r3, #5
 80156f4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80156f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3714      	adds	r7, #20
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bc80      	pop	{r7}
 8015700:	4770      	bx	lr

08015702 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015702:	b5b0      	push	{r4, r5, r7, lr}
 8015704:	b088      	sub	sp, #32
 8015706:	af02      	add	r7, sp, #8
 8015708:	60f8      	str	r0, [r7, #12]
 801570a:	60b9      	str	r1, [r7, #8]
 801570c:	607a      	str	r2, [r7, #4]
 801570e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	791b      	ldrb	r3, [r3, #4]
 8015714:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	799b      	ldrb	r3, [r3, #6]
 801571a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	79db      	ldrb	r3, [r3, #7]
 8015720:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	7a1b      	ldrb	r3, [r3, #8]
 8015726:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	795b      	ldrb	r3, [r3, #5]
 801572c:	f083 0301 	eor.w	r3, r3, #1
 8015730:	b2db      	uxtb	r3, r3
 8015732:	2b00      	cmp	r3, #0
 8015734:	d008      	beq.n	8015748 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	7adb      	ldrb	r3, [r3, #11]
 801573a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	7a5b      	ldrb	r3, [r3, #9]
 8015740:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	7a9b      	ldrb	r3, [r3, #10]
 8015746:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015748:	7dfb      	ldrb	r3, [r7, #23]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d04a      	beq.n	80157e4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801574e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015752:	2b0f      	cmp	r3, #15
 8015754:	d103      	bne.n	801575e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	7a5b      	ldrb	r3, [r3, #9]
 801575a:	75bb      	strb	r3, [r7, #22]
 801575c:	e01d      	b.n	801579a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	7b18      	ldrb	r0, [r3, #12]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	6919      	ldr	r1, [r3, #16]
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015772:	68fa      	ldr	r2, [r7, #12]
 8015774:	6992      	ldr	r2, [r2, #24]
 8015776:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801577a:	9201      	str	r2, [sp, #4]
 801577c:	9300      	str	r3, [sp, #0]
 801577e:	462b      	mov	r3, r5
 8015780:	4622      	mov	r2, r4
 8015782:	f7ff fd3a 	bl	80151fa <RegionCommonChanVerifyDr>
 8015786:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015788:	f083 0301 	eor.w	r3, r3, #1
 801578c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801578e:	2b00      	cmp	r3, #0
 8015790:	d003      	beq.n	801579a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015792:	7dfb      	ldrb	r3, [r7, #23]
 8015794:	f023 0302 	bic.w	r3, r3, #2
 8015798:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801579a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801579e:	2b0f      	cmp	r3, #15
 80157a0:	d103      	bne.n	80157aa <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	7a9b      	ldrb	r3, [r3, #10]
 80157a6:	757b      	strb	r3, [r7, #21]
 80157a8:	e01c      	b.n	80157e4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80157b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7ff fd8f 	bl	80152de <RegionCommonValueInRange>
 80157c0:	4603      	mov	r3, r0
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d10e      	bne.n	80157e4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80157cc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	da03      	bge.n	80157dc <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	7f5b      	ldrb	r3, [r3, #29]
 80157d8:	757b      	strb	r3, [r7, #21]
 80157da:	e003      	b.n	80157e4 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80157dc:	7dfb      	ldrb	r3, [r7, #23]
 80157de:	f023 0304 	bic.w	r3, r3, #4
 80157e2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80157e4:	7dfb      	ldrb	r3, [r7, #23]
 80157e6:	2b07      	cmp	r3, #7
 80157e8:	d105      	bne.n	80157f6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80157ea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d101      	bne.n	80157f6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80157f2:	2301      	movs	r3, #1
 80157f4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	7dba      	ldrb	r2, [r7, #22]
 80157fa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	7d7a      	ldrb	r2, [r7, #21]
 8015800:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015802:	7d3a      	ldrb	r2, [r7, #20]
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	701a      	strb	r2, [r3, #0]

    return status;
 8015808:	7dfb      	ldrb	r3, [r7, #23]
}
 801580a:	4618      	mov	r0, r3
 801580c:	3718      	adds	r7, #24
 801580e:	46bd      	mov	sp, r7
 8015810:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015814 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	4603      	mov	r3, r0
 801581c:	6039      	str	r1, [r7, #0]
 801581e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015820:	79fb      	ldrb	r3, [r7, #7]
 8015822:	4a06      	ldr	r2, [pc, #24]	; (801583c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015824:	fa02 f303 	lsl.w	r3, r2, r3
 8015828:	461a      	mov	r2, r3
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015830:	4618      	mov	r0, r3
 8015832:	370c      	adds	r7, #12
 8015834:	46bd      	mov	sp, r7
 8015836:	bc80      	pop	{r7}
 8015838:	4770      	bx	lr
 801583a:	bf00      	nop
 801583c:	000f4240 	.word	0x000f4240

08015840 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8015840:	b480      	push	{r7}
 8015842:	b083      	sub	sp, #12
 8015844:	af00      	add	r7, sp, #0
 8015846:	4603      	mov	r3, r0
 8015848:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801584a:	79fb      	ldrb	r3, [r7, #7]
 801584c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8015850:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015854:	4618      	mov	r0, r3
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	bc80      	pop	{r7}
 801585c:	4770      	bx	lr
	...

08015860 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015860:	b480      	push	{r7}
 8015862:	b085      	sub	sp, #20
 8015864:	af00      	add	r7, sp, #0
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	607a      	str	r2, [r7, #4]
 801586a:	603b      	str	r3, [r7, #0]
 801586c:	460b      	mov	r3, r1
 801586e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015870:	7afa      	ldrb	r2, [r7, #11]
 8015872:	7afb      	ldrb	r3, [r7, #11]
 8015874:	3b04      	subs	r3, #4
 8015876:	4619      	mov	r1, r3
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	fb03 f101 	mul.w	r1, r3, r1
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015884:	fb00 f303 	mul.w	r3, r0, r3
 8015888:	440b      	add	r3, r1
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	2b00      	cmp	r3, #0
 801588e:	d013      	beq.n	80158b8 <RegionCommonComputeRxWindowParameters+0x58>
 8015890:	7afb      	ldrb	r3, [r7, #11]
 8015892:	3b04      	subs	r3, #4
 8015894:	4619      	mov	r1, r3
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	fb03 f101 	mul.w	r1, r3, r1
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80158a2:	fb00 f303 	mul.w	r3, r0, r3
 80158a6:	440b      	add	r3, r1
 80158a8:	0059      	lsls	r1, r3, #1
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	440b      	add	r3, r1
 80158ae:	1e59      	subs	r1, r3, #1
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80158b6:	e00f      	b.n	80158d8 <RegionCommonComputeRxWindowParameters+0x78>
 80158b8:	7afb      	ldrb	r3, [r7, #11]
 80158ba:	3b04      	subs	r3, #4
 80158bc:	4619      	mov	r1, r3
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	fb03 f101 	mul.w	r1, r3, r1
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80158ca:	fb00 f303 	mul.w	r3, r0, r3
 80158ce:	440b      	add	r3, r1
 80158d0:	0059      	lsls	r1, r3, #1
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80158d8:	429a      	cmp	r2, r3
 80158da:	bf38      	it	cc
 80158dc:	461a      	movcc	r2, r3
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	009b      	lsls	r3, r3, #2
 80158e6:	4619      	mov	r1, r3
 80158e8:	69bb      	ldr	r3, [r7, #24]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	68fa      	ldr	r2, [r7, #12]
 80158ee:	fb02 f303 	mul.w	r3, r2, r3
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d007      	beq.n	8015906 <RegionCommonComputeRxWindowParameters+0xa6>
 80158f6:	69bb      	ldr	r3, [r7, #24]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	68fa      	ldr	r2, [r7, #12]
 80158fc:	fb02 f303 	mul.w	r3, r2, r3
 8015900:	3301      	adds	r3, #1
 8015902:	085b      	lsrs	r3, r3, #1
 8015904:	e005      	b.n	8015912 <RegionCommonComputeRxWindowParameters+0xb2>
 8015906:	69bb      	ldr	r3, [r7, #24]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	68fa      	ldr	r2, [r7, #12]
 801590c:	fb02 f303 	mul.w	r3, r2, r3
 8015910:	085b      	lsrs	r3, r3, #1
 8015912:	1acb      	subs	r3, r1, r3
 8015914:	683a      	ldr	r2, [r7, #0]
 8015916:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801591a:	fb01 f202 	mul.w	r2, r1, r2
 801591e:	1a9b      	subs	r3, r3, r2
 8015920:	2b00      	cmp	r3, #0
 8015922:	dd27      	ble.n	8015974 <RegionCommonComputeRxWindowParameters+0x114>
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	009b      	lsls	r3, r3, #2
 8015928:	4619      	mov	r1, r3
 801592a:	69bb      	ldr	r3, [r7, #24]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	68fa      	ldr	r2, [r7, #12]
 8015930:	fb02 f303 	mul.w	r3, r2, r3
 8015934:	2b00      	cmp	r3, #0
 8015936:	d007      	beq.n	8015948 <RegionCommonComputeRxWindowParameters+0xe8>
 8015938:	69bb      	ldr	r3, [r7, #24]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	68fa      	ldr	r2, [r7, #12]
 801593e:	fb02 f303 	mul.w	r3, r2, r3
 8015942:	3301      	adds	r3, #1
 8015944:	085b      	lsrs	r3, r3, #1
 8015946:	e005      	b.n	8015954 <RegionCommonComputeRxWindowParameters+0xf4>
 8015948:	69bb      	ldr	r3, [r7, #24]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	68fa      	ldr	r2, [r7, #12]
 801594e:	fb02 f303 	mul.w	r3, r2, r3
 8015952:	085b      	lsrs	r3, r3, #1
 8015954:	1acb      	subs	r3, r1, r3
 8015956:	683a      	ldr	r2, [r7, #0]
 8015958:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801595c:	fb01 f202 	mul.w	r2, r1, r2
 8015960:	1a9b      	subs	r3, r3, r2
 8015962:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8015966:	4a19      	ldr	r2, [pc, #100]	; (80159cc <RegionCommonComputeRxWindowParameters+0x16c>)
 8015968:	fb82 1203 	smull	r1, r2, r2, r3
 801596c:	1192      	asrs	r2, r2, #6
 801596e:	17db      	asrs	r3, r3, #31
 8015970:	1ad3      	subs	r3, r2, r3
 8015972:	e024      	b.n	80159be <RegionCommonComputeRxWindowParameters+0x15e>
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	009b      	lsls	r3, r3, #2
 8015978:	4619      	mov	r1, r3
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	fb02 f303 	mul.w	r3, r2, r3
 8015984:	2b00      	cmp	r3, #0
 8015986:	d007      	beq.n	8015998 <RegionCommonComputeRxWindowParameters+0x138>
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	68fa      	ldr	r2, [r7, #12]
 801598e:	fb02 f303 	mul.w	r3, r2, r3
 8015992:	3301      	adds	r3, #1
 8015994:	085b      	lsrs	r3, r3, #1
 8015996:	e005      	b.n	80159a4 <RegionCommonComputeRxWindowParameters+0x144>
 8015998:	69bb      	ldr	r3, [r7, #24]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	68fa      	ldr	r2, [r7, #12]
 801599e:	fb02 f303 	mul.w	r3, r2, r3
 80159a2:	085b      	lsrs	r3, r3, #1
 80159a4:	1acb      	subs	r3, r1, r3
 80159a6:	683a      	ldr	r2, [r7, #0]
 80159a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80159ac:	fb01 f202 	mul.w	r2, r1, r2
 80159b0:	1a9b      	subs	r3, r3, r2
 80159b2:	4a06      	ldr	r2, [pc, #24]	; (80159cc <RegionCommonComputeRxWindowParameters+0x16c>)
 80159b4:	fb82 1203 	smull	r1, r2, r2, r3
 80159b8:	1192      	asrs	r2, r2, #6
 80159ba:	17db      	asrs	r3, r3, #31
 80159bc:	1ad3      	subs	r3, r2, r3
 80159be:	69fa      	ldr	r2, [r7, #28]
 80159c0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80159c2:	bf00      	nop
 80159c4:	3714      	adds	r7, #20
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bc80      	pop	{r7}
 80159ca:	4770      	bx	lr
 80159cc:	10624dd3 	.word	0x10624dd3

080159d0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b086      	sub	sp, #24
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	4603      	mov	r3, r0
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	607a      	str	r2, [r7, #4]
 80159dc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80159de:	2300      	movs	r3, #0
 80159e0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80159e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159e6:	005b      	lsls	r3, r3, #1
 80159e8:	4618      	mov	r0, r3
 80159ea:	f7ea feef 	bl	80007cc <__aeabi_ui2f>
 80159ee:	4603      	mov	r3, r0
 80159f0:	4619      	mov	r1, r3
 80159f2:	68b8      	ldr	r0, [r7, #8]
 80159f4:	f7ea fe38 	bl	8000668 <__aeabi_fsub>
 80159f8:	4603      	mov	r3, r0
 80159fa:	6879      	ldr	r1, [r7, #4]
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7ea fe33 	bl	8000668 <__aeabi_fsub>
 8015a02:	4603      	mov	r3, r0
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7ea fd23 	bl	8000450 <__aeabi_f2d>
 8015a0a:	4602      	mov	r2, r0
 8015a0c:	460b      	mov	r3, r1
 8015a0e:	4610      	mov	r0, r2
 8015a10:	4619      	mov	r1, r3
 8015a12:	f007 fbc1 	bl	801d198 <floor>
 8015a16:	4602      	mov	r2, r0
 8015a18:	460b      	mov	r3, r1
 8015a1a:	4610      	mov	r0, r2
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	f7ea fdf7 	bl	8000610 <__aeabi_d2iz>
 8015a22:	4603      	mov	r3, r0
 8015a24:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8015a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3718      	adds	r7, #24
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}

08015a32 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8015a32:	b590      	push	{r4, r7, lr}
 8015a34:	b087      	sub	sp, #28
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	60f8      	str	r0, [r7, #12]
 8015a3a:	60b9      	str	r1, [r7, #8]
 8015a3c:	607a      	str	r2, [r7, #4]
 8015a3e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8015a40:	2300      	movs	r3, #0
 8015a42:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8015a44:	2300      	movs	r3, #0
 8015a46:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015a48:	2300      	movs	r3, #0
 8015a4a:	757b      	strb	r3, [r7, #21]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	753b      	strb	r3, [r7, #20]
 8015a50:	e09c      	b.n	8015b8c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015a52:	2300      	movs	r3, #0
 8015a54:	74fb      	strb	r3, [r7, #19]
 8015a56:	e08f      	b.n	8015b78 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	685a      	ldr	r2, [r3, #4]
 8015a5c:	7d3b      	ldrb	r3, [r7, #20]
 8015a5e:	005b      	lsls	r3, r3, #1
 8015a60:	4413      	add	r3, r2
 8015a62:	881b      	ldrh	r3, [r3, #0]
 8015a64:	461a      	mov	r2, r3
 8015a66:	7cfb      	ldrb	r3, [r7, #19]
 8015a68:	fa42 f303 	asr.w	r3, r2, r3
 8015a6c:	f003 0301 	and.w	r3, r3, #1
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d07e      	beq.n	8015b72 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	689a      	ldr	r2, [r3, #8]
 8015a78:	7d79      	ldrb	r1, [r7, #21]
 8015a7a:	7cfb      	ldrb	r3, [r7, #19]
 8015a7c:	440b      	add	r3, r1
 8015a7e:	4619      	mov	r1, r3
 8015a80:	460b      	mov	r3, r1
 8015a82:	005b      	lsls	r3, r3, #1
 8015a84:	440b      	add	r3, r1
 8015a86:	009b      	lsls	r3, r3, #2
 8015a88:	4413      	add	r3, r2
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d06b      	beq.n	8015b68 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	781b      	ldrb	r3, [r3, #0]
 8015a94:	f083 0301 	eor.w	r3, r3, #1
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d011      	beq.n	8015ac2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d00d      	beq.n	8015ac2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	695a      	ldr	r2, [r3, #20]
 8015aaa:	7d3b      	ldrb	r3, [r7, #20]
 8015aac:	005b      	lsls	r3, r3, #1
 8015aae:	4413      	add	r3, r2
 8015ab0:	881b      	ldrh	r3, [r3, #0]
 8015ab2:	461a      	mov	r2, r3
 8015ab4:	7cfb      	ldrb	r3, [r7, #19]
 8015ab6:	fa42 f303 	asr.w	r3, r2, r3
 8015aba:	f003 0301 	and.w	r3, r3, #1
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d054      	beq.n	8015b6c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	785b      	ldrb	r3, [r3, #1]
 8015ac6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	689a      	ldr	r2, [r3, #8]
 8015acc:	7d79      	ldrb	r1, [r7, #21]
 8015ace:	7cfb      	ldrb	r3, [r7, #19]
 8015ad0:	440b      	add	r3, r1
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	005b      	lsls	r3, r3, #1
 8015ad8:	440b      	add	r3, r1
 8015ada:	009b      	lsls	r3, r3, #2
 8015adc:	4413      	add	r3, r2
 8015ade:	7a1b      	ldrb	r3, [r3, #8]
 8015ae0:	f343 0303 	sbfx	r3, r3, #0, #4
 8015ae4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015ae6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	689a      	ldr	r2, [r3, #8]
 8015aec:	7d79      	ldrb	r1, [r7, #21]
 8015aee:	7cfb      	ldrb	r3, [r7, #19]
 8015af0:	440b      	add	r3, r1
 8015af2:	4619      	mov	r1, r3
 8015af4:	460b      	mov	r3, r1
 8015af6:	005b      	lsls	r3, r3, #1
 8015af8:	440b      	add	r3, r1
 8015afa:	009b      	lsls	r3, r3, #2
 8015afc:	4413      	add	r3, r2
 8015afe:	7a1b      	ldrb	r3, [r3, #8]
 8015b00:	f343 1303 	sbfx	r3, r3, #4, #4
 8015b04:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015b06:	461a      	mov	r2, r3
 8015b08:	4621      	mov	r1, r4
 8015b0a:	f7ff fbe8 	bl	80152de <RegionCommonValueInRange>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d02d      	beq.n	8015b70 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	68da      	ldr	r2, [r3, #12]
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	6899      	ldr	r1, [r3, #8]
 8015b1c:	7d78      	ldrb	r0, [r7, #21]
 8015b1e:	7cfb      	ldrb	r3, [r7, #19]
 8015b20:	4403      	add	r3, r0
 8015b22:	4618      	mov	r0, r3
 8015b24:	4603      	mov	r3, r0
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	4403      	add	r3, r0
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	440b      	add	r3, r1
 8015b2e:	7a5b      	ldrb	r3, [r3, #9]
 8015b30:	4619      	mov	r1, r3
 8015b32:	460b      	mov	r3, r1
 8015b34:	005b      	lsls	r3, r3, #1
 8015b36:	440b      	add	r3, r1
 8015b38:	00db      	lsls	r3, r3, #3
 8015b3a:	4413      	add	r3, r2
 8015b3c:	7d1b      	ldrb	r3, [r3, #20]
 8015b3e:	f083 0301 	eor.w	r3, r3, #1
 8015b42:	b2db      	uxtb	r3, r3
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d003      	beq.n	8015b50 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8015b48:	7dbb      	ldrb	r3, [r7, #22]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8015b4e:	e010      	b.n	8015b72 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8015b50:	7dfb      	ldrb	r3, [r7, #23]
 8015b52:	1c5a      	adds	r2, r3, #1
 8015b54:	75fa      	strb	r2, [r7, #23]
 8015b56:	461a      	mov	r2, r3
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	4413      	add	r3, r2
 8015b5c:	7d79      	ldrb	r1, [r7, #21]
 8015b5e:	7cfa      	ldrb	r2, [r7, #19]
 8015b60:	440a      	add	r2, r1
 8015b62:	b2d2      	uxtb	r2, r2
 8015b64:	701a      	strb	r2, [r3, #0]
 8015b66:	e004      	b.n	8015b72 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015b68:	bf00      	nop
 8015b6a:	e002      	b.n	8015b72 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015b6c:	bf00      	nop
 8015b6e:	e000      	b.n	8015b72 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015b70:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8015b72:	7cfb      	ldrb	r3, [r7, #19]
 8015b74:	3301      	adds	r3, #1
 8015b76:	74fb      	strb	r3, [r7, #19]
 8015b78:	7cfb      	ldrb	r3, [r7, #19]
 8015b7a:	2b0f      	cmp	r3, #15
 8015b7c:	f67f af6c 	bls.w	8015a58 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015b80:	7d7b      	ldrb	r3, [r7, #21]
 8015b82:	3310      	adds	r3, #16
 8015b84:	757b      	strb	r3, [r7, #21]
 8015b86:	7d3b      	ldrb	r3, [r7, #20]
 8015b88:	3301      	adds	r3, #1
 8015b8a:	753b      	strb	r3, [r7, #20]
 8015b8c:	7d7b      	ldrb	r3, [r7, #21]
 8015b8e:	b29a      	uxth	r2, r3
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	8a1b      	ldrh	r3, [r3, #16]
 8015b94:	429a      	cmp	r2, r3
 8015b96:	f4ff af5c 	bcc.w	8015a52 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	7dfa      	ldrb	r2, [r7, #23]
 8015b9e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	7dba      	ldrb	r2, [r7, #22]
 8015ba4:	701a      	strb	r2, [r3, #0]
}
 8015ba6:	bf00      	nop
 8015ba8:	371c      	adds	r7, #28
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd90      	pop	{r4, r7, pc}

08015bae <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bb0:	b08b      	sub	sp, #44	; 0x2c
 8015bb2:	af04      	add	r7, sp, #16
 8015bb4:	60f8      	str	r0, [r7, #12]
 8015bb6:	60b9      	str	r1, [r7, #8]
 8015bb8:	607a      	str	r2, [r7, #4]
 8015bba:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f006 ff67 	bl	801ca94 <UTIL_TIMER_GetElapsedTime>
 8015bc6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	681a      	ldr	r2, [r3, #0]
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	1ad2      	subs	r2, r2, r3
 8015bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bd2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d004      	beq.n	8015bf2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015bec:	697a      	ldr	r2, [r7, #20]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d32b      	bcc.n	8015c4a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	69db      	ldr	r3, [r3, #28]
 8015bfc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015c02:	68dd      	ldr	r5, [r3, #12]
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	7a5e      	ldrb	r6, [r3, #9]
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	7d1b      	ldrb	r3, [r3, #20]
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	6992      	ldr	r2, [r2, #24]
 8015c16:	9203      	str	r2, [sp, #12]
 8015c18:	68fa      	ldr	r2, [r7, #12]
 8015c1a:	f10d 0e04 	add.w	lr, sp, #4
 8015c1e:	320c      	adds	r2, #12
 8015c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015c24:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015c28:	9300      	str	r3, [sp, #0]
 8015c2a:	4663      	mov	r3, ip
 8015c2c:	4632      	mov	r2, r6
 8015c2e:	4629      	mov	r1, r5
 8015c30:	4620      	mov	r0, r4
 8015c32:	f7ff fc25 	bl	8015480 <RegionCommonUpdateBandTimeOff>
 8015c36:	4602      	mov	r2, r0
 8015c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c3a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	69d8      	ldr	r0, [r3, #28]
 8015c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	6879      	ldr	r1, [r7, #4]
 8015c46:	f7ff fef4 	bl	8015a32 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d004      	beq.n	8015c5c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8015c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c54:	2200      	movs	r2, #0
 8015c56:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	e006      	b.n	8015c6a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8015c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d001      	beq.n	8015c68 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015c64:	230b      	movs	r3, #11
 8015c66:	e000      	b.n	8015c6a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015c68:	230c      	movs	r3, #12
    }
}
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	371c      	adds	r7, #28
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c72 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8015c72:	b5b0      	push	{r4, r5, r7, lr}
 8015c74:	b086      	sub	sp, #24
 8015c76:	af02      	add	r7, sp, #8
 8015c78:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f993 2000 	ldrsb.w	r2, [r3]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015c8c:	429a      	cmp	r2, r3
 8015c8e:	d103      	bne.n	8015c98 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015c96:	e026      	b.n	8015ce6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015c98:	7bfb      	ldrb	r3, [r7, #15]
 8015c9a:	3b01      	subs	r3, #1
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015ca6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d019      	beq.n	8015ce2 <RegionCommonGetNextLowerTxDr+0x70>
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	78d8      	ldrb	r0, [r3, #3]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6859      	ldr	r1, [r3, #4]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cc2:	687a      	ldr	r2, [r7, #4]
 8015cc4:	6892      	ldr	r2, [r2, #8]
 8015cc6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015cca:	9201      	str	r2, [sp, #4]
 8015ccc:	9300      	str	r3, [sp, #0]
 8015cce:	462b      	mov	r3, r5
 8015cd0:	4622      	mov	r2, r4
 8015cd2:	f7ff fa92 	bl	80151fa <RegionCommonChanVerifyDr>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	f083 0301 	eor.w	r3, r3, #1
 8015cdc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d1da      	bne.n	8015c98 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	3710      	adds	r7, #16
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bdb0      	pop	{r4, r5, r7, pc}

08015cee <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015cee:	b480      	push	{r7}
 8015cf0:	b083      	sub	sp, #12
 8015cf2:	af00      	add	r7, sp, #0
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	460a      	mov	r2, r1
 8015cf8:	71fb      	strb	r3, [r7, #7]
 8015cfa:	4613      	mov	r3, r2
 8015cfc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015cfe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d06:	4293      	cmp	r3, r2
 8015d08:	bfb8      	it	lt
 8015d0a:	4613      	movlt	r3, r2
 8015d0c:	b25b      	sxtb	r3, r3
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	370c      	adds	r7, #12
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bc80      	pop	{r7}
 8015d16:	4770      	bx	lr

08015d18 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015d18:	b480      	push	{r7}
 8015d1a:	b083      	sub	sp, #12
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	683a      	ldr	r2, [r7, #0]
 8015d28:	4413      	add	r3, r2
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	4a07      	ldr	r2, [pc, #28]	; (8015d4c <RegionCommonGetBandwidth+0x34>)
 8015d2e:	4293      	cmp	r3, r2
 8015d30:	d004      	beq.n	8015d3c <RegionCommonGetBandwidth+0x24>
 8015d32:	4a07      	ldr	r2, [pc, #28]	; (8015d50 <RegionCommonGetBandwidth+0x38>)
 8015d34:	4293      	cmp	r3, r2
 8015d36:	d003      	beq.n	8015d40 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	e002      	b.n	8015d42 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	e000      	b.n	8015d42 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8015d40:	2302      	movs	r3, #2
    }
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	370c      	adds	r7, #12
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bc80      	pop	{r7}
 8015d4a:	4770      	bx	lr
 8015d4c:	0003d090 	.word	0x0003d090
 8015d50:	0007a120 	.word	0x0007a120

08015d54 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b086      	sub	sp, #24
 8015d58:	af04      	add	r7, sp, #16
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	6039      	str	r1, [r7, #0]
 8015d5e:	71fb      	strb	r3, [r7, #7]
 8015d60:	4613      	mov	r3, r2
 8015d62:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8015d64:	79fb      	ldrb	r3, [r7, #7]
 8015d66:	2b05      	cmp	r3, #5
 8015d68:	d810      	bhi.n	8015d8c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8015d6a:	79fb      	ldrb	r3, [r7, #7]
 8015d6c:	4a0f      	ldr	r2, [pc, #60]	; (8015dac <RegionCommonRxConfigPrint+0x58>)
 8015d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d72:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015d76:	9202      	str	r2, [sp, #8]
 8015d78:	683a      	ldr	r2, [r7, #0]
 8015d7a:	9201      	str	r2, [sp, #4]
 8015d7c:	9300      	str	r3, [sp, #0]
 8015d7e:	4b0c      	ldr	r3, [pc, #48]	; (8015db0 <RegionCommonRxConfigPrint+0x5c>)
 8015d80:	2201      	movs	r2, #1
 8015d82:	2100      	movs	r1, #0
 8015d84:	2002      	movs	r0, #2
 8015d86:	f006 ff63 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015d8a:	e00a      	b.n	8015da2 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015d8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015d90:	9301      	str	r3, [sp, #4]
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	9300      	str	r3, [sp, #0]
 8015d96:	4b07      	ldr	r3, [pc, #28]	; (8015db4 <RegionCommonRxConfigPrint+0x60>)
 8015d98:	2201      	movs	r2, #1
 8015d9a:	2100      	movs	r1, #0
 8015d9c:	2002      	movs	r0, #2
 8015d9e:	f006 ff57 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 8015da2:	bf00      	nop
 8015da4:	3708      	adds	r7, #8
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
 8015daa:	bf00      	nop
 8015dac:	20000128 	.word	0x20000128
 8015db0:	0801da74 	.word	0x0801da74
 8015db4:	0801da94 	.word	0x0801da94

08015db8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af02      	add	r7, sp, #8
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	460b      	mov	r3, r1
 8015dc2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015dc8:	9301      	str	r3, [sp, #4]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	9300      	str	r3, [sp, #0]
 8015dce:	4b05      	ldr	r3, [pc, #20]	; (8015de4 <RegionCommonTxConfigPrint+0x2c>)
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	2100      	movs	r1, #0
 8015dd4:	2002      	movs	r0, #2
 8015dd6:	f006 ff3b 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
}
 8015dda:	bf00      	nop
 8015ddc:	3708      	adds	r7, #8
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}
 8015de2:	bf00      	nop
 8015de4:	0801dab0 	.word	0x0801dab0

08015de8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
 8015df0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015df2:	4b2d      	ldr	r3, [pc, #180]	; (8015ea8 <VerifyRfFreq+0xc0>)
 8015df4:	6a1b      	ldr	r3, [r3, #32]
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	4798      	blx	r3
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	f083 0301 	eor.w	r3, r3, #1
 8015e00:	b2db      	uxtb	r3, r3
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <VerifyRfFreq+0x22>
    {
        return false;
 8015e06:	2300      	movs	r3, #0
 8015e08:	e04a      	b.n	8015ea0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	4a27      	ldr	r2, [pc, #156]	; (8015eac <VerifyRfFreq+0xc4>)
 8015e0e:	4293      	cmp	r3, r2
 8015e10:	d307      	bcc.n	8015e22 <VerifyRfFreq+0x3a>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	4a26      	ldr	r2, [pc, #152]	; (8015eb0 <VerifyRfFreq+0xc8>)
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d803      	bhi.n	8015e22 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	2202      	movs	r2, #2
 8015e1e:	701a      	strb	r2, [r3, #0]
 8015e20:	e03d      	b.n	8015e9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4a22      	ldr	r2, [pc, #136]	; (8015eb0 <VerifyRfFreq+0xc8>)
 8015e26:	4293      	cmp	r3, r2
 8015e28:	d907      	bls.n	8015e3a <VerifyRfFreq+0x52>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	4a21      	ldr	r2, [pc, #132]	; (8015eb4 <VerifyRfFreq+0xcc>)
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	d803      	bhi.n	8015e3a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	2200      	movs	r2, #0
 8015e36:	701a      	strb	r2, [r3, #0]
 8015e38:	e031      	b.n	8015e9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	4a1d      	ldr	r2, [pc, #116]	; (8015eb4 <VerifyRfFreq+0xcc>)
 8015e3e:	4293      	cmp	r3, r2
 8015e40:	d907      	bls.n	8015e52 <VerifyRfFreq+0x6a>
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	4a1c      	ldr	r2, [pc, #112]	; (8015eb8 <VerifyRfFreq+0xd0>)
 8015e46:	4293      	cmp	r3, r2
 8015e48:	d803      	bhi.n	8015e52 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	701a      	strb	r2, [r3, #0]
 8015e50:	e025      	b.n	8015e9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	4a19      	ldr	r2, [pc, #100]	; (8015ebc <VerifyRfFreq+0xd4>)
 8015e56:	4293      	cmp	r3, r2
 8015e58:	d907      	bls.n	8015e6a <VerifyRfFreq+0x82>
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	4a18      	ldr	r2, [pc, #96]	; (8015ec0 <VerifyRfFreq+0xd8>)
 8015e5e:	4293      	cmp	r3, r2
 8015e60:	d803      	bhi.n	8015e6a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	2205      	movs	r2, #5
 8015e66:	701a      	strb	r2, [r3, #0]
 8015e68:	e019      	b.n	8015e9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	4a15      	ldr	r2, [pc, #84]	; (8015ec4 <VerifyRfFreq+0xdc>)
 8015e6e:	4293      	cmp	r3, r2
 8015e70:	d907      	bls.n	8015e82 <VerifyRfFreq+0x9a>
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	4a14      	ldr	r2, [pc, #80]	; (8015ec8 <VerifyRfFreq+0xe0>)
 8015e76:	4293      	cmp	r3, r2
 8015e78:	d803      	bhi.n	8015e82 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	2203      	movs	r2, #3
 8015e7e:	701a      	strb	r2, [r3, #0]
 8015e80:	e00d      	b.n	8015e9e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	4a11      	ldr	r2, [pc, #68]	; (8015ecc <VerifyRfFreq+0xe4>)
 8015e86:	4293      	cmp	r3, r2
 8015e88:	d307      	bcc.n	8015e9a <VerifyRfFreq+0xb2>
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	4a10      	ldr	r2, [pc, #64]	; (8015ed0 <VerifyRfFreq+0xe8>)
 8015e8e:	4293      	cmp	r3, r2
 8015e90:	d803      	bhi.n	8015e9a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	2204      	movs	r2, #4
 8015e96:	701a      	strb	r2, [r3, #0]
 8015e98:	e001      	b.n	8015e9e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	e000      	b.n	8015ea0 <VerifyRfFreq+0xb8>
    }
    return true;
 8015e9e:	2301      	movs	r3, #1
}
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	3708      	adds	r7, #8
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}
 8015ea8:	0801e0d4 	.word	0x0801e0d4
 8015eac:	337055c0 	.word	0x337055c0
 8015eb0:	338eda3f 	.word	0x338eda3f
 8015eb4:	33bca100 	.word	0x33bca100
 8015eb8:	33c5c8c0 	.word	0x33c5c8c0
 8015ebc:	33c74f5f 	.word	0x33c74f5f
 8015ec0:	33cef080 	.word	0x33cef080
 8015ec4:	33d1fdbf 	.word	0x33d1fdbf
 8015ec8:	33d5ce50 	.word	0x33d5ce50
 8015ecc:	33d691a0 	.word	0x33d691a0
 8015ed0:	33db2580 	.word	0x33db2580

08015ed4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015ed4:	b590      	push	{r4, r7, lr}
 8015ed6:	b08b      	sub	sp, #44	; 0x2c
 8015ed8:	af04      	add	r7, sp, #16
 8015eda:	4603      	mov	r3, r0
 8015edc:	460a      	mov	r2, r1
 8015ede:	71fb      	strb	r3, [r7, #7]
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ee8:	4a1f      	ldr	r2, [pc, #124]	; (8015f68 <GetTimeOnAir+0x94>)
 8015eea:	5cd3      	ldrb	r3, [r2, r3]
 8015eec:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ef2:	491e      	ldr	r1, [pc, #120]	; (8015f6c <GetTimeOnAir+0x98>)
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7ff ff0f 	bl	8015d18 <RegionCommonGetBandwidth>
 8015efa:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015efc:	2300      	movs	r3, #0
 8015efe:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f04:	2b07      	cmp	r3, #7
 8015f06:	d118      	bne.n	8015f3a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015f08:	4b19      	ldr	r3, [pc, #100]	; (8015f70 <GetTimeOnAir+0x9c>)
 8015f0a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015f0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015f14:	fb02 f303 	mul.w	r3, r2, r3
 8015f18:	4619      	mov	r1, r3
 8015f1a:	88bb      	ldrh	r3, [r7, #4]
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	2201      	movs	r2, #1
 8015f20:	9203      	str	r2, [sp, #12]
 8015f22:	9302      	str	r3, [sp, #8]
 8015f24:	2300      	movs	r3, #0
 8015f26:	9301      	str	r3, [sp, #4]
 8015f28:	2305      	movs	r3, #5
 8015f2a:	9300      	str	r3, [sp, #0]
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	460a      	mov	r2, r1
 8015f30:	68f9      	ldr	r1, [r7, #12]
 8015f32:	2000      	movs	r0, #0
 8015f34:	47a0      	blx	r4
 8015f36:	6178      	str	r0, [r7, #20]
 8015f38:	e011      	b.n	8015f5e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015f3a:	4b0d      	ldr	r3, [pc, #52]	; (8015f70 <GetTimeOnAir+0x9c>)
 8015f3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015f3e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015f42:	88bb      	ldrh	r3, [r7, #4]
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	2101      	movs	r1, #1
 8015f48:	9103      	str	r1, [sp, #12]
 8015f4a:	9302      	str	r3, [sp, #8]
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	9301      	str	r3, [sp, #4]
 8015f50:	2308      	movs	r3, #8
 8015f52:	9300      	str	r3, [sp, #0]
 8015f54:	2301      	movs	r3, #1
 8015f56:	68f9      	ldr	r1, [r7, #12]
 8015f58:	2001      	movs	r0, #1
 8015f5a:	47a0      	blx	r4
 8015f5c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015f5e:	697b      	ldr	r3, [r7, #20]
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	371c      	adds	r7, #28
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd90      	pop	{r4, r7, pc}
 8015f68:	0801e018 	.word	0x0801e018
 8015f6c:	0801e020 	.word	0x0801e020
 8015f70:	0801e0d4 	.word	0x0801e0d4

08015f74 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b088      	sub	sp, #32
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	3b01      	subs	r3, #1
 8015f86:	2b37      	cmp	r3, #55	; 0x37
 8015f88:	f200 8122 	bhi.w	80161d0 <RegionEU868GetPhyParam+0x25c>
 8015f8c:	a201      	add	r2, pc, #4	; (adr r2, 8015f94 <RegionEU868GetPhyParam+0x20>)
 8015f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f92:	bf00      	nop
 8015f94:	08016075 	.word	0x08016075
 8015f98:	0801607b 	.word	0x0801607b
 8015f9c:	080161d1 	.word	0x080161d1
 8015fa0:	080161d1 	.word	0x080161d1
 8015fa4:	080161d1 	.word	0x080161d1
 8015fa8:	08016081 	.word	0x08016081
 8015fac:	080161d1 	.word	0x080161d1
 8015fb0:	080160bb 	.word	0x080160bb
 8015fb4:	080161d1 	.word	0x080161d1
 8015fb8:	080160c1 	.word	0x080160c1
 8015fbc:	080160c7 	.word	0x080160c7
 8015fc0:	080160cd 	.word	0x080160cd
 8015fc4:	080160d3 	.word	0x080160d3
 8015fc8:	080160e3 	.word	0x080160e3
 8015fcc:	080160f3 	.word	0x080160f3
 8015fd0:	080160f9 	.word	0x080160f9
 8015fd4:	08016101 	.word	0x08016101
 8015fd8:	08016109 	.word	0x08016109
 8015fdc:	08016111 	.word	0x08016111
 8015fe0:	08016119 	.word	0x08016119
 8015fe4:	08016121 	.word	0x08016121
 8015fe8:	08016135 	.word	0x08016135
 8015fec:	0801613b 	.word	0x0801613b
 8015ff0:	08016141 	.word	0x08016141
 8015ff4:	08016147 	.word	0x08016147
 8015ff8:	08016153 	.word	0x08016153
 8015ffc:	0801615f 	.word	0x0801615f
 8016000:	08016165 	.word	0x08016165
 8016004:	0801616d 	.word	0x0801616d
 8016008:	08016173 	.word	0x08016173
 801600c:	08016179 	.word	0x08016179
 8016010:	08016181 	.word	0x08016181
 8016014:	08016087 	.word	0x08016087
 8016018:	080161d1 	.word	0x080161d1
 801601c:	080161d1 	.word	0x080161d1
 8016020:	080161d1 	.word	0x080161d1
 8016024:	080161d1 	.word	0x080161d1
 8016028:	080161d1 	.word	0x080161d1
 801602c:	080161d1 	.word	0x080161d1
 8016030:	080161d1 	.word	0x080161d1
 8016034:	080161d1 	.word	0x080161d1
 8016038:	080161d1 	.word	0x080161d1
 801603c:	080161d1 	.word	0x080161d1
 8016040:	080161d1 	.word	0x080161d1
 8016044:	080161d1 	.word	0x080161d1
 8016048:	080161d1 	.word	0x080161d1
 801604c:	08016187 	.word	0x08016187
 8016050:	0801618d 	.word	0x0801618d
 8016054:	0801619b 	.word	0x0801619b
 8016058:	080161d1 	.word	0x080161d1
 801605c:	080161d1 	.word	0x080161d1
 8016060:	080161a1 	.word	0x080161a1
 8016064:	080161a7 	.word	0x080161a7
 8016068:	080161d1 	.word	0x080161d1
 801606c:	080161ad 	.word	0x080161ad
 8016070:	080161bd 	.word	0x080161bd
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016074:	2300      	movs	r3, #0
 8016076:	61bb      	str	r3, [r7, #24]
            break;
 8016078:	e0ab      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801607a:	2300      	movs	r3, #0
 801607c:	61bb      	str	r3, [r7, #24]
            break;
 801607e:	e0a8      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016080:	2300      	movs	r3, #0
 8016082:	61bb      	str	r3, [r7, #24]
            break;
 8016084:	e0a5      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801608c:	733b      	strb	r3, [r7, #12]
 801608e:	2307      	movs	r3, #7
 8016090:	737b      	strb	r3, [r7, #13]
 8016092:	2300      	movs	r3, #0
 8016094:	73bb      	strb	r3, [r7, #14]
 8016096:	2310      	movs	r3, #16
 8016098:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801609a:	4b51      	ldr	r3, [pc, #324]	; (80161e0 <RegionEU868GetPhyParam+0x26c>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80160a2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80160a4:	4b4e      	ldr	r3, [pc, #312]	; (80161e0 <RegionEU868GetPhyParam+0x26c>)
 80160a6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80160a8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80160aa:	f107 030c 	add.w	r3, r7, #12
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7ff fddf 	bl	8015c72 <RegionCommonGetNextLowerTxDr>
 80160b4:	4603      	mov	r3, r0
 80160b6:	61bb      	str	r3, [r7, #24]
            break;
 80160b8:	e08b      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80160ba:	2300      	movs	r3, #0
 80160bc:	61bb      	str	r3, [r7, #24]
            break;
 80160be:	e088      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80160c0:	2300      	movs	r3, #0
 80160c2:	61bb      	str	r3, [r7, #24]
            break;
 80160c4:	e085      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80160c6:	2340      	movs	r3, #64	; 0x40
 80160c8:	61bb      	str	r3, [r7, #24]
            break;
 80160ca:	e082      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80160cc:	2320      	movs	r3, #32
 80160ce:	61bb      	str	r3, [r7, #24]
            break;
 80160d0:	e07f      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160d8:	461a      	mov	r2, r3
 80160da:	4b42      	ldr	r3, [pc, #264]	; (80161e4 <RegionEU868GetPhyParam+0x270>)
 80160dc:	5c9b      	ldrb	r3, [r3, r2]
 80160de:	61bb      	str	r3, [r7, #24]
            break;
 80160e0:	e077      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160e8:	461a      	mov	r2, r3
 80160ea:	4b3f      	ldr	r3, [pc, #252]	; (80161e8 <RegionEU868GetPhyParam+0x274>)
 80160ec:	5c9b      	ldrb	r3, [r3, r2]
 80160ee:	61bb      	str	r3, [r7, #24]
            break;
 80160f0:	e06f      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80160f2:	2301      	movs	r3, #1
 80160f4:	61bb      	str	r3, [r7, #24]
            break;
 80160f6:	e06c      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80160f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80160fc:	61bb      	str	r3, [r7, #24]
            break;
 80160fe:	e068      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016104:	61bb      	str	r3, [r7, #24]
            break;
 8016106:	e064      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016108:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801610c:	61bb      	str	r3, [r7, #24]
            break;
 801610e:	e060      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016110:	f241 3388 	movw	r3, #5000	; 0x1388
 8016114:	61bb      	str	r3, [r7, #24]
            break;
 8016116:	e05c      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016118:	f241 7370 	movw	r3, #6000	; 0x1770
 801611c:	61bb      	str	r3, [r7, #24]
            break;
 801611e:	e058      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016120:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016124:	4831      	ldr	r0, [pc, #196]	; (80161ec <RegionEU868GetPhyParam+0x278>)
 8016126:	f002 fa27 	bl	8018578 <randr>
 801612a:	4603      	mov	r3, r0
 801612c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016130:	61bb      	str	r3, [r7, #24]
            break;
 8016132:	e04e      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016134:	2300      	movs	r3, #0
 8016136:	61bb      	str	r3, [r7, #24]
            break;
 8016138:	e04b      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801613a:	4b2d      	ldr	r3, [pc, #180]	; (80161f0 <RegionEU868GetPhyParam+0x27c>)
 801613c:	61bb      	str	r3, [r7, #24]
            break;
 801613e:	e048      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016140:	2300      	movs	r3, #0
 8016142:	61bb      	str	r3, [r7, #24]
            break;
 8016144:	e045      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016146:	4b26      	ldr	r3, [pc, #152]	; (80161e0 <RegionEU868GetPhyParam+0x26c>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801614e:	61bb      	str	r3, [r7, #24]
            break;
 8016150:	e03f      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016152:	4b23      	ldr	r3, [pc, #140]	; (80161e0 <RegionEU868GetPhyParam+0x26c>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801615a:	61bb      	str	r3, [r7, #24]
            break;
 801615c:	e039      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801615e:	2310      	movs	r3, #16
 8016160:	61bb      	str	r3, [r7, #24]
            break;
 8016162:	e036      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016164:	4b1e      	ldr	r3, [pc, #120]	; (80161e0 <RegionEU868GetPhyParam+0x26c>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	61bb      	str	r3, [r7, #24]
            break;
 801616a:	e032      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801616c:	2300      	movs	r3, #0
 801616e:	61bb      	str	r3, [r7, #24]
            break;
 8016170:	e02f      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016172:	2300      	movs	r3, #0
 8016174:	61bb      	str	r3, [r7, #24]
            break;
 8016176:	e02c      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016178:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801617c:	61bb      	str	r3, [r7, #24]
            break;
 801617e:	e028      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016180:	4b1c      	ldr	r3, [pc, #112]	; (80161f4 <RegionEU868GetPhyParam+0x280>)
 8016182:	61bb      	str	r3, [r7, #24]
            break;
 8016184:	e025      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016186:	4b1a      	ldr	r3, [pc, #104]	; (80161f0 <RegionEU868GetPhyParam+0x27c>)
 8016188:	61bb      	str	r3, [r7, #24]
            break;
 801618a:	e022      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801618c:	2311      	movs	r3, #17
 801618e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016190:	2301      	movs	r3, #1
 8016192:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016194:	2300      	movs	r3, #0
 8016196:	76bb      	strb	r3, [r7, #26]
            break;
 8016198:	e01b      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801619a:	2303      	movs	r3, #3
 801619c:	61bb      	str	r3, [r7, #24]
            break;
 801619e:	e018      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80161a0:	4b13      	ldr	r3, [pc, #76]	; (80161f0 <RegionEU868GetPhyParam+0x27c>)
 80161a2:	61bb      	str	r3, [r7, #24]
            break;
 80161a4:	e015      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80161a6:	2303      	movs	r3, #3
 80161a8:	61bb      	str	r3, [r7, #24]
            break;
 80161aa:	e012      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161b2:	461a      	mov	r2, r3
 80161b4:	4b10      	ldr	r3, [pc, #64]	; (80161f8 <RegionEU868GetPhyParam+0x284>)
 80161b6:	5c9b      	ldrb	r3, [r3, r2]
 80161b8:	61bb      	str	r3, [r7, #24]
            break;
 80161ba:	e00a      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161c2:	490e      	ldr	r1, [pc, #56]	; (80161fc <RegionEU868GetPhyParam+0x288>)
 80161c4:	4618      	mov	r0, r3
 80161c6:	f7ff fda7 	bl	8015d18 <RegionCommonGetBandwidth>
 80161ca:	4603      	mov	r3, r0
 80161cc:	61bb      	str	r3, [r7, #24]
            break;
 80161ce:	e000      	b.n	80161d2 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 80161d0:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80161d2:	69bb      	ldr	r3, [r7, #24]
 80161d4:	61fb      	str	r3, [r7, #28]
 80161d6:	69fb      	ldr	r3, [r7, #28]
}
 80161d8:	4618      	mov	r0, r3
 80161da:	3720      	adds	r7, #32
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	20001a2c 	.word	0x20001a2c
 80161e4:	0801e040 	.word	0x0801e040
 80161e8:	0801e048 	.word	0x0801e048
 80161ec:	fffffc18 	.word	0xfffffc18
 80161f0:	33d3e608 	.word	0x33d3e608
 80161f4:	4009999a 	.word	0x4009999a
 80161f8:	0801e018 	.word	0x0801e018
 80161fc:	0801e020 	.word	0x0801e020

08016200 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016200:	b590      	push	{r4, r7, lr}
 8016202:	b085      	sub	sp, #20
 8016204:	af02      	add	r7, sp, #8
 8016206:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016208:	4b11      	ldr	r3, [pc, #68]	; (8016250 <RegionEU868SetBandTxDone+0x50>)
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	4b11      	ldr	r3, [pc, #68]	; (8016254 <RegionEU868SetBandTxDone+0x54>)
 801620e:	6819      	ldr	r1, [r3, #0]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	4618      	mov	r0, r3
 8016216:	4603      	mov	r3, r0
 8016218:	005b      	lsls	r3, r3, #1
 801621a:	4403      	add	r3, r0
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	440b      	add	r3, r1
 8016220:	3309      	adds	r3, #9
 8016222:	781b      	ldrb	r3, [r3, #0]
 8016224:	4619      	mov	r1, r3
 8016226:	460b      	mov	r3, r1
 8016228:	005b      	lsls	r3, r3, #1
 801622a:	440b      	add	r3, r1
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	18d0      	adds	r0, r2, r3
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6899      	ldr	r1, [r3, #8]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	785c      	ldrb	r4, [r3, #1]
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	691a      	ldr	r2, [r3, #16]
 801623c:	9200      	str	r2, [sp, #0]
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	4622      	mov	r2, r4
 8016242:	f7ff f8ef 	bl	8015424 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016246:	bf00      	nop
 8016248:	370c      	adds	r7, #12
 801624a:	46bd      	mov	sp, r7
 801624c:	bd90      	pop	{r4, r7, pc}
 801624e:	bf00      	nop
 8016250:	20001a30 	.word	0x20001a30
 8016254:	20001a2c 	.word	0x20001a2c

08016258 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b0b0      	sub	sp, #192	; 0xc0
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016264:	2290      	movs	r2, #144	; 0x90
 8016266:	2100      	movs	r1, #0
 8016268:	4618      	mov	r0, r3
 801626a:	f006 ff8d 	bl	801d188 <memset>
 801626e:	2364      	movs	r3, #100	; 0x64
 8016270:	863b      	strh	r3, [r7, #48]	; 0x30
 8016272:	2364      	movs	r3, #100	; 0x64
 8016274:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801627c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016280:	230a      	movs	r3, #10
 8016282:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016286:	2364      	movs	r3, #100	; 0x64
 8016288:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801628c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016290:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	7b1b      	ldrb	r3, [r3, #12]
 8016298:	2b02      	cmp	r3, #2
 801629a:	d05d      	beq.n	8016358 <RegionEU868InitDefaults+0x100>
 801629c:	2b02      	cmp	r3, #2
 801629e:	dc6a      	bgt.n	8016376 <RegionEU868InitDefaults+0x11e>
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d002      	beq.n	80162aa <RegionEU868InitDefaults+0x52>
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d03e      	beq.n	8016326 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80162a8:	e065      	b.n	8016376 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d062      	beq.n	8016378 <RegionEU868InitDefaults+0x120>
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d05e      	beq.n	8016378 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	685b      	ldr	r3, [r3, #4]
 80162be:	4a30      	ldr	r2, [pc, #192]	; (8016380 <RegionEU868InitDefaults+0x128>)
 80162c0:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	689b      	ldr	r3, [r3, #8]
 80162c6:	4a2f      	ldr	r2, [pc, #188]	; (8016384 <RegionEU868InitDefaults+0x12c>)
 80162c8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80162ca:	4b2e      	ldr	r3, [pc, #184]	; (8016384 <RegionEU868InitDefaults+0x12c>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80162d2:	2290      	movs	r2, #144	; 0x90
 80162d4:	4618      	mov	r0, r3
 80162d6:	f002 f966 	bl	80185a6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80162da:	4b29      	ldr	r3, [pc, #164]	; (8016380 <RegionEU868InitDefaults+0x128>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	4a2a      	ldr	r2, [pc, #168]	; (8016388 <RegionEU868InitDefaults+0x130>)
 80162e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80162e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80162e6:	4b26      	ldr	r3, [pc, #152]	; (8016380 <RegionEU868InitDefaults+0x128>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4a28      	ldr	r2, [pc, #160]	; (801638c <RegionEU868InitDefaults+0x134>)
 80162ec:	330c      	adds	r3, #12
 80162ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80162f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80162f4:	4b22      	ldr	r3, [pc, #136]	; (8016380 <RegionEU868InitDefaults+0x128>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	4a25      	ldr	r2, [pc, #148]	; (8016390 <RegionEU868InitDefaults+0x138>)
 80162fa:	3318      	adds	r3, #24
 80162fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80162fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016302:	4b1f      	ldr	r3, [pc, #124]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2207      	movs	r2, #7
 8016308:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801630c:	4b1c      	ldr	r3, [pc, #112]	; (8016380 <RegionEU868InitDefaults+0x128>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016314:	4b1a      	ldr	r3, [pc, #104]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801631c:	2201      	movs	r2, #1
 801631e:	4619      	mov	r1, r3
 8016320:	f7ff f85a 	bl	80153d8 <RegionCommonChanMaskCopy>
 8016324:	e028      	b.n	8016378 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016326:	4b16      	ldr	r3, [pc, #88]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	2200      	movs	r2, #0
 801632c:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801632e:	4b14      	ldr	r3, [pc, #80]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	2200      	movs	r2, #0
 8016334:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016336:	4b12      	ldr	r3, [pc, #72]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2200      	movs	r2, #0
 801633c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801633e:	4b10      	ldr	r3, [pc, #64]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016346:	4b0e      	ldr	r3, [pc, #56]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801634e:	2201      	movs	r2, #1
 8016350:	4619      	mov	r1, r3
 8016352:	f7ff f841 	bl	80153d8 <RegionCommonChanMaskCopy>
            break;
 8016356:	e00f      	b.n	8016378 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016358:	4b09      	ldr	r3, [pc, #36]	; (8016380 <RegionEU868InitDefaults+0x128>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016360:	4b07      	ldr	r3, [pc, #28]	; (8016380 <RegionEU868InitDefaults+0x128>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016368:	4b05      	ldr	r3, [pc, #20]	; (8016380 <RegionEU868InitDefaults+0x128>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	430a      	orrs	r2, r1
 801636e:	b292      	uxth	r2, r2
 8016370:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016374:	e000      	b.n	8016378 <RegionEU868InitDefaults+0x120>
            break;
 8016376:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016378:	37c0      	adds	r7, #192	; 0xc0
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	20001a2c 	.word	0x20001a2c
 8016384:	20001a30 	.word	0x20001a30
 8016388:	0801dacc 	.word	0x0801dacc
 801638c:	0801dad8 	.word	0x0801dad8
 8016390:	0801dae4 	.word	0x0801dae4

08016394 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b084      	sub	sp, #16
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	460b      	mov	r3, r1
 801639e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80163a0:	78fb      	ldrb	r3, [r7, #3]
 80163a2:	2b0f      	cmp	r3, #15
 80163a4:	d86c      	bhi.n	8016480 <RegionEU868Verify+0xec>
 80163a6:	a201      	add	r2, pc, #4	; (adr r2, 80163ac <RegionEU868Verify+0x18>)
 80163a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163ac:	080163ed 	.word	0x080163ed
 80163b0:	08016481 	.word	0x08016481
 80163b4:	08016481 	.word	0x08016481
 80163b8:	08016481 	.word	0x08016481
 80163bc:	08016481 	.word	0x08016481
 80163c0:	08016405 	.word	0x08016405
 80163c4:	08016423 	.word	0x08016423
 80163c8:	08016441 	.word	0x08016441
 80163cc:	08016481 	.word	0x08016481
 80163d0:	0801645f 	.word	0x0801645f
 80163d4:	0801645f 	.word	0x0801645f
 80163d8:	08016481 	.word	0x08016481
 80163dc:	08016481 	.word	0x08016481
 80163e0:	08016481 	.word	0x08016481
 80163e4:	08016481 	.word	0x08016481
 80163e8:	0801647d 	.word	0x0801647d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80163ec:	2300      	movs	r3, #0
 80163ee:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	f107 020f 	add.w	r2, r7, #15
 80163f8:	4611      	mov	r1, r2
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7ff fcf4 	bl	8015de8 <VerifyRfFreq>
 8016400:	4603      	mov	r3, r0
 8016402:	e03e      	b.n	8016482 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f993 3000 	ldrsb.w	r3, [r3]
 801640a:	2207      	movs	r2, #7
 801640c:	2100      	movs	r1, #0
 801640e:	4618      	mov	r0, r3
 8016410:	f7fe ff65 	bl	80152de <RegionCommonValueInRange>
 8016414:	4603      	mov	r3, r0
 8016416:	2b00      	cmp	r3, #0
 8016418:	bf14      	ite	ne
 801641a:	2301      	movne	r3, #1
 801641c:	2300      	moveq	r3, #0
 801641e:	b2db      	uxtb	r3, r3
 8016420:	e02f      	b.n	8016482 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f993 3000 	ldrsb.w	r3, [r3]
 8016428:	2205      	movs	r2, #5
 801642a:	2100      	movs	r1, #0
 801642c:	4618      	mov	r0, r3
 801642e:	f7fe ff56 	bl	80152de <RegionCommonValueInRange>
 8016432:	4603      	mov	r3, r0
 8016434:	2b00      	cmp	r3, #0
 8016436:	bf14      	ite	ne
 8016438:	2301      	movne	r3, #1
 801643a:	2300      	moveq	r3, #0
 801643c:	b2db      	uxtb	r3, r3
 801643e:	e020      	b.n	8016482 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	f993 3000 	ldrsb.w	r3, [r3]
 8016446:	2207      	movs	r2, #7
 8016448:	2100      	movs	r1, #0
 801644a:	4618      	mov	r0, r3
 801644c:	f7fe ff47 	bl	80152de <RegionCommonValueInRange>
 8016450:	4603      	mov	r3, r0
 8016452:	2b00      	cmp	r3, #0
 8016454:	bf14      	ite	ne
 8016456:	2301      	movne	r3, #1
 8016458:	2300      	moveq	r3, #0
 801645a:	b2db      	uxtb	r3, r3
 801645c:	e011      	b.n	8016482 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f993 3000 	ldrsb.w	r3, [r3]
 8016464:	2207      	movs	r2, #7
 8016466:	2100      	movs	r1, #0
 8016468:	4618      	mov	r0, r3
 801646a:	f7fe ff38 	bl	80152de <RegionCommonValueInRange>
 801646e:	4603      	mov	r3, r0
 8016470:	2b00      	cmp	r3, #0
 8016472:	bf14      	ite	ne
 8016474:	2301      	movne	r3, #1
 8016476:	2300      	moveq	r3, #0
 8016478:	b2db      	uxtb	r3, r3
 801647a:	e002      	b.n	8016482 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801647c:	2301      	movs	r3, #1
 801647e:	e000      	b.n	8016482 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016480:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016482:	4618      	mov	r0, r3
 8016484:	3710      	adds	r7, #16
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop

0801648c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b08a      	sub	sp, #40	; 0x28
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016494:	2350      	movs	r3, #80	; 0x50
 8016496:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	7a1b      	ldrb	r3, [r3, #8]
 801649e:	2b10      	cmp	r3, #16
 80164a0:	d162      	bne.n	8016568 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	330f      	adds	r3, #15
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d15e      	bne.n	801656c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80164ae:	2300      	movs	r3, #0
 80164b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164b4:	2303      	movs	r3, #3
 80164b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80164ba:	e050      	b.n	801655e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80164bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80164c0:	2b07      	cmp	r3, #7
 80164c2:	d824      	bhi.n	801650e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	685a      	ldr	r2, [r3, #4]
 80164c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164cc:	4413      	add	r3, r2
 80164ce:	781b      	ldrb	r3, [r3, #0]
 80164d0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80164d2:	69ba      	ldr	r2, [r7, #24]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6859      	ldr	r1, [r3, #4]
 80164d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164dc:	3301      	adds	r3, #1
 80164de:	440b      	add	r3, r1
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	021b      	lsls	r3, r3, #8
 80164e4:	4313      	orrs	r3, r2
 80164e6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80164e8:	69ba      	ldr	r2, [r7, #24]
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	6859      	ldr	r1, [r3, #4]
 80164ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164f2:	3302      	adds	r3, #2
 80164f4:	440b      	add	r3, r1
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	041b      	lsls	r3, r3, #16
 80164fa:	4313      	orrs	r3, r2
 80164fc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80164fe:	69bb      	ldr	r3, [r7, #24]
 8016500:	2264      	movs	r2, #100	; 0x64
 8016502:	fb02 f303 	mul.w	r3, r2, r3
 8016506:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016508:	2300      	movs	r3, #0
 801650a:	61fb      	str	r3, [r7, #28]
 801650c:	e006      	b.n	801651c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801650e:	2300      	movs	r3, #0
 8016510:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016512:	2300      	movs	r3, #0
 8016514:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016518:	2300      	movs	r3, #0
 801651a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801651c:	69bb      	ldr	r3, [r7, #24]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d00b      	beq.n	801653a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016522:	f107 0318 	add.w	r3, r7, #24
 8016526:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016528:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801652c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801652e:	f107 0310 	add.w	r3, r7, #16
 8016532:	4618      	mov	r0, r3
 8016534:	f000 fd0e 	bl	8016f54 <RegionEU868ChannelAdd>
 8016538:	e007      	b.n	801654a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801653a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801653e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016540:	f107 030c 	add.w	r3, r7, #12
 8016544:	4618      	mov	r0, r3
 8016546:	f000 fda7 	bl	8017098 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801654a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801654e:	3303      	adds	r3, #3
 8016550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016558:	3301      	adds	r3, #1
 801655a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801655e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016562:	2b0f      	cmp	r3, #15
 8016564:	d9aa      	bls.n	80164bc <RegionEU868ApplyCFList+0x30>
 8016566:	e002      	b.n	801656e <RegionEU868ApplyCFList+0xe2>
        return;
 8016568:	bf00      	nop
 801656a:	e000      	b.n	801656e <RegionEU868ApplyCFList+0xe2>
        return;
 801656c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801656e:	3728      	adds	r7, #40	; 0x28
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}

08016574 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	791b      	ldrb	r3, [r3, #4]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d002      	beq.n	801658a <RegionEU868ChanMaskSet+0x16>
 8016584:	2b01      	cmp	r3, #1
 8016586:	d00b      	beq.n	80165a0 <RegionEU868ChanMaskSet+0x2c>
 8016588:	e015      	b.n	80165b6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801658a:	4b0e      	ldr	r3, [pc, #56]	; (80165c4 <RegionEU868ChanMaskSet+0x50>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2201      	movs	r2, #1
 8016598:	4619      	mov	r1, r3
 801659a:	f7fe ff1d 	bl	80153d8 <RegionCommonChanMaskCopy>
            break;
 801659e:	e00c      	b.n	80165ba <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80165a0:	4b08      	ldr	r3, [pc, #32]	; (80165c4 <RegionEU868ChanMaskSet+0x50>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2201      	movs	r2, #1
 80165ae:	4619      	mov	r1, r3
 80165b0:	f7fe ff12 	bl	80153d8 <RegionCommonChanMaskCopy>
            break;
 80165b4:	e001      	b.n	80165ba <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80165b6:	2300      	movs	r3, #0
 80165b8:	e000      	b.n	80165bc <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80165ba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80165bc:	4618      	mov	r0, r3
 80165be:	3708      	adds	r7, #8
 80165c0:	46bd      	mov	sp, r7
 80165c2:	bd80      	pop	{r7, pc}
 80165c4:	20001a2c 	.word	0x20001a2c

080165c8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b088      	sub	sp, #32
 80165cc:	af02      	add	r7, sp, #8
 80165ce:	60ba      	str	r2, [r7, #8]
 80165d0:	607b      	str	r3, [r7, #4]
 80165d2:	4603      	mov	r3, r0
 80165d4:	73fb      	strb	r3, [r7, #15]
 80165d6:	460b      	mov	r3, r1
 80165d8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80165da:	2300      	movs	r3, #0
 80165dc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80165de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165e2:	2b07      	cmp	r3, #7
 80165e4:	bfa8      	it	ge
 80165e6:	2307      	movge	r3, #7
 80165e8:	b25a      	sxtb	r2, r3
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165f4:	491e      	ldr	r1, [pc, #120]	; (8016670 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80165f6:	4618      	mov	r0, r3
 80165f8:	f7ff fb8e 	bl	8015d18 <RegionCommonGetBandwidth>
 80165fc:	4603      	mov	r3, r0
 80165fe:	b2da      	uxtb	r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801660a:	2b07      	cmp	r3, #7
 801660c:	d10a      	bne.n	8016624 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016614:	461a      	mov	r2, r3
 8016616:	4b17      	ldr	r3, [pc, #92]	; (8016674 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016618:	5c9b      	ldrb	r3, [r3, r2]
 801661a:	4618      	mov	r0, r3
 801661c:	f7ff f910 	bl	8015840 <RegionCommonComputeSymbolTimeFsk>
 8016620:	6178      	str	r0, [r7, #20]
 8016622:	e011      	b.n	8016648 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801662a:	461a      	mov	r2, r3
 801662c:	4b11      	ldr	r3, [pc, #68]	; (8016674 <RegionEU868ComputeRxWindowParameters+0xac>)
 801662e:	5c9a      	ldrb	r2, [r3, r2]
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016636:	4619      	mov	r1, r3
 8016638:	4b0d      	ldr	r3, [pc, #52]	; (8016670 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801663a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801663e:	4619      	mov	r1, r3
 8016640:	4610      	mov	r0, r2
 8016642:	f7ff f8e7 	bl	8015814 <RegionCommonComputeSymbolTimeLoRa>
 8016646:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016648:	4b0b      	ldr	r3, [pc, #44]	; (8016678 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801664a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801664c:	4798      	blx	r3
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	3308      	adds	r3, #8
 8016652:	687a      	ldr	r2, [r7, #4]
 8016654:	320c      	adds	r2, #12
 8016656:	7bb9      	ldrb	r1, [r7, #14]
 8016658:	9201      	str	r2, [sp, #4]
 801665a:	9300      	str	r3, [sp, #0]
 801665c:	4603      	mov	r3, r0
 801665e:	68ba      	ldr	r2, [r7, #8]
 8016660:	6978      	ldr	r0, [r7, #20]
 8016662:	f7ff f8fd 	bl	8015860 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016666:	bf00      	nop
 8016668:	3718      	adds	r7, #24
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
 801666e:	bf00      	nop
 8016670:	0801e020 	.word	0x0801e020
 8016674:	0801e018 	.word	0x0801e018
 8016678:	0801e0d4 	.word	0x0801e0d4

0801667c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801667c:	b5b0      	push	{r4, r5, r7, lr}
 801667e:	b090      	sub	sp, #64	; 0x40
 8016680:	af0a      	add	r7, sp, #40	; 0x28
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	785b      	ldrb	r3, [r3, #1]
 801668a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801668c:	2300      	movs	r3, #0
 801668e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016690:	2300      	movs	r3, #0
 8016692:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	685b      	ldr	r3, [r3, #4]
 8016698:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801669a:	4b5a      	ldr	r3, [pc, #360]	; (8016804 <RegionEU868RxConfig+0x188>)
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	4798      	blx	r3
 80166a0:	4603      	mov	r3, r0
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d001      	beq.n	80166aa <RegionEU868RxConfig+0x2e>
    {
        return false;
 80166a6:	2300      	movs	r3, #0
 80166a8:	e0a8      	b.n	80167fc <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	7cdb      	ldrb	r3, [r3, #19]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d126      	bne.n	8016700 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80166b2:	4b55      	ldr	r3, [pc, #340]	; (8016808 <RegionEU868RxConfig+0x18c>)
 80166b4:	681a      	ldr	r2, [r3, #0]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	781b      	ldrb	r3, [r3, #0]
 80166ba:	4619      	mov	r1, r3
 80166bc:	460b      	mov	r3, r1
 80166be:	005b      	lsls	r3, r3, #1
 80166c0:	440b      	add	r3, r1
 80166c2:	009b      	lsls	r3, r3, #2
 80166c4:	4413      	add	r3, r2
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80166ca:	4b4f      	ldr	r3, [pc, #316]	; (8016808 <RegionEU868RxConfig+0x18c>)
 80166cc:	681a      	ldr	r2, [r3, #0]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	781b      	ldrb	r3, [r3, #0]
 80166d2:	4619      	mov	r1, r3
 80166d4:	460b      	mov	r3, r1
 80166d6:	005b      	lsls	r3, r3, #1
 80166d8:	440b      	add	r3, r1
 80166da:	009b      	lsls	r3, r3, #2
 80166dc:	4413      	add	r3, r2
 80166de:	3304      	adds	r3, #4
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d00c      	beq.n	8016700 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80166e6:	4b48      	ldr	r3, [pc, #288]	; (8016808 <RegionEU868RxConfig+0x18c>)
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	781b      	ldrb	r3, [r3, #0]
 80166ee:	4619      	mov	r1, r3
 80166f0:	460b      	mov	r3, r1
 80166f2:	005b      	lsls	r3, r3, #1
 80166f4:	440b      	add	r3, r1
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	4413      	add	r3, r2
 80166fa:	3304      	adds	r3, #4
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016704:	4a41      	ldr	r2, [pc, #260]	; (801680c <RegionEU868RxConfig+0x190>)
 8016706:	5cd3      	ldrb	r3, [r2, r3]
 8016708:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801670a:	4b3e      	ldr	r3, [pc, #248]	; (8016804 <RegionEU868RxConfig+0x188>)
 801670c:	68db      	ldr	r3, [r3, #12]
 801670e:	6938      	ldr	r0, [r7, #16]
 8016710:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016716:	2b07      	cmp	r3, #7
 8016718:	d128      	bne.n	801676c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801671a:	2300      	movs	r3, #0
 801671c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801671e:	4b39      	ldr	r3, [pc, #228]	; (8016804 <RegionEU868RxConfig+0x188>)
 8016720:	699c      	ldr	r4, [r3, #24]
 8016722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801672a:	fb02 f303 	mul.w	r3, r2, r3
 801672e:	4619      	mov	r1, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	689b      	ldr	r3, [r3, #8]
 8016734:	b29b      	uxth	r3, r3
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	7c92      	ldrb	r2, [r2, #18]
 801673a:	7df8      	ldrb	r0, [r7, #23]
 801673c:	9209      	str	r2, [sp, #36]	; 0x24
 801673e:	2200      	movs	r2, #0
 8016740:	9208      	str	r2, [sp, #32]
 8016742:	2200      	movs	r2, #0
 8016744:	9207      	str	r2, [sp, #28]
 8016746:	2200      	movs	r2, #0
 8016748:	9206      	str	r2, [sp, #24]
 801674a:	2201      	movs	r2, #1
 801674c:	9205      	str	r2, [sp, #20]
 801674e:	2200      	movs	r2, #0
 8016750:	9204      	str	r2, [sp, #16]
 8016752:	2200      	movs	r2, #0
 8016754:	9203      	str	r2, [sp, #12]
 8016756:	9302      	str	r3, [sp, #8]
 8016758:	2305      	movs	r3, #5
 801675a:	9301      	str	r3, [sp, #4]
 801675c:	4b2c      	ldr	r3, [pc, #176]	; (8016810 <RegionEU868RxConfig+0x194>)
 801675e:	9300      	str	r3, [sp, #0]
 8016760:	2300      	movs	r3, #0
 8016762:	460a      	mov	r2, r1
 8016764:	f24c 3150 	movw	r1, #50000	; 0xc350
 8016768:	47a0      	blx	r4
 801676a:	e024      	b.n	80167b6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801676c:	2301      	movs	r3, #1
 801676e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016770:	4b24      	ldr	r3, [pc, #144]	; (8016804 <RegionEU868RxConfig+0x188>)
 8016772:	699c      	ldr	r4, [r3, #24]
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	789b      	ldrb	r3, [r3, #2]
 8016778:	461d      	mov	r5, r3
 801677a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	689b      	ldr	r3, [r3, #8]
 8016782:	b29b      	uxth	r3, r3
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	7c92      	ldrb	r2, [r2, #18]
 8016788:	7df8      	ldrb	r0, [r7, #23]
 801678a:	9209      	str	r2, [sp, #36]	; 0x24
 801678c:	2201      	movs	r2, #1
 801678e:	9208      	str	r2, [sp, #32]
 8016790:	2200      	movs	r2, #0
 8016792:	9207      	str	r2, [sp, #28]
 8016794:	2200      	movs	r2, #0
 8016796:	9206      	str	r2, [sp, #24]
 8016798:	2200      	movs	r2, #0
 801679a:	9205      	str	r2, [sp, #20]
 801679c:	2200      	movs	r2, #0
 801679e:	9204      	str	r2, [sp, #16]
 80167a0:	2200      	movs	r2, #0
 80167a2:	9203      	str	r2, [sp, #12]
 80167a4:	9302      	str	r3, [sp, #8]
 80167a6:	2308      	movs	r3, #8
 80167a8:	9301      	str	r3, [sp, #4]
 80167aa:	2300      	movs	r3, #0
 80167ac:	9300      	str	r3, [sp, #0]
 80167ae:	2301      	movs	r3, #1
 80167b0:	460a      	mov	r2, r1
 80167b2:	4629      	mov	r1, r5
 80167b4:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	7c5b      	ldrb	r3, [r3, #17]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d005      	beq.n	80167ca <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80167be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167c2:	4a14      	ldr	r2, [pc, #80]	; (8016814 <RegionEU868RxConfig+0x198>)
 80167c4:	5cd3      	ldrb	r3, [r2, r3]
 80167c6:	75bb      	strb	r3, [r7, #22]
 80167c8:	e004      	b.n	80167d4 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80167ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167ce:	4a12      	ldr	r2, [pc, #72]	; (8016818 <RegionEU868RxConfig+0x19c>)
 80167d0:	5cd3      	ldrb	r3, [r2, r3]
 80167d2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80167d4:	4b0b      	ldr	r3, [pc, #44]	; (8016804 <RegionEU868RxConfig+0x188>)
 80167d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80167d8:	7dba      	ldrb	r2, [r7, #22]
 80167da:	320d      	adds	r2, #13
 80167dc:	b2d1      	uxtb	r1, r2
 80167de:	7dfa      	ldrb	r2, [r7, #23]
 80167e0:	4610      	mov	r0, r2
 80167e2:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	7cdb      	ldrb	r3, [r3, #19]
 80167e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80167ec:	6939      	ldr	r1, [r7, #16]
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7ff fab0 	bl	8015d54 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	7bfa      	ldrb	r2, [r7, #15]
 80167f8:	701a      	strb	r2, [r3, #0]
    return true;
 80167fa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3718      	adds	r7, #24
 8016800:	46bd      	mov	sp, r7
 8016802:	bdb0      	pop	{r4, r5, r7, pc}
 8016804:	0801e0d4 	.word	0x0801e0d4
 8016808:	20001a2c 	.word	0x20001a2c
 801680c:	0801e018 	.word	0x0801e018
 8016810:	00014585 	.word	0x00014585
 8016814:	0801e048 	.word	0x0801e048
 8016818:	0801e040 	.word	0x0801e040

0801681c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801681c:	b590      	push	{r4, r7, lr}
 801681e:	b093      	sub	sp, #76	; 0x4c
 8016820:	af0a      	add	r7, sp, #40	; 0x28
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801682e:	461a      	mov	r2, r3
 8016830:	4b5d      	ldr	r3, [pc, #372]	; (80169a8 <RegionEU868TxConfig+0x18c>)
 8016832:	5c9b      	ldrb	r3, [r3, r2]
 8016834:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801683c:	4b5b      	ldr	r3, [pc, #364]	; (80169ac <RegionEU868TxConfig+0x190>)
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	4b5b      	ldr	r3, [pc, #364]	; (80169b0 <RegionEU868TxConfig+0x194>)
 8016842:	6819      	ldr	r1, [r3, #0]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	461c      	mov	r4, r3
 801684a:	4623      	mov	r3, r4
 801684c:	005b      	lsls	r3, r3, #1
 801684e:	4423      	add	r3, r4
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	440b      	add	r3, r1
 8016854:	3309      	adds	r3, #9
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	4619      	mov	r1, r3
 801685a:	460b      	mov	r3, r1
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	440b      	add	r3, r1
 8016860:	00db      	lsls	r3, r3, #3
 8016862:	4413      	add	r3, r2
 8016864:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016868:	4619      	mov	r1, r3
 801686a:	f7ff fa40 	bl	8015cee <RegionCommonLimitTxPower>
 801686e:	4603      	mov	r3, r0
 8016870:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016878:	494e      	ldr	r1, [pc, #312]	; (80169b4 <RegionEU868TxConfig+0x198>)
 801687a:	4618      	mov	r0, r3
 801687c:	f7ff fa4c 	bl	8015d18 <RegionCommonGetBandwidth>
 8016880:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016882:	2300      	movs	r3, #0
 8016884:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	6859      	ldr	r1, [r3, #4]
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	689a      	ldr	r2, [r3, #8]
 801688e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016892:	4618      	mov	r0, r3
 8016894:	f7ff f89c 	bl	80159d0 <RegionCommonComputeTxPower>
 8016898:	4603      	mov	r3, r0
 801689a:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801689c:	4b46      	ldr	r3, [pc, #280]	; (80169b8 <RegionEU868TxConfig+0x19c>)
 801689e:	68da      	ldr	r2, [r3, #12]
 80168a0:	4b43      	ldr	r3, [pc, #268]	; (80169b0 <RegionEU868TxConfig+0x194>)
 80168a2:	6819      	ldr	r1, [r3, #0]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	4618      	mov	r0, r3
 80168aa:	4603      	mov	r3, r0
 80168ac:	005b      	lsls	r3, r3, #1
 80168ae:	4403      	add	r3, r0
 80168b0:	009b      	lsls	r3, r3, #2
 80168b2:	440b      	add	r3, r1
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	4618      	mov	r0, r3
 80168b8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168c0:	2b07      	cmp	r3, #7
 80168c2:	d124      	bne.n	801690e <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80168c4:	2300      	movs	r3, #0
 80168c6:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80168c8:	4b3b      	ldr	r3, [pc, #236]	; (80169b8 <RegionEU868TxConfig+0x19c>)
 80168ca:	69dc      	ldr	r4, [r3, #28]
 80168cc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80168d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80168d4:	fb02 f303 	mul.w	r3, r2, r3
 80168d8:	461a      	mov	r2, r3
 80168da:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80168de:	7ff8      	ldrb	r0, [r7, #31]
 80168e0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80168e4:	9308      	str	r3, [sp, #32]
 80168e6:	2300      	movs	r3, #0
 80168e8:	9307      	str	r3, [sp, #28]
 80168ea:	2300      	movs	r3, #0
 80168ec:	9306      	str	r3, [sp, #24]
 80168ee:	2300      	movs	r3, #0
 80168f0:	9305      	str	r3, [sp, #20]
 80168f2:	2301      	movs	r3, #1
 80168f4:	9304      	str	r3, [sp, #16]
 80168f6:	2300      	movs	r3, #0
 80168f8:	9303      	str	r3, [sp, #12]
 80168fa:	2305      	movs	r3, #5
 80168fc:	9302      	str	r3, [sp, #8]
 80168fe:	2300      	movs	r3, #0
 8016900:	9301      	str	r3, [sp, #4]
 8016902:	9200      	str	r2, [sp, #0]
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801690a:	47a0      	blx	r4
 801690c:	e01d      	b.n	801694a <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801690e:	2301      	movs	r3, #1
 8016910:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016912:	4b29      	ldr	r3, [pc, #164]	; (80169b8 <RegionEU868TxConfig+0x19c>)
 8016914:	69dc      	ldr	r4, [r3, #28]
 8016916:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801691a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801691e:	7ff8      	ldrb	r0, [r7, #31]
 8016920:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8016924:	9208      	str	r2, [sp, #32]
 8016926:	2200      	movs	r2, #0
 8016928:	9207      	str	r2, [sp, #28]
 801692a:	2200      	movs	r2, #0
 801692c:	9206      	str	r2, [sp, #24]
 801692e:	2200      	movs	r2, #0
 8016930:	9205      	str	r2, [sp, #20]
 8016932:	2201      	movs	r2, #1
 8016934:	9204      	str	r2, [sp, #16]
 8016936:	2200      	movs	r2, #0
 8016938:	9203      	str	r2, [sp, #12]
 801693a:	2208      	movs	r2, #8
 801693c:	9202      	str	r2, [sp, #8]
 801693e:	2201      	movs	r2, #1
 8016940:	9201      	str	r2, [sp, #4]
 8016942:	9300      	str	r3, [sp, #0]
 8016944:	69bb      	ldr	r3, [r7, #24]
 8016946:	2200      	movs	r2, #0
 8016948:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801694a:	4b19      	ldr	r3, [pc, #100]	; (80169b0 <RegionEU868TxConfig+0x194>)
 801694c:	681a      	ldr	r2, [r3, #0]
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	4619      	mov	r1, r3
 8016954:	460b      	mov	r3, r1
 8016956:	005b      	lsls	r3, r3, #1
 8016958:	440b      	add	r3, r1
 801695a:	009b      	lsls	r3, r3, #2
 801695c:	4413      	add	r3, r2
 801695e:	681a      	ldr	r2, [r3, #0]
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016966:	4619      	mov	r1, r3
 8016968:	4610      	mov	r0, r2
 801696a:	f7ff fa25 	bl	8015db8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	899b      	ldrh	r3, [r3, #12]
 8016978:	4619      	mov	r1, r3
 801697a:	4610      	mov	r0, r2
 801697c:	f7ff faaa 	bl	8015ed4 <GetTimeOnAir>
 8016980:	4602      	mov	r2, r0
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016986:	4b0c      	ldr	r3, [pc, #48]	; (80169b8 <RegionEU868TxConfig+0x19c>)
 8016988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801698a:	68fa      	ldr	r2, [r7, #12]
 801698c:	8992      	ldrh	r2, [r2, #12]
 801698e:	b2d1      	uxtb	r1, r2
 8016990:	7ffa      	ldrb	r2, [r7, #31]
 8016992:	4610      	mov	r0, r2
 8016994:	4798      	blx	r3

    *txPower = txPowerLimited;
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	7f7a      	ldrb	r2, [r7, #29]
 801699a:	701a      	strb	r2, [r3, #0]
    return true;
 801699c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801699e:	4618      	mov	r0, r3
 80169a0:	3724      	adds	r7, #36	; 0x24
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd90      	pop	{r4, r7, pc}
 80169a6:	bf00      	nop
 80169a8:	0801e018 	.word	0x0801e018
 80169ac:	20001a30 	.word	0x20001a30
 80169b0:	20001a2c 	.word	0x20001a2c
 80169b4:	0801e020 	.word	0x0801e020
 80169b8:	0801e0d4 	.word	0x0801e0d4

080169bc <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80169bc:	b590      	push	{r4, r7, lr}
 80169be:	b093      	sub	sp, #76	; 0x4c
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	60f8      	str	r0, [r7, #12]
 80169c4:	60b9      	str	r1, [r7, #8]
 80169c6:	607a      	str	r2, [r7, #4]
 80169c8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80169ca:	2307      	movs	r3, #7
 80169cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80169d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80169d4:	2200      	movs	r2, #0
 80169d6:	601a      	str	r2, [r3, #0]
 80169d8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80169da:	2300      	movs	r3, #0
 80169dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80169e0:	2300      	movs	r3, #0
 80169e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80169e6:	2300      	movs	r3, #0
 80169e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80169ea:	e085      	b.n	8016af8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	685a      	ldr	r2, [r3, #4]
 80169f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80169f4:	4413      	add	r3, r2
 80169f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80169fa:	4611      	mov	r1, r2
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7fe fe2f 	bl	8015660 <RegionCommonParseLinkAdrReq>
 8016a02:	4603      	mov	r3, r0
 8016a04:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8016a08:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d07b      	beq.n	8016b08 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016a10:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016a14:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016a18:	4413      	add	r3, r2
 8016a1a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016a1e:	2307      	movs	r3, #7
 8016a20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016a24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016a28:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8016a2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d109      	bne.n	8016a46 <RegionEU868LinkAdrReq+0x8a>
 8016a32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d106      	bne.n	8016a46 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8016a38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016a3c:	f023 0301 	bic.w	r3, r3, #1
 8016a40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016a44:	e058      	b.n	8016af8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016a46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d003      	beq.n	8016a56 <RegionEU868LinkAdrReq+0x9a>
 8016a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016a52:	2b05      	cmp	r3, #5
 8016a54:	d903      	bls.n	8016a5e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016a56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016a5a:	2b06      	cmp	r3, #6
 8016a5c:	d906      	bls.n	8016a6c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016a5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016a62:	f023 0301 	bic.w	r3, r3, #1
 8016a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016a6a:	e045      	b.n	8016af8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016a72:	e03d      	b.n	8016af0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016a74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016a78:	2b06      	cmp	r3, #6
 8016a7a:	d118      	bne.n	8016aae <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016a7c:	4b5f      	ldr	r3, [pc, #380]	; (8016bfc <RegionEU868LinkAdrReq+0x240>)
 8016a7e:	6819      	ldr	r1, [r3, #0]
 8016a80:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8016a84:	4613      	mov	r3, r2
 8016a86:	005b      	lsls	r3, r3, #1
 8016a88:	4413      	add	r3, r2
 8016a8a:	009b      	lsls	r3, r3, #2
 8016a8c:	440b      	add	r3, r1
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d028      	beq.n	8016ae6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016a94:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016a98:	2201      	movs	r2, #1
 8016a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8016a9e:	b21a      	sxth	r2, r3
 8016aa0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016aa2:	b21b      	sxth	r3, r3
 8016aa4:	4313      	orrs	r3, r2
 8016aa6:	b21b      	sxth	r3, r3
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016aac:	e01b      	b.n	8016ae6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016aae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016ab6:	fa42 f303 	asr.w	r3, r2, r3
 8016aba:	f003 0301 	and.w	r3, r3, #1
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d011      	beq.n	8016ae6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016ac2:	4b4e      	ldr	r3, [pc, #312]	; (8016bfc <RegionEU868LinkAdrReq+0x240>)
 8016ac4:	6819      	ldr	r1, [r3, #0]
 8016ac6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8016aca:	4613      	mov	r3, r2
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	4413      	add	r3, r2
 8016ad0:	009b      	lsls	r3, r3, #2
 8016ad2:	440b      	add	r3, r1
 8016ad4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d105      	bne.n	8016ae6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016ada:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ade:	f023 0301 	bic.w	r3, r3, #1
 8016ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016ae6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016aea:	3301      	adds	r3, #1
 8016aec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016af0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016af4:	2b0f      	cmp	r3, #15
 8016af6:	d9bd      	bls.n	8016a74 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	7a1b      	ldrb	r3, [r3, #8]
 8016afc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016b00:	429a      	cmp	r2, r3
 8016b02:	f4ff af73 	bcc.w	80169ec <RegionEU868LinkAdrReq+0x30>
 8016b06:	e000      	b.n	8016b0a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8016b08:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016b0a:	2302      	movs	r3, #2
 8016b0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	7a5b      	ldrb	r3, [r3, #9]
 8016b14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8016b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7ff fa29 	bl	8015f74 <RegionEU868GetPhyParam>
 8016b22:	4603      	mov	r3, r0
 8016b24:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8016b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016b2a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	7a9b      	ldrb	r3, [r3, #10]
 8016b30:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016b32:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8016b36:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016b38:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8016b3c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016b3e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016b42:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016b4a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016b52:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	7b5b      	ldrb	r3, [r3, #13]
 8016b58:	b25b      	sxtb	r3, r3
 8016b5a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016b5c:	2310      	movs	r3, #16
 8016b5e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016b60:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8016b64:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b68:	b25b      	sxtb	r3, r3
 8016b6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016b6e:	2307      	movs	r3, #7
 8016b70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016b74:	4b21      	ldr	r3, [pc, #132]	; (8016bfc <RegionEU868LinkAdrReq+0x240>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016b7a:	2307      	movs	r3, #7
 8016b7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016b80:	2300      	movs	r3, #0
 8016b82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016b8c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8016b90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016b94:	1c9a      	adds	r2, r3, #2
 8016b96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016b9a:	1c59      	adds	r1, r3, #1
 8016b9c:	f107 0010 	add.w	r0, r7, #16
 8016ba0:	4623      	mov	r3, r4
 8016ba2:	f7fe fdae 	bl	8015702 <RegionCommonLinkAdrReqVerifyParams>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016bac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016bb0:	2b07      	cmp	r3, #7
 8016bb2:	d10d      	bne.n	8016bd0 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016bb4:	4b11      	ldr	r3, [pc, #68]	; (8016bfc <RegionEU868LinkAdrReq+0x240>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016bbc:	220c      	movs	r2, #12
 8016bbe:	2100      	movs	r1, #0
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f001 fd2b 	bl	801861c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016bc6:	4b0d      	ldr	r3, [pc, #52]	; (8016bfc <RegionEU868LinkAdrReq+0x240>)
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016bcc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016bd0:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016bd8:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016be0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016bea:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016bee:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016bf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	374c      	adds	r7, #76	; 0x4c
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd90      	pop	{r4, r7, pc}
 8016bfc:	20001a2c 	.word	0x20001a2c

08016c00 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016c08:	2307      	movs	r3, #7
 8016c0a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	f107 020e 	add.w	r2, r7, #14
 8016c18:	4611      	mov	r1, r2
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7ff f8e4 	bl	8015de8 <VerifyRfFreq>
 8016c20:	4603      	mov	r3, r0
 8016c22:	f083 0301 	eor.w	r3, r3, #1
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d003      	beq.n	8016c34 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8016c2c:	7bfb      	ldrb	r3, [r7, #15]
 8016c2e:	f023 0301 	bic.w	r3, r3, #1
 8016c32:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	f993 3000 	ldrsb.w	r3, [r3]
 8016c3a:	2207      	movs	r2, #7
 8016c3c:	2100      	movs	r1, #0
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7fe fb4d 	bl	80152de <RegionCommonValueInRange>
 8016c44:	4603      	mov	r3, r0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d103      	bne.n	8016c52 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8016c4a:	7bfb      	ldrb	r3, [r7, #15]
 8016c4c:	f023 0302 	bic.w	r3, r3, #2
 8016c50:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c58:	2205      	movs	r2, #5
 8016c5a:	2100      	movs	r1, #0
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7fe fb3e 	bl	80152de <RegionCommonValueInRange>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d103      	bne.n	8016c70 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016c68:	7bfb      	ldrb	r3, [r7, #15]
 8016c6a:	f023 0304 	bic.w	r3, r3, #4
 8016c6e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}
	...

08016c7c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b086      	sub	sp, #24
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016c84:	2303      	movs	r3, #3
 8016c86:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d114      	bne.n	8016cbc <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016c98:	b2db      	uxtb	r3, r3
 8016c9a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016c9c:	f107 0308 	add.w	r3, r7, #8
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f000 f9f9 	bl	8017098 <RegionEU868ChannelsRemove>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	f083 0301 	eor.w	r3, r3, #1
 8016cac:	b2db      	uxtb	r3, r3
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d03b      	beq.n	8016d2a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016cb2:	7dfb      	ldrb	r3, [r7, #23]
 8016cb4:	f023 0303 	bic.w	r3, r3, #3
 8016cb8:	75fb      	strb	r3, [r7, #23]
 8016cba:	e036      	b.n	8016d2a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016ccc:	f107 030c 	add.w	r3, r7, #12
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f000 f93f 	bl	8016f54 <RegionEU868ChannelAdd>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b06      	cmp	r3, #6
 8016cda:	d820      	bhi.n	8016d1e <RegionEU868NewChannelReq+0xa2>
 8016cdc:	a201      	add	r2, pc, #4	; (adr r2, 8016ce4 <RegionEU868NewChannelReq+0x68>)
 8016cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce2:	bf00      	nop
 8016ce4:	08016d29 	.word	0x08016d29
 8016ce8:	08016d1f 	.word	0x08016d1f
 8016cec:	08016d1f 	.word	0x08016d1f
 8016cf0:	08016d1f 	.word	0x08016d1f
 8016cf4:	08016d01 	.word	0x08016d01
 8016cf8:	08016d0b 	.word	0x08016d0b
 8016cfc:	08016d15 	.word	0x08016d15
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016d00:	7dfb      	ldrb	r3, [r7, #23]
 8016d02:	f023 0301 	bic.w	r3, r3, #1
 8016d06:	75fb      	strb	r3, [r7, #23]
                break;
 8016d08:	e00f      	b.n	8016d2a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016d0a:	7dfb      	ldrb	r3, [r7, #23]
 8016d0c:	f023 0302 	bic.w	r3, r3, #2
 8016d10:	75fb      	strb	r3, [r7, #23]
                break;
 8016d12:	e00a      	b.n	8016d2a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016d14:	7dfb      	ldrb	r3, [r7, #23]
 8016d16:	f023 0303 	bic.w	r3, r3, #3
 8016d1a:	75fb      	strb	r3, [r7, #23]
                break;
 8016d1c:	e005      	b.n	8016d2a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016d1e:	7dfb      	ldrb	r3, [r7, #23]
 8016d20:	f023 0303 	bic.w	r3, r3, #3
 8016d24:	75fb      	strb	r3, [r7, #23]
                break;
 8016d26:	e000      	b.n	8016d2a <RegionEU868NewChannelReq+0xae>
                break;
 8016d28:	bf00      	nop
            }
        }
    }

    return status;
 8016d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3718      	adds	r7, #24
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop

08016d38 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016d38:	b480      	push	{r7}
 8016d3a:	b083      	sub	sp, #12
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	370c      	adds	r7, #12
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bc80      	pop	{r7}
 8016d4c:	4770      	bx	lr
	...

08016d50 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b084      	sub	sp, #16
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016d58:	2303      	movs	r3, #3
 8016d5a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	685b      	ldr	r3, [r3, #4]
 8016d64:	f107 020e 	add.w	r2, r7, #14
 8016d68:	4611      	mov	r1, r2
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7ff f83c 	bl	8015de8 <VerifyRfFreq>
 8016d70:	4603      	mov	r3, r0
 8016d72:	f083 0301 	eor.w	r3, r3, #1
 8016d76:	b2db      	uxtb	r3, r3
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d003      	beq.n	8016d84 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8016d7c:	7bfb      	ldrb	r3, [r7, #15]
 8016d7e:	f023 0301 	bic.w	r3, r3, #1
 8016d82:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016d84:	4b13      	ldr	r3, [pc, #76]	; (8016dd4 <RegionEU868DlChannelReq+0x84>)
 8016d86:	681a      	ldr	r2, [r3, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	781b      	ldrb	r3, [r3, #0]
 8016d8c:	4619      	mov	r1, r3
 8016d8e:	460b      	mov	r3, r1
 8016d90:	005b      	lsls	r3, r3, #1
 8016d92:	440b      	add	r3, r1
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	4413      	add	r3, r2
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d103      	bne.n	8016da6 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8016d9e:	7bfb      	ldrb	r3, [r7, #15]
 8016da0:	f023 0302 	bic.w	r3, r3, #2
 8016da4:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016da6:	7bfb      	ldrb	r3, [r7, #15]
 8016da8:	2b03      	cmp	r3, #3
 8016daa:	d10d      	bne.n	8016dc8 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016dac:	4b09      	ldr	r3, [pc, #36]	; (8016dd4 <RegionEU868DlChannelReq+0x84>)
 8016dae:	6819      	ldr	r1, [r3, #0]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	781b      	ldrb	r3, [r3, #0]
 8016db4:	4618      	mov	r0, r3
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	685a      	ldr	r2, [r3, #4]
 8016dba:	4603      	mov	r3, r0
 8016dbc:	005b      	lsls	r3, r3, #1
 8016dbe:	4403      	add	r3, r0
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	440b      	add	r3, r1
 8016dc4:	3304      	adds	r3, #4
 8016dc6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	3710      	adds	r7, #16
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}
 8016dd4:	20001a2c 	.word	0x20001a2c

08016dd8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016dd8:	b480      	push	{r7}
 8016dda:	b083      	sub	sp, #12
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	4603      	mov	r3, r0
 8016de0:	460a      	mov	r2, r1
 8016de2:	71fb      	strb	r3, [r7, #7]
 8016de4:	4613      	mov	r3, r2
 8016de6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	370c      	adds	r7, #12
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bc80      	pop	{r7}
 8016df4:	4770      	bx	lr
	...

08016df8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b09a      	sub	sp, #104	; 0x68
 8016dfc:	af02      	add	r7, sp, #8
 8016dfe:	60f8      	str	r0, [r7, #12]
 8016e00:	60b9      	str	r1, [r7, #8]
 8016e02:	607a      	str	r2, [r7, #4]
 8016e04:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8016e06:	2300      	movs	r3, #0
 8016e08:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8016e12:	2300      	movs	r3, #0
 8016e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016e16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	601a      	str	r2, [r3, #0]
 8016e1e:	605a      	str	r2, [r3, #4]
 8016e20:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016e22:	230c      	movs	r3, #12
 8016e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8016e28:	2307      	movs	r3, #7
 8016e2a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016e2c:	4b47      	ldr	r3, [pc, #284]	; (8016f4c <RegionEU868NextChannel+0x154>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016e34:	2201      	movs	r2, #1
 8016e36:	2100      	movs	r1, #0
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7fe faa1 	bl	8015380 <RegionCommonCountChannels>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d10a      	bne.n	8016e5a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016e44:	4b41      	ldr	r3, [pc, #260]	; (8016f4c <RegionEU868NextChannel+0x154>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8016e4c:	4b3f      	ldr	r3, [pc, #252]	; (8016f4c <RegionEU868NextChannel+0x154>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	f042 0207 	orr.w	r2, r2, #7
 8016e54:	b292      	uxth	r2, r2
 8016e56:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	7a5b      	ldrb	r3, [r3, #9]
 8016e5e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016e66:	b2db      	uxtb	r3, r3
 8016e68:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016e6a:	4b38      	ldr	r3, [pc, #224]	; (8016f4c <RegionEU868NextChannel+0x154>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016e72:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016e74:	4b35      	ldr	r3, [pc, #212]	; (8016f4c <RegionEU868NextChannel+0x154>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8016e7a:	4b35      	ldr	r3, [pc, #212]	; (8016f50 <RegionEU868NextChannel+0x158>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016e80:	2310      	movs	r3, #16
 8016e82:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016e84:	f107 0312 	add.w	r3, r7, #18
 8016e88:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	685b      	ldr	r3, [r3, #4]
 8016e94:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	7a9b      	ldrb	r3, [r3, #10]
 8016e9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016e9e:	2306      	movs	r3, #6
 8016ea0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016ea4:	68fa      	ldr	r2, [r7, #12]
 8016ea6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016eaa:	320c      	adds	r2, #12
 8016eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016eb0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	7d1b      	ldrb	r3, [r3, #20]
 8016eb8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	8adb      	ldrh	r3, [r3, #22]
 8016ec6:	4619      	mov	r1, r3
 8016ec8:	4610      	mov	r0, r2
 8016eca:	f7ff f803 	bl	8015ed4 <GetTimeOnAir>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016ed2:	f107 0314 	add.w	r3, r7, #20
 8016ed6:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016ed8:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016edc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016ee0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	9301      	str	r3, [sp, #4]
 8016ee8:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016eec:	9300      	str	r3, [sp, #0]
 8016eee:	460b      	mov	r3, r1
 8016ef0:	6839      	ldr	r1, [r7, #0]
 8016ef2:	f7fe fe5c 	bl	8015bae <RegionCommonIdentifyChannels>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016efc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d10e      	bne.n	8016f22 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016f04:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016f08:	3b01      	subs	r3, #1
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	f001 fb33 	bl	8018578 <randr>
 8016f12:	4603      	mov	r3, r0
 8016f14:	3360      	adds	r3, #96	; 0x60
 8016f16:	443b      	add	r3, r7
 8016f18:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	701a      	strb	r2, [r3, #0]
 8016f20:	e00e      	b.n	8016f40 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016f22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f26:	2b0c      	cmp	r3, #12
 8016f28:	d10a      	bne.n	8016f40 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016f2a:	4b08      	ldr	r3, [pc, #32]	; (8016f4c <RegionEU868NextChannel+0x154>)
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8016f32:	4b06      	ldr	r3, [pc, #24]	; (8016f4c <RegionEU868NextChannel+0x154>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	f042 0207 	orr.w	r2, r2, #7
 8016f3a:	b292      	uxth	r2, r2
 8016f3c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8016f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3760      	adds	r7, #96	; 0x60
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}
 8016f4c:	20001a2c 	.word	0x20001a2c
 8016f50:	20001a30 	.word	0x20001a30

08016f54 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b084      	sub	sp, #16
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016f60:	2300      	movs	r3, #0
 8016f62:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016f64:	2300      	movs	r3, #0
 8016f66:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	791b      	ldrb	r3, [r3, #4]
 8016f6c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016f6e:	7b7b      	ldrb	r3, [r7, #13]
 8016f70:	2b02      	cmp	r3, #2
 8016f72:	d801      	bhi.n	8016f78 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016f74:	2306      	movs	r3, #6
 8016f76:	e089      	b.n	801708c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016f78:	7b7b      	ldrb	r3, [r7, #13]
 8016f7a:	2b0f      	cmp	r3, #15
 8016f7c:	d901      	bls.n	8016f82 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016f7e:	2303      	movs	r3, #3
 8016f80:	e084      	b.n	801708c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	7a1b      	ldrb	r3, [r3, #8]
 8016f88:	f343 0303 	sbfx	r3, r3, #0, #4
 8016f8c:	b25b      	sxtb	r3, r3
 8016f8e:	2207      	movs	r2, #7
 8016f90:	2100      	movs	r1, #0
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7fe f9a3 	bl	80152de <RegionCommonValueInRange>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d101      	bne.n	8016fa2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016f9e:	2301      	movs	r3, #1
 8016fa0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	7a1b      	ldrb	r3, [r3, #8]
 8016fa8:	f343 1303 	sbfx	r3, r3, #4, #4
 8016fac:	b25b      	sxtb	r3, r3
 8016fae:	2207      	movs	r2, #7
 8016fb0:	2100      	movs	r1, #0
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f7fe f993 	bl	80152de <RegionCommonValueInRange>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d101      	bne.n	8016fc2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	7a1b      	ldrb	r3, [r3, #8]
 8016fc8:	f343 0303 	sbfx	r3, r3, #0, #4
 8016fcc:	b25a      	sxtb	r2, r3
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	7a1b      	ldrb	r3, [r3, #8]
 8016fd4:	f343 1303 	sbfx	r3, r3, #4, #4
 8016fd8:	b25b      	sxtb	r3, r3
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	dd01      	ble.n	8016fe2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016fe2:	7bbb      	ldrb	r3, [r7, #14]
 8016fe4:	f083 0301 	eor.w	r3, r3, #1
 8016fe8:	b2db      	uxtb	r3, r3
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d010      	beq.n	8017010 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	f107 020c 	add.w	r2, r7, #12
 8016ff8:	4611      	mov	r1, r2
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f7fe fef4 	bl	8015de8 <VerifyRfFreq>
 8017000:	4603      	mov	r3, r0
 8017002:	f083 0301 	eor.w	r3, r3, #1
 8017006:	b2db      	uxtb	r3, r3
 8017008:	2b00      	cmp	r3, #0
 801700a:	d001      	beq.n	8017010 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801700c:	2301      	movs	r3, #1
 801700e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017010:	7bfb      	ldrb	r3, [r7, #15]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d004      	beq.n	8017020 <RegionEU868ChannelAdd+0xcc>
 8017016:	7bbb      	ldrb	r3, [r7, #14]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d001      	beq.n	8017020 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801701c:	2306      	movs	r3, #6
 801701e:	e035      	b.n	801708c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017020:	7bfb      	ldrb	r3, [r7, #15]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d001      	beq.n	801702a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017026:	2305      	movs	r3, #5
 8017028:	e030      	b.n	801708c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801702a:	7bbb      	ldrb	r3, [r7, #14]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d001      	beq.n	8017034 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017030:	2304      	movs	r3, #4
 8017032:	e02b      	b.n	801708c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017034:	4b17      	ldr	r3, [pc, #92]	; (8017094 <RegionEU868ChannelAdd+0x140>)
 8017036:	6819      	ldr	r1, [r3, #0]
 8017038:	7b7a      	ldrb	r2, [r7, #13]
 801703a:	4613      	mov	r3, r2
 801703c:	005b      	lsls	r3, r3, #1
 801703e:	4413      	add	r3, r2
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	18c8      	adds	r0, r1, r3
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	220c      	movs	r2, #12
 801704a:	4619      	mov	r1, r3
 801704c:	f001 faab 	bl	80185a6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017050:	4b10      	ldr	r3, [pc, #64]	; (8017094 <RegionEU868ChannelAdd+0x140>)
 8017052:	6819      	ldr	r1, [r3, #0]
 8017054:	7b7a      	ldrb	r2, [r7, #13]
 8017056:	7b38      	ldrb	r0, [r7, #12]
 8017058:	4613      	mov	r3, r2
 801705a:	005b      	lsls	r3, r3, #1
 801705c:	4413      	add	r3, r2
 801705e:	009b      	lsls	r3, r3, #2
 8017060:	440b      	add	r3, r1
 8017062:	3309      	adds	r3, #9
 8017064:	4602      	mov	r2, r0
 8017066:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017068:	4b0a      	ldr	r3, [pc, #40]	; (8017094 <RegionEU868ChannelAdd+0x140>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017070:	b21a      	sxth	r2, r3
 8017072:	7b7b      	ldrb	r3, [r7, #13]
 8017074:	2101      	movs	r1, #1
 8017076:	fa01 f303 	lsl.w	r3, r1, r3
 801707a:	b21b      	sxth	r3, r3
 801707c:	4313      	orrs	r3, r2
 801707e:	b21a      	sxth	r2, r3
 8017080:	4b04      	ldr	r3, [pc, #16]	; (8017094 <RegionEU868ChannelAdd+0x140>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	b292      	uxth	r2, r2
 8017086:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801708a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801708c:	4618      	mov	r0, r3
 801708e:	3710      	adds	r7, #16
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	20001a2c 	.word	0x20001a2c

08017098 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b086      	sub	sp, #24
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80170a6:	7dfb      	ldrb	r3, [r7, #23]
 80170a8:	2b02      	cmp	r3, #2
 80170aa:	d801      	bhi.n	80170b0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80170ac:	2300      	movs	r3, #0
 80170ae:	e016      	b.n	80170de <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80170b0:	4b0d      	ldr	r3, [pc, #52]	; (80170e8 <RegionEU868ChannelsRemove+0x50>)
 80170b2:	6819      	ldr	r1, [r3, #0]
 80170b4:	7dfa      	ldrb	r2, [r7, #23]
 80170b6:	4613      	mov	r3, r2
 80170b8:	005b      	lsls	r3, r3, #1
 80170ba:	4413      	add	r3, r2
 80170bc:	009b      	lsls	r3, r3, #2
 80170be:	440b      	add	r3, r1
 80170c0:	461a      	mov	r2, r3
 80170c2:	2300      	movs	r3, #0
 80170c4:	6013      	str	r3, [r2, #0]
 80170c6:	6053      	str	r3, [r2, #4]
 80170c8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80170ca:	4b07      	ldr	r3, [pc, #28]	; (80170e8 <RegionEU868ChannelsRemove+0x50>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80170d2:	7df9      	ldrb	r1, [r7, #23]
 80170d4:	2210      	movs	r2, #16
 80170d6:	4618      	mov	r0, r3
 80170d8:	f7fe f91e 	bl	8015318 <RegionCommonChanDisable>
 80170dc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3718      	adds	r7, #24
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	bf00      	nop
 80170e8:	20001a2c 	.word	0x20001a2c

080170ec <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80170ec:	b480      	push	{r7}
 80170ee:	b085      	sub	sp, #20
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	4603      	mov	r3, r0
 80170f4:	71fb      	strb	r3, [r7, #7]
 80170f6:	460b      	mov	r3, r1
 80170f8:	71bb      	strb	r3, [r7, #6]
 80170fa:	4613      	mov	r3, r2
 80170fc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80170fe:	79ba      	ldrb	r2, [r7, #6]
 8017100:	797b      	ldrb	r3, [r7, #5]
 8017102:	1ad3      	subs	r3, r2, r3
 8017104:	b2db      	uxtb	r3, r3
 8017106:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801710c:	2b00      	cmp	r3, #0
 801710e:	da01      	bge.n	8017114 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017110:	2300      	movs	r3, #0
 8017112:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017114:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017116:	4618      	mov	r0, r3
 8017118:	3714      	adds	r7, #20
 801711a:	46bd      	mov	sp, r7
 801711c:	bc80      	pop	{r7}
 801711e:	4770      	bx	lr

08017120 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b084      	sub	sp, #16
 8017124:	af00      	add	r7, sp, #0
 8017126:	603b      	str	r3, [r7, #0]
 8017128:	4603      	mov	r3, r0
 801712a:	71fb      	strb	r3, [r7, #7]
 801712c:	460b      	mov	r3, r1
 801712e:	71bb      	strb	r3, [r7, #6]
 8017130:	4613      	mov	r3, r2
 8017132:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8017134:	79fb      	ldrb	r3, [r7, #7]
 8017136:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8017138:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801713c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017140:	4611      	mov	r1, r2
 8017142:	4618      	mov	r0, r3
 8017144:	f7fe fdd3 	bl	8015cee <RegionCommonLimitTxPower>
 8017148:	4603      	mov	r3, r0
 801714a:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801714c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017150:	2b04      	cmp	r3, #4
 8017152:	d106      	bne.n	8017162 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017158:	2b02      	cmp	r3, #2
 801715a:	bfb8      	it	lt
 801715c:	2302      	movlt	r3, #2
 801715e:	73fb      	strb	r3, [r7, #15]
 8017160:	e00d      	b.n	801717e <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8017162:	2204      	movs	r2, #4
 8017164:	2100      	movs	r1, #0
 8017166:	6838      	ldr	r0, [r7, #0]
 8017168:	f7fe f90a 	bl	8015380 <RegionCommonCountChannels>
 801716c:	4603      	mov	r3, r0
 801716e:	2b31      	cmp	r3, #49	; 0x31
 8017170:	d805      	bhi.n	801717e <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8017172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017176:	2b05      	cmp	r3, #5
 8017178:	bfb8      	it	lt
 801717a:	2305      	movlt	r3, #5
 801717c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801717e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017182:	4618      	mov	r0, r3
 8017184:	3710      	adds	r7, #16
 8017186:	46bd      	mov	sp, r7
 8017188:	bd80      	pop	{r7, pc}
	...

0801718c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b082      	sub	sp, #8
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017194:	4b18      	ldr	r3, [pc, #96]	; (80171f8 <VerifyRfFreq+0x6c>)
 8017196:	6a1b      	ldr	r3, [r3, #32]
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	4798      	blx	r3
 801719c:	4603      	mov	r3, r0
 801719e:	f083 0301 	eor.w	r3, r3, #1
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d001      	beq.n	80171ac <VerifyRfFreq+0x20>
    {
        return false;
 80171a8:	2300      	movs	r3, #0
 80171aa:	e021      	b.n	80171f0 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	4a13      	ldr	r2, [pc, #76]	; (80171fc <VerifyRfFreq+0x70>)
 80171b0:	4293      	cmp	r3, r2
 80171b2:	d910      	bls.n	80171d6 <VerifyRfFreq+0x4a>
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	4a12      	ldr	r2, [pc, #72]	; (8017200 <VerifyRfFreq+0x74>)
 80171b8:	4293      	cmp	r3, r2
 80171ba:	d80c      	bhi.n	80171d6 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	4b11      	ldr	r3, [pc, #68]	; (8017204 <VerifyRfFreq+0x78>)
 80171c0:	4413      	add	r3, r2
 80171c2:	4a11      	ldr	r2, [pc, #68]	; (8017208 <VerifyRfFreq+0x7c>)
 80171c4:	fba2 1203 	umull	r1, r2, r2, r3
 80171c8:	0c92      	lsrs	r2, r2, #18
 80171ca:	4910      	ldr	r1, [pc, #64]	; (801720c <VerifyRfFreq+0x80>)
 80171cc:	fb01 f202 	mul.w	r2, r1, r2
 80171d0:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80171d2:	2a00      	cmp	r2, #0
 80171d4:	d001      	beq.n	80171da <VerifyRfFreq+0x4e>
    {
        return false;
 80171d6:	2300      	movs	r3, #0
 80171d8:	e00a      	b.n	80171f0 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	4a0c      	ldr	r2, [pc, #48]	; (8017210 <VerifyRfFreq+0x84>)
 80171de:	4293      	cmp	r3, r2
 80171e0:	d903      	bls.n	80171ea <VerifyRfFreq+0x5e>
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	4a06      	ldr	r2, [pc, #24]	; (8017200 <VerifyRfFreq+0x74>)
 80171e6:	4293      	cmp	r3, r2
 80171e8:	d901      	bls.n	80171ee <VerifyRfFreq+0x62>
    {
        return false;
 80171ea:	2300      	movs	r3, #0
 80171ec:	e000      	b.n	80171f0 <VerifyRfFreq+0x64>
    }
    return true;
 80171ee:	2301      	movs	r3, #1
}
 80171f0:	4618      	mov	r0, r3
 80171f2:	3708      	adds	r7, #8
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}
 80171f8:	0801e0d4 	.word	0x0801e0d4
 80171fc:	3708709f 	.word	0x3708709f
 8017200:	374886e0 	.word	0x374886e0
 8017204:	c8f78f60 	.word	0xc8f78f60
 8017208:	6fd91d85 	.word	0x6fd91d85
 801720c:	000927c0 	.word	0x000927c0
 8017210:	35c8015f 	.word	0x35c8015f

08017214 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017214:	b590      	push	{r4, r7, lr}
 8017216:	b089      	sub	sp, #36	; 0x24
 8017218:	af04      	add	r7, sp, #16
 801721a:	4603      	mov	r3, r0
 801721c:	460a      	mov	r2, r1
 801721e:	71fb      	strb	r3, [r7, #7]
 8017220:	4613      	mov	r3, r2
 8017222:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017228:	4a0f      	ldr	r2, [pc, #60]	; (8017268 <GetTimeOnAir+0x54>)
 801722a:	5cd3      	ldrb	r3, [r2, r3]
 801722c:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801722e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017232:	490e      	ldr	r1, [pc, #56]	; (801726c <GetTimeOnAir+0x58>)
 8017234:	4618      	mov	r0, r3
 8017236:	f7fe fd6f 	bl	8015d18 <RegionCommonGetBandwidth>
 801723a:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801723c:	4b0c      	ldr	r3, [pc, #48]	; (8017270 <GetTimeOnAir+0x5c>)
 801723e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017240:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017244:	88bb      	ldrh	r3, [r7, #4]
 8017246:	b2db      	uxtb	r3, r3
 8017248:	2101      	movs	r1, #1
 801724a:	9103      	str	r1, [sp, #12]
 801724c:	9302      	str	r3, [sp, #8]
 801724e:	2300      	movs	r3, #0
 8017250:	9301      	str	r3, [sp, #4]
 8017252:	2308      	movs	r3, #8
 8017254:	9300      	str	r3, [sp, #0]
 8017256:	2301      	movs	r3, #1
 8017258:	68b9      	ldr	r1, [r7, #8]
 801725a:	2001      	movs	r0, #1
 801725c:	47a0      	blx	r4
 801725e:	4603      	mov	r3, r0
}
 8017260:	4618      	mov	r0, r3
 8017262:	3714      	adds	r7, #20
 8017264:	46bd      	mov	sp, r7
 8017266:	bd90      	pop	{r4, r7, pc}
 8017268:	0801e050 	.word	0x0801e050
 801726c:	0801e060 	.word	0x0801e060
 8017270:	0801e0d4 	.word	0x0801e0d4

08017274 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b088      	sub	sp, #32
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801727c:	2300      	movs	r3, #0
 801727e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	3b01      	subs	r3, #1
 8017286:	2b37      	cmp	r3, #55	; 0x37
 8017288:	f200 8136 	bhi.w	80174f8 <RegionUS915GetPhyParam+0x284>
 801728c:	a201      	add	r2, pc, #4	; (adr r2, 8017294 <RegionUS915GetPhyParam+0x20>)
 801728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017292:	bf00      	nop
 8017294:	08017375 	.word	0x08017375
 8017298:	0801737b 	.word	0x0801737b
 801729c:	080174f9 	.word	0x080174f9
 80172a0:	080174f9 	.word	0x080174f9
 80172a4:	080174f9 	.word	0x080174f9
 80172a8:	08017381 	.word	0x08017381
 80172ac:	080174f9 	.word	0x080174f9
 80172b0:	080173bb 	.word	0x080173bb
 80172b4:	080174f9 	.word	0x080174f9
 80172b8:	080173c1 	.word	0x080173c1
 80172bc:	080173c7 	.word	0x080173c7
 80172c0:	080173cd 	.word	0x080173cd
 80172c4:	080173d3 	.word	0x080173d3
 80172c8:	080173e3 	.word	0x080173e3
 80172cc:	080173f3 	.word	0x080173f3
 80172d0:	080173f9 	.word	0x080173f9
 80172d4:	08017401 	.word	0x08017401
 80172d8:	08017409 	.word	0x08017409
 80172dc:	08017411 	.word	0x08017411
 80172e0:	08017419 	.word	0x08017419
 80172e4:	08017421 	.word	0x08017421
 80172e8:	08017435 	.word	0x08017435
 80172ec:	0801743b 	.word	0x0801743b
 80172f0:	08017441 	.word	0x08017441
 80172f4:	08017447 	.word	0x08017447
 80172f8:	08017453 	.word	0x08017453
 80172fc:	0801745f 	.word	0x0801745f
 8017300:	08017465 	.word	0x08017465
 8017304:	0801746d 	.word	0x0801746d
 8017308:	08017473 	.word	0x08017473
 801730c:	08017479 	.word	0x08017479
 8017310:	0801747f 	.word	0x0801747f
 8017314:	08017387 	.word	0x08017387
 8017318:	080174f9 	.word	0x080174f9
 801731c:	080174f9 	.word	0x080174f9
 8017320:	080174f9 	.word	0x080174f9
 8017324:	080174f9 	.word	0x080174f9
 8017328:	080174f9 	.word	0x080174f9
 801732c:	080174f9 	.word	0x080174f9
 8017330:	080174f9 	.word	0x080174f9
 8017334:	080174f9 	.word	0x080174f9
 8017338:	080174f9 	.word	0x080174f9
 801733c:	080174f9 	.word	0x080174f9
 8017340:	080174f9 	.word	0x080174f9
 8017344:	080174f9 	.word	0x080174f9
 8017348:	080174f9 	.word	0x080174f9
 801734c:	08017487 	.word	0x08017487
 8017350:	0801749b 	.word	0x0801749b
 8017354:	080174a9 	.word	0x080174a9
 8017358:	080174af 	.word	0x080174af
 801735c:	080174f9 	.word	0x080174f9
 8017360:	080174b5 	.word	0x080174b5
 8017364:	080174c9 	.word	0x080174c9
 8017368:	080174cf 	.word	0x080174cf
 801736c:	080174d5 	.word	0x080174d5
 8017370:	080174e5 	.word	0x080174e5
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017374:	2308      	movs	r3, #8
 8017376:	61bb      	str	r3, [r7, #24]
            break;
 8017378:	e0bf      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801737a:	2300      	movs	r3, #0
 801737c:	61bb      	str	r3, [r7, #24]
            break;
 801737e:	e0bc      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017380:	2300      	movs	r3, #0
 8017382:	61bb      	str	r3, [r7, #24]
            break;
 8017384:	e0b9      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801738c:	733b      	strb	r3, [r7, #12]
 801738e:	2304      	movs	r3, #4
 8017390:	737b      	strb	r3, [r7, #13]
 8017392:	2300      	movs	r3, #0
 8017394:	73bb      	strb	r3, [r7, #14]
 8017396:	2348      	movs	r3, #72	; 0x48
 8017398:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801739a:	4b5b      	ldr	r3, [pc, #364]	; (8017508 <RegionUS915GetPhyParam+0x294>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80173a2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80173a4:	4b58      	ldr	r3, [pc, #352]	; (8017508 <RegionUS915GetPhyParam+0x294>)
 80173a6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80173a8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80173aa:	f107 030c 	add.w	r3, r7, #12
 80173ae:	4618      	mov	r0, r3
 80173b0:	f7fe fc5f 	bl	8015c72 <RegionCommonGetNextLowerTxDr>
 80173b4:	4603      	mov	r3, r0
 80173b6:	61bb      	str	r3, [r7, #24]
            break;
 80173b8:	e09f      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 80173ba:	2300      	movs	r3, #0
 80173bc:	61bb      	str	r3, [r7, #24]
            break;
 80173be:	e09c      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 80173c0:	2300      	movs	r3, #0
 80173c2:	61bb      	str	r3, [r7, #24]
            break;
 80173c4:	e099      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80173c6:	2340      	movs	r3, #64	; 0x40
 80173c8:	61bb      	str	r3, [r7, #24]
            break;
 80173ca:	e096      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80173cc:	2320      	movs	r3, #32
 80173ce:	61bb      	str	r3, [r7, #24]
            break;
 80173d0:	e093      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80173d8:	461a      	mov	r2, r3
 80173da:	4b4c      	ldr	r3, [pc, #304]	; (801750c <RegionUS915GetPhyParam+0x298>)
 80173dc:	5c9b      	ldrb	r3, [r3, r2]
 80173de:	61bb      	str	r3, [r7, #24]
            break;
 80173e0:	e08b      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80173e8:	461a      	mov	r2, r3
 80173ea:	4b49      	ldr	r3, [pc, #292]	; (8017510 <RegionUS915GetPhyParam+0x29c>)
 80173ec:	5c9b      	ldrb	r3, [r3, r2]
 80173ee:	61bb      	str	r3, [r7, #24]
            break;
 80173f0:	e083      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 80173f2:	2300      	movs	r3, #0
 80173f4:	61bb      	str	r3, [r7, #24]
            break;
 80173f6:	e080      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 80173f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80173fc:	61bb      	str	r3, [r7, #24]
            break;
 80173fe:	e07c      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017404:	61bb      	str	r3, [r7, #24]
            break;
 8017406:	e078      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017408:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801740c:	61bb      	str	r3, [r7, #24]
            break;
 801740e:	e074      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017410:	f241 3388 	movw	r3, #5000	; 0x1388
 8017414:	61bb      	str	r3, [r7, #24]
            break;
 8017416:	e070      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017418:	f241 7370 	movw	r3, #6000	; 0x1770
 801741c:	61bb      	str	r3, [r7, #24]
            break;
 801741e:	e06c      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017420:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017424:	483b      	ldr	r0, [pc, #236]	; (8017514 <RegionUS915GetPhyParam+0x2a0>)
 8017426:	f001 f8a7 	bl	8018578 <randr>
 801742a:	4603      	mov	r3, r0
 801742c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017430:	61bb      	str	r3, [r7, #24]
            break;
 8017432:	e062      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017434:	2300      	movs	r3, #0
 8017436:	61bb      	str	r3, [r7, #24]
            break;
 8017438:	e05f      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801743a:	4b37      	ldr	r3, [pc, #220]	; (8017518 <RegionUS915GetPhyParam+0x2a4>)
 801743c:	61bb      	str	r3, [r7, #24]
            break;
 801743e:	e05c      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017440:	2308      	movs	r3, #8
 8017442:	61bb      	str	r3, [r7, #24]
            break;
 8017444:	e059      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017446:	4b30      	ldr	r3, [pc, #192]	; (8017508 <RegionUS915GetPhyParam+0x294>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801744e:	61bb      	str	r3, [r7, #24]
            break;
 8017450:	e053      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017452:	4b2d      	ldr	r3, [pc, #180]	; (8017508 <RegionUS915GetPhyParam+0x294>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801745a:	61bb      	str	r3, [r7, #24]
            break;
 801745c:	e04d      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801745e:	2348      	movs	r3, #72	; 0x48
 8017460:	61bb      	str	r3, [r7, #24]
            break;
 8017462:	e04a      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017464:	4b28      	ldr	r3, [pc, #160]	; (8017508 <RegionUS915GetPhyParam+0x294>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	61bb      	str	r3, [r7, #24]
            break;
 801746a:	e046      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801746c:	2300      	movs	r3, #0
 801746e:	61bb      	str	r3, [r7, #24]
            break;
 8017470:	e043      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017472:	2300      	movs	r3, #0
 8017474:	61bb      	str	r3, [r7, #24]
            break;
 8017476:	e040      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017478:	4b28      	ldr	r3, [pc, #160]	; (801751c <RegionUS915GetPhyParam+0x2a8>)
 801747a:	61bb      	str	r3, [r7, #24]
            break;
 801747c:	e03d      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801747e:	f04f 0300 	mov.w	r3, #0
 8017482:	61bb      	str	r3, [r7, #24]
            break;
 8017484:	e039      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	791b      	ldrb	r3, [r3, #4]
 801748a:	4a25      	ldr	r2, [pc, #148]	; (8017520 <RegionUS915GetPhyParam+0x2ac>)
 801748c:	4922      	ldr	r1, [pc, #136]	; (8017518 <RegionUS915GetPhyParam+0x2a4>)
 801748e:	4618      	mov	r0, r3
 8017490:	f7fd fd51 	bl	8014f36 <RegionBaseUSCalcDownlinkFrequency>
 8017494:	4603      	mov	r3, r0
 8017496:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017498:	e02f      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801749a:	2317      	movs	r3, #23
 801749c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801749e:	2304      	movs	r3, #4
 80174a0:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80174a2:	2303      	movs	r3, #3
 80174a4:	76bb      	strb	r3, [r7, #26]
            break;
 80174a6:	e028      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80174a8:	2308      	movs	r3, #8
 80174aa:	61bb      	str	r3, [r7, #24]
            break;
 80174ac:	e025      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80174ae:	2308      	movs	r3, #8
 80174b0:	61bb      	str	r3, [r7, #24]
            break;
 80174b2:	e022      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	791b      	ldrb	r3, [r3, #4]
 80174b8:	4a19      	ldr	r2, [pc, #100]	; (8017520 <RegionUS915GetPhyParam+0x2ac>)
 80174ba:	4917      	ldr	r1, [pc, #92]	; (8017518 <RegionUS915GetPhyParam+0x2a4>)
 80174bc:	4618      	mov	r0, r3
 80174be:	f7fd fd3a 	bl	8014f36 <RegionBaseUSCalcDownlinkFrequency>
 80174c2:	4603      	mov	r3, r0
 80174c4:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80174c6:	e018      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80174c8:	2308      	movs	r3, #8
 80174ca:	61bb      	str	r3, [r7, #24]
            break;
 80174cc:	e015      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80174ce:	2308      	movs	r3, #8
 80174d0:	61bb      	str	r3, [r7, #24]
            break;
 80174d2:	e012      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174da:	461a      	mov	r2, r3
 80174dc:	4b11      	ldr	r3, [pc, #68]	; (8017524 <RegionUS915GetPhyParam+0x2b0>)
 80174de:	5c9b      	ldrb	r3, [r3, r2]
 80174e0:	61bb      	str	r3, [r7, #24]
            break;
 80174e2:	e00a      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174ea:	490f      	ldr	r1, [pc, #60]	; (8017528 <RegionUS915GetPhyParam+0x2b4>)
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7fe fc13 	bl	8015d18 <RegionCommonGetBandwidth>
 80174f2:	4603      	mov	r3, r0
 80174f4:	61bb      	str	r3, [r7, #24]
            break;
 80174f6:	e000      	b.n	80174fa <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 80174f8:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80174fa:	69bb      	ldr	r3, [r7, #24]
 80174fc:	61fb      	str	r3, [r7, #28]
 80174fe:	69fb      	ldr	r3, [r7, #28]
}
 8017500:	4618      	mov	r0, r3
 8017502:	3720      	adds	r7, #32
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}
 8017508:	20001a38 	.word	0x20001a38
 801750c:	0801e0b4 	.word	0x0801e0b4
 8017510:	0801e0c4 	.word	0x0801e0c4
 8017514:	fffffc18 	.word	0xfffffc18
 8017518:	370870a0 	.word	0x370870a0
 801751c:	4200999a 	.word	0x4200999a
 8017520:	000927c0 	.word	0x000927c0
 8017524:	0801e050 	.word	0x0801e050
 8017528:	0801e060 	.word	0x0801e060

0801752c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801752c:	b590      	push	{r4, r7, lr}
 801752e:	b085      	sub	sp, #20
 8017530:	af02      	add	r7, sp, #8
 8017532:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017534:	4b11      	ldr	r3, [pc, #68]	; (801757c <RegionUS915SetBandTxDone+0x50>)
 8017536:	681a      	ldr	r2, [r3, #0]
 8017538:	4b11      	ldr	r3, [pc, #68]	; (8017580 <RegionUS915SetBandTxDone+0x54>)
 801753a:	6819      	ldr	r1, [r3, #0]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	4618      	mov	r0, r3
 8017542:	4603      	mov	r3, r0
 8017544:	005b      	lsls	r3, r3, #1
 8017546:	4403      	add	r3, r0
 8017548:	009b      	lsls	r3, r3, #2
 801754a:	440b      	add	r3, r1
 801754c:	3309      	adds	r3, #9
 801754e:	781b      	ldrb	r3, [r3, #0]
 8017550:	4619      	mov	r1, r3
 8017552:	460b      	mov	r3, r1
 8017554:	005b      	lsls	r3, r3, #1
 8017556:	440b      	add	r3, r1
 8017558:	00db      	lsls	r3, r3, #3
 801755a:	18d0      	adds	r0, r2, r3
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6899      	ldr	r1, [r3, #8]
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	785c      	ldrb	r4, [r3, #1]
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	691a      	ldr	r2, [r3, #16]
 8017568:	9200      	str	r2, [sp, #0]
 801756a:	68db      	ldr	r3, [r3, #12]
 801756c:	4622      	mov	r2, r4
 801756e:	f7fd ff59 	bl	8015424 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8017572:	bf00      	nop
 8017574:	370c      	adds	r7, #12
 8017576:	46bd      	mov	sp, r7
 8017578:	bd90      	pop	{r4, r7, pc}
 801757a:	bf00      	nop
 801757c:	20001a3c 	.word	0x20001a3c
 8017580:	20001a38 	.word	0x20001a38

08017584 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b08a      	sub	sp, #40	; 0x28
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801758c:	2301      	movs	r3, #1
 801758e:	81bb      	strh	r3, [r7, #12]
 8017590:	2300      	movs	r3, #0
 8017592:	73bb      	strb	r3, [r7, #14]
 8017594:	2300      	movs	r3, #0
 8017596:	613b      	str	r3, [r7, #16]
 8017598:	2300      	movs	r3, #0
 801759a:	617b      	str	r3, [r7, #20]
 801759c:	2300      	movs	r3, #0
 801759e:	61bb      	str	r3, [r7, #24]
 80175a0:	2300      	movs	r3, #0
 80175a2:	61fb      	str	r3, [r7, #28]
 80175a4:	2300      	movs	r3, #0
 80175a6:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	7b1b      	ldrb	r3, [r3, #12]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d007      	beq.n	80175c2 <RegionUS915InitDefaults+0x3e>
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f2c0 8104 	blt.w	80177c0 <RegionUS915InitDefaults+0x23c>
 80175b8:	3b01      	subs	r3, #1
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	f200 8100 	bhi.w	80177c0 <RegionUS915InitDefaults+0x23c>
 80175c0:	e0ce      	b.n	8017760 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	f000 80fc 	beq.w	80177c4 <RegionUS915InitDefaults+0x240>
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	685b      	ldr	r3, [r3, #4]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	f000 80f7 	beq.w	80177c4 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	4a7c      	ldr	r2, [pc, #496]	; (80177cc <RegionUS915InitDefaults+0x248>)
 80175dc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	685b      	ldr	r3, [r3, #4]
 80175e2:	4a7b      	ldr	r2, [pc, #492]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 80175e4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	689b      	ldr	r3, [r3, #8]
 80175ea:	4a7a      	ldr	r2, [pc, #488]	; (80177d4 <RegionUS915InitDefaults+0x250>)
 80175ec:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80175ee:	4b77      	ldr	r3, [pc, #476]	; (80177cc <RegionUS915InitDefaults+0x248>)
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	2200      	movs	r2, #0
 80175f4:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80175f6:	4b75      	ldr	r3, [pc, #468]	; (80177cc <RegionUS915InitDefaults+0x248>)
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	2200      	movs	r2, #0
 80175fc:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80175fe:	4b75      	ldr	r3, [pc, #468]	; (80177d4 <RegionUS915InitDefaults+0x250>)
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	f107 010c 	add.w	r1, r7, #12
 8017606:	2218      	movs	r2, #24
 8017608:	4618      	mov	r0, r3
 801760a:	f000 ffcc 	bl	80185a6 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801760e:	2300      	movs	r3, #0
 8017610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017614:	e02e      	b.n	8017674 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8017616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801761a:	4a6f      	ldr	r2, [pc, #444]	; (80177d8 <RegionUS915InitDefaults+0x254>)
 801761c:	fb03 f202 	mul.w	r2, r3, r2
 8017620:	4b6e      	ldr	r3, [pc, #440]	; (80177dc <RegionUS915InitDefaults+0x258>)
 8017622:	4413      	add	r3, r2
 8017624:	4a6a      	ldr	r2, [pc, #424]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017626:	6811      	ldr	r1, [r2, #0]
 8017628:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801762c:	4618      	mov	r0, r3
 801762e:	4613      	mov	r3, r2
 8017630:	005b      	lsls	r3, r3, #1
 8017632:	4413      	add	r3, r2
 8017634:	009b      	lsls	r3, r3, #2
 8017636:	440b      	add	r3, r1
 8017638:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801763a:	4b65      	ldr	r3, [pc, #404]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 801763c:	6819      	ldr	r1, [r3, #0]
 801763e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017642:	4613      	mov	r3, r2
 8017644:	005b      	lsls	r3, r3, #1
 8017646:	4413      	add	r3, r2
 8017648:	009b      	lsls	r3, r3, #2
 801764a:	440b      	add	r3, r1
 801764c:	3308      	adds	r3, #8
 801764e:	2230      	movs	r2, #48	; 0x30
 8017650:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017652:	4b5f      	ldr	r3, [pc, #380]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017654:	6819      	ldr	r1, [r3, #0]
 8017656:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801765a:	4613      	mov	r3, r2
 801765c:	005b      	lsls	r3, r3, #1
 801765e:	4413      	add	r3, r2
 8017660:	009b      	lsls	r3, r3, #2
 8017662:	440b      	add	r3, r1
 8017664:	3309      	adds	r3, #9
 8017666:	2200      	movs	r2, #0
 8017668:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801766a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801766e:	3301      	adds	r3, #1
 8017670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017678:	2b3f      	cmp	r3, #63	; 0x3f
 801767a:	d9cc      	bls.n	8017616 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801767c:	2340      	movs	r3, #64	; 0x40
 801767e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017682:	e02f      	b.n	80176e4 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8017684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017688:	3b40      	subs	r3, #64	; 0x40
 801768a:	4a55      	ldr	r2, [pc, #340]	; (80177e0 <RegionUS915InitDefaults+0x25c>)
 801768c:	fb03 f202 	mul.w	r2, r3, r2
 8017690:	4b54      	ldr	r3, [pc, #336]	; (80177e4 <RegionUS915InitDefaults+0x260>)
 8017692:	4413      	add	r3, r2
 8017694:	4a4e      	ldr	r2, [pc, #312]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017696:	6811      	ldr	r1, [r2, #0]
 8017698:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801769c:	4618      	mov	r0, r3
 801769e:	4613      	mov	r3, r2
 80176a0:	005b      	lsls	r3, r3, #1
 80176a2:	4413      	add	r3, r2
 80176a4:	009b      	lsls	r3, r3, #2
 80176a6:	440b      	add	r3, r1
 80176a8:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80176aa:	4b49      	ldr	r3, [pc, #292]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 80176ac:	6819      	ldr	r1, [r3, #0]
 80176ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80176b2:	4613      	mov	r3, r2
 80176b4:	005b      	lsls	r3, r3, #1
 80176b6:	4413      	add	r3, r2
 80176b8:	009b      	lsls	r3, r3, #2
 80176ba:	440b      	add	r3, r1
 80176bc:	3308      	adds	r3, #8
 80176be:	2244      	movs	r2, #68	; 0x44
 80176c0:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80176c2:	4b43      	ldr	r3, [pc, #268]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 80176c4:	6819      	ldr	r1, [r3, #0]
 80176c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80176ca:	4613      	mov	r3, r2
 80176cc:	005b      	lsls	r3, r3, #1
 80176ce:	4413      	add	r3, r2
 80176d0:	009b      	lsls	r3, r3, #2
 80176d2:	440b      	add	r3, r1
 80176d4:	3309      	adds	r3, #9
 80176d6:	2200      	movs	r2, #0
 80176d8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80176da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80176de:	3301      	adds	r3, #1
 80176e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80176e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80176e8:	2b47      	cmp	r3, #71	; 0x47
 80176ea:	d9cb      	bls.n	8017684 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80176ec:	4b38      	ldr	r3, [pc, #224]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80176f4:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80176f8:	4b35      	ldr	r3, [pc, #212]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017700:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017704:	4b32      	ldr	r3, [pc, #200]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801770c:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017710:	4b2f      	ldr	r3, [pc, #188]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017718:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801771c:	4b2c      	ldr	r3, [pc, #176]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	22ff      	movs	r2, #255	; 0xff
 8017722:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017726:	4b2a      	ldr	r3, [pc, #168]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	2200      	movs	r2, #0
 801772c:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017730:	4b27      	ldr	r3, [pc, #156]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017738:	4b25      	ldr	r3, [pc, #148]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017740:	2206      	movs	r2, #6
 8017742:	4619      	mov	r1, r3
 8017744:	f7fd fe48 	bl	80153d8 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017748:	4b20      	ldr	r3, [pc, #128]	; (80177cc <RegionUS915InitDefaults+0x248>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	4618      	mov	r0, r3
 801774e:	4b20      	ldr	r3, [pc, #128]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017756:	2206      	movs	r2, #6
 8017758:	4619      	mov	r1, r3
 801775a:	f7fd fe3d 	bl	80153d8 <RegionCommonChanMaskCopy>
            break;
 801775e:	e032      	b.n	80177c6 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017760:	4b1b      	ldr	r3, [pc, #108]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017768:	4b19      	ldr	r3, [pc, #100]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017770:	2206      	movs	r2, #6
 8017772:	4619      	mov	r1, r3
 8017774:	f7fd fe30 	bl	80153d8 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8017778:	2300      	movs	r3, #0
 801777a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801777e:	e01a      	b.n	80177b6 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017780:	4b12      	ldr	r3, [pc, #72]	; (80177cc <RegionUS915InitDefaults+0x248>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017788:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801778c:	4b10      	ldr	r3, [pc, #64]	; (80177d0 <RegionUS915InitDefaults+0x24c>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017794:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017798:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801779c:	4b0b      	ldr	r3, [pc, #44]	; (80177cc <RegionUS915InitDefaults+0x248>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80177a4:	4001      	ands	r1, r0
 80177a6:	b289      	uxth	r1, r1
 80177a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80177ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80177b0:	3301      	adds	r3, #1
 80177b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80177b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80177ba:	2b05      	cmp	r3, #5
 80177bc:	d9e0      	bls.n	8017780 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80177be:	e002      	b.n	80177c6 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80177c0:	bf00      	nop
 80177c2:	e000      	b.n	80177c6 <RegionUS915InitDefaults+0x242>
                return;
 80177c4:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80177c6:	3728      	adds	r7, #40	; 0x28
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}
 80177cc:	20001a34 	.word	0x20001a34
 80177d0:	20001a38 	.word	0x20001a38
 80177d4:	20001a3c 	.word	0x20001a3c
 80177d8:	00030d40 	.word	0x00030d40
 80177dc:	35c80160 	.word	0x35c80160
 80177e0:	00186a00 	.word	0x00186a00
 80177e4:	35d2afc0 	.word	0x35d2afc0

080177e8 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b082      	sub	sp, #8
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
 80177f0:	460b      	mov	r3, r1
 80177f2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80177f4:	78fb      	ldrb	r3, [r7, #3]
 80177f6:	2b0f      	cmp	r3, #15
 80177f8:	d867      	bhi.n	80178ca <RegionUS915Verify+0xe2>
 80177fa:	a201      	add	r2, pc, #4	; (adr r2, 8017800 <RegionUS915Verify+0x18>)
 80177fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017800:	08017841 	.word	0x08017841
 8017804:	080178cb 	.word	0x080178cb
 8017808:	080178cb 	.word	0x080178cb
 801780c:	080178cb 	.word	0x080178cb
 8017810:	080178cb 	.word	0x080178cb
 8017814:	0801784f 	.word	0x0801784f
 8017818:	0801786d 	.word	0x0801786d
 801781c:	0801788b 	.word	0x0801788b
 8017820:	080178cb 	.word	0x080178cb
 8017824:	080178a9 	.word	0x080178a9
 8017828:	080178a9 	.word	0x080178a9
 801782c:	080178cb 	.word	0x080178cb
 8017830:	080178cb 	.word	0x080178cb
 8017834:	080178cb 	.word	0x080178cb
 8017838:	080178cb 	.word	0x080178cb
 801783c:	080178c7 	.word	0x080178c7
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	4618      	mov	r0, r3
 8017846:	f7ff fca1 	bl	801718c <VerifyRfFreq>
 801784a:	4603      	mov	r3, r0
 801784c:	e03e      	b.n	80178cc <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	f993 3000 	ldrsb.w	r3, [r3]
 8017854:	2204      	movs	r2, #4
 8017856:	2100      	movs	r1, #0
 8017858:	4618      	mov	r0, r3
 801785a:	f7fd fd40 	bl	80152de <RegionCommonValueInRange>
 801785e:	4603      	mov	r3, r0
 8017860:	2b00      	cmp	r3, #0
 8017862:	bf14      	ite	ne
 8017864:	2301      	movne	r3, #1
 8017866:	2300      	moveq	r3, #0
 8017868:	b2db      	uxtb	r3, r3
 801786a:	e02f      	b.n	80178cc <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f993 3000 	ldrsb.w	r3, [r3]
 8017872:	2205      	movs	r2, #5
 8017874:	2100      	movs	r1, #0
 8017876:	4618      	mov	r0, r3
 8017878:	f7fd fd31 	bl	80152de <RegionCommonValueInRange>
 801787c:	4603      	mov	r3, r0
 801787e:	2b00      	cmp	r3, #0
 8017880:	bf14      	ite	ne
 8017882:	2301      	movne	r3, #1
 8017884:	2300      	moveq	r3, #0
 8017886:	b2db      	uxtb	r3, r3
 8017888:	e020      	b.n	80178cc <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f993 3000 	ldrsb.w	r3, [r3]
 8017890:	220d      	movs	r2, #13
 8017892:	2108      	movs	r1, #8
 8017894:	4618      	mov	r0, r3
 8017896:	f7fd fd22 	bl	80152de <RegionCommonValueInRange>
 801789a:	4603      	mov	r3, r0
 801789c:	2b00      	cmp	r3, #0
 801789e:	bf14      	ite	ne
 80178a0:	2301      	movne	r3, #1
 80178a2:	2300      	moveq	r3, #0
 80178a4:	b2db      	uxtb	r3, r3
 80178a6:	e011      	b.n	80178cc <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f993 3000 	ldrsb.w	r3, [r3]
 80178ae:	220e      	movs	r2, #14
 80178b0:	2100      	movs	r1, #0
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7fd fd13 	bl	80152de <RegionCommonValueInRange>
 80178b8:	4603      	mov	r3, r0
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	bf14      	ite	ne
 80178be:	2301      	movne	r3, #1
 80178c0:	2300      	moveq	r3, #0
 80178c2:	b2db      	uxtb	r3, r3
 80178c4:	e002      	b.n	80178cc <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80178c6:	2300      	movs	r3, #0
 80178c8:	e000      	b.n	80178cc <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80178ca:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80178d4:	b480      	push	{r7}
 80178d6:	b085      	sub	sp, #20
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	7a1b      	ldrb	r3, [r3, #8]
 80178e0:	2b10      	cmp	r3, #16
 80178e2:	d160      	bne.n	80179a6 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	685b      	ldr	r3, [r3, #4]
 80178e8:	330f      	adds	r3, #15
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d15c      	bne.n	80179aa <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80178f0:	2300      	movs	r3, #0
 80178f2:	73fb      	strb	r3, [r7, #15]
 80178f4:	2300      	movs	r3, #0
 80178f6:	73bb      	strb	r3, [r7, #14]
 80178f8:	e051      	b.n	801799e <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	685a      	ldr	r2, [r3, #4]
 80178fe:	7bbb      	ldrb	r3, [r7, #14]
 8017900:	4413      	add	r3, r2
 8017902:	7819      	ldrb	r1, [r3, #0]
 8017904:	4b2b      	ldr	r3, [pc, #172]	; (80179b4 <RegionUS915ApplyCFList+0xe0>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	7bfa      	ldrb	r2, [r7, #15]
 801790a:	b289      	uxth	r1, r1
 801790c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017910:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8017914:	4b27      	ldr	r3, [pc, #156]	; (80179b4 <RegionUS915ApplyCFList+0xe0>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	7bfa      	ldrb	r2, [r7, #15]
 801791a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801791e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	685a      	ldr	r2, [r3, #4]
 8017926:	7bbb      	ldrb	r3, [r7, #14]
 8017928:	3301      	adds	r3, #1
 801792a:	4413      	add	r3, r2
 801792c:	781b      	ldrb	r3, [r3, #0]
 801792e:	b29b      	uxth	r3, r3
 8017930:	021b      	lsls	r3, r3, #8
 8017932:	b299      	uxth	r1, r3
 8017934:	4b1f      	ldr	r3, [pc, #124]	; (80179b4 <RegionUS915ApplyCFList+0xe0>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	7bfa      	ldrb	r2, [r7, #15]
 801793a:	4301      	orrs	r1, r0
 801793c:	b289      	uxth	r1, r1
 801793e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017942:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8017946:	7bfb      	ldrb	r3, [r7, #15]
 8017948:	2b04      	cmp	r3, #4
 801794a:	d10f      	bne.n	801796c <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801794c:	4b19      	ldr	r3, [pc, #100]	; (80179b4 <RegionUS915ApplyCFList+0xe0>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	7bfa      	ldrb	r2, [r7, #15]
 8017952:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017956:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801795a:	4b16      	ldr	r3, [pc, #88]	; (80179b4 <RegionUS915ApplyCFList+0xe0>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	7bfa      	ldrb	r2, [r7, #15]
 8017960:	b2c9      	uxtb	r1, r1
 8017962:	b289      	uxth	r1, r1
 8017964:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017968:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801796c:	4b12      	ldr	r3, [pc, #72]	; (80179b8 <RegionUS915ApplyCFList+0xe4>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	7bfa      	ldrb	r2, [r7, #15]
 8017972:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017976:	4b0f      	ldr	r3, [pc, #60]	; (80179b4 <RegionUS915ApplyCFList+0xe0>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	7bfa      	ldrb	r2, [r7, #15]
 801797c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017980:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017984:	4b0c      	ldr	r3, [pc, #48]	; (80179b8 <RegionUS915ApplyCFList+0xe4>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	7bfa      	ldrb	r2, [r7, #15]
 801798a:	4001      	ands	r1, r0
 801798c:	b289      	uxth	r1, r1
 801798e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017992:	7bfb      	ldrb	r3, [r7, #15]
 8017994:	3301      	adds	r3, #1
 8017996:	73fb      	strb	r3, [r7, #15]
 8017998:	7bbb      	ldrb	r3, [r7, #14]
 801799a:	3302      	adds	r3, #2
 801799c:	73bb      	strb	r3, [r7, #14]
 801799e:	7bfb      	ldrb	r3, [r7, #15]
 80179a0:	2b04      	cmp	r3, #4
 80179a2:	d9aa      	bls.n	80178fa <RegionUS915ApplyCFList+0x26>
 80179a4:	e002      	b.n	80179ac <RegionUS915ApplyCFList+0xd8>
        return;
 80179a6:	bf00      	nop
 80179a8:	e000      	b.n	80179ac <RegionUS915ApplyCFList+0xd8>
        return;
 80179aa:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80179ac:	3714      	adds	r7, #20
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bc80      	pop	{r7}
 80179b2:	4770      	bx	lr
 80179b4:	20001a38 	.word	0x20001a38
 80179b8:	20001a34 	.word	0x20001a34

080179bc <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b084      	sub	sp, #16
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	2204      	movs	r2, #4
 80179ca:	2100      	movs	r1, #0
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7fd fcd7 	bl	8015380 <RegionCommonCountChannels>
 80179d2:	4603      	mov	r3, r0
 80179d4:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80179d6:	7bbb      	ldrb	r3, [r7, #14]
 80179d8:	2b01      	cmp	r3, #1
 80179da:	d804      	bhi.n	80179e6 <RegionUS915ChanMaskSet+0x2a>
 80179dc:	7bbb      	ldrb	r3, [r7, #14]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d001      	beq.n	80179e6 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80179e2:	2300      	movs	r3, #0
 80179e4:	e04a      	b.n	8017a7c <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	791b      	ldrb	r3, [r3, #4]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d002      	beq.n	80179f4 <RegionUS915ChanMaskSet+0x38>
 80179ee:	2b01      	cmp	r3, #1
 80179f0:	d036      	beq.n	8017a60 <RegionUS915ChanMaskSet+0xa4>
 80179f2:	e040      	b.n	8017a76 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80179f4:	4b23      	ldr	r3, [pc, #140]	; (8017a84 <RegionUS915ChanMaskSet+0xc8>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	2206      	movs	r2, #6
 8017a02:	4619      	mov	r1, r3
 8017a04:	f7fd fce8 	bl	80153d8 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8017a08:	4b1e      	ldr	r3, [pc, #120]	; (8017a84 <RegionUS915ChanMaskSet+0xc8>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8017a10:	4b1c      	ldr	r3, [pc, #112]	; (8017a84 <RegionUS915ChanMaskSet+0xc8>)
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	b2d2      	uxtb	r2, r2
 8017a16:	b292      	uxth	r2, r2
 8017a18:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017a1c:	4b19      	ldr	r3, [pc, #100]	; (8017a84 <RegionUS915ChanMaskSet+0xc8>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2200      	movs	r2, #0
 8017a22:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017a26:	2300      	movs	r3, #0
 8017a28:	73fb      	strb	r3, [r7, #15]
 8017a2a:	e015      	b.n	8017a58 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017a2c:	4b16      	ldr	r3, [pc, #88]	; (8017a88 <RegionUS915ChanMaskSet+0xcc>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	7bfa      	ldrb	r2, [r7, #15]
 8017a32:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017a36:	4b13      	ldr	r3, [pc, #76]	; (8017a84 <RegionUS915ChanMaskSet+0xc8>)
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	7bfa      	ldrb	r2, [r7, #15]
 8017a3c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017a40:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017a44:	4b10      	ldr	r3, [pc, #64]	; (8017a88 <RegionUS915ChanMaskSet+0xcc>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	7bfa      	ldrb	r2, [r7, #15]
 8017a4a:	4001      	ands	r1, r0
 8017a4c:	b289      	uxth	r1, r1
 8017a4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017a52:	7bfb      	ldrb	r3, [r7, #15]
 8017a54:	3301      	adds	r3, #1
 8017a56:	73fb      	strb	r3, [r7, #15]
 8017a58:	7bfb      	ldrb	r3, [r7, #15]
 8017a5a:	2b05      	cmp	r3, #5
 8017a5c:	d9e6      	bls.n	8017a2c <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8017a5e:	e00c      	b.n	8017a7a <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017a60:	4b08      	ldr	r3, [pc, #32]	; (8017a84 <RegionUS915ChanMaskSet+0xc8>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2206      	movs	r2, #6
 8017a6e:	4619      	mov	r1, r3
 8017a70:	f7fd fcb2 	bl	80153d8 <RegionCommonChanMaskCopy>
            break;
 8017a74:	e001      	b.n	8017a7a <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 8017a76:	2300      	movs	r3, #0
 8017a78:	e000      	b.n	8017a7c <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8017a7a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	3710      	adds	r7, #16
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}
 8017a84:	20001a38 	.word	0x20001a38
 8017a88:	20001a34 	.word	0x20001a34

08017a8c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b088      	sub	sp, #32
 8017a90:	af02      	add	r7, sp, #8
 8017a92:	60ba      	str	r2, [r7, #8]
 8017a94:	607b      	str	r3, [r7, #4]
 8017a96:	4603      	mov	r3, r0
 8017a98:	73fb      	strb	r3, [r7, #15]
 8017a9a:	460b      	mov	r3, r1
 8017a9c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8017aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017aa6:	2b0d      	cmp	r3, #13
 8017aa8:	bfa8      	it	ge
 8017aaa:	230d      	movge	r3, #13
 8017aac:	b25a      	sxtb	r2, r3
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ab8:	4916      	ldr	r1, [pc, #88]	; (8017b14 <RegionUS915ComputeRxWindowParameters+0x88>)
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7fe f92c 	bl	8015d18 <RegionCommonGetBandwidth>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	b2da      	uxtb	r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ace:	461a      	mov	r2, r3
 8017ad0:	4b11      	ldr	r3, [pc, #68]	; (8017b18 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8017ad2:	5c9a      	ldrb	r2, [r3, r2]
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ada:	4619      	mov	r1, r3
 8017adc:	4b0d      	ldr	r3, [pc, #52]	; (8017b14 <RegionUS915ComputeRxWindowParameters+0x88>)
 8017ade:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	4610      	mov	r0, r2
 8017ae6:	f7fd fe95 	bl	8015814 <RegionCommonComputeSymbolTimeLoRa>
 8017aea:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017aec:	4b0b      	ldr	r3, [pc, #44]	; (8017b1c <RegionUS915ComputeRxWindowParameters+0x90>)
 8017aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017af0:	4798      	blx	r3
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	3308      	adds	r3, #8
 8017af6:	687a      	ldr	r2, [r7, #4]
 8017af8:	320c      	adds	r2, #12
 8017afa:	7bb9      	ldrb	r1, [r7, #14]
 8017afc:	9201      	str	r2, [sp, #4]
 8017afe:	9300      	str	r3, [sp, #0]
 8017b00:	4603      	mov	r3, r0
 8017b02:	68ba      	ldr	r2, [r7, #8]
 8017b04:	6978      	ldr	r0, [r7, #20]
 8017b06:	f7fd feab 	bl	8015860 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8017b0a:	bf00      	nop
 8017b0c:	3718      	adds	r7, #24
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	bd80      	pop	{r7, pc}
 8017b12:	bf00      	nop
 8017b14:	0801e060 	.word	0x0801e060
 8017b18:	0801e050 	.word	0x0801e050
 8017b1c:	0801e0d4 	.word	0x0801e0d4

08017b20 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017b20:	b590      	push	{r4, r7, lr}
 8017b22:	b091      	sub	sp, #68	; 0x44
 8017b24:	af0a      	add	r7, sp, #40	; 0x28
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	785b      	ldrb	r3, [r3, #1]
 8017b2e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017b30:	2300      	movs	r3, #0
 8017b32:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8017b34:	2300      	movs	r3, #0
 8017b36:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017b3e:	4b34      	ldr	r3, [pc, #208]	; (8017c10 <RegionUS915RxConfig+0xf0>)
 8017b40:	685b      	ldr	r3, [r3, #4]
 8017b42:	4798      	blx	r3
 8017b44:	4603      	mov	r3, r0
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d001      	beq.n	8017b4e <RegionUS915RxConfig+0x2e>
    {
        return false;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	e05c      	b.n	8017c08 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	7cdb      	ldrb	r3, [r3, #19]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d109      	bne.n	8017b6a <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	781b      	ldrb	r3, [r3, #0]
 8017b5a:	f003 0307 	and.w	r3, r3, #7
 8017b5e:	4a2d      	ldr	r2, [pc, #180]	; (8017c14 <RegionUS915RxConfig+0xf4>)
 8017b60:	fb03 f202 	mul.w	r2, r3, r2
 8017b64:	4b2c      	ldr	r3, [pc, #176]	; (8017c18 <RegionUS915RxConfig+0xf8>)
 8017b66:	4413      	add	r3, r2
 8017b68:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8017b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b6e:	4a2b      	ldr	r2, [pc, #172]	; (8017c1c <RegionUS915RxConfig+0xfc>)
 8017b70:	5cd3      	ldrb	r3, [r2, r3]
 8017b72:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017b74:	4b26      	ldr	r3, [pc, #152]	; (8017c10 <RegionUS915RxConfig+0xf0>)
 8017b76:	68db      	ldr	r3, [r3, #12]
 8017b78:	6938      	ldr	r0, [r7, #16]
 8017b7a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017b7c:	4b24      	ldr	r3, [pc, #144]	; (8017c10 <RegionUS915RxConfig+0xf0>)
 8017b7e:	699c      	ldr	r4, [r3, #24]
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	789b      	ldrb	r3, [r3, #2]
 8017b84:	4618      	mov	r0, r3
 8017b86:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	689b      	ldr	r3, [r3, #8]
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	7c92      	ldrb	r2, [r2, #18]
 8017b94:	9209      	str	r2, [sp, #36]	; 0x24
 8017b96:	2201      	movs	r2, #1
 8017b98:	9208      	str	r2, [sp, #32]
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	9207      	str	r2, [sp, #28]
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	9206      	str	r2, [sp, #24]
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	9205      	str	r2, [sp, #20]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	9204      	str	r2, [sp, #16]
 8017baa:	2200      	movs	r2, #0
 8017bac:	9203      	str	r2, [sp, #12]
 8017bae:	9302      	str	r3, [sp, #8]
 8017bb0:	2308      	movs	r3, #8
 8017bb2:	9301      	str	r3, [sp, #4]
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	9300      	str	r3, [sp, #0]
 8017bb8:	2301      	movs	r3, #1
 8017bba:	460a      	mov	r2, r1
 8017bbc:	4601      	mov	r1, r0
 8017bbe:	2001      	movs	r0, #1
 8017bc0:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	7c5b      	ldrb	r3, [r3, #17]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d005      	beq.n	8017bd6 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8017bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bce:	4a14      	ldr	r2, [pc, #80]	; (8017c20 <RegionUS915RxConfig+0x100>)
 8017bd0:	5cd3      	ldrb	r3, [r2, r3]
 8017bd2:	75fb      	strb	r3, [r7, #23]
 8017bd4:	e004      	b.n	8017be0 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8017bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bda:	4a12      	ldr	r2, [pc, #72]	; (8017c24 <RegionUS915RxConfig+0x104>)
 8017bdc:	5cd3      	ldrb	r3, [r2, r3]
 8017bde:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017be0:	4b0b      	ldr	r3, [pc, #44]	; (8017c10 <RegionUS915RxConfig+0xf0>)
 8017be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017be4:	7dfa      	ldrb	r2, [r7, #23]
 8017be6:	320d      	adds	r2, #13
 8017be8:	b2d2      	uxtb	r2, r2
 8017bea:	4611      	mov	r1, r2
 8017bec:	2001      	movs	r0, #1
 8017bee:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	7cdb      	ldrb	r3, [r3, #19]
 8017bf4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017bf8:	6939      	ldr	r1, [r7, #16]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7fe f8aa 	bl	8015d54 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017c00:	683b      	ldr	r3, [r7, #0]
 8017c02:	7bfa      	ldrb	r2, [r7, #15]
 8017c04:	701a      	strb	r2, [r3, #0]
    return true;
 8017c06:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	371c      	adds	r7, #28
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd90      	pop	{r4, r7, pc}
 8017c10:	0801e0d4 	.word	0x0801e0d4
 8017c14:	000927c0 	.word	0x000927c0
 8017c18:	370870a0 	.word	0x370870a0
 8017c1c:	0801e050 	.word	0x0801e050
 8017c20:	0801e0c4 	.word	0x0801e0c4
 8017c24:	0801e0b4 	.word	0x0801e0b4

08017c28 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017c28:	b590      	push	{r4, r7, lr}
 8017c2a:	b093      	sub	sp, #76	; 0x4c
 8017c2c:	af0a      	add	r7, sp, #40	; 0x28
 8017c2e:	60f8      	str	r0, [r7, #12]
 8017c30:	60b9      	str	r1, [r7, #8]
 8017c32:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c3a:	461a      	mov	r2, r3
 8017c3c:	4b49      	ldr	r3, [pc, #292]	; (8017d64 <RegionUS915TxConfig+0x13c>)
 8017c3e:	5c9b      	ldrb	r3, [r3, r2]
 8017c40:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017c48:	4b47      	ldr	r3, [pc, #284]	; (8017d68 <RegionUS915TxConfig+0x140>)
 8017c4a:	681a      	ldr	r2, [r3, #0]
 8017c4c:	4b47      	ldr	r3, [pc, #284]	; (8017d6c <RegionUS915TxConfig+0x144>)
 8017c4e:	6819      	ldr	r1, [r3, #0]
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	781b      	ldrb	r3, [r3, #0]
 8017c54:	461c      	mov	r4, r3
 8017c56:	4623      	mov	r3, r4
 8017c58:	005b      	lsls	r3, r3, #1
 8017c5a:	4423      	add	r3, r4
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	440b      	add	r3, r1
 8017c60:	3309      	adds	r3, #9
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	4619      	mov	r1, r3
 8017c66:	460b      	mov	r3, r1
 8017c68:	005b      	lsls	r3, r3, #1
 8017c6a:	440b      	add	r3, r1
 8017c6c:	00db      	lsls	r3, r3, #3
 8017c6e:	4413      	add	r3, r2
 8017c70:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017c7a:	4b3c      	ldr	r3, [pc, #240]	; (8017d6c <RegionUS915TxConfig+0x144>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017c82:	f7ff fa4d 	bl	8017120 <LimitTxPower>
 8017c86:	4603      	mov	r3, r0
 8017c88:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c90:	4937      	ldr	r1, [pc, #220]	; (8017d70 <RegionUS915TxConfig+0x148>)
 8017c92:	4618      	mov	r0, r3
 8017c94:	f7fe f840 	bl	8015d18 <RegionCommonGetBandwidth>
 8017c98:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8017c9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017ca2:	f04f 0200 	mov.w	r2, #0
 8017ca6:	4933      	ldr	r1, [pc, #204]	; (8017d74 <RegionUS915TxConfig+0x14c>)
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f7fd fe91 	bl	80159d0 <RegionCommonComputeTxPower>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017cb2:	4b31      	ldr	r3, [pc, #196]	; (8017d78 <RegionUS915TxConfig+0x150>)
 8017cb4:	68da      	ldr	r2, [r3, #12]
 8017cb6:	4b2d      	ldr	r3, [pc, #180]	; (8017d6c <RegionUS915TxConfig+0x144>)
 8017cb8:	6819      	ldr	r1, [r3, #0]
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	781b      	ldrb	r3, [r3, #0]
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	005b      	lsls	r3, r3, #1
 8017cc4:	4403      	add	r3, r0
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	440b      	add	r3, r1
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017cd0:	4b29      	ldr	r3, [pc, #164]	; (8017d78 <RegionUS915TxConfig+0x150>)
 8017cd2:	69dc      	ldr	r4, [r3, #28]
 8017cd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017cd8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017cdc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017ce0:	9208      	str	r2, [sp, #32]
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	9207      	str	r2, [sp, #28]
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	9206      	str	r2, [sp, #24]
 8017cea:	2200      	movs	r2, #0
 8017cec:	9205      	str	r2, [sp, #20]
 8017cee:	2201      	movs	r2, #1
 8017cf0:	9204      	str	r2, [sp, #16]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	9203      	str	r2, [sp, #12]
 8017cf6:	2208      	movs	r2, #8
 8017cf8:	9202      	str	r2, [sp, #8]
 8017cfa:	2201      	movs	r2, #1
 8017cfc:	9201      	str	r2, [sp, #4]
 8017cfe:	9300      	str	r3, [sp, #0]
 8017d00:	69bb      	ldr	r3, [r7, #24]
 8017d02:	2200      	movs	r2, #0
 8017d04:	2001      	movs	r0, #1
 8017d06:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017d08:	4b18      	ldr	r3, [pc, #96]	; (8017d6c <RegionUS915TxConfig+0x144>)
 8017d0a:	681a      	ldr	r2, [r3, #0]
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	781b      	ldrb	r3, [r3, #0]
 8017d10:	4619      	mov	r1, r3
 8017d12:	460b      	mov	r3, r1
 8017d14:	005b      	lsls	r3, r3, #1
 8017d16:	440b      	add	r3, r1
 8017d18:	009b      	lsls	r3, r3, #2
 8017d1a:	4413      	add	r3, r2
 8017d1c:	681a      	ldr	r2, [r3, #0]
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d24:	4619      	mov	r1, r3
 8017d26:	4610      	mov	r0, r2
 8017d28:	f7fe f846 	bl	8015db8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8017d2c:	4b12      	ldr	r3, [pc, #72]	; (8017d78 <RegionUS915TxConfig+0x150>)
 8017d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d30:	68fa      	ldr	r2, [r7, #12]
 8017d32:	8992      	ldrh	r2, [r2, #12]
 8017d34:	b2d2      	uxtb	r2, r2
 8017d36:	4611      	mov	r1, r2
 8017d38:	2001      	movs	r0, #1
 8017d3a:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	899b      	ldrh	r3, [r3, #12]
 8017d46:	4619      	mov	r1, r3
 8017d48:	4610      	mov	r0, r2
 8017d4a:	f7ff fa63 	bl	8017214 <GetTimeOnAir>
 8017d4e:	4602      	mov	r2, r0
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	7fba      	ldrb	r2, [r7, #30]
 8017d58:	701a      	strb	r2, [r3, #0]
    return true;
 8017d5a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3724      	adds	r7, #36	; 0x24
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd90      	pop	{r4, r7, pc}
 8017d64:	0801e050 	.word	0x0801e050
 8017d68:	20001a3c 	.word	0x20001a3c
 8017d6c:	20001a38 	.word	0x20001a38
 8017d70:	0801e060 	.word	0x0801e060
 8017d74:	41f00000 	.word	0x41f00000
 8017d78:	0801e0d4 	.word	0x0801e0d4

08017d7c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017d7c:	b590      	push	{r4, r7, lr}
 8017d7e:	b097      	sub	sp, #92	; 0x5c
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	60b9      	str	r1, [r7, #8]
 8017d86:	607a      	str	r2, [r7, #4]
 8017d88:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017d8a:	2307      	movs	r3, #7
 8017d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017d90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d94:	2200      	movs	r2, #0
 8017d96:	601a      	str	r2, [r3, #0]
 8017d98:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8017da0:	2300      	movs	r3, #0
 8017da2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8017da6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017daa:	2200      	movs	r2, #0
 8017dac:	601a      	str	r2, [r3, #0]
 8017dae:	605a      	str	r2, [r3, #4]
 8017db0:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017db2:	4b97      	ldr	r3, [pc, #604]	; (8018010 <RegionUS915LinkAdrReq+0x294>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8017dba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017dbe:	2206      	movs	r2, #6
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7fd fb09 	bl	80153d8 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017dc6:	e11b      	b.n	8018000 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	685a      	ldr	r2, [r3, #4]
 8017dcc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8017dd0:	4413      	add	r3, r2
 8017dd2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017dd6:	4611      	mov	r1, r2
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f7fd fc41 	bl	8015660 <RegionCommonParseLinkAdrReq>
 8017dde:	4603      	mov	r3, r0
 8017de0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8017de4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f000 8113 	beq.w	8018014 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017dee:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017df2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017df6:	4413      	add	r3, r2
 8017df8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017dfc:	2307      	movs	r3, #7
 8017dfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8017e02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017e06:	2b06      	cmp	r3, #6
 8017e08:	d116      	bne.n	8017e38 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8017e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8017e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8017e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8017e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017e26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8017e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017e2e:	b2db      	uxtb	r3, r3
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017e36:	e0e3      	b.n	8018000 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8017e38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017e3c:	2b07      	cmp	r3, #7
 8017e3e:	d112      	bne.n	8017e66 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8017e40:	2300      	movs	r3, #0
 8017e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8017e46:	2300      	movs	r3, #0
 8017e48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8017e52:	2300      	movs	r3, #0
 8017e54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8017e58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017e64:	e0cc      	b.n	8018000 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8017e66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017e6a:	2b05      	cmp	r3, #5
 8017e6c:	f040 80bf 	bne.w	8017fee <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8017e70:	2301      	movs	r3, #1
 8017e72:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8017e76:	2300      	movs	r3, #0
 8017e78:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8017e82:	e0ae      	b.n	8017fe2 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8017e84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017e88:	b2da      	uxtb	r2, r3
 8017e8a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017e8e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017e92:	fa01 f303 	lsl.w	r3, r1, r3
 8017e96:	4013      	ands	r3, r2
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d04d      	beq.n	8017f38 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8017e9c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017ea0:	f003 0301 	and.w	r3, r3, #1
 8017ea4:	b2db      	uxtb	r3, r3
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d120      	bne.n	8017eec <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8017eaa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017eae:	005b      	lsls	r3, r3, #1
 8017eb0:	3358      	adds	r3, #88	; 0x58
 8017eb2:	443b      	add	r3, r7
 8017eb4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017eb8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017ebc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8017ec0:	b292      	uxth	r2, r2
 8017ec2:	005b      	lsls	r3, r3, #1
 8017ec4:	3358      	adds	r3, #88	; 0x58
 8017ec6:	443b      	add	r3, r7
 8017ec8:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017ecc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017ed0:	b21a      	sxth	r2, r3
 8017ed2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017ed6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017eda:	fa01 f303 	lsl.w	r3, r1, r3
 8017ede:	b21b      	sxth	r3, r3
 8017ee0:	4313      	orrs	r3, r2
 8017ee2:	b21b      	sxth	r3, r3
 8017ee4:	b29b      	uxth	r3, r3
 8017ee6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017eea:	e075      	b.n	8017fd8 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8017eec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017ef0:	005b      	lsls	r3, r3, #1
 8017ef2:	3358      	adds	r3, #88	; 0x58
 8017ef4:	443b      	add	r3, r7
 8017ef6:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017efa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017efe:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8017f02:	b292      	uxth	r2, r2
 8017f04:	005b      	lsls	r3, r3, #1
 8017f06:	3358      	adds	r3, #88	; 0x58
 8017f08:	443b      	add	r3, r7
 8017f0a:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017f0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017f12:	b21a      	sxth	r2, r3
 8017f14:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017f18:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8017f20:	b21b      	sxth	r3, r3
 8017f22:	4313      	orrs	r3, r2
 8017f24:	b21b      	sxth	r3, r3
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017f2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017f30:	3301      	adds	r3, #1
 8017f32:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8017f36:	e04f      	b.n	8017fd8 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8017f38:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017f3c:	f003 0301 	and.w	r3, r3, #1
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d122      	bne.n	8017f8c <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8017f46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017f4a:	005b      	lsls	r3, r3, #1
 8017f4c:	3358      	adds	r3, #88	; 0x58
 8017f4e:	443b      	add	r3, r7
 8017f50:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017f54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017f58:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017f5c:	b292      	uxth	r2, r2
 8017f5e:	005b      	lsls	r3, r3, #1
 8017f60:	3358      	adds	r3, #88	; 0x58
 8017f62:	443b      	add	r3, r7
 8017f64:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017f68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017f6c:	b21a      	sxth	r2, r3
 8017f6e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017f72:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017f76:	fa01 f303 	lsl.w	r3, r1, r3
 8017f7a:	b21b      	sxth	r3, r3
 8017f7c:	43db      	mvns	r3, r3
 8017f7e:	b21b      	sxth	r3, r3
 8017f80:	4013      	ands	r3, r2
 8017f82:	b21b      	sxth	r3, r3
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017f8a:	e025      	b.n	8017fd8 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8017f8c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017f90:	005b      	lsls	r3, r3, #1
 8017f92:	3358      	adds	r3, #88	; 0x58
 8017f94:	443b      	add	r3, r7
 8017f96:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017f9a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017f9e:	b2d2      	uxtb	r2, r2
 8017fa0:	b292      	uxth	r2, r2
 8017fa2:	005b      	lsls	r3, r3, #1
 8017fa4:	3358      	adds	r3, #88	; 0x58
 8017fa6:	443b      	add	r3, r7
 8017fa8:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017fac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017fb0:	b21a      	sxth	r2, r3
 8017fb2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017fb6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017fba:	fa01 f303 	lsl.w	r3, r1, r3
 8017fbe:	b21b      	sxth	r3, r3
 8017fc0:	43db      	mvns	r3, r3
 8017fc2:	b21b      	sxth	r3, r3
 8017fc4:	4013      	ands	r3, r2
 8017fc6:	b21b      	sxth	r3, r3
 8017fc8:	b29b      	uxth	r3, r3
 8017fca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017fce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017fd2:	3301      	adds	r3, #1
 8017fd4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8017fd8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017fdc:	3301      	adds	r3, #1
 8017fde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8017fe2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017fe6:	2b07      	cmp	r3, #7
 8017fe8:	f67f af4c 	bls.w	8017e84 <RegionUS915LinkAdrReq+0x108>
 8017fec:	e008      	b.n	8018000 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8017fee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ff2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017ff6:	005b      	lsls	r3, r3, #1
 8017ff8:	3358      	adds	r3, #88	; 0x58
 8017ffa:	443b      	add	r3, r7
 8017ffc:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	7a1b      	ldrb	r3, [r3, #8]
 8018004:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018008:	429a      	cmp	r2, r3
 801800a:	f4ff aedd 	bcc.w	8017dc8 <RegionUS915LinkAdrReq+0x4c>
 801800e:	e002      	b.n	8018016 <RegionUS915LinkAdrReq+0x29a>
 8018010:	20001a38 	.word	0x20001a38
            break; // break loop, since no more request has been found
 8018014:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8018016:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801801a:	2b03      	cmp	r3, #3
 801801c:	dc0f      	bgt.n	801803e <RegionUS915LinkAdrReq+0x2c2>
 801801e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018022:	2204      	movs	r2, #4
 8018024:	2100      	movs	r1, #0
 8018026:	4618      	mov	r0, r3
 8018028:	f7fd f9aa 	bl	8015380 <RegionCommonCountChannels>
 801802c:	4603      	mov	r3, r0
 801802e:	2b01      	cmp	r3, #1
 8018030:	d805      	bhi.n	801803e <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8018032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018036:	f023 0301 	bic.w	r3, r3, #1
 801803a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801803e:	2302      	movs	r3, #2
 8018040:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	7a5b      	ldrb	r3, [r3, #9]
 8018048:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801804c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018050:	4618      	mov	r0, r3
 8018052:	f7ff f90f 	bl	8017274 <RegionUS915GetPhyParam>
 8018056:	4603      	mov	r3, r0
 8018058:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801805a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801805e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	7a9b      	ldrb	r3, [r3, #10]
 8018064:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018066:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801806a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801806c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018070:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018072:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8018076:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801807e:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018086:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	7b5b      	ldrb	r3, [r3, #13]
 801808c:	b25b      	sxtb	r3, r3
 801808e:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018090:	2348      	movs	r3, #72	; 0x48
 8018092:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018096:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801809a:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801809e:	b25b      	sxtb	r3, r3
 80180a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80180a4:	2304      	movs	r3, #4
 80180a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80180aa:	4b3f      	ldr	r3, [pc, #252]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80180b0:	230e      	movs	r3, #14
 80180b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80180b6:	2300      	movs	r3, #0
 80180b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80180c2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80180c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80180ca:	1c9a      	adds	r2, r3, #2
 80180cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80180d0:	1c59      	adds	r1, r3, #1
 80180d2:	f107 0014 	add.w	r0, r7, #20
 80180d6:	4623      	mov	r3, r4
 80180d8:	f7fd fb13 	bl	8015702 <RegionCommonLinkAdrReqVerifyParams>
 80180dc:	4603      	mov	r3, r0
 80180de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80180e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80180e6:	2b07      	cmp	r3, #7
 80180e8:	d147      	bne.n	801817a <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80180ea:	4b2f      	ldr	r3, [pc, #188]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80180f2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80180f6:	2206      	movs	r2, #6
 80180f8:	4618      	mov	r0, r3
 80180fa:	f7fd f96d 	bl	80153d8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80180fe:	4b2b      	ldr	r3, [pc, #172]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	8819      	ldrh	r1, [r3, #0]
 8018104:	4b28      	ldr	r3, [pc, #160]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801810c:	4b27      	ldr	r3, [pc, #156]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	400a      	ands	r2, r1
 8018112:	b292      	uxth	r2, r2
 8018114:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8018116:	4b25      	ldr	r3, [pc, #148]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	8859      	ldrh	r1, [r3, #2]
 801811c:	4b22      	ldr	r3, [pc, #136]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8018124:	4b21      	ldr	r3, [pc, #132]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	400a      	ands	r2, r1
 801812a:	b292      	uxth	r2, r2
 801812c:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801812e:	4b1f      	ldr	r3, [pc, #124]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	8899      	ldrh	r1, [r3, #4]
 8018134:	4b1c      	ldr	r3, [pc, #112]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801813c:	4b1b      	ldr	r3, [pc, #108]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	400a      	ands	r2, r1
 8018142:	b292      	uxth	r2, r2
 8018144:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8018146:	4b19      	ldr	r3, [pc, #100]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	88d9      	ldrh	r1, [r3, #6]
 801814c:	4b16      	ldr	r3, [pc, #88]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8018154:	4b15      	ldr	r3, [pc, #84]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	400a      	ands	r2, r1
 801815a:	b292      	uxth	r2, r2
 801815c:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801815e:	4b12      	ldr	r3, [pc, #72]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 8018160:	681a      	ldr	r2, [r3, #0]
 8018162:	4b12      	ldr	r3, [pc, #72]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801816a:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801816c:	4b0e      	ldr	r3, [pc, #56]	; (80181a8 <RegionUS915LinkAdrReq+0x42c>)
 801816e:	681a      	ldr	r2, [r3, #0]
 8018170:	4b0e      	ldr	r3, [pc, #56]	; (80181ac <RegionUS915LinkAdrReq+0x430>)
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8018178:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801817a:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801817e:	68bb      	ldr	r3, [r7, #8]
 8018180:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018182:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801818a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018194:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018198:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801819a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801819e:	4618      	mov	r0, r3
 80181a0:	375c      	adds	r7, #92	; 0x5c
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd90      	pop	{r4, r7, pc}
 80181a6:	bf00      	nop
 80181a8:	20001a38 	.word	0x20001a38
 80181ac:	20001a34 	.word	0x20001a34

080181b0 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80181b8:	2307      	movs	r3, #7
 80181ba:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	4618      	mov	r0, r3
 80181c2:	f7fe ffe3 	bl	801718c <VerifyRfFreq>
 80181c6:	4603      	mov	r3, r0
 80181c8:	f083 0301 	eor.w	r3, r3, #1
 80181cc:	b2db      	uxtb	r3, r3
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d003      	beq.n	80181da <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 80181d2:	7bfb      	ldrb	r3, [r7, #15]
 80181d4:	f023 0301 	bic.w	r3, r3, #1
 80181d8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f993 3000 	ldrsb.w	r3, [r3]
 80181e0:	220d      	movs	r2, #13
 80181e2:	2108      	movs	r1, #8
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7fd f87a 	bl	80152de <RegionCommonValueInRange>
 80181ea:	4603      	mov	r3, r0
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d103      	bne.n	80181f8 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80181f0:	7bfb      	ldrb	r3, [r7, #15]
 80181f2:	f023 0302 	bic.w	r3, r3, #2
 80181f6:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f993 3000 	ldrsb.w	r3, [r3]
 80181fe:	2207      	movs	r2, #7
 8018200:	2105      	movs	r1, #5
 8018202:	4618      	mov	r0, r3
 8018204:	f7fd f86b 	bl	80152de <RegionCommonValueInRange>
 8018208:	4603      	mov	r3, r0
 801820a:	2b01      	cmp	r3, #1
 801820c:	d004      	beq.n	8018218 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018214:	2b0d      	cmp	r3, #13
 8018216:	dd03      	ble.n	8018220 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018218:	7bfb      	ldrb	r3, [r7, #15]
 801821a:	f023 0302 	bic.w	r3, r3, #2
 801821e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018226:	2203      	movs	r2, #3
 8018228:	2100      	movs	r1, #0
 801822a:	4618      	mov	r0, r3
 801822c:	f7fd f857 	bl	80152de <RegionCommonValueInRange>
 8018230:	4603      	mov	r3, r0
 8018232:	2b00      	cmp	r3, #0
 8018234:	d103      	bne.n	801823e <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018236:	7bfb      	ldrb	r3, [r7, #15]
 8018238:	f023 0304 	bic.w	r3, r3, #4
 801823c:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018240:	4618      	mov	r0, r3
 8018242:	3710      	adds	r7, #16
 8018244:	46bd      	mov	sp, r7
 8018246:	bd80      	pop	{r7, pc}

08018248 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018248:	b480      	push	{r7}
 801824a:	b083      	sub	sp, #12
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018254:	4618      	mov	r0, r3
 8018256:	370c      	adds	r7, #12
 8018258:	46bd      	mov	sp, r7
 801825a:	bc80      	pop	{r7}
 801825c:	4770      	bx	lr

0801825e <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801825e:	b480      	push	{r7}
 8018260:	b083      	sub	sp, #12
 8018262:	af00      	add	r7, sp, #0
 8018264:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018266:	f04f 33ff 	mov.w	r3, #4294967295
}
 801826a:	4618      	mov	r0, r3
 801826c:	370c      	adds	r7, #12
 801826e:	46bd      	mov	sp, r7
 8018270:	bc80      	pop	{r7}
 8018272:	4770      	bx	lr

08018274 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018274:	b480      	push	{r7}
 8018276:	b083      	sub	sp, #12
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801827c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018280:	4618      	mov	r0, r3
 8018282:	370c      	adds	r7, #12
 8018284:	46bd      	mov	sp, r7
 8018286:	bc80      	pop	{r7}
 8018288:	4770      	bx	lr
	...

0801828c <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801828c:	b480      	push	{r7}
 801828e:	b083      	sub	sp, #12
 8018290:	af00      	add	r7, sp, #0
 8018292:	4603      	mov	r3, r0
 8018294:	460a      	mov	r2, r1
 8018296:	71fb      	strb	r3, [r7, #7]
 8018298:	4613      	mov	r3, r2
 801829a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801829c:	79bb      	ldrb	r3, [r7, #6]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d106      	bne.n	80182b0 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80182a2:	4b13      	ldr	r3, [pc, #76]	; (80182f0 <RegionUS915AlternateDr+0x64>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	7b5a      	ldrb	r2, [r3, #13]
 80182a8:	3201      	adds	r2, #1
 80182aa:	b2d2      	uxtb	r2, r2
 80182ac:	735a      	strb	r2, [r3, #13]
 80182ae:	e005      	b.n	80182bc <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 80182b0:	4b0f      	ldr	r3, [pc, #60]	; (80182f0 <RegionUS915AlternateDr+0x64>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	7b5a      	ldrb	r2, [r3, #13]
 80182b6:	3a01      	subs	r2, #1
 80182b8:	b2d2      	uxtb	r2, r2
 80182ba:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80182bc:	4b0c      	ldr	r3, [pc, #48]	; (80182f0 <RegionUS915AlternateDr+0x64>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	7b5a      	ldrb	r2, [r3, #13]
 80182c2:	4b0c      	ldr	r3, [pc, #48]	; (80182f4 <RegionUS915AlternateDr+0x68>)
 80182c4:	fba3 1302 	umull	r1, r3, r3, r2
 80182c8:	0859      	lsrs	r1, r3, #1
 80182ca:	460b      	mov	r3, r1
 80182cc:	00db      	lsls	r3, r3, #3
 80182ce:	440b      	add	r3, r1
 80182d0:	1ad3      	subs	r3, r2, r3
 80182d2:	b2db      	uxtb	r3, r3
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d102      	bne.n	80182de <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 80182d8:	2304      	movs	r3, #4
 80182da:	71fb      	strb	r3, [r7, #7]
 80182dc:	e001      	b.n	80182e2 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 80182de:	2300      	movs	r3, #0
 80182e0:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 80182e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	370c      	adds	r7, #12
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bc80      	pop	{r7}
 80182ee:	4770      	bx	lr
 80182f0:	20001a34 	.word	0x20001a34
 80182f4:	38e38e39 	.word	0x38e38e39

080182f8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b0a8      	sub	sp, #160	; 0xa0
 80182fc:	af02      	add	r7, sp, #8
 80182fe:	60f8      	str	r0, [r7, #12]
 8018300:	60b9      	str	r1, [r7, #8]
 8018302:	607a      	str	r2, [r7, #4]
 8018304:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018306:	2300      	movs	r3, #0
 8018308:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801830c:	2300      	movs	r3, #0
 801830e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018312:	2300      	movs	r3, #0
 8018314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018316:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801831a:	2244      	movs	r2, #68	; 0x44
 801831c:	2100      	movs	r1, #0
 801831e:	4618      	mov	r0, r3
 8018320:	f004 ff32 	bl	801d188 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018324:	230c      	movs	r3, #12
 8018326:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801832a:	4b67      	ldr	r3, [pc, #412]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	2204      	movs	r2, #4
 8018330:	2100      	movs	r1, #0
 8018332:	4618      	mov	r0, r3
 8018334:	f7fd f824 	bl	8015380 <RegionCommonCountChannels>
 8018338:	4603      	mov	r3, r0
 801833a:	2b00      	cmp	r3, #0
 801833c:	d10e      	bne.n	801835c <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801833e:	4b62      	ldr	r3, [pc, #392]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	4618      	mov	r0, r3
 8018344:	4b61      	ldr	r3, [pc, #388]	; (80184cc <RegionUS915NextChannel+0x1d4>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801834c:	2204      	movs	r2, #4
 801834e:	4619      	mov	r1, r3
 8018350:	f7fd f842 	bl	80153d8 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018354:	4b5c      	ldr	r3, [pc, #368]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	2200      	movs	r2, #0
 801835a:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018362:	2b03      	cmp	r3, #3
 8018364:	dd0c      	ble.n	8018380 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018366:	4b58      	ldr	r3, [pc, #352]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	891b      	ldrh	r3, [r3, #8]
 801836c:	b2db      	uxtb	r3, r3
 801836e:	2b00      	cmp	r3, #0
 8018370:	d106      	bne.n	8018380 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018372:	4b56      	ldr	r3, [pc, #344]	; (80184cc <RegionUS915NextChannel+0x1d4>)
 8018374:	681a      	ldr	r2, [r3, #0]
 8018376:	4b54      	ldr	r3, [pc, #336]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801837e:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	7a5b      	ldrb	r3, [r3, #9]
 8018384:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801838c:	b2db      	uxtb	r3, r3
 801838e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018390:	4b4d      	ldr	r3, [pc, #308]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018396:	4b4d      	ldr	r3, [pc, #308]	; (80184cc <RegionUS915NextChannel+0x1d4>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801839c:	4b4c      	ldr	r3, [pc, #304]	; (80184d0 <RegionUS915NextChannel+0x1d8>)
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80183a2:	2348      	movs	r3, #72	; 0x48
 80183a4:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 80183a6:	2300      	movs	r3, #0
 80183a8:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	685b      	ldr	r3, [r3, #4]
 80183b4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	7a9b      	ldrb	r3, [r3, #10]
 80183ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80183be:	2301      	movs	r3, #1
 80183c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80183c4:	f107 0314 	add.w	r3, r7, #20
 80183c8:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80183ca:	68fa      	ldr	r2, [r7, #12]
 80183cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80183d0:	320c      	adds	r2, #12
 80183d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80183d6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	7d1b      	ldrb	r3, [r3, #20]
 80183de:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	8adb      	ldrh	r3, [r3, #22]
 80183ec:	4619      	mov	r1, r3
 80183ee:	4610      	mov	r0, r2
 80183f0:	f7fe ff10 	bl	8017214 <GetTimeOnAir>
 80183f4:	4603      	mov	r3, r0
 80183f6:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80183f8:	f107 0195 	add.w	r1, r7, #149	; 0x95
 80183fc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018400:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	9301      	str	r3, [sp, #4]
 8018408:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801840c:	9300      	str	r3, [sp, #0]
 801840e:	460b      	mov	r3, r1
 8018410:	6839      	ldr	r1, [r7, #0]
 8018412:	f7fd fbcc 	bl	8015bae <RegionCommonIdentifyChannels>
 8018416:	4603      	mov	r3, r0
 8018418:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801841c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018420:	2b00      	cmp	r3, #0
 8018422:	d14a      	bne.n	80184ba <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	7a5b      	ldrb	r3, [r3, #9]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d00e      	beq.n	801844a <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801842c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018430:	3b01      	subs	r3, #1
 8018432:	4619      	mov	r1, r3
 8018434:	2000      	movs	r0, #0
 8018436:	f000 f89f 	bl	8018578 <randr>
 801843a:	4603      	mov	r3, r0
 801843c:	3398      	adds	r3, #152	; 0x98
 801843e:	443b      	add	r3, r7
 8018440:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	701a      	strb	r2, [r3, #0]
 8018448:	e02e      	b.n	80184a8 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d10e      	bne.n	8018472 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018454:	4b1c      	ldr	r3, [pc, #112]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801845a:	4b1b      	ldr	r3, [pc, #108]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 801845c:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801845e:	330c      	adds	r3, #12
 8018460:	68ba      	ldr	r2, [r7, #8]
 8018462:	4619      	mov	r1, r3
 8018464:	f7fc fcf6 	bl	8014e54 <RegionBaseUSComputeNext125kHzJoinChannel>
 8018468:	4603      	mov	r3, r0
 801846a:	2b03      	cmp	r3, #3
 801846c:	d11c      	bne.n	80184a8 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801846e:	2303      	movs	r3, #3
 8018470:	e025      	b.n	80184be <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018472:	2300      	movs	r3, #0
 8018474:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018478:	e004      	b.n	8018484 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801847a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801847e:	3301      	adds	r3, #1
 8018480:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018484:	4b10      	ldr	r3, [pc, #64]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	891b      	ldrh	r3, [r3, #8]
 801848a:	b2da      	uxtb	r2, r3
 801848c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018490:	fa42 f303 	asr.w	r3, r2, r3
 8018494:	f003 0301 	and.w	r3, r3, #1
 8018498:	2b00      	cmp	r3, #0
 801849a:	d0ee      	beq.n	801847a <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801849c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80184a0:	3340      	adds	r3, #64	; 0x40
 80184a2:	b2da      	uxtb	r2, r3
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80184a8:	4b07      	ldr	r3, [pc, #28]	; (80184c8 <RegionUS915NextChannel+0x1d0>)
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	4618      	mov	r0, r3
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	781b      	ldrb	r3, [r3, #0]
 80184b2:	2248      	movs	r2, #72	; 0x48
 80184b4:	4619      	mov	r1, r3
 80184b6:	f7fc ff2f 	bl	8015318 <RegionCommonChanDisable>
    }
    return status;
 80184ba:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80184be:	4618      	mov	r0, r3
 80184c0:	3798      	adds	r7, #152	; 0x98
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop
 80184c8:	20001a34 	.word	0x20001a34
 80184cc:	20001a38 	.word	0x20001a38
 80184d0:	20001a3c 	.word	0x20001a3c

080184d4 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80184d4:	b480      	push	{r7}
 80184d6:	b085      	sub	sp, #20
 80184d8:	af00      	add	r7, sp, #0
 80184da:	4603      	mov	r3, r0
 80184dc:	71fb      	strb	r3, [r7, #7]
 80184de:	460b      	mov	r3, r1
 80184e0:	71bb      	strb	r3, [r7, #6]
 80184e2:	4613      	mov	r3, r2
 80184e4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80184e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80184ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80184ee:	4909      	ldr	r1, [pc, #36]	; (8018514 <RegionUS915ApplyDrOffset+0x40>)
 80184f0:	0092      	lsls	r2, r2, #2
 80184f2:	440a      	add	r2, r1
 80184f4:	4413      	add	r3, r2
 80184f6:	781b      	ldrb	r3, [r3, #0]
 80184f8:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80184fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	da01      	bge.n	8018506 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018502:	2300      	movs	r3, #0
 8018504:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018506:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018508:	4618      	mov	r0, r3
 801850a:	3714      	adds	r7, #20
 801850c:	46bd      	mov	sp, r7
 801850e:	bc80      	pop	{r7}
 8018510:	4770      	bx	lr
 8018512:	bf00      	nop
 8018514:	0801e0a0 	.word	0x0801e0a0

08018518 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018518:	b480      	push	{r7}
 801851a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801851c:	4b0d      	ldr	r3, [pc, #52]	; (8018554 <rand1+0x3c>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	4a0d      	ldr	r2, [pc, #52]	; (8018558 <rand1+0x40>)
 8018522:	fb02 f303 	mul.w	r3, r2, r3
 8018526:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801852a:	3339      	adds	r3, #57	; 0x39
 801852c:	4a09      	ldr	r2, [pc, #36]	; (8018554 <rand1+0x3c>)
 801852e:	6013      	str	r3, [r2, #0]
 8018530:	4b08      	ldr	r3, [pc, #32]	; (8018554 <rand1+0x3c>)
 8018532:	681a      	ldr	r2, [r3, #0]
 8018534:	2303      	movs	r3, #3
 8018536:	fba3 1302 	umull	r1, r3, r3, r2
 801853a:	1ad1      	subs	r1, r2, r3
 801853c:	0849      	lsrs	r1, r1, #1
 801853e:	440b      	add	r3, r1
 8018540:	0f99      	lsrs	r1, r3, #30
 8018542:	460b      	mov	r3, r1
 8018544:	07db      	lsls	r3, r3, #31
 8018546:	1a5b      	subs	r3, r3, r1
 8018548:	1ad1      	subs	r1, r2, r3
 801854a:	460b      	mov	r3, r1
}
 801854c:	4618      	mov	r0, r3
 801854e:	46bd      	mov	sp, r7
 8018550:	bc80      	pop	{r7}
 8018552:	4770      	bx	lr
 8018554:	20000140 	.word	0x20000140
 8018558:	41c64e6d 	.word	0x41c64e6d

0801855c <srand1>:

void srand1( uint32_t seed )
{
 801855c:	b480      	push	{r7}
 801855e:	b083      	sub	sp, #12
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
    next = seed;
 8018564:	4a03      	ldr	r2, [pc, #12]	; (8018574 <srand1+0x18>)
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	6013      	str	r3, [r2, #0]
}
 801856a:	bf00      	nop
 801856c:	370c      	adds	r7, #12
 801856e:	46bd      	mov	sp, r7
 8018570:	bc80      	pop	{r7}
 8018572:	4770      	bx	lr
 8018574:	20000140 	.word	0x20000140

08018578 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b082      	sub	sp, #8
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018582:	f7ff ffc9 	bl	8018518 <rand1>
 8018586:	4602      	mov	r2, r0
 8018588:	6839      	ldr	r1, [r7, #0]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	1acb      	subs	r3, r1, r3
 801858e:	3301      	adds	r3, #1
 8018590:	fb92 f1f3 	sdiv	r1, r2, r3
 8018594:	fb01 f303 	mul.w	r3, r1, r3
 8018598:	1ad2      	subs	r2, r2, r3
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	4413      	add	r3, r2
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3708      	adds	r7, #8
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}

080185a6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80185a6:	b480      	push	{r7}
 80185a8:	b085      	sub	sp, #20
 80185aa:	af00      	add	r7, sp, #0
 80185ac:	60f8      	str	r0, [r7, #12]
 80185ae:	60b9      	str	r1, [r7, #8]
 80185b0:	4613      	mov	r3, r2
 80185b2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80185b4:	e007      	b.n	80185c6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80185b6:	68ba      	ldr	r2, [r7, #8]
 80185b8:	1c53      	adds	r3, r2, #1
 80185ba:	60bb      	str	r3, [r7, #8]
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	1c59      	adds	r1, r3, #1
 80185c0:	60f9      	str	r1, [r7, #12]
 80185c2:	7812      	ldrb	r2, [r2, #0]
 80185c4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80185c6:	88fb      	ldrh	r3, [r7, #6]
 80185c8:	1e5a      	subs	r2, r3, #1
 80185ca:	80fa      	strh	r2, [r7, #6]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d1f2      	bne.n	80185b6 <memcpy1+0x10>
    }
}
 80185d0:	bf00      	nop
 80185d2:	bf00      	nop
 80185d4:	3714      	adds	r7, #20
 80185d6:	46bd      	mov	sp, r7
 80185d8:	bc80      	pop	{r7}
 80185da:	4770      	bx	lr

080185dc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80185dc:	b480      	push	{r7}
 80185de:	b085      	sub	sp, #20
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	60f8      	str	r0, [r7, #12]
 80185e4:	60b9      	str	r1, [r7, #8]
 80185e6:	4613      	mov	r3, r2
 80185e8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80185ea:	88fb      	ldrh	r3, [r7, #6]
 80185ec:	3b01      	subs	r3, #1
 80185ee:	68fa      	ldr	r2, [r7, #12]
 80185f0:	4413      	add	r3, r2
 80185f2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80185f4:	e007      	b.n	8018606 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80185f6:	68ba      	ldr	r2, [r7, #8]
 80185f8:	1c53      	adds	r3, r2, #1
 80185fa:	60bb      	str	r3, [r7, #8]
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	1e59      	subs	r1, r3, #1
 8018600:	60f9      	str	r1, [r7, #12]
 8018602:	7812      	ldrb	r2, [r2, #0]
 8018604:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018606:	88fb      	ldrh	r3, [r7, #6]
 8018608:	1e5a      	subs	r2, r3, #1
 801860a:	80fa      	strh	r2, [r7, #6]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d1f2      	bne.n	80185f6 <memcpyr+0x1a>
    }
}
 8018610:	bf00      	nop
 8018612:	bf00      	nop
 8018614:	3714      	adds	r7, #20
 8018616:	46bd      	mov	sp, r7
 8018618:	bc80      	pop	{r7}
 801861a:	4770      	bx	lr

0801861c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801861c:	b480      	push	{r7}
 801861e:	b083      	sub	sp, #12
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	460b      	mov	r3, r1
 8018626:	70fb      	strb	r3, [r7, #3]
 8018628:	4613      	mov	r3, r2
 801862a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801862c:	e004      	b.n	8018638 <memset1+0x1c>
    {
        *dst++ = value;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	1c5a      	adds	r2, r3, #1
 8018632:	607a      	str	r2, [r7, #4]
 8018634:	78fa      	ldrb	r2, [r7, #3]
 8018636:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018638:	883b      	ldrh	r3, [r7, #0]
 801863a:	1e5a      	subs	r2, r3, #1
 801863c:	803a      	strh	r2, [r7, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d1f5      	bne.n	801862e <memset1+0x12>
    }
}
 8018642:	bf00      	nop
 8018644:	bf00      	nop
 8018646:	370c      	adds	r7, #12
 8018648:	46bd      	mov	sp, r7
 801864a:	bc80      	pop	{r7}
 801864c:	4770      	bx	lr
	...

08018650 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018650:	b480      	push	{r7}
 8018652:	b085      	sub	sp, #20
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
 8018658:	460b      	mov	r3, r1
 801865a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801865c:	f04f 33ff 	mov.w	r3, #4294967295
 8018660:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d101      	bne.n	801866c <Crc32+0x1c>
    {
        return 0;
 8018668:	2300      	movs	r3, #0
 801866a:	e026      	b.n	80186ba <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801866c:	2300      	movs	r3, #0
 801866e:	817b      	strh	r3, [r7, #10]
 8018670:	e01d      	b.n	80186ae <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018672:	897b      	ldrh	r3, [r7, #10]
 8018674:	687a      	ldr	r2, [r7, #4]
 8018676:	4413      	add	r3, r2
 8018678:	781b      	ldrb	r3, [r3, #0]
 801867a:	461a      	mov	r2, r3
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	4053      	eors	r3, r2
 8018680:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018682:	2300      	movs	r3, #0
 8018684:	813b      	strh	r3, [r7, #8]
 8018686:	e00c      	b.n	80186a2 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	085a      	lsrs	r2, r3, #1
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	f003 0301 	and.w	r3, r3, #1
 8018692:	425b      	negs	r3, r3
 8018694:	490b      	ldr	r1, [pc, #44]	; (80186c4 <Crc32+0x74>)
 8018696:	400b      	ands	r3, r1
 8018698:	4053      	eors	r3, r2
 801869a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801869c:	893b      	ldrh	r3, [r7, #8]
 801869e:	3301      	adds	r3, #1
 80186a0:	813b      	strh	r3, [r7, #8]
 80186a2:	893b      	ldrh	r3, [r7, #8]
 80186a4:	2b07      	cmp	r3, #7
 80186a6:	d9ef      	bls.n	8018688 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80186a8:	897b      	ldrh	r3, [r7, #10]
 80186aa:	3301      	adds	r3, #1
 80186ac:	817b      	strh	r3, [r7, #10]
 80186ae:	897a      	ldrh	r2, [r7, #10]
 80186b0:	887b      	ldrh	r3, [r7, #2]
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d3dd      	bcc.n	8018672 <Crc32+0x22>
        }
    }

    return ~crc;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	43db      	mvns	r3, r3
}
 80186ba:	4618      	mov	r0, r3
 80186bc:	3714      	adds	r7, #20
 80186be:	46bd      	mov	sp, r7
 80186c0:	bc80      	pop	{r7}
 80186c2:	4770      	bx	lr
 80186c4:	edb88320 	.word	0xedb88320

080186c8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b084      	sub	sp, #16
 80186cc:	af02      	add	r7, sp, #8
 80186ce:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80186d0:	4a24      	ldr	r2, [pc, #144]	; (8018764 <RadioInit+0x9c>)
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80186d6:	4b24      	ldr	r3, [pc, #144]	; (8018768 <RadioInit+0xa0>)
 80186d8:	2200      	movs	r2, #0
 80186da:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80186dc:	4b22      	ldr	r3, [pc, #136]	; (8018768 <RadioInit+0xa0>)
 80186de:	2200      	movs	r2, #0
 80186e0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80186e2:	4b21      	ldr	r3, [pc, #132]	; (8018768 <RadioInit+0xa0>)
 80186e4:	2200      	movs	r2, #0
 80186e6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80186e8:	4b1f      	ldr	r3, [pc, #124]	; (8018768 <RadioInit+0xa0>)
 80186ea:	2200      	movs	r2, #0
 80186ec:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 80186ee:	481f      	ldr	r0, [pc, #124]	; (801876c <RadioInit+0xa4>)
 80186f0:	f001 ff88 	bl	801a604 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80186f4:	4b1c      	ldr	r3, [pc, #112]	; (8018768 <RadioInit+0xa0>)
 80186f6:	2200      	movs	r2, #0
 80186f8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80186fa:	4b1b      	ldr	r3, [pc, #108]	; (8018768 <RadioInit+0xa0>)
 80186fc:	2200      	movs	r2, #0
 80186fe:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018700:	f002 fa16 	bl	801ab30 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018704:	2100      	movs	r1, #0
 8018706:	2000      	movs	r0, #0
 8018708:	f002 fdde 	bl	801b2c8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801870c:	2204      	movs	r2, #4
 801870e:	2100      	movs	r1, #0
 8018710:	2001      	movs	r0, #1
 8018712:	f002 fb9b 	bl	801ae4c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018716:	2300      	movs	r3, #0
 8018718:	2200      	movs	r2, #0
 801871a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801871e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018722:	f002 facb 	bl	801acbc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8018726:	f000 fe83 	bl	8019430 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801872a:	2300      	movs	r3, #0
 801872c:	9300      	str	r3, [sp, #0]
 801872e:	4b10      	ldr	r3, [pc, #64]	; (8018770 <RadioInit+0xa8>)
 8018730:	2200      	movs	r2, #0
 8018732:	f04f 31ff 	mov.w	r1, #4294967295
 8018736:	480f      	ldr	r0, [pc, #60]	; (8018774 <RadioInit+0xac>)
 8018738:	f003 ffdc 	bl	801c6f4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801873c:	2300      	movs	r3, #0
 801873e:	9300      	str	r3, [sp, #0]
 8018740:	4b0d      	ldr	r3, [pc, #52]	; (8018778 <RadioInit+0xb0>)
 8018742:	2200      	movs	r2, #0
 8018744:	f04f 31ff 	mov.w	r1, #4294967295
 8018748:	480c      	ldr	r0, [pc, #48]	; (801877c <RadioInit+0xb4>)
 801874a:	f003 ffd3 	bl	801c6f4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801874e:	4809      	ldr	r0, [pc, #36]	; (8018774 <RadioInit+0xac>)
 8018750:	f004 f874 	bl	801c83c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018754:	4809      	ldr	r0, [pc, #36]	; (801877c <RadioInit+0xb4>)
 8018756:	f004 f871 	bl	801c83c <UTIL_TIMER_Stop>
}
 801875a:	bf00      	nop
 801875c:	3708      	adds	r7, #8
 801875e:	46bd      	mov	sp, r7
 8018760:	bd80      	pop	{r7, pc}
 8018762:	bf00      	nop
 8018764:	20001b40 	.word	0x20001b40
 8018768:	20001b44 	.word	0x20001b44
 801876c:	0801981d 	.word	0x0801981d
 8018770:	080197a5 	.word	0x080197a5
 8018774:	20001ba0 	.word	0x20001ba0
 8018778:	080197b9 	.word	0x080197b9
 801877c:	20001bb8 	.word	0x20001bb8

08018780 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018780:	b580      	push	{r7, lr}
 8018782:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018784:	f001 ff80 	bl	801a688 <SUBGRF_GetOperatingMode>
 8018788:	4603      	mov	r3, r0
 801878a:	2b07      	cmp	r3, #7
 801878c:	d00a      	beq.n	80187a4 <RadioGetStatus+0x24>
 801878e:	2b07      	cmp	r3, #7
 8018790:	dc0a      	bgt.n	80187a8 <RadioGetStatus+0x28>
 8018792:	2b04      	cmp	r3, #4
 8018794:	d002      	beq.n	801879c <RadioGetStatus+0x1c>
 8018796:	2b05      	cmp	r3, #5
 8018798:	d002      	beq.n	80187a0 <RadioGetStatus+0x20>
 801879a:	e005      	b.n	80187a8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801879c:	2302      	movs	r3, #2
 801879e:	e004      	b.n	80187aa <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80187a0:	2301      	movs	r3, #1
 80187a2:	e002      	b.n	80187aa <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80187a4:	2303      	movs	r3, #3
 80187a6:	e000      	b.n	80187aa <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80187a8:	2300      	movs	r3, #0
    }
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	bd80      	pop	{r7, pc}
	...

080187b0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	4603      	mov	r3, r0
 80187b8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80187ba:	4a2a      	ldr	r2, [pc, #168]	; (8018864 <RadioSetModem+0xb4>)
 80187bc:	79fb      	ldrb	r3, [r7, #7]
 80187be:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80187c0:	79fb      	ldrb	r3, [r7, #7]
 80187c2:	4618      	mov	r0, r3
 80187c4:	f003 f943 	bl	801ba4e <RFW_SetRadioModem>
    switch( modem )
 80187c8:	79fb      	ldrb	r3, [r7, #7]
 80187ca:	2b05      	cmp	r3, #5
 80187cc:	d80e      	bhi.n	80187ec <RadioSetModem+0x3c>
 80187ce:	a201      	add	r2, pc, #4	; (adr r2, 80187d4 <RadioSetModem+0x24>)
 80187d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187d4:	080187fb 	.word	0x080187fb
 80187d8:	08018809 	.word	0x08018809
 80187dc:	080187ed 	.word	0x080187ed
 80187e0:	0801882f 	.word	0x0801882f
 80187e4:	0801883d 	.word	0x0801883d
 80187e8:	0801884b 	.word	0x0801884b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80187ec:	2003      	movs	r0, #3
 80187ee:	f002 fb07 	bl	801ae00 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80187f2:	4b1c      	ldr	r3, [pc, #112]	; (8018864 <RadioSetModem+0xb4>)
 80187f4:	2200      	movs	r2, #0
 80187f6:	735a      	strb	r2, [r3, #13]
        break;
 80187f8:	e02f      	b.n	801885a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80187fa:	2000      	movs	r0, #0
 80187fc:	f002 fb00 	bl	801ae00 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018800:	4b18      	ldr	r3, [pc, #96]	; (8018864 <RadioSetModem+0xb4>)
 8018802:	2200      	movs	r2, #0
 8018804:	735a      	strb	r2, [r3, #13]
        break;
 8018806:	e028      	b.n	801885a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018808:	2001      	movs	r0, #1
 801880a:	f002 faf9 	bl	801ae00 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801880e:	4b15      	ldr	r3, [pc, #84]	; (8018864 <RadioSetModem+0xb4>)
 8018810:	7b5a      	ldrb	r2, [r3, #13]
 8018812:	4b14      	ldr	r3, [pc, #80]	; (8018864 <RadioSetModem+0xb4>)
 8018814:	7b1b      	ldrb	r3, [r3, #12]
 8018816:	429a      	cmp	r2, r3
 8018818:	d01e      	beq.n	8018858 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801881a:	4b12      	ldr	r3, [pc, #72]	; (8018864 <RadioSetModem+0xb4>)
 801881c:	7b1a      	ldrb	r2, [r3, #12]
 801881e:	4b11      	ldr	r3, [pc, #68]	; (8018864 <RadioSetModem+0xb4>)
 8018820:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018822:	4b10      	ldr	r3, [pc, #64]	; (8018864 <RadioSetModem+0xb4>)
 8018824:	7b5b      	ldrb	r3, [r3, #13]
 8018826:	4618      	mov	r0, r3
 8018828:	f000 ff86 	bl	8019738 <RadioSetPublicNetwork>
        }
        break;
 801882c:	e014      	b.n	8018858 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801882e:	2002      	movs	r0, #2
 8018830:	f002 fae6 	bl	801ae00 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018834:	4b0b      	ldr	r3, [pc, #44]	; (8018864 <RadioSetModem+0xb4>)
 8018836:	2200      	movs	r2, #0
 8018838:	735a      	strb	r2, [r3, #13]
        break;
 801883a:	e00e      	b.n	801885a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801883c:	2002      	movs	r0, #2
 801883e:	f002 fadf 	bl	801ae00 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018842:	4b08      	ldr	r3, [pc, #32]	; (8018864 <RadioSetModem+0xb4>)
 8018844:	2200      	movs	r2, #0
 8018846:	735a      	strb	r2, [r3, #13]
        break;
 8018848:	e007      	b.n	801885a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801884a:	2000      	movs	r0, #0
 801884c:	f002 fad8 	bl	801ae00 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018850:	4b04      	ldr	r3, [pc, #16]	; (8018864 <RadioSetModem+0xb4>)
 8018852:	2200      	movs	r2, #0
 8018854:	735a      	strb	r2, [r3, #13]
        break;
 8018856:	e000      	b.n	801885a <RadioSetModem+0xaa>
        break;
 8018858:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801885a:	bf00      	nop
 801885c:	3708      	adds	r7, #8
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	20001b44 	.word	0x20001b44

08018868 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b082      	sub	sp, #8
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018870:	6878      	ldr	r0, [r7, #4]
 8018872:	f002 fa7f 	bl	801ad74 <SUBGRF_SetRfFrequency>
}
 8018876:	bf00      	nop
 8018878:	3708      	adds	r7, #8
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}

0801887e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801887e:	b580      	push	{r7, lr}
 8018880:	b090      	sub	sp, #64	; 0x40
 8018882:	af0a      	add	r7, sp, #40	; 0x28
 8018884:	60f8      	str	r0, [r7, #12]
 8018886:	60b9      	str	r1, [r7, #8]
 8018888:	603b      	str	r3, [r7, #0]
 801888a:	4613      	mov	r3, r2
 801888c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801888e:	2301      	movs	r3, #1
 8018890:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018892:	2300      	movs	r3, #0
 8018894:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018896:	2300      	movs	r3, #0
 8018898:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801889a:	f000 fddc 	bl	8019456 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801889e:	2000      	movs	r0, #0
 80188a0:	f7ff ff86 	bl	80187b0 <RadioSetModem>

    RadioSetChannel( freq );
 80188a4:	68f8      	ldr	r0, [r7, #12]
 80188a6:	f7ff ffdf 	bl	8018868 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80188aa:	2301      	movs	r3, #1
 80188ac:	9309      	str	r3, [sp, #36]	; 0x24
 80188ae:	2300      	movs	r3, #0
 80188b0:	9308      	str	r3, [sp, #32]
 80188b2:	2300      	movs	r3, #0
 80188b4:	9307      	str	r3, [sp, #28]
 80188b6:	2300      	movs	r3, #0
 80188b8:	9306      	str	r3, [sp, #24]
 80188ba:	2300      	movs	r3, #0
 80188bc:	9305      	str	r3, [sp, #20]
 80188be:	2300      	movs	r3, #0
 80188c0:	9304      	str	r3, [sp, #16]
 80188c2:	2300      	movs	r3, #0
 80188c4:	9303      	str	r3, [sp, #12]
 80188c6:	2300      	movs	r3, #0
 80188c8:	9302      	str	r3, [sp, #8]
 80188ca:	2303      	movs	r3, #3
 80188cc:	9301      	str	r3, [sp, #4]
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	9300      	str	r3, [sp, #0]
 80188d2:	2300      	movs	r3, #0
 80188d4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80188d8:	68b9      	ldr	r1, [r7, #8]
 80188da:	2000      	movs	r0, #0
 80188dc:	f000 f83c 	bl	8018958 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80188e0:	2000      	movs	r0, #0
 80188e2:	f000 fdbf 	bl	8019464 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80188e6:	f000 ff55 	bl	8019794 <RadioGetWakeupTime>
 80188ea:	4603      	mov	r3, r0
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7e9 fa2b 	bl	8001d48 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80188f2:	f004 f8bd 	bl	801ca70 <UTIL_TIMER_GetCurrentTime>
 80188f6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80188f8:	e00d      	b.n	8018916 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80188fa:	2000      	movs	r0, #0
 80188fc:	f000 fe9a 	bl	8019634 <RadioRssi>
 8018900:	4603      	mov	r3, r0
 8018902:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018904:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801890c:	429a      	cmp	r2, r3
 801890e:	dd02      	ble.n	8018916 <RadioIsChannelFree+0x98>
        {
            status = false;
 8018910:	2300      	movs	r3, #0
 8018912:	75fb      	strb	r3, [r7, #23]
            break;
 8018914:	e006      	b.n	8018924 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018916:	6938      	ldr	r0, [r7, #16]
 8018918:	f004 f8bc 	bl	801ca94 <UTIL_TIMER_GetElapsedTime>
 801891c:	4602      	mov	r2, r0
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	4293      	cmp	r3, r2
 8018922:	d8ea      	bhi.n	80188fa <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8018924:	f000 fd97 	bl	8019456 <RadioStandby>

    return status;
 8018928:	7dfb      	ldrb	r3, [r7, #23]
}
 801892a:	4618      	mov	r0, r3
 801892c:	3718      	adds	r7, #24
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}

08018932 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018932:	b580      	push	{r7, lr}
 8018934:	b082      	sub	sp, #8
 8018936:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018938:	2300      	movs	r3, #0
 801893a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801893c:	2300      	movs	r3, #0
 801893e:	2200      	movs	r2, #0
 8018940:	2100      	movs	r1, #0
 8018942:	2000      	movs	r0, #0
 8018944:	f002 f9ba 	bl	801acbc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018948:	f001 ff6f 	bl	801a82a <SUBGRF_GetRandom>
 801894c:	6078      	str	r0, [r7, #4]

    return rnd;
 801894e:	687b      	ldr	r3, [r7, #4]
}
 8018950:	4618      	mov	r0, r3
 8018952:	3708      	adds	r7, #8
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}

08018958 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b08a      	sub	sp, #40	; 0x28
 801895c:	af00      	add	r7, sp, #0
 801895e:	60b9      	str	r1, [r7, #8]
 8018960:	607a      	str	r2, [r7, #4]
 8018962:	461a      	mov	r2, r3
 8018964:	4603      	mov	r3, r0
 8018966:	73fb      	strb	r3, [r7, #15]
 8018968:	4613      	mov	r3, r2
 801896a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801896c:	4ab9      	ldr	r2, [pc, #740]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 801896e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018972:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018974:	f003 f829 	bl	801b9ca <RFW_DeInit>
    if( rxContinuous == true )
 8018978:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801897c:	2b00      	cmp	r3, #0
 801897e:	d001      	beq.n	8018984 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018980:	2300      	movs	r3, #0
 8018982:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8018984:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018988:	2b00      	cmp	r3, #0
 801898a:	d004      	beq.n	8018996 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801898c:	4ab2      	ldr	r2, [pc, #712]	; (8018c58 <RadioSetRxConfig+0x300>)
 801898e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8018992:	7013      	strb	r3, [r2, #0]
 8018994:	e002      	b.n	801899c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018996:	4bb0      	ldr	r3, [pc, #704]	; (8018c58 <RadioSetRxConfig+0x300>)
 8018998:	22ff      	movs	r2, #255	; 0xff
 801899a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801899c:	7bfb      	ldrb	r3, [r7, #15]
 801899e:	2b05      	cmp	r3, #5
 80189a0:	d009      	beq.n	80189b6 <RadioSetRxConfig+0x5e>
 80189a2:	2b05      	cmp	r3, #5
 80189a4:	f300 81ca 	bgt.w	8018d3c <RadioSetRxConfig+0x3e4>
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	f000 80bf 	beq.w	8018b2c <RadioSetRxConfig+0x1d4>
 80189ae:	2b01      	cmp	r3, #1
 80189b0:	f000 8124 	beq.w	8018bfc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80189b4:	e1c2      	b.n	8018d3c <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80189b6:	2001      	movs	r0, #1
 80189b8:	f002 f87c 	bl	801aab4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80189bc:	4ba5      	ldr	r3, [pc, #660]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189be:	2200      	movs	r2, #0
 80189c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80189c4:	4aa3      	ldr	r2, [pc, #652]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80189ca:	4ba2      	ldr	r3, [pc, #648]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189cc:	2209      	movs	r2, #9
 80189ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80189d2:	4ba0      	ldr	r3, [pc, #640]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80189d8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80189da:	68b8      	ldr	r0, [r7, #8]
 80189dc:	f002 ff28 	bl	801b830 <SUBGRF_GetFskBandwidthRegValue>
 80189e0:	4603      	mov	r3, r0
 80189e2:	461a      	mov	r2, r3
 80189e4:	4b9b      	ldr	r3, [pc, #620]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80189ea:	4b9a      	ldr	r3, [pc, #616]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189ec:	2200      	movs	r2, #0
 80189ee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80189f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80189f2:	00db      	lsls	r3, r3, #3
 80189f4:	b29a      	uxth	r2, r3
 80189f6:	4b97      	ldr	r3, [pc, #604]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189f8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80189fa:	4b96      	ldr	r3, [pc, #600]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 80189fc:	2200      	movs	r2, #0
 80189fe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018a00:	4b94      	ldr	r3, [pc, #592]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018a02:	2210      	movs	r2, #16
 8018a04:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018a06:	4b93      	ldr	r3, [pc, #588]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018a08:	2200      	movs	r2, #0
 8018a0a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018a0c:	4b91      	ldr	r3, [pc, #580]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018a0e:	2200      	movs	r2, #0
 8018a10:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018a12:	4b91      	ldr	r3, [pc, #580]	; (8018c58 <RadioSetRxConfig+0x300>)
 8018a14:	781a      	ldrb	r2, [r3, #0]
 8018a16:	4b8f      	ldr	r3, [pc, #572]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018a18:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018a1a:	4b8e      	ldr	r3, [pc, #568]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018a1c:	2201      	movs	r2, #1
 8018a1e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018a20:	4b8c      	ldr	r3, [pc, #560]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018a22:	2200      	movs	r2, #0
 8018a24:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018a26:	2005      	movs	r0, #5
 8018a28:	f7ff fec2 	bl	80187b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a2c:	488b      	ldr	r0, [pc, #556]	; (8018c5c <RadioSetRxConfig+0x304>)
 8018a2e:	f002 fadb 	bl	801afe8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a32:	488b      	ldr	r0, [pc, #556]	; (8018c60 <RadioSetRxConfig+0x308>)
 8018a34:	f002 fbaa 	bl	801b18c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018a38:	4a8a      	ldr	r2, [pc, #552]	; (8018c64 <RadioSetRxConfig+0x30c>)
 8018a3a:	f107 031c 	add.w	r3, r7, #28
 8018a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a42:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a46:	f107 031c 	add.w	r3, r7, #28
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f001 fe6b 	bl	801a726 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018a50:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018a54:	f001 feb6 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8018a58:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018a5c:	f000 fe09 	bl	8019672 <RadioRead>
 8018a60:	4603      	mov	r3, r0
 8018a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a6a:	f023 0310 	bic.w	r3, r3, #16
 8018a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a76:	4619      	mov	r1, r3
 8018a78:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018a7c:	f000 fde7 	bl	801964e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8018a80:	2104      	movs	r1, #4
 8018a82:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8018a86:	f000 fde2 	bl	801964e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8018a8a:	f640 009b 	movw	r0, #2203	; 0x89b
 8018a8e:	f000 fdf0 	bl	8019672 <RadioRead>
 8018a92:	4603      	mov	r3, r0
 8018a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a9c:	f023 031c 	bic.w	r3, r3, #28
 8018aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aa8:	f043 0308 	orr.w	r3, r3, #8
 8018aac:	b2db      	uxtb	r3, r3
 8018aae:	4619      	mov	r1, r3
 8018ab0:	f640 009b 	movw	r0, #2203	; 0x89b
 8018ab4:	f000 fdcb 	bl	801964e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018ab8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018abc:	f000 fdd9 	bl	8019672 <RadioRead>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aca:	f023 0318 	bic.w	r3, r3, #24
 8018ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ad6:	f043 0318 	orr.w	r3, r3, #24
 8018ada:	b2db      	uxtb	r3, r3
 8018adc:	4619      	mov	r1, r3
 8018ade:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018ae2:	f000 fdb4 	bl	801964e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018ae6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018aea:	f000 fdc2 	bl	8019672 <RadioRead>
 8018aee:	4603      	mov	r3, r0
 8018af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b04:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8018b08:	b2db      	uxtb	r3, r3
 8018b0a:	4619      	mov	r1, r3
 8018b0c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018b10:	f000 fd9d 	bl	801964e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018b14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018b16:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018b1a:	fb02 f303 	mul.w	r3, r2, r3
 8018b1e:	461a      	mov	r2, r3
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b26:	4a4b      	ldr	r2, [pc, #300]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b28:	6093      	str	r3, [r2, #8]
            break;
 8018b2a:	e108      	b.n	8018d3e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018b2c:	2000      	movs	r0, #0
 8018b2e:	f001 ffc1 	bl	801aab4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018b32:	4b48      	ldr	r3, [pc, #288]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b34:	2200      	movs	r2, #0
 8018b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018b3a:	4a46      	ldr	r2, [pc, #280]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018b40:	4b44      	ldr	r3, [pc, #272]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b42:	220b      	movs	r2, #11
 8018b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018b48:	68b8      	ldr	r0, [r7, #8]
 8018b4a:	f002 fe71 	bl	801b830 <SUBGRF_GetFskBandwidthRegValue>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	461a      	mov	r2, r3
 8018b52:	4b40      	ldr	r3, [pc, #256]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018b58:	4b3e      	ldr	r3, [pc, #248]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018b5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018b60:	00db      	lsls	r3, r3, #3
 8018b62:	b29a      	uxth	r2, r3
 8018b64:	4b3b      	ldr	r3, [pc, #236]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b66:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018b68:	4b3a      	ldr	r3, [pc, #232]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b6a:	2204      	movs	r2, #4
 8018b6c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018b6e:	4b39      	ldr	r3, [pc, #228]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b70:	2218      	movs	r2, #24
 8018b72:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018b74:	4b37      	ldr	r3, [pc, #220]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b76:	2200      	movs	r2, #0
 8018b78:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018b7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018b7e:	f083 0301 	eor.w	r3, r3, #1
 8018b82:	b2db      	uxtb	r3, r3
 8018b84:	461a      	mov	r2, r3
 8018b86:	4b33      	ldr	r3, [pc, #204]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b88:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018b8a:	4b33      	ldr	r3, [pc, #204]	; (8018c58 <RadioSetRxConfig+0x300>)
 8018b8c:	781a      	ldrb	r2, [r3, #0]
 8018b8e:	4b31      	ldr	r3, [pc, #196]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b90:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018b92:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d003      	beq.n	8018ba2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018b9a:	4b2e      	ldr	r3, [pc, #184]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018b9c:	22f2      	movs	r2, #242	; 0xf2
 8018b9e:	75da      	strb	r2, [r3, #23]
 8018ba0:	e002      	b.n	8018ba8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018ba2:	4b2c      	ldr	r3, [pc, #176]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018ba4:	2201      	movs	r2, #1
 8018ba6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018ba8:	4b2a      	ldr	r3, [pc, #168]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018baa:	2201      	movs	r2, #1
 8018bac:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018bae:	f000 fc52 	bl	8019456 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018bb2:	2000      	movs	r0, #0
 8018bb4:	f7ff fdfc 	bl	80187b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018bb8:	4828      	ldr	r0, [pc, #160]	; (8018c5c <RadioSetRxConfig+0x304>)
 8018bba:	f002 fa15 	bl	801afe8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018bbe:	4828      	ldr	r0, [pc, #160]	; (8018c60 <RadioSetRxConfig+0x308>)
 8018bc0:	f002 fae4 	bl	801b18c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018bc4:	4a28      	ldr	r2, [pc, #160]	; (8018c68 <RadioSetRxConfig+0x310>)
 8018bc6:	f107 0314 	add.w	r3, r7, #20
 8018bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bce:	e883 0003 	stmia.w	r3, {r0, r1}
 8018bd2:	f107 0314 	add.w	r3, r7, #20
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f001 fda5 	bl	801a726 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018bdc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018be0:	f001 fdf0 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018be4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018be6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018bea:	fb02 f303 	mul.w	r3, r2, r3
 8018bee:	461a      	mov	r2, r3
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018bf6:	4a17      	ldr	r2, [pc, #92]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018bf8:	6093      	str	r3, [r2, #8]
            break;
 8018bfa:	e0a0      	b.n	8018d3e <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018bfc:	2000      	movs	r0, #0
 8018bfe:	f001 ff59 	bl	801aab4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018c02:	4b14      	ldr	r3, [pc, #80]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018c04:	2201      	movs	r2, #1
 8018c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	b2da      	uxtb	r2, r3
 8018c0e:	4b11      	ldr	r3, [pc, #68]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018c14:	4a15      	ldr	r2, [pc, #84]	; (8018c6c <RadioSetRxConfig+0x314>)
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	4413      	add	r3, r2
 8018c1a:	781a      	ldrb	r2, [r3, #0]
 8018c1c:	4b0d      	ldr	r3, [pc, #52]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018c22:	4a0c      	ldr	r2, [pc, #48]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018c24:	7bbb      	ldrb	r3, [r7, #14]
 8018c26:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d105      	bne.n	8018c3c <RadioSetRxConfig+0x2e4>
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2b0b      	cmp	r3, #11
 8018c34:	d008      	beq.n	8018c48 <RadioSetRxConfig+0x2f0>
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2b0c      	cmp	r3, #12
 8018c3a:	d005      	beq.n	8018c48 <RadioSetRxConfig+0x2f0>
 8018c3c:	68bb      	ldr	r3, [r7, #8]
 8018c3e:	2b01      	cmp	r3, #1
 8018c40:	d116      	bne.n	8018c70 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	2b0c      	cmp	r3, #12
 8018c46:	d113      	bne.n	8018c70 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018c48:	4b02      	ldr	r3, [pc, #8]	; (8018c54 <RadioSetRxConfig+0x2fc>)
 8018c4a:	2201      	movs	r2, #1
 8018c4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018c50:	e012      	b.n	8018c78 <RadioSetRxConfig+0x320>
 8018c52:	bf00      	nop
 8018c54:	20001b44 	.word	0x20001b44
 8018c58:	20000144 	.word	0x20000144
 8018c5c:	20001b7c 	.word	0x20001b7c
 8018c60:	20001b52 	.word	0x20001b52
 8018c64:	0801daf0 	.word	0x0801daf0
 8018c68:	0801daf8 	.word	0x0801daf8
 8018c6c:	0801e158 	.word	0x0801e158
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018c70:	4b35      	ldr	r3, [pc, #212]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018c72:	2200      	movs	r2, #0
 8018c74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018c78:	4b33      	ldr	r3, [pc, #204]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018c7a:	2201      	movs	r2, #1
 8018c7c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018c7e:	4b32      	ldr	r3, [pc, #200]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018c84:	2b05      	cmp	r3, #5
 8018c86:	d004      	beq.n	8018c92 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018c88:	4b2f      	ldr	r3, [pc, #188]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018c8e:	2b06      	cmp	r3, #6
 8018c90:	d10a      	bne.n	8018ca8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018c92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018c94:	2b0b      	cmp	r3, #11
 8018c96:	d803      	bhi.n	8018ca0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018c98:	4b2b      	ldr	r3, [pc, #172]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018c9a:	220c      	movs	r2, #12
 8018c9c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018c9e:	e006      	b.n	8018cae <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018ca0:	4a29      	ldr	r2, [pc, #164]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018ca2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ca4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018ca6:	e002      	b.n	8018cae <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018ca8:	4a27      	ldr	r2, [pc, #156]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018caa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018cac:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018cae:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018cb2:	4b25      	ldr	r3, [pc, #148]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018cb4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018cb6:	4b25      	ldr	r3, [pc, #148]	; (8018d4c <RadioSetRxConfig+0x3f4>)
 8018cb8:	781a      	ldrb	r2, [r3, #0]
 8018cba:	4b23      	ldr	r3, [pc, #140]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018cbc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018cbe:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018cc2:	4b21      	ldr	r3, [pc, #132]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018cc4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018cc8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8018ccc:	4b1e      	ldr	r3, [pc, #120]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018cd2:	f000 fbc0 	bl	8019456 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018cd6:	2001      	movs	r0, #1
 8018cd8:	f7ff fd6a 	bl	80187b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018cdc:	481c      	ldr	r0, [pc, #112]	; (8018d50 <RadioSetRxConfig+0x3f8>)
 8018cde:	f002 f983 	bl	801afe8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ce2:	481c      	ldr	r0, [pc, #112]	; (8018d54 <RadioSetRxConfig+0x3fc>)
 8018ce4:	f002 fa52 	bl	801b18c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018ce8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018cea:	b2db      	uxtb	r3, r3
 8018cec:	4618      	mov	r0, r3
 8018cee:	f001 fef0 	bl	801aad2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018cf2:	4b15      	ldr	r3, [pc, #84]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018cf8:	2b01      	cmp	r3, #1
 8018cfa:	d10d      	bne.n	8018d18 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018cfc:	f240 7036 	movw	r0, #1846	; 0x736
 8018d00:	f002 fba0 	bl	801b444 <SUBGRF_ReadRegister>
 8018d04:	4603      	mov	r3, r0
 8018d06:	f023 0304 	bic.w	r3, r3, #4
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	4619      	mov	r1, r3
 8018d0e:	f240 7036 	movw	r0, #1846	; 0x736
 8018d12:	f002 fb83 	bl	801b41c <SUBGRF_WriteRegister>
 8018d16:	e00c      	b.n	8018d32 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018d18:	f240 7036 	movw	r0, #1846	; 0x736
 8018d1c:	f002 fb92 	bl	801b444 <SUBGRF_ReadRegister>
 8018d20:	4603      	mov	r3, r0
 8018d22:	f043 0304 	orr.w	r3, r3, #4
 8018d26:	b2db      	uxtb	r3, r3
 8018d28:	4619      	mov	r1, r3
 8018d2a:	f240 7036 	movw	r0, #1846	; 0x736
 8018d2e:	f002 fb75 	bl	801b41c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018d32:	4b05      	ldr	r3, [pc, #20]	; (8018d48 <RadioSetRxConfig+0x3f0>)
 8018d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d38:	609a      	str	r2, [r3, #8]
            break;
 8018d3a:	e000      	b.n	8018d3e <RadioSetRxConfig+0x3e6>
            break;
 8018d3c:	bf00      	nop
    }
}
 8018d3e:	bf00      	nop
 8018d40:	3728      	adds	r7, #40	; 0x28
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	20001b44 	.word	0x20001b44
 8018d4c:	20000144 	.word	0x20000144
 8018d50:	20001b7c 	.word	0x20001b7c
 8018d54:	20001b52 	.word	0x20001b52

08018d58 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b086      	sub	sp, #24
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	60ba      	str	r2, [r7, #8]
 8018d60:	607b      	str	r3, [r7, #4]
 8018d62:	4603      	mov	r3, r0
 8018d64:	73fb      	strb	r3, [r7, #15]
 8018d66:	460b      	mov	r3, r1
 8018d68:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018d6a:	f002 fe2e 	bl	801b9ca <RFW_DeInit>
    switch( modem )
 8018d6e:	7bfb      	ldrb	r3, [r7, #15]
 8018d70:	2b04      	cmp	r3, #4
 8018d72:	f000 80c7 	beq.w	8018f04 <RadioSetTxConfig+0x1ac>
 8018d76:	2b04      	cmp	r3, #4
 8018d78:	f300 80d6 	bgt.w	8018f28 <RadioSetTxConfig+0x1d0>
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d002      	beq.n	8018d86 <RadioSetTxConfig+0x2e>
 8018d80:	2b01      	cmp	r3, #1
 8018d82:	d059      	beq.n	8018e38 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018d84:	e0d0      	b.n	8018f28 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018d86:	4b74      	ldr	r3, [pc, #464]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018d88:	2200      	movs	r2, #0
 8018d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018d8e:	4a72      	ldr	r2, [pc, #456]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018d90:	6a3b      	ldr	r3, [r7, #32]
 8018d92:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018d94:	4b70      	ldr	r3, [pc, #448]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018d96:	220b      	movs	r2, #11
 8018d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f002 fd47 	bl	801b830 <SUBGRF_GetFskBandwidthRegValue>
 8018da2:	4603      	mov	r3, r0
 8018da4:	461a      	mov	r2, r3
 8018da6:	4b6c      	ldr	r3, [pc, #432]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018dac:	4a6a      	ldr	r2, [pc, #424]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018dae:	68bb      	ldr	r3, [r7, #8]
 8018db0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018db2:	4b69      	ldr	r3, [pc, #420]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018db4:	2200      	movs	r2, #0
 8018db6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018db8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018dba:	00db      	lsls	r3, r3, #3
 8018dbc:	b29a      	uxth	r2, r3
 8018dbe:	4b66      	ldr	r3, [pc, #408]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018dc0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018dc2:	4b65      	ldr	r3, [pc, #404]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018dc4:	2204      	movs	r2, #4
 8018dc6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018dc8:	4b63      	ldr	r3, [pc, #396]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018dca:	2218      	movs	r2, #24
 8018dcc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018dce:	4b62      	ldr	r3, [pc, #392]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018dd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018dd8:	f083 0301 	eor.w	r3, r3, #1
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	461a      	mov	r2, r3
 8018de0:	4b5d      	ldr	r3, [pc, #372]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018de2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018de4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d003      	beq.n	8018df4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018dec:	4b5a      	ldr	r3, [pc, #360]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018dee:	22f2      	movs	r2, #242	; 0xf2
 8018df0:	75da      	strb	r2, [r3, #23]
 8018df2:	e002      	b.n	8018dfa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018df4:	4b58      	ldr	r3, [pc, #352]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018df6:	2201      	movs	r2, #1
 8018df8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018dfa:	4b57      	ldr	r3, [pc, #348]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018dfc:	2201      	movs	r2, #1
 8018dfe:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018e00:	f000 fb29 	bl	8019456 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018e04:	2000      	movs	r0, #0
 8018e06:	f7ff fcd3 	bl	80187b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e0a:	4854      	ldr	r0, [pc, #336]	; (8018f5c <RadioSetTxConfig+0x204>)
 8018e0c:	f002 f8ec 	bl	801afe8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e10:	4853      	ldr	r0, [pc, #332]	; (8018f60 <RadioSetTxConfig+0x208>)
 8018e12:	f002 f9bb 	bl	801b18c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018e16:	4a53      	ldr	r2, [pc, #332]	; (8018f64 <RadioSetTxConfig+0x20c>)
 8018e18:	f107 0310 	add.w	r3, r7, #16
 8018e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e20:	e883 0003 	stmia.w	r3, {r0, r1}
 8018e24:	f107 0310 	add.w	r3, r7, #16
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f001 fc7c 	bl	801a726 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018e2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018e32:	f001 fcc7 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
            break;
 8018e36:	e078      	b.n	8018f2a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018e38:	4b47      	ldr	r3, [pc, #284]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e3a:	2201      	movs	r2, #1
 8018e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018e40:	6a3b      	ldr	r3, [r7, #32]
 8018e42:	b2da      	uxtb	r2, r3
 8018e44:	4b44      	ldr	r3, [pc, #272]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018e4a:	4a47      	ldr	r2, [pc, #284]	; (8018f68 <RadioSetTxConfig+0x210>)
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	4413      	add	r3, r2
 8018e50:	781a      	ldrb	r2, [r3, #0]
 8018e52:	4b41      	ldr	r3, [pc, #260]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018e58:	4a3f      	ldr	r2, [pc, #252]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e5e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d105      	bne.n	8018e74 <RadioSetTxConfig+0x11c>
 8018e68:	6a3b      	ldr	r3, [r7, #32]
 8018e6a:	2b0b      	cmp	r3, #11
 8018e6c:	d008      	beq.n	8018e80 <RadioSetTxConfig+0x128>
 8018e6e:	6a3b      	ldr	r3, [r7, #32]
 8018e70:	2b0c      	cmp	r3, #12
 8018e72:	d005      	beq.n	8018e80 <RadioSetTxConfig+0x128>
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2b01      	cmp	r3, #1
 8018e78:	d107      	bne.n	8018e8a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018e7a:	6a3b      	ldr	r3, [r7, #32]
 8018e7c:	2b0c      	cmp	r3, #12
 8018e7e:	d104      	bne.n	8018e8a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018e80:	4b35      	ldr	r3, [pc, #212]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e82:	2201      	movs	r2, #1
 8018e84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018e88:	e003      	b.n	8018e92 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018e8a:	4b33      	ldr	r3, [pc, #204]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018e92:	4b31      	ldr	r3, [pc, #196]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e94:	2201      	movs	r2, #1
 8018e96:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018e98:	4b2f      	ldr	r3, [pc, #188]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018e9e:	2b05      	cmp	r3, #5
 8018ea0:	d004      	beq.n	8018eac <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018ea2:	4b2d      	ldr	r3, [pc, #180]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018ea4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ea8:	2b06      	cmp	r3, #6
 8018eaa:	d10a      	bne.n	8018ec2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018eac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018eae:	2b0b      	cmp	r3, #11
 8018eb0:	d803      	bhi.n	8018eba <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018eb2:	4b29      	ldr	r3, [pc, #164]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018eb4:	220c      	movs	r2, #12
 8018eb6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018eb8:	e006      	b.n	8018ec8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018eba:	4a27      	ldr	r2, [pc, #156]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018ebc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018ebe:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018ec0:	e002      	b.n	8018ec8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018ec2:	4a25      	ldr	r2, [pc, #148]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018ec6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018ec8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018ecc:	4b22      	ldr	r3, [pc, #136]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018ece:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018ed0:	4b26      	ldr	r3, [pc, #152]	; (8018f6c <RadioSetTxConfig+0x214>)
 8018ed2:	781a      	ldrb	r2, [r3, #0]
 8018ed4:	4b20      	ldr	r3, [pc, #128]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018ed6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018ed8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018edc:	4b1e      	ldr	r3, [pc, #120]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018ede:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018ee2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018ee6:	4b1c      	ldr	r3, [pc, #112]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018eec:	f000 fab3 	bl	8019456 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018ef0:	2001      	movs	r0, #1
 8018ef2:	f7ff fc5d 	bl	80187b0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ef6:	4819      	ldr	r0, [pc, #100]	; (8018f5c <RadioSetTxConfig+0x204>)
 8018ef8:	f002 f876 	bl	801afe8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018efc:	4818      	ldr	r0, [pc, #96]	; (8018f60 <RadioSetTxConfig+0x208>)
 8018efe:	f002 f945 	bl	801b18c <SUBGRF_SetPacketParams>
            break;
 8018f02:	e012      	b.n	8018f2a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018f04:	2004      	movs	r0, #4
 8018f06:	f7ff fc53 	bl	80187b0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018f0a:	4b13      	ldr	r3, [pc, #76]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018f0c:	2202      	movs	r2, #2
 8018f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018f12:	4a11      	ldr	r2, [pc, #68]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018f14:	6a3b      	ldr	r3, [r7, #32]
 8018f16:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018f18:	4b0f      	ldr	r3, [pc, #60]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018f1a:	2216      	movs	r2, #22
 8018f1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f20:	480e      	ldr	r0, [pc, #56]	; (8018f5c <RadioSetTxConfig+0x204>)
 8018f22:	f002 f861 	bl	801afe8 <SUBGRF_SetModulationParams>
            break;
 8018f26:	e000      	b.n	8018f2a <RadioSetTxConfig+0x1d2>
            break;
 8018f28:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f002 fb90 	bl	801b654 <SUBGRF_SetRfTxPower>
 8018f34:	4603      	mov	r3, r0
 8018f36:	461a      	mov	r2, r3
 8018f38:	4b07      	ldr	r3, [pc, #28]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018f3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018f3e:	4b06      	ldr	r3, [pc, #24]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018f40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018f44:	4618      	mov	r0, r3
 8018f46:	f002 fd54 	bl	801b9f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018f4a:	4a03      	ldr	r2, [pc, #12]	; (8018f58 <RadioSetTxConfig+0x200>)
 8018f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f4e:	6053      	str	r3, [r2, #4]
}
 8018f50:	bf00      	nop
 8018f52:	3718      	adds	r7, #24
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}
 8018f58:	20001b44 	.word	0x20001b44
 8018f5c:	20001b7c 	.word	0x20001b7c
 8018f60:	20001b52 	.word	0x20001b52
 8018f64:	0801daf8 	.word	0x0801daf8
 8018f68:	0801e158 	.word	0x0801e158
 8018f6c:	20000144 	.word	0x20000144

08018f70 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018f70:	b480      	push	{r7}
 8018f72:	b083      	sub	sp, #12
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
    return true;
 8018f78:	2301      	movs	r3, #1
}
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	370c      	adds	r7, #12
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bc80      	pop	{r7}
 8018f82:	4770      	bx	lr

08018f84 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018f84:	b480      	push	{r7}
 8018f86:	b085      	sub	sp, #20
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018f92:	79fb      	ldrb	r3, [r7, #7]
 8018f94:	2b0a      	cmp	r3, #10
 8018f96:	d83e      	bhi.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
 8018f98:	a201      	add	r2, pc, #4	; (adr r2, 8018fa0 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f9e:	bf00      	nop
 8018fa0:	08018fcd 	.word	0x08018fcd
 8018fa4:	08018fdd 	.word	0x08018fdd
 8018fa8:	08018fed 	.word	0x08018fed
 8018fac:	08018ffd 	.word	0x08018ffd
 8018fb0:	08019005 	.word	0x08019005
 8018fb4:	0801900b 	.word	0x0801900b
 8018fb8:	08019011 	.word	0x08019011
 8018fbc:	08019017 	.word	0x08019017
 8018fc0:	08018fd5 	.word	0x08018fd5
 8018fc4:	08018fe5 	.word	0x08018fe5
 8018fc8:	08018ff5 	.word	0x08018ff5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018fcc:	f641 6384 	movw	r3, #7812	; 0x1e84
 8018fd0:	60fb      	str	r3, [r7, #12]
        break;
 8018fd2:	e020      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018fd4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8018fd8:	60fb      	str	r3, [r7, #12]
        break;
 8018fda:	e01c      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018fdc:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018fe0:	60fb      	str	r3, [r7, #12]
        break;
 8018fe2:	e018      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018fe4:	f245 1361 	movw	r3, #20833	; 0x5161
 8018fe8:	60fb      	str	r3, [r7, #12]
        break;
 8018fea:	e014      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018fec:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018ff0:	60fb      	str	r3, [r7, #12]
        break;
 8018ff2:	e010      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018ff4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8018ff8:	60fb      	str	r3, [r7, #12]
        break;
 8018ffa:	e00c      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018ffc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019000:	60fb      	str	r3, [r7, #12]
        break;
 8019002:	e008      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019004:	4b07      	ldr	r3, [pc, #28]	; (8019024 <RadioGetLoRaBandwidthInHz+0xa0>)
 8019006:	60fb      	str	r3, [r7, #12]
        break;
 8019008:	e005      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801900a:	4b07      	ldr	r3, [pc, #28]	; (8019028 <RadioGetLoRaBandwidthInHz+0xa4>)
 801900c:	60fb      	str	r3, [r7, #12]
        break;
 801900e:	e002      	b.n	8019016 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019010:	4b06      	ldr	r3, [pc, #24]	; (801902c <RadioGetLoRaBandwidthInHz+0xa8>)
 8019012:	60fb      	str	r3, [r7, #12]
        break;
 8019014:	bf00      	nop
    }

    return bandwidthInHz;
 8019016:	68fb      	ldr	r3, [r7, #12]
}
 8019018:	4618      	mov	r0, r3
 801901a:	3714      	adds	r7, #20
 801901c:	46bd      	mov	sp, r7
 801901e:	bc80      	pop	{r7}
 8019020:	4770      	bx	lr
 8019022:	bf00      	nop
 8019024:	0001e848 	.word	0x0001e848
 8019028:	0003d090 	.word	0x0003d090
 801902c:	0007a120 	.word	0x0007a120

08019030 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019030:	b480      	push	{r7}
 8019032:	b083      	sub	sp, #12
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	4608      	mov	r0, r1
 801903a:	4611      	mov	r1, r2
 801903c:	461a      	mov	r2, r3
 801903e:	4603      	mov	r3, r0
 8019040:	70fb      	strb	r3, [r7, #3]
 8019042:	460b      	mov	r3, r1
 8019044:	803b      	strh	r3, [r7, #0]
 8019046:	4613      	mov	r3, r2
 8019048:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801904a:	883b      	ldrh	r3, [r7, #0]
 801904c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801904e:	78ba      	ldrb	r2, [r7, #2]
 8019050:	f082 0201 	eor.w	r2, r2, #1
 8019054:	b2d2      	uxtb	r2, r2
 8019056:	2a00      	cmp	r2, #0
 8019058:	d001      	beq.n	801905e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801905a:	2208      	movs	r2, #8
 801905c:	e000      	b.n	8019060 <RadioGetGfskTimeOnAirNumerator+0x30>
 801905e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019060:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019062:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019066:	7c3b      	ldrb	r3, [r7, #16]
 8019068:	7d39      	ldrb	r1, [r7, #20]
 801906a:	2900      	cmp	r1, #0
 801906c:	d001      	beq.n	8019072 <RadioGetGfskTimeOnAirNumerator+0x42>
 801906e:	2102      	movs	r1, #2
 8019070:	e000      	b.n	8019074 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019072:	2100      	movs	r1, #0
 8019074:	440b      	add	r3, r1
 8019076:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019078:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801907a:	4618      	mov	r0, r3
 801907c:	370c      	adds	r7, #12
 801907e:	46bd      	mov	sp, r7
 8019080:	bc80      	pop	{r7}
 8019082:	4770      	bx	lr

08019084 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019084:	b480      	push	{r7}
 8019086:	b08b      	sub	sp, #44	; 0x2c
 8019088:	af00      	add	r7, sp, #0
 801908a:	60f8      	str	r0, [r7, #12]
 801908c:	60b9      	str	r1, [r7, #8]
 801908e:	4611      	mov	r1, r2
 8019090:	461a      	mov	r2, r3
 8019092:	460b      	mov	r3, r1
 8019094:	71fb      	strb	r3, [r7, #7]
 8019096:	4613      	mov	r3, r2
 8019098:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801909a:	79fb      	ldrb	r3, [r7, #7]
 801909c:	3304      	adds	r3, #4
 801909e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80190a0:	2300      	movs	r3, #0
 80190a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	2b05      	cmp	r3, #5
 80190aa:	d002      	beq.n	80190b2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	2b06      	cmp	r3, #6
 80190b0:	d104      	bne.n	80190bc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80190b2:	88bb      	ldrh	r3, [r7, #4]
 80190b4:	2b0b      	cmp	r3, #11
 80190b6:	d801      	bhi.n	80190bc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80190b8:	230c      	movs	r3, #12
 80190ba:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d105      	bne.n	80190ce <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80190c2:	68bb      	ldr	r3, [r7, #8]
 80190c4:	2b0b      	cmp	r3, #11
 80190c6:	d008      	beq.n	80190da <RadioGetLoRaTimeOnAirNumerator+0x56>
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	2b0c      	cmp	r3, #12
 80190cc:	d005      	beq.n	80190da <RadioGetLoRaTimeOnAirNumerator+0x56>
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	2b01      	cmp	r3, #1
 80190d2:	d105      	bne.n	80190e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80190d4:	68bb      	ldr	r3, [r7, #8]
 80190d6:	2b0c      	cmp	r3, #12
 80190d8:	d102      	bne.n	80190e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80190da:	2301      	movs	r3, #1
 80190dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80190e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80190e4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80190e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80190ea:	2a00      	cmp	r2, #0
 80190ec:	d001      	beq.n	80190f2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80190ee:	2210      	movs	r2, #16
 80190f0:	e000      	b.n	80190f4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80190f2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80190f4:	4413      	add	r3, r2
 80190f6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80190f8:	68bb      	ldr	r3, [r7, #8]
 80190fa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80190fc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80190fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019102:	2a00      	cmp	r2, #0
 8019104:	d001      	beq.n	801910a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019106:	2200      	movs	r2, #0
 8019108:	e000      	b.n	801910c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801910a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801910c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801910e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	2b06      	cmp	r3, #6
 8019114:	d803      	bhi.n	801911e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	009b      	lsls	r3, r3, #2
 801911a:	623b      	str	r3, [r7, #32]
 801911c:	e00e      	b.n	801913c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801911e:	69fb      	ldr	r3, [r7, #28]
 8019120:	3308      	adds	r3, #8
 8019122:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8019124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019128:	2b00      	cmp	r3, #0
 801912a:	d004      	beq.n	8019136 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	3b02      	subs	r3, #2
 8019130:	009b      	lsls	r3, r3, #2
 8019132:	623b      	str	r3, [r7, #32]
 8019134:	e002      	b.n	801913c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	009b      	lsls	r3, r3, #2
 801913a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801913c:	69fb      	ldr	r3, [r7, #28]
 801913e:	2b00      	cmp	r3, #0
 8019140:	da01      	bge.n	8019146 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8019142:	2300      	movs	r3, #0
 8019144:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019146:	69fa      	ldr	r2, [r7, #28]
 8019148:	6a3b      	ldr	r3, [r7, #32]
 801914a:	4413      	add	r3, r2
 801914c:	1e5a      	subs	r2, r3, #1
 801914e:	6a3b      	ldr	r3, [r7, #32]
 8019150:	fb92 f3f3 	sdiv	r3, r2, r3
 8019154:	697a      	ldr	r2, [r7, #20]
 8019156:	fb03 f202 	mul.w	r2, r3, r2
 801915a:	88bb      	ldrh	r3, [r7, #4]
 801915c:	4413      	add	r3, r2
    int32_t intermediate =
 801915e:	330c      	adds	r3, #12
 8019160:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019162:	68bb      	ldr	r3, [r7, #8]
 8019164:	2b06      	cmp	r3, #6
 8019166:	d802      	bhi.n	801916e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019168:	69bb      	ldr	r3, [r7, #24]
 801916a:	3302      	adds	r3, #2
 801916c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801916e:	69bb      	ldr	r3, [r7, #24]
 8019170:	009b      	lsls	r3, r3, #2
 8019172:	1c5a      	adds	r2, r3, #1
 8019174:	68bb      	ldr	r3, [r7, #8]
 8019176:	3b02      	subs	r3, #2
 8019178:	fa02 f303 	lsl.w	r3, r2, r3
}
 801917c:	4618      	mov	r0, r3
 801917e:	372c      	adds	r7, #44	; 0x2c
 8019180:	46bd      	mov	sp, r7
 8019182:	bc80      	pop	{r7}
 8019184:	4770      	bx	lr
	...

08019188 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b08a      	sub	sp, #40	; 0x28
 801918c:	af04      	add	r7, sp, #16
 801918e:	60b9      	str	r1, [r7, #8]
 8019190:	607a      	str	r2, [r7, #4]
 8019192:	461a      	mov	r2, r3
 8019194:	4603      	mov	r3, r0
 8019196:	73fb      	strb	r3, [r7, #15]
 8019198:	4613      	mov	r3, r2
 801919a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801919c:	2300      	movs	r3, #0
 801919e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80191a0:	2301      	movs	r3, #1
 80191a2:	613b      	str	r3, [r7, #16]

    switch( modem )
 80191a4:	7bfb      	ldrb	r3, [r7, #15]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d002      	beq.n	80191b0 <RadioTimeOnAir+0x28>
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	d017      	beq.n	80191de <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80191ae:	e035      	b.n	801921c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80191b0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80191b4:	8c3a      	ldrh	r2, [r7, #32]
 80191b6:	7bb9      	ldrb	r1, [r7, #14]
 80191b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80191bc:	9301      	str	r3, [sp, #4]
 80191be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80191c2:	9300      	str	r3, [sp, #0]
 80191c4:	4603      	mov	r3, r0
 80191c6:	6878      	ldr	r0, [r7, #4]
 80191c8:	f7ff ff32 	bl	8019030 <RadioGetGfskTimeOnAirNumerator>
 80191cc:	4603      	mov	r3, r0
 80191ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80191d2:	fb02 f303 	mul.w	r3, r2, r3
 80191d6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	613b      	str	r3, [r7, #16]
        break;
 80191dc:	e01e      	b.n	801921c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80191de:	8c39      	ldrh	r1, [r7, #32]
 80191e0:	7bba      	ldrb	r2, [r7, #14]
 80191e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80191e6:	9302      	str	r3, [sp, #8]
 80191e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80191ec:	9301      	str	r3, [sp, #4]
 80191ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80191f2:	9300      	str	r3, [sp, #0]
 80191f4:	460b      	mov	r3, r1
 80191f6:	6879      	ldr	r1, [r7, #4]
 80191f8:	68b8      	ldr	r0, [r7, #8]
 80191fa:	f7ff ff43 	bl	8019084 <RadioGetLoRaTimeOnAirNumerator>
 80191fe:	4603      	mov	r3, r0
 8019200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019204:	fb02 f303 	mul.w	r3, r2, r3
 8019208:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801920a:	4a0a      	ldr	r2, [pc, #40]	; (8019234 <RadioTimeOnAir+0xac>)
 801920c:	68bb      	ldr	r3, [r7, #8]
 801920e:	4413      	add	r3, r2
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	4618      	mov	r0, r3
 8019214:	f7ff feb6 	bl	8018f84 <RadioGetLoRaBandwidthInHz>
 8019218:	6138      	str	r0, [r7, #16]
        break;
 801921a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801921c:	697a      	ldr	r2, [r7, #20]
 801921e:	693b      	ldr	r3, [r7, #16]
 8019220:	4413      	add	r3, r2
 8019222:	1e5a      	subs	r2, r3, #1
 8019224:	693b      	ldr	r3, [r7, #16]
 8019226:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801922a:	4618      	mov	r0, r3
 801922c:	3718      	adds	r7, #24
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}
 8019232:	bf00      	nop
 8019234:	0801e158 	.word	0x0801e158

08019238 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b084      	sub	sp, #16
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	460b      	mov	r3, r1
 8019242:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019244:	2300      	movs	r3, #0
 8019246:	2200      	movs	r2, #0
 8019248:	f240 2101 	movw	r1, #513	; 0x201
 801924c:	f240 2001 	movw	r0, #513	; 0x201
 8019250:	f001 fd34 	bl	801acbc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019254:	4b71      	ldr	r3, [pc, #452]	; (801941c <RadioSend+0x1e4>)
 8019256:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801925a:	2101      	movs	r1, #1
 801925c:	4618      	mov	r0, r3
 801925e:	f002 f9d1 	bl	801b604 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019262:	4b6e      	ldr	r3, [pc, #440]	; (801941c <RadioSend+0x1e4>)
 8019264:	781b      	ldrb	r3, [r3, #0]
 8019266:	2b01      	cmp	r3, #1
 8019268:	d112      	bne.n	8019290 <RadioSend+0x58>
 801926a:	4b6c      	ldr	r3, [pc, #432]	; (801941c <RadioSend+0x1e4>)
 801926c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019270:	2b06      	cmp	r3, #6
 8019272:	d10d      	bne.n	8019290 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019274:	f640 0089 	movw	r0, #2185	; 0x889
 8019278:	f002 f8e4 	bl	801b444 <SUBGRF_ReadRegister>
 801927c:	4603      	mov	r3, r0
 801927e:	f023 0304 	bic.w	r3, r3, #4
 8019282:	b2db      	uxtb	r3, r3
 8019284:	4619      	mov	r1, r3
 8019286:	f640 0089 	movw	r0, #2185	; 0x889
 801928a:	f002 f8c7 	bl	801b41c <SUBGRF_WriteRegister>
 801928e:	e00c      	b.n	80192aa <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019290:	f640 0089 	movw	r0, #2185	; 0x889
 8019294:	f002 f8d6 	bl	801b444 <SUBGRF_ReadRegister>
 8019298:	4603      	mov	r3, r0
 801929a:	f043 0304 	orr.w	r3, r3, #4
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	4619      	mov	r1, r3
 80192a2:	f640 0089 	movw	r0, #2185	; 0x889
 80192a6:	f002 f8b9 	bl	801b41c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80192aa:	4b5c      	ldr	r3, [pc, #368]	; (801941c <RadioSend+0x1e4>)
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	2b04      	cmp	r3, #4
 80192b0:	f200 80a7 	bhi.w	8019402 <RadioSend+0x1ca>
 80192b4:	a201      	add	r2, pc, #4	; (adr r2, 80192bc <RadioSend+0x84>)
 80192b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192ba:	bf00      	nop
 80192bc:	080192eb 	.word	0x080192eb
 80192c0:	080192d1 	.word	0x080192d1
 80192c4:	080192eb 	.word	0x080192eb
 80192c8:	0801934b 	.word	0x0801934b
 80192cc:	0801936b 	.word	0x0801936b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80192d0:	4a52      	ldr	r2, [pc, #328]	; (801941c <RadioSend+0x1e4>)
 80192d2:	78fb      	ldrb	r3, [r7, #3]
 80192d4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192d6:	4852      	ldr	r0, [pc, #328]	; (8019420 <RadioSend+0x1e8>)
 80192d8:	f001 ff58 	bl	801b18c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80192dc:	78fb      	ldrb	r3, [r7, #3]
 80192de:	2200      	movs	r2, #0
 80192e0:	4619      	mov	r1, r3
 80192e2:	6878      	ldr	r0, [r7, #4]
 80192e4:	f001 fa0c 	bl	801a700 <SUBGRF_SendPayload>
            break;
 80192e8:	e08c      	b.n	8019404 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80192ea:	f002 fb74 	bl	801b9d6 <RFW_Is_Init>
 80192ee:	4603      	mov	r3, r0
 80192f0:	2b01      	cmp	r3, #1
 80192f2:	d11d      	bne.n	8019330 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80192f4:	f107 020d 	add.w	r2, r7, #13
 80192f8:	78fb      	ldrb	r3, [r7, #3]
 80192fa:	4619      	mov	r1, r3
 80192fc:	6878      	ldr	r0, [r7, #4]
 80192fe:	f002 fb82 	bl	801ba06 <RFW_TransmitInit>
 8019302:	4603      	mov	r3, r0
 8019304:	2b00      	cmp	r3, #0
 8019306:	d10c      	bne.n	8019322 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019308:	7b7a      	ldrb	r2, [r7, #13]
 801930a:	4b44      	ldr	r3, [pc, #272]	; (801941c <RadioSend+0x1e4>)
 801930c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801930e:	4844      	ldr	r0, [pc, #272]	; (8019420 <RadioSend+0x1e8>)
 8019310:	f001 ff3c 	bl	801b18c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8019314:	7b7b      	ldrb	r3, [r7, #13]
 8019316:	2200      	movs	r2, #0
 8019318:	4619      	mov	r1, r3
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	f001 f9f0 	bl	801a700 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019320:	e070      	b.n	8019404 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8019322:	4b40      	ldr	r3, [pc, #256]	; (8019424 <RadioSend+0x1ec>)
 8019324:	2201      	movs	r2, #1
 8019326:	2100      	movs	r1, #0
 8019328:	2002      	movs	r0, #2
 801932a:	f003 fc91 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
 801932e:	e072      	b.n	8019416 <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019330:	4a3a      	ldr	r2, [pc, #232]	; (801941c <RadioSend+0x1e4>)
 8019332:	78fb      	ldrb	r3, [r7, #3]
 8019334:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019336:	483a      	ldr	r0, [pc, #232]	; (8019420 <RadioSend+0x1e8>)
 8019338:	f001 ff28 	bl	801b18c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801933c:	78fb      	ldrb	r3, [r7, #3]
 801933e:	2200      	movs	r2, #0
 8019340:	4619      	mov	r1, r3
 8019342:	6878      	ldr	r0, [r7, #4]
 8019344:	f001 f9dc 	bl	801a700 <SUBGRF_SendPayload>
            break;
 8019348:	e05c      	b.n	8019404 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801934a:	4b34      	ldr	r3, [pc, #208]	; (801941c <RadioSend+0x1e4>)
 801934c:	2202      	movs	r2, #2
 801934e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019350:	4a32      	ldr	r2, [pc, #200]	; (801941c <RadioSend+0x1e4>)
 8019352:	78fb      	ldrb	r3, [r7, #3]
 8019354:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019356:	4832      	ldr	r0, [pc, #200]	; (8019420 <RadioSend+0x1e8>)
 8019358:	f001 ff18 	bl	801b18c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801935c:	78fb      	ldrb	r3, [r7, #3]
 801935e:	2200      	movs	r2, #0
 8019360:	4619      	mov	r1, r3
 8019362:	6878      	ldr	r0, [r7, #4]
 8019364:	f001 f9cc 	bl	801a700 <SUBGRF_SendPayload>
            break;
 8019368:	e04c      	b.n	8019404 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801936a:	78fb      	ldrb	r3, [r7, #3]
 801936c:	461a      	mov	r2, r3
 801936e:	6879      	ldr	r1, [r7, #4]
 8019370:	482d      	ldr	r0, [pc, #180]	; (8019428 <RadioSend+0x1f0>)
 8019372:	f000 fcbc 	bl	8019cee <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019376:	4b29      	ldr	r3, [pc, #164]	; (801941c <RadioSend+0x1e4>)
 8019378:	2202      	movs	r2, #2
 801937a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801937c:	78fb      	ldrb	r3, [r7, #3]
 801937e:	3301      	adds	r3, #1
 8019380:	b2da      	uxtb	r2, r3
 8019382:	4b26      	ldr	r3, [pc, #152]	; (801941c <RadioSend+0x1e4>)
 8019384:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019386:	4826      	ldr	r0, [pc, #152]	; (8019420 <RadioSend+0x1e8>)
 8019388:	f001 ff00 	bl	801b18c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801938c:	2100      	movs	r1, #0
 801938e:	20f1      	movs	r0, #241	; 0xf1
 8019390:	f000 f95d 	bl	801964e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019394:	2100      	movs	r1, #0
 8019396:	20f0      	movs	r0, #240	; 0xf0
 8019398:	f000 f959 	bl	801964e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801939c:	4b1f      	ldr	r3, [pc, #124]	; (801941c <RadioSend+0x1e4>)
 801939e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193a0:	2b64      	cmp	r3, #100	; 0x64
 80193a2:	d108      	bne.n	80193b6 <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80193a4:	2170      	movs	r1, #112	; 0x70
 80193a6:	20f3      	movs	r0, #243	; 0xf3
 80193a8:	f000 f951 	bl	801964e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80193ac:	211d      	movs	r1, #29
 80193ae:	20f2      	movs	r0, #242	; 0xf2
 80193b0:	f000 f94d 	bl	801964e <RadioWrite>
 80193b4:	e007      	b.n	80193c6 <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80193b6:	21e1      	movs	r1, #225	; 0xe1
 80193b8:	20f3      	movs	r0, #243	; 0xf3
 80193ba:	f000 f948 	bl	801964e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80193be:	2104      	movs	r1, #4
 80193c0:	20f2      	movs	r0, #242	; 0xf2
 80193c2:	f000 f944 	bl	801964e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80193c6:	78fb      	ldrb	r3, [r7, #3]
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	00db      	lsls	r3, r3, #3
 80193cc:	b29b      	uxth	r3, r3
 80193ce:	3302      	adds	r3, #2
 80193d0:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80193d2:	89fb      	ldrh	r3, [r7, #14]
 80193d4:	0a1b      	lsrs	r3, r3, #8
 80193d6:	b29b      	uxth	r3, r3
 80193d8:	b2db      	uxtb	r3, r3
 80193da:	4619      	mov	r1, r3
 80193dc:	20f4      	movs	r0, #244	; 0xf4
 80193de:	f000 f936 	bl	801964e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80193e2:	89fb      	ldrh	r3, [r7, #14]
 80193e4:	b2db      	uxtb	r3, r3
 80193e6:	4619      	mov	r1, r3
 80193e8:	20f5      	movs	r0, #245	; 0xf5
 80193ea:	f000 f930 	bl	801964e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80193ee:	78fb      	ldrb	r3, [r7, #3]
 80193f0:	3301      	adds	r3, #1
 80193f2:	b2db      	uxtb	r3, r3
 80193f4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80193f8:	4619      	mov	r1, r3
 80193fa:	480b      	ldr	r0, [pc, #44]	; (8019428 <RadioSend+0x1f0>)
 80193fc:	f001 f980 	bl	801a700 <SUBGRF_SendPayload>
            break;
 8019400:	e000      	b.n	8019404 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019402:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019404:	4b05      	ldr	r3, [pc, #20]	; (801941c <RadioSend+0x1e4>)
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	4619      	mov	r1, r3
 801940a:	4808      	ldr	r0, [pc, #32]	; (801942c <RadioSend+0x1f4>)
 801940c:	f003 fa86 	bl	801c91c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019410:	4806      	ldr	r0, [pc, #24]	; (801942c <RadioSend+0x1f4>)
 8019412:	f003 f9a5 	bl	801c760 <UTIL_TIMER_Start>
}
 8019416:	3710      	adds	r7, #16
 8019418:	46bd      	mov	sp, r7
 801941a:	bd80      	pop	{r7, pc}
 801941c:	20001b44 	.word	0x20001b44
 8019420:	20001b52 	.word	0x20001b52
 8019424:	0801db00 	.word	0x0801db00
 8019428:	20001a40 	.word	0x20001a40
 801942c:	20001ba0 	.word	0x20001ba0

08019430 <RadioSleep>:

static void RadioSleep( void )
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019436:	2300      	movs	r3, #0
 8019438:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801943a:	793b      	ldrb	r3, [r7, #4]
 801943c:	f043 0304 	orr.w	r3, r3, #4
 8019440:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019442:	7938      	ldrb	r0, [r7, #4]
 8019444:	f001 fa38 	bl	801a8b8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019448:	2002      	movs	r0, #2
 801944a:	f7e8 fc7d 	bl	8001d48 <HAL_Delay>
}
 801944e:	bf00      	nop
 8019450:	3708      	adds	r7, #8
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}

08019456 <RadioStandby>:

static void RadioStandby( void )
{
 8019456:	b580      	push	{r7, lr}
 8019458:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801945a:	2000      	movs	r0, #0
 801945c:	f001 fa5e 	bl	801a91c <SUBGRF_SetStandby>
}
 8019460:	bf00      	nop
 8019462:	bd80      	pop	{r7, pc}

08019464 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b082      	sub	sp, #8
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 801946c:	f002 fab3 	bl	801b9d6 <RFW_Is_Init>
 8019470:	4603      	mov	r3, r0
 8019472:	2b01      	cmp	r3, #1
 8019474:	d102      	bne.n	801947c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019476:	f002 fad6 	bl	801ba26 <RFW_ReceiveInit>
 801947a:	e007      	b.n	801948c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801947c:	2300      	movs	r3, #0
 801947e:	2200      	movs	r2, #0
 8019480:	f240 2162 	movw	r1, #610	; 0x262
 8019484:	f240 2062 	movw	r0, #610	; 0x262
 8019488:	f001 fc18 	bl	801acbc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d006      	beq.n	80194a0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019492:	6879      	ldr	r1, [r7, #4]
 8019494:	4811      	ldr	r0, [pc, #68]	; (80194dc <RadioRx+0x78>)
 8019496:	f003 fa41 	bl	801c91c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801949a:	4810      	ldr	r0, [pc, #64]	; (80194dc <RadioRx+0x78>)
 801949c:	f003 f960 	bl	801c760 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80194a0:	4b0f      	ldr	r3, [pc, #60]	; (80194e0 <RadioRx+0x7c>)
 80194a2:	2200      	movs	r2, #0
 80194a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80194a6:	4b0e      	ldr	r3, [pc, #56]	; (80194e0 <RadioRx+0x7c>)
 80194a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80194ac:	2100      	movs	r1, #0
 80194ae:	4618      	mov	r0, r3
 80194b0:	f002 f8a8 	bl	801b604 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80194b4:	4b0a      	ldr	r3, [pc, #40]	; (80194e0 <RadioRx+0x7c>)
 80194b6:	785b      	ldrb	r3, [r3, #1]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d004      	beq.n	80194c6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80194bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80194c0:	f001 fa68 	bl	801a994 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80194c4:	e005      	b.n	80194d2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80194c6:	4b06      	ldr	r3, [pc, #24]	; (80194e0 <RadioRx+0x7c>)
 80194c8:	689b      	ldr	r3, [r3, #8]
 80194ca:	019b      	lsls	r3, r3, #6
 80194cc:	4618      	mov	r0, r3
 80194ce:	f001 fa61 	bl	801a994 <SUBGRF_SetRx>
}
 80194d2:	bf00      	nop
 80194d4:	3708      	adds	r7, #8
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}
 80194da:	bf00      	nop
 80194dc:	20001bb8 	.word	0x20001bb8
 80194e0:	20001b44 	.word	0x20001b44

080194e4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b082      	sub	sp, #8
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80194ec:	f002 fa73 	bl	801b9d6 <RFW_Is_Init>
 80194f0:	4603      	mov	r3, r0
 80194f2:	2b01      	cmp	r3, #1
 80194f4:	d102      	bne.n	80194fc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80194f6:	f002 fa96 	bl	801ba26 <RFW_ReceiveInit>
 80194fa:	e007      	b.n	801950c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80194fc:	2300      	movs	r3, #0
 80194fe:	2200      	movs	r2, #0
 8019500:	f240 2162 	movw	r1, #610	; 0x262
 8019504:	f240 2062 	movw	r0, #610	; 0x262
 8019508:	f001 fbd8 	bl	801acbc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d006      	beq.n	8019520 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019512:	6879      	ldr	r1, [r7, #4]
 8019514:	4811      	ldr	r0, [pc, #68]	; (801955c <RadioRxBoosted+0x78>)
 8019516:	f003 fa01 	bl	801c91c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801951a:	4810      	ldr	r0, [pc, #64]	; (801955c <RadioRxBoosted+0x78>)
 801951c:	f003 f920 	bl	801c760 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019520:	4b0f      	ldr	r3, [pc, #60]	; (8019560 <RadioRxBoosted+0x7c>)
 8019522:	2200      	movs	r2, #0
 8019524:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019526:	4b0e      	ldr	r3, [pc, #56]	; (8019560 <RadioRxBoosted+0x7c>)
 8019528:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801952c:	2100      	movs	r1, #0
 801952e:	4618      	mov	r0, r3
 8019530:	f002 f868 	bl	801b604 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019534:	4b0a      	ldr	r3, [pc, #40]	; (8019560 <RadioRxBoosted+0x7c>)
 8019536:	785b      	ldrb	r3, [r3, #1]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d004      	beq.n	8019546 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801953c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019540:	f001 fa48 	bl	801a9d4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019544:	e005      	b.n	8019552 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019546:	4b06      	ldr	r3, [pc, #24]	; (8019560 <RadioRxBoosted+0x7c>)
 8019548:	689b      	ldr	r3, [r3, #8]
 801954a:	019b      	lsls	r3, r3, #6
 801954c:	4618      	mov	r0, r3
 801954e:	f001 fa41 	bl	801a9d4 <SUBGRF_SetRxBoosted>
}
 8019552:	bf00      	nop
 8019554:	3708      	adds	r7, #8
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}
 801955a:	bf00      	nop
 801955c:	20001bb8 	.word	0x20001bb8
 8019560:	20001b44 	.word	0x20001b44

08019564 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	005a      	lsls	r2, r3, #1
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	4413      	add	r3, r2
 8019576:	4a0c      	ldr	r2, [pc, #48]	; (80195a8 <RadioSetRxDutyCycle+0x44>)
 8019578:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801957a:	2300      	movs	r3, #0
 801957c:	2200      	movs	r2, #0
 801957e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019582:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019586:	f001 fb99 	bl	801acbc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801958a:	4b07      	ldr	r3, [pc, #28]	; (80195a8 <RadioSetRxDutyCycle+0x44>)
 801958c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019590:	2100      	movs	r1, #0
 8019592:	4618      	mov	r0, r3
 8019594:	f002 f836 	bl	801b604 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019598:	6839      	ldr	r1, [r7, #0]
 801959a:	6878      	ldr	r0, [r7, #4]
 801959c:	f001 fa3e 	bl	801aa1c <SUBGRF_SetRxDutyCycle>
}
 80195a0:	bf00      	nop
 80195a2:	3708      	adds	r7, #8
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}
 80195a8:	20001b44 	.word	0x20001b44

080195ac <RadioStartCad>:

static void RadioStartCad( void )
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80195b0:	4b09      	ldr	r3, [pc, #36]	; (80195d8 <RadioStartCad+0x2c>)
 80195b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80195b6:	2100      	movs	r1, #0
 80195b8:	4618      	mov	r0, r3
 80195ba:	f002 f823 	bl	801b604 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80195be:	2300      	movs	r3, #0
 80195c0:	2200      	movs	r2, #0
 80195c2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80195c6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80195ca:	f001 fb77 	bl	801acbc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80195ce:	f001 fa51 	bl	801aa74 <SUBGRF_SetCad>
}
 80195d2:	bf00      	nop
 80195d4:	bd80      	pop	{r7, pc}
 80195d6:	bf00      	nop
 80195d8:	20001b44 	.word	0x20001b44

080195dc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b084      	sub	sp, #16
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
 80195e4:	460b      	mov	r3, r1
 80195e6:	70fb      	strb	r3, [r7, #3]
 80195e8:	4613      	mov	r3, r2
 80195ea:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80195ec:	883b      	ldrh	r3, [r7, #0]
 80195ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80195f2:	fb02 f303 	mul.w	r3, r2, r3
 80195f6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80195f8:	6878      	ldr	r0, [r7, #4]
 80195fa:	f001 fbbb 	bl	801ad74 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80195fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019602:	4618      	mov	r0, r3
 8019604:	f002 f826 	bl	801b654 <SUBGRF_SetRfTxPower>
 8019608:	4603      	mov	r3, r0
 801960a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801960c:	7afb      	ldrb	r3, [r7, #11]
 801960e:	2101      	movs	r1, #1
 8019610:	4618      	mov	r0, r3
 8019612:	f001 fff7 	bl	801b604 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019616:	f001 fa3b 	bl	801aa90 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801961a:	68f9      	ldr	r1, [r7, #12]
 801961c:	4804      	ldr	r0, [pc, #16]	; (8019630 <RadioSetTxContinuousWave+0x54>)
 801961e:	f003 f97d 	bl	801c91c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019622:	4803      	ldr	r0, [pc, #12]	; (8019630 <RadioSetTxContinuousWave+0x54>)
 8019624:	f003 f89c 	bl	801c760 <UTIL_TIMER_Start>
}
 8019628:	bf00      	nop
 801962a:	3710      	adds	r7, #16
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}
 8019630:	20001ba0 	.word	0x20001ba0

08019634 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	4603      	mov	r3, r0
 801963c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801963e:	f001 fe5a 	bl	801b2f6 <SUBGRF_GetRssiInst>
 8019642:	4603      	mov	r3, r0
 8019644:	b21b      	sxth	r3, r3
}
 8019646:	4618      	mov	r0, r3
 8019648:	3708      	adds	r7, #8
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}

0801964e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801964e:	b580      	push	{r7, lr}
 8019650:	b082      	sub	sp, #8
 8019652:	af00      	add	r7, sp, #0
 8019654:	4603      	mov	r3, r0
 8019656:	460a      	mov	r2, r1
 8019658:	80fb      	strh	r3, [r7, #6]
 801965a:	4613      	mov	r3, r2
 801965c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801965e:	797a      	ldrb	r2, [r7, #5]
 8019660:	88fb      	ldrh	r3, [r7, #6]
 8019662:	4611      	mov	r1, r2
 8019664:	4618      	mov	r0, r3
 8019666:	f001 fed9 	bl	801b41c <SUBGRF_WriteRegister>
}
 801966a:	bf00      	nop
 801966c:	3708      	adds	r7, #8
 801966e:	46bd      	mov	sp, r7
 8019670:	bd80      	pop	{r7, pc}

08019672 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019672:	b580      	push	{r7, lr}
 8019674:	b082      	sub	sp, #8
 8019676:	af00      	add	r7, sp, #0
 8019678:	4603      	mov	r3, r0
 801967a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801967c:	88fb      	ldrh	r3, [r7, #6]
 801967e:	4618      	mov	r0, r3
 8019680:	f001 fee0 	bl	801b444 <SUBGRF_ReadRegister>
 8019684:	4603      	mov	r3, r0
}
 8019686:	4618      	mov	r0, r3
 8019688:	3708      	adds	r7, #8
 801968a:	46bd      	mov	sp, r7
 801968c:	bd80      	pop	{r7, pc}

0801968e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801968e:	b580      	push	{r7, lr}
 8019690:	b082      	sub	sp, #8
 8019692:	af00      	add	r7, sp, #0
 8019694:	4603      	mov	r3, r0
 8019696:	6039      	str	r1, [r7, #0]
 8019698:	80fb      	strh	r3, [r7, #6]
 801969a:	4613      	mov	r3, r2
 801969c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801969e:	797b      	ldrb	r3, [r7, #5]
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	88fb      	ldrh	r3, [r7, #6]
 80196a4:	6839      	ldr	r1, [r7, #0]
 80196a6:	4618      	mov	r0, r3
 80196a8:	f001 fee0 	bl	801b46c <SUBGRF_WriteRegisters>
}
 80196ac:	bf00      	nop
 80196ae:	3708      	adds	r7, #8
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bd80      	pop	{r7, pc}

080196b4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b082      	sub	sp, #8
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	4603      	mov	r3, r0
 80196bc:	6039      	str	r1, [r7, #0]
 80196be:	80fb      	strh	r3, [r7, #6]
 80196c0:	4613      	mov	r3, r2
 80196c2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80196c4:	797b      	ldrb	r3, [r7, #5]
 80196c6:	b29a      	uxth	r2, r3
 80196c8:	88fb      	ldrh	r3, [r7, #6]
 80196ca:	6839      	ldr	r1, [r7, #0]
 80196cc:	4618      	mov	r0, r3
 80196ce:	f001 feef 	bl	801b4b0 <SUBGRF_ReadRegisters>
}
 80196d2:	bf00      	nop
 80196d4:	3708      	adds	r7, #8
 80196d6:	46bd      	mov	sp, r7
 80196d8:	bd80      	pop	{r7, pc}
	...

080196dc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b082      	sub	sp, #8
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	4603      	mov	r3, r0
 80196e4:	460a      	mov	r2, r1
 80196e6:	71fb      	strb	r3, [r7, #7]
 80196e8:	4613      	mov	r3, r2
 80196ea:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80196ec:	79fb      	ldrb	r3, [r7, #7]
 80196ee:	2b01      	cmp	r3, #1
 80196f0:	d10a      	bne.n	8019708 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80196f2:	4a0e      	ldr	r2, [pc, #56]	; (801972c <RadioSetMaxPayloadLength+0x50>)
 80196f4:	79bb      	ldrb	r3, [r7, #6]
 80196f6:	7013      	strb	r3, [r2, #0]
 80196f8:	4b0c      	ldr	r3, [pc, #48]	; (801972c <RadioSetMaxPayloadLength+0x50>)
 80196fa:	781a      	ldrb	r2, [r3, #0]
 80196fc:	4b0c      	ldr	r3, [pc, #48]	; (8019730 <RadioSetMaxPayloadLength+0x54>)
 80196fe:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019700:	480c      	ldr	r0, [pc, #48]	; (8019734 <RadioSetMaxPayloadLength+0x58>)
 8019702:	f001 fd43 	bl	801b18c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019706:	e00d      	b.n	8019724 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019708:	4b09      	ldr	r3, [pc, #36]	; (8019730 <RadioSetMaxPayloadLength+0x54>)
 801970a:	7d5b      	ldrb	r3, [r3, #21]
 801970c:	2b01      	cmp	r3, #1
 801970e:	d109      	bne.n	8019724 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019710:	4a06      	ldr	r2, [pc, #24]	; (801972c <RadioSetMaxPayloadLength+0x50>)
 8019712:	79bb      	ldrb	r3, [r7, #6]
 8019714:	7013      	strb	r3, [r2, #0]
 8019716:	4b05      	ldr	r3, [pc, #20]	; (801972c <RadioSetMaxPayloadLength+0x50>)
 8019718:	781a      	ldrb	r2, [r3, #0]
 801971a:	4b05      	ldr	r3, [pc, #20]	; (8019730 <RadioSetMaxPayloadLength+0x54>)
 801971c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801971e:	4805      	ldr	r0, [pc, #20]	; (8019734 <RadioSetMaxPayloadLength+0x58>)
 8019720:	f001 fd34 	bl	801b18c <SUBGRF_SetPacketParams>
}
 8019724:	bf00      	nop
 8019726:	3708      	adds	r7, #8
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	20000144 	.word	0x20000144
 8019730:	20001b44 	.word	0x20001b44
 8019734:	20001b52 	.word	0x20001b52

08019738 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b082      	sub	sp, #8
 801973c:	af00      	add	r7, sp, #0
 801973e:	4603      	mov	r3, r0
 8019740:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019742:	4a13      	ldr	r2, [pc, #76]	; (8019790 <RadioSetPublicNetwork+0x58>)
 8019744:	79fb      	ldrb	r3, [r7, #7]
 8019746:	7313      	strb	r3, [r2, #12]
 8019748:	4b11      	ldr	r3, [pc, #68]	; (8019790 <RadioSetPublicNetwork+0x58>)
 801974a:	7b1a      	ldrb	r2, [r3, #12]
 801974c:	4b10      	ldr	r3, [pc, #64]	; (8019790 <RadioSetPublicNetwork+0x58>)
 801974e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019750:	2001      	movs	r0, #1
 8019752:	f7ff f82d 	bl	80187b0 <RadioSetModem>
    if( enable == true )
 8019756:	79fb      	ldrb	r3, [r7, #7]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d00a      	beq.n	8019772 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801975c:	2134      	movs	r1, #52	; 0x34
 801975e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019762:	f001 fe5b 	bl	801b41c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019766:	2144      	movs	r1, #68	; 0x44
 8019768:	f240 7041 	movw	r0, #1857	; 0x741
 801976c:	f001 fe56 	bl	801b41c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019770:	e009      	b.n	8019786 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019772:	2114      	movs	r1, #20
 8019774:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019778:	f001 fe50 	bl	801b41c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801977c:	2124      	movs	r1, #36	; 0x24
 801977e:	f240 7041 	movw	r0, #1857	; 0x741
 8019782:	f001 fe4b 	bl	801b41c <SUBGRF_WriteRegister>
}
 8019786:	bf00      	nop
 8019788:	3708      	adds	r7, #8
 801978a:	46bd      	mov	sp, r7
 801978c:	bd80      	pop	{r7, pc}
 801978e:	bf00      	nop
 8019790:	20001b44 	.word	0x20001b44

08019794 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019794:	b580      	push	{r7, lr}
 8019796:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019798:	f001 ff90 	bl	801b6bc <SUBGRF_GetRadioWakeUpTime>
 801979c:	4603      	mov	r3, r0
 801979e:	3303      	adds	r3, #3
}
 80197a0:	4618      	mov	r0, r3
 80197a2:	bd80      	pop	{r7, pc}

080197a4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b082      	sub	sp, #8
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80197ac:	f000 f80e 	bl	80197cc <RadioOnTxTimeoutProcess>
}
 80197b0:	bf00      	nop
 80197b2:	3708      	adds	r7, #8
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd80      	pop	{r7, pc}

080197b8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b082      	sub	sp, #8
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80197c0:	f000 f818 	bl	80197f4 <RadioOnRxTimeoutProcess>
}
 80197c4:	bf00      	nop
 80197c6:	3708      	adds	r7, #8
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}

080197cc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80197d0:	4b07      	ldr	r3, [pc, #28]	; (80197f0 <RadioOnTxTimeoutProcess+0x24>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d008      	beq.n	80197ea <RadioOnTxTimeoutProcess+0x1e>
 80197d8:	4b05      	ldr	r3, [pc, #20]	; (80197f0 <RadioOnTxTimeoutProcess+0x24>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	685b      	ldr	r3, [r3, #4]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d003      	beq.n	80197ea <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80197e2:	4b03      	ldr	r3, [pc, #12]	; (80197f0 <RadioOnTxTimeoutProcess+0x24>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	685b      	ldr	r3, [r3, #4]
 80197e8:	4798      	blx	r3
    }
}
 80197ea:	bf00      	nop
 80197ec:	bd80      	pop	{r7, pc}
 80197ee:	bf00      	nop
 80197f0:	20001b40 	.word	0x20001b40

080197f4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80197f8:	4b07      	ldr	r3, [pc, #28]	; (8019818 <RadioOnRxTimeoutProcess+0x24>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d008      	beq.n	8019812 <RadioOnRxTimeoutProcess+0x1e>
 8019800:	4b05      	ldr	r3, [pc, #20]	; (8019818 <RadioOnRxTimeoutProcess+0x24>)
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	68db      	ldr	r3, [r3, #12]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d003      	beq.n	8019812 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801980a:	4b03      	ldr	r3, [pc, #12]	; (8019818 <RadioOnRxTimeoutProcess+0x24>)
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	68db      	ldr	r3, [r3, #12]
 8019810:	4798      	blx	r3
    }
}
 8019812:	bf00      	nop
 8019814:	bd80      	pop	{r7, pc}
 8019816:	bf00      	nop
 8019818:	20001b40 	.word	0x20001b40

0801981c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	4603      	mov	r3, r0
 8019824:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019826:	4a05      	ldr	r2, [pc, #20]	; (801983c <RadioOnDioIrq+0x20>)
 8019828:	88fb      	ldrh	r3, [r7, #6]
 801982a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801982e:	f000 f807 	bl	8019840 <RadioIrqProcess>
}
 8019832:	bf00      	nop
 8019834:	3708      	adds	r7, #8
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}
 801983a:	bf00      	nop
 801983c:	20001b44 	.word	0x20001b44

08019840 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019840:	b590      	push	{r4, r7, lr}
 8019842:	b083      	sub	sp, #12
 8019844:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019846:	2300      	movs	r3, #0
 8019848:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801984a:	2300      	movs	r3, #0
 801984c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801984e:	4ba8      	ldr	r3, [pc, #672]	; (8019af0 <RadioIrqProcess+0x2b0>)
 8019850:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019858:	f000 810c 	beq.w	8019a74 <RadioIrqProcess+0x234>
 801985c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019860:	f300 81e8 	bgt.w	8019c34 <RadioIrqProcess+0x3f4>
 8019864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019868:	f000 80f0 	beq.w	8019a4c <RadioIrqProcess+0x20c>
 801986c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019870:	f300 81e0 	bgt.w	8019c34 <RadioIrqProcess+0x3f4>
 8019874:	2b80      	cmp	r3, #128	; 0x80
 8019876:	f000 80d5 	beq.w	8019a24 <RadioIrqProcess+0x1e4>
 801987a:	2b80      	cmp	r3, #128	; 0x80
 801987c:	f300 81da 	bgt.w	8019c34 <RadioIrqProcess+0x3f4>
 8019880:	2b20      	cmp	r3, #32
 8019882:	dc49      	bgt.n	8019918 <RadioIrqProcess+0xd8>
 8019884:	2b00      	cmp	r3, #0
 8019886:	f340 81d5 	ble.w	8019c34 <RadioIrqProcess+0x3f4>
 801988a:	3b01      	subs	r3, #1
 801988c:	2b1f      	cmp	r3, #31
 801988e:	f200 81d1 	bhi.w	8019c34 <RadioIrqProcess+0x3f4>
 8019892:	a201      	add	r2, pc, #4	; (adr r2, 8019898 <RadioIrqProcess+0x58>)
 8019894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019898:	08019921 	.word	0x08019921
 801989c:	0801995b 	.word	0x0801995b
 80198a0:	08019c35 	.word	0x08019c35
 80198a4:	08019b11 	.word	0x08019b11
 80198a8:	08019c35 	.word	0x08019c35
 80198ac:	08019c35 	.word	0x08019c35
 80198b0:	08019c35 	.word	0x08019c35
 80198b4:	08019b8d 	.word	0x08019b8d
 80198b8:	08019c35 	.word	0x08019c35
 80198bc:	08019c35 	.word	0x08019c35
 80198c0:	08019c35 	.word	0x08019c35
 80198c4:	08019c35 	.word	0x08019c35
 80198c8:	08019c35 	.word	0x08019c35
 80198cc:	08019c35 	.word	0x08019c35
 80198d0:	08019c35 	.word	0x08019c35
 80198d4:	08019ba9 	.word	0x08019ba9
 80198d8:	08019c35 	.word	0x08019c35
 80198dc:	08019c35 	.word	0x08019c35
 80198e0:	08019c35 	.word	0x08019c35
 80198e4:	08019c35 	.word	0x08019c35
 80198e8:	08019c35 	.word	0x08019c35
 80198ec:	08019c35 	.word	0x08019c35
 80198f0:	08019c35 	.word	0x08019c35
 80198f4:	08019c35 	.word	0x08019c35
 80198f8:	08019c35 	.word	0x08019c35
 80198fc:	08019c35 	.word	0x08019c35
 8019900:	08019c35 	.word	0x08019c35
 8019904:	08019c35 	.word	0x08019c35
 8019908:	08019c35 	.word	0x08019c35
 801990c:	08019c35 	.word	0x08019c35
 8019910:	08019c35 	.word	0x08019c35
 8019914:	08019bb7 	.word	0x08019bb7
 8019918:	2b40      	cmp	r3, #64	; 0x40
 801991a:	f000 816d 	beq.w	8019bf8 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801991e:	e189      	b.n	8019c34 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019920:	4874      	ldr	r0, [pc, #464]	; (8019af4 <RadioIrqProcess+0x2b4>)
 8019922:	f002 ff8b 	bl	801c83c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019926:	2000      	movs	r0, #0
 8019928:	f000 fff8 	bl	801a91c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801992c:	f002 f85a 	bl	801b9e4 <RFW_Is_LongPacketModeEnabled>
 8019930:	4603      	mov	r3, r0
 8019932:	2b01      	cmp	r3, #1
 8019934:	d101      	bne.n	801993a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019936:	f002 f87e 	bl	801ba36 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801993a:	4b6f      	ldr	r3, [pc, #444]	; (8019af8 <RadioIrqProcess+0x2b8>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	2b00      	cmp	r3, #0
 8019940:	f000 817a 	beq.w	8019c38 <RadioIrqProcess+0x3f8>
 8019944:	4b6c      	ldr	r3, [pc, #432]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	2b00      	cmp	r3, #0
 801994c:	f000 8174 	beq.w	8019c38 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8019950:	4b69      	ldr	r3, [pc, #420]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	4798      	blx	r3
        break;
 8019958:	e16e      	b.n	8019c38 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801995a:	4868      	ldr	r0, [pc, #416]	; (8019afc <RadioIrqProcess+0x2bc>)
 801995c:	f002 ff6e 	bl	801c83c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019960:	4b63      	ldr	r3, [pc, #396]	; (8019af0 <RadioIrqProcess+0x2b0>)
 8019962:	785b      	ldrb	r3, [r3, #1]
 8019964:	f083 0301 	eor.w	r3, r3, #1
 8019968:	b2db      	uxtb	r3, r3
 801996a:	2b00      	cmp	r3, #0
 801996c:	d014      	beq.n	8019998 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801996e:	2000      	movs	r0, #0
 8019970:	f000 ffd4 	bl	801a91c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019974:	2100      	movs	r1, #0
 8019976:	f640 1002 	movw	r0, #2306	; 0x902
 801997a:	f001 fd4f 	bl	801b41c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801997e:	f640 1044 	movw	r0, #2372	; 0x944
 8019982:	f001 fd5f 	bl	801b444 <SUBGRF_ReadRegister>
 8019986:	4603      	mov	r3, r0
 8019988:	f043 0302 	orr.w	r3, r3, #2
 801998c:	b2db      	uxtb	r3, r3
 801998e:	4619      	mov	r1, r3
 8019990:	f640 1044 	movw	r0, #2372	; 0x944
 8019994:	f001 fd42 	bl	801b41c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019998:	1dfb      	adds	r3, r7, #7
 801999a:	22ff      	movs	r2, #255	; 0xff
 801999c:	4619      	mov	r1, r3
 801999e:	4858      	ldr	r0, [pc, #352]	; (8019b00 <RadioIrqProcess+0x2c0>)
 80199a0:	f000 fe8c 	bl	801a6bc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80199a4:	4857      	ldr	r0, [pc, #348]	; (8019b04 <RadioIrqProcess+0x2c4>)
 80199a6:	f001 fce7 	bl	801b378 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80199aa:	4b53      	ldr	r3, [pc, #332]	; (8019af8 <RadioIrqProcess+0x2b8>)
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d036      	beq.n	8019a20 <RadioIrqProcess+0x1e0>
 80199b2:	4b51      	ldr	r3, [pc, #324]	; (8019af8 <RadioIrqProcess+0x2b8>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	689b      	ldr	r3, [r3, #8]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d031      	beq.n	8019a20 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 80199bc:	4b4c      	ldr	r3, [pc, #304]	; (8019af0 <RadioIrqProcess+0x2b0>)
 80199be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80199c2:	2b01      	cmp	r3, #1
 80199c4:	d10e      	bne.n	80199e4 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80199c6:	4b4c      	ldr	r3, [pc, #304]	; (8019af8 <RadioIrqProcess+0x2b8>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	689c      	ldr	r4, [r3, #8]
 80199cc:	79fb      	ldrb	r3, [r7, #7]
 80199ce:	b299      	uxth	r1, r3
 80199d0:	4b47      	ldr	r3, [pc, #284]	; (8019af0 <RadioIrqProcess+0x2b0>)
 80199d2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80199d6:	b21a      	sxth	r2, r3
 80199d8:	4b45      	ldr	r3, [pc, #276]	; (8019af0 <RadioIrqProcess+0x2b0>)
 80199da:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80199de:	4848      	ldr	r0, [pc, #288]	; (8019b00 <RadioIrqProcess+0x2c0>)
 80199e0:	47a0      	blx	r4
                break;
 80199e2:	e01e      	b.n	8019a22 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80199e4:	4b42      	ldr	r3, [pc, #264]	; (8019af0 <RadioIrqProcess+0x2b0>)
 80199e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199e8:	463a      	mov	r2, r7
 80199ea:	4611      	mov	r1, r2
 80199ec:	4618      	mov	r0, r3
 80199ee:	f001 ff47 	bl	801b880 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80199f2:	4b41      	ldr	r3, [pc, #260]	; (8019af8 <RadioIrqProcess+0x2b8>)
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	689c      	ldr	r4, [r3, #8]
 80199f8:	79fb      	ldrb	r3, [r7, #7]
 80199fa:	b299      	uxth	r1, r3
 80199fc:	4b3c      	ldr	r3, [pc, #240]	; (8019af0 <RadioIrqProcess+0x2b0>)
 80199fe:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8019a02:	b218      	sxth	r0, r3
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8019a0a:	4a3f      	ldr	r2, [pc, #252]	; (8019b08 <RadioIrqProcess+0x2c8>)
 8019a0c:	fb82 c203 	smull	ip, r2, r2, r3
 8019a10:	1192      	asrs	r2, r2, #6
 8019a12:	17db      	asrs	r3, r3, #31
 8019a14:	1ad3      	subs	r3, r2, r3
 8019a16:	b25b      	sxtb	r3, r3
 8019a18:	4602      	mov	r2, r0
 8019a1a:	4839      	ldr	r0, [pc, #228]	; (8019b00 <RadioIrqProcess+0x2c0>)
 8019a1c:	47a0      	blx	r4
                break;
 8019a1e:	e000      	b.n	8019a22 <RadioIrqProcess+0x1e2>
        }
 8019a20:	bf00      	nop
        break;
 8019a22:	e118      	b.n	8019c56 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8019a24:	2000      	movs	r0, #0
 8019a26:	f000 ff79 	bl	801a91c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019a2a:	4b33      	ldr	r3, [pc, #204]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	f000 8104 	beq.w	8019c3c <RadioIrqProcess+0x3fc>
 8019a34:	4b30      	ldr	r3, [pc, #192]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	699b      	ldr	r3, [r3, #24]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	f000 80fe 	beq.w	8019c3c <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8019a40:	4b2d      	ldr	r3, [pc, #180]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	699b      	ldr	r3, [r3, #24]
 8019a46:	2000      	movs	r0, #0
 8019a48:	4798      	blx	r3
        break;
 8019a4a:	e0f7      	b.n	8019c3c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8019a4c:	2000      	movs	r0, #0
 8019a4e:	f000 ff65 	bl	801a91c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019a52:	4b29      	ldr	r3, [pc, #164]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	f000 80f2 	beq.w	8019c40 <RadioIrqProcess+0x400>
 8019a5c:	4b26      	ldr	r3, [pc, #152]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	699b      	ldr	r3, [r3, #24]
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	f000 80ec 	beq.w	8019c40 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8019a68:	4b23      	ldr	r3, [pc, #140]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	699b      	ldr	r3, [r3, #24]
 8019a6e:	2001      	movs	r0, #1
 8019a70:	4798      	blx	r3
        break;
 8019a72:	e0e5      	b.n	8019c40 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019a74:	4b25      	ldr	r3, [pc, #148]	; (8019b0c <RadioIrqProcess+0x2cc>)
 8019a76:	2201      	movs	r2, #1
 8019a78:	2100      	movs	r1, #0
 8019a7a:	2002      	movs	r0, #2
 8019a7c:	f003 f8e8 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019a80:	f000 fe02 	bl	801a688 <SUBGRF_GetOperatingMode>
 8019a84:	4603      	mov	r3, r0
 8019a86:	2b04      	cmp	r3, #4
 8019a88:	d115      	bne.n	8019ab6 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8019a8a:	481a      	ldr	r0, [pc, #104]	; (8019af4 <RadioIrqProcess+0x2b4>)
 8019a8c:	f002 fed6 	bl	801c83c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019a90:	2000      	movs	r0, #0
 8019a92:	f000 ff43 	bl	801a91c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019a96:	4b18      	ldr	r3, [pc, #96]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	f000 80d2 	beq.w	8019c44 <RadioIrqProcess+0x404>
 8019aa0:	4b15      	ldr	r3, [pc, #84]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	685b      	ldr	r3, [r3, #4]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	f000 80cc 	beq.w	8019c44 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8019aac:	4b12      	ldr	r3, [pc, #72]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	4798      	blx	r3
        break;
 8019ab4:	e0c6      	b.n	8019c44 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019ab6:	f000 fde7 	bl	801a688 <SUBGRF_GetOperatingMode>
 8019aba:	4603      	mov	r3, r0
 8019abc:	2b05      	cmp	r3, #5
 8019abe:	f040 80c1 	bne.w	8019c44 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8019ac2:	480e      	ldr	r0, [pc, #56]	; (8019afc <RadioIrqProcess+0x2bc>)
 8019ac4:	f002 feba 	bl	801c83c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019ac8:	2000      	movs	r0, #0
 8019aca:	f000 ff27 	bl	801a91c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019ace:	4b0a      	ldr	r3, [pc, #40]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	f000 80b6 	beq.w	8019c44 <RadioIrqProcess+0x404>
 8019ad8:	4b07      	ldr	r3, [pc, #28]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	68db      	ldr	r3, [r3, #12]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	f000 80b0 	beq.w	8019c44 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8019ae4:	4b04      	ldr	r3, [pc, #16]	; (8019af8 <RadioIrqProcess+0x2b8>)
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	68db      	ldr	r3, [r3, #12]
 8019aea:	4798      	blx	r3
        break;
 8019aec:	e0aa      	b.n	8019c44 <RadioIrqProcess+0x404>
 8019aee:	bf00      	nop
 8019af0:	20001b44 	.word	0x20001b44
 8019af4:	20001ba0 	.word	0x20001ba0
 8019af8:	20001b40 	.word	0x20001b40
 8019afc:	20001bb8 	.word	0x20001bb8
 8019b00:	20001a40 	.word	0x20001a40
 8019b04:	20001b68 	.word	0x20001b68
 8019b08:	10624dd3 	.word	0x10624dd3
 8019b0c:	0801db18 	.word	0x0801db18
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019b10:	4b53      	ldr	r3, [pc, #332]	; (8019c60 <RadioIrqProcess+0x420>)
 8019b12:	2201      	movs	r2, #1
 8019b14:	2100      	movs	r1, #0
 8019b16:	2002      	movs	r0, #2
 8019b18:	f003 f89a 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019b1c:	4b51      	ldr	r3, [pc, #324]	; (8019c64 <RadioIrqProcess+0x424>)
 8019b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	f000 8091 	beq.w	8019c48 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8019b26:	4a50      	ldr	r2, [pc, #320]	; (8019c68 <RadioIrqProcess+0x428>)
 8019b28:	4b4e      	ldr	r3, [pc, #312]	; (8019c64 <RadioIrqProcess+0x424>)
 8019b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b2c:	0c1b      	lsrs	r3, r3, #16
 8019b2e:	b2db      	uxtb	r3, r3
 8019b30:	4619      	mov	r1, r3
 8019b32:	f640 1003 	movw	r0, #2307	; 0x903
 8019b36:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8019b38:	4a4b      	ldr	r2, [pc, #300]	; (8019c68 <RadioIrqProcess+0x428>)
 8019b3a:	4b4a      	ldr	r3, [pc, #296]	; (8019c64 <RadioIrqProcess+0x424>)
 8019b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b3e:	0a1b      	lsrs	r3, r3, #8
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	4619      	mov	r1, r3
 8019b44:	f640 1004 	movw	r0, #2308	; 0x904
 8019b48:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8019b4a:	4a47      	ldr	r2, [pc, #284]	; (8019c68 <RadioIrqProcess+0x428>)
 8019b4c:	4b45      	ldr	r3, [pc, #276]	; (8019c64 <RadioIrqProcess+0x424>)
 8019b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b50:	b2db      	uxtb	r3, r3
 8019b52:	4619      	mov	r1, r3
 8019b54:	f640 1005 	movw	r0, #2309	; 0x905
 8019b58:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8019b5a:	4c43      	ldr	r4, [pc, #268]	; (8019c68 <RadioIrqProcess+0x428>)
 8019b5c:	4b43      	ldr	r3, [pc, #268]	; (8019c6c <RadioIrqProcess+0x42c>)
 8019b5e:	f640 1002 	movw	r0, #2306	; 0x902
 8019b62:	4798      	blx	r3
 8019b64:	4603      	mov	r3, r0
 8019b66:	f043 0301 	orr.w	r3, r3, #1
 8019b6a:	b2db      	uxtb	r3, r3
 8019b6c:	4619      	mov	r1, r3
 8019b6e:	f640 1002 	movw	r0, #2306	; 0x902
 8019b72:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8019b74:	4b3b      	ldr	r3, [pc, #236]	; (8019c64 <RadioIrqProcess+0x424>)
 8019b76:	2200      	movs	r2, #0
 8019b78:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	2200      	movs	r2, #0
 8019b7e:	f240 2162 	movw	r1, #610	; 0x262
 8019b82:	f240 2062 	movw	r0, #610	; 0x262
 8019b86:	f001 f899 	bl	801acbc <SUBGRF_SetDioIrqParams>
        break;
 8019b8a:	e05d      	b.n	8019c48 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019b8c:	4b38      	ldr	r3, [pc, #224]	; (8019c70 <RadioIrqProcess+0x430>)
 8019b8e:	2201      	movs	r2, #1
 8019b90:	2100      	movs	r1, #0
 8019b92:	2002      	movs	r0, #2
 8019b94:	f003 f85c 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019b98:	f001 ff1d 	bl	801b9d6 <RFW_Is_Init>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	2b01      	cmp	r3, #1
 8019ba0:	d154      	bne.n	8019c4c <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8019ba2:	f001 ff4e 	bl	801ba42 <RFW_ReceivePayload>
        break;
 8019ba6:	e051      	b.n	8019c4c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019ba8:	4b32      	ldr	r3, [pc, #200]	; (8019c74 <RadioIrqProcess+0x434>)
 8019baa:	2201      	movs	r2, #1
 8019bac:	2100      	movs	r1, #0
 8019bae:	2002      	movs	r0, #2
 8019bb0:	f003 f84e 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019bb4:	e04f      	b.n	8019c56 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 8019bb6:	4830      	ldr	r0, [pc, #192]	; (8019c78 <RadioIrqProcess+0x438>)
 8019bb8:	f002 fe40 	bl	801c83c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019bbc:	4b29      	ldr	r3, [pc, #164]	; (8019c64 <RadioIrqProcess+0x424>)
 8019bbe:	785b      	ldrb	r3, [r3, #1]
 8019bc0:	f083 0301 	eor.w	r3, r3, #1
 8019bc4:	b2db      	uxtb	r3, r3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d002      	beq.n	8019bd0 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019bca:	2000      	movs	r0, #0
 8019bcc:	f000 fea6 	bl	801a91c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019bd0:	4b2a      	ldr	r3, [pc, #168]	; (8019c7c <RadioIrqProcess+0x43c>)
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d03b      	beq.n	8019c50 <RadioIrqProcess+0x410>
 8019bd8:	4b28      	ldr	r3, [pc, #160]	; (8019c7c <RadioIrqProcess+0x43c>)
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	68db      	ldr	r3, [r3, #12]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d036      	beq.n	8019c50 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8019be2:	4b26      	ldr	r3, [pc, #152]	; (8019c7c <RadioIrqProcess+0x43c>)
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	68db      	ldr	r3, [r3, #12]
 8019be8:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019bea:	4b25      	ldr	r3, [pc, #148]	; (8019c80 <RadioIrqProcess+0x440>)
 8019bec:	2201      	movs	r2, #1
 8019bee:	2100      	movs	r1, #0
 8019bf0:	2002      	movs	r0, #2
 8019bf2:	f003 f82d 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019bf6:	e02b      	b.n	8019c50 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019bf8:	4b22      	ldr	r3, [pc, #136]	; (8019c84 <RadioIrqProcess+0x444>)
 8019bfa:	2201      	movs	r2, #1
 8019bfc:	2100      	movs	r1, #0
 8019bfe:	2002      	movs	r0, #2
 8019c00:	f003 f826 	bl	801cc50 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019c04:	4b17      	ldr	r3, [pc, #92]	; (8019c64 <RadioIrqProcess+0x424>)
 8019c06:	785b      	ldrb	r3, [r3, #1]
 8019c08:	f083 0301 	eor.w	r3, r3, #1
 8019c0c:	b2db      	uxtb	r3, r3
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d002      	beq.n	8019c18 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019c12:	2000      	movs	r0, #0
 8019c14:	f000 fe82 	bl	801a91c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019c18:	4b18      	ldr	r3, [pc, #96]	; (8019c7c <RadioIrqProcess+0x43c>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d019      	beq.n	8019c54 <RadioIrqProcess+0x414>
 8019c20:	4b16      	ldr	r3, [pc, #88]	; (8019c7c <RadioIrqProcess+0x43c>)
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	691b      	ldr	r3, [r3, #16]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d014      	beq.n	8019c54 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8019c2a:	4b14      	ldr	r3, [pc, #80]	; (8019c7c <RadioIrqProcess+0x43c>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	691b      	ldr	r3, [r3, #16]
 8019c30:	4798      	blx	r3
        break;
 8019c32:	e00f      	b.n	8019c54 <RadioIrqProcess+0x414>
        break;
 8019c34:	bf00      	nop
 8019c36:	e00e      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c38:	bf00      	nop
 8019c3a:	e00c      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c3c:	bf00      	nop
 8019c3e:	e00a      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c40:	bf00      	nop
 8019c42:	e008      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c44:	bf00      	nop
 8019c46:	e006      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c48:	bf00      	nop
 8019c4a:	e004      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c4c:	bf00      	nop
 8019c4e:	e002      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c50:	bf00      	nop
 8019c52:	e000      	b.n	8019c56 <RadioIrqProcess+0x416>
        break;
 8019c54:	bf00      	nop
    }
}
 8019c56:	bf00      	nop
 8019c58:	370c      	adds	r7, #12
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	bd90      	pop	{r4, r7, pc}
 8019c5e:	bf00      	nop
 8019c60:	0801db2c 	.word	0x0801db2c
 8019c64:	20001b44 	.word	0x20001b44
 8019c68:	0801964f 	.word	0x0801964f
 8019c6c:	08019673 	.word	0x08019673
 8019c70:	0801db38 	.word	0x0801db38
 8019c74:	0801db44 	.word	0x0801db44
 8019c78:	20001bb8 	.word	0x20001bb8
 8019c7c:	20001b40 	.word	0x20001b40
 8019c80:	0801db50 	.word	0x0801db50
 8019c84:	0801db5c 	.word	0x0801db5c

08019c88 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019c8c:	4b09      	ldr	r3, [pc, #36]	; (8019cb4 <RadioTxPrbs+0x2c>)
 8019c8e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019c92:	2101      	movs	r1, #1
 8019c94:	4618      	mov	r0, r3
 8019c96:	f001 fcb5 	bl	801b604 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019c9a:	4b07      	ldr	r3, [pc, #28]	; (8019cb8 <RadioTxPrbs+0x30>)
 8019c9c:	212d      	movs	r1, #45	; 0x2d
 8019c9e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019ca2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019ca4:	f000 fefd 	bl	801aaa2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019ca8:	4804      	ldr	r0, [pc, #16]	; (8019cbc <RadioTxPrbs+0x34>)
 8019caa:	f000 fe53 	bl	801a954 <SUBGRF_SetTx>
}
 8019cae:	bf00      	nop
 8019cb0:	bd80      	pop	{r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	20001b44 	.word	0x20001b44
 8019cb8:	0801964f 	.word	0x0801964f
 8019cbc:	000fffff 	.word	0x000fffff

08019cc0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b084      	sub	sp, #16
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f001 fcc0 	bl	801b654 <SUBGRF_SetRfTxPower>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019cd8:	7bfb      	ldrb	r3, [r7, #15]
 8019cda:	2101      	movs	r1, #1
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f001 fc91 	bl	801b604 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019ce2:	f000 fed5 	bl	801aa90 <SUBGRF_SetTxContinuousWave>
}
 8019ce6:	bf00      	nop
 8019ce8:	3710      	adds	r7, #16
 8019cea:	46bd      	mov	sp, r7
 8019cec:	bd80      	pop	{r7, pc}

08019cee <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019cee:	b480      	push	{r7}
 8019cf0:	b089      	sub	sp, #36	; 0x24
 8019cf2:	af00      	add	r7, sp, #0
 8019cf4:	60f8      	str	r0, [r7, #12]
 8019cf6:	60b9      	str	r1, [r7, #8]
 8019cf8:	4613      	mov	r3, r2
 8019cfa:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019d00:	2300      	movs	r3, #0
 8019d02:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019d04:	2300      	movs	r3, #0
 8019d06:	61bb      	str	r3, [r7, #24]
 8019d08:	e011      	b.n	8019d2e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019d0a:	69bb      	ldr	r3, [r7, #24]
 8019d0c:	68ba      	ldr	r2, [r7, #8]
 8019d0e:	4413      	add	r3, r2
 8019d10:	781a      	ldrb	r2, [r3, #0]
 8019d12:	69bb      	ldr	r3, [r7, #24]
 8019d14:	68b9      	ldr	r1, [r7, #8]
 8019d16:	440b      	add	r3, r1
 8019d18:	43d2      	mvns	r2, r2
 8019d1a:	b2d2      	uxtb	r2, r2
 8019d1c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019d1e:	69bb      	ldr	r3, [r7, #24]
 8019d20:	68fa      	ldr	r2, [r7, #12]
 8019d22:	4413      	add	r3, r2
 8019d24:	2200      	movs	r2, #0
 8019d26:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019d28:	69bb      	ldr	r3, [r7, #24]
 8019d2a:	3301      	adds	r3, #1
 8019d2c:	61bb      	str	r3, [r7, #24]
 8019d2e:	79fb      	ldrb	r3, [r7, #7]
 8019d30:	69ba      	ldr	r2, [r7, #24]
 8019d32:	429a      	cmp	r2, r3
 8019d34:	dbe9      	blt.n	8019d0a <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019d36:	2300      	movs	r3, #0
 8019d38:	61bb      	str	r3, [r7, #24]
 8019d3a:	e049      	b.n	8019dd0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019d3c:	69bb      	ldr	r3, [r7, #24]
 8019d3e:	425a      	negs	r2, r3
 8019d40:	f003 0307 	and.w	r3, r3, #7
 8019d44:	f002 0207 	and.w	r2, r2, #7
 8019d48:	bf58      	it	pl
 8019d4a:	4253      	negpl	r3, r2
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	f1c3 0307 	rsb	r3, r3, #7
 8019d52:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019d54:	69bb      	ldr	r3, [r7, #24]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	da00      	bge.n	8019d5c <payload_integration+0x6e>
 8019d5a:	3307      	adds	r3, #7
 8019d5c:	10db      	asrs	r3, r3, #3
 8019d5e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019d60:	69bb      	ldr	r3, [r7, #24]
 8019d62:	3301      	adds	r3, #1
 8019d64:	425a      	negs	r2, r3
 8019d66:	f003 0307 	and.w	r3, r3, #7
 8019d6a:	f002 0207 	and.w	r2, r2, #7
 8019d6e:	bf58      	it	pl
 8019d70:	4253      	negpl	r3, r2
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	f1c3 0307 	rsb	r3, r3, #7
 8019d78:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019d7a:	69bb      	ldr	r3, [r7, #24]
 8019d7c:	3301      	adds	r3, #1
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	da00      	bge.n	8019d84 <payload_integration+0x96>
 8019d82:	3307      	adds	r3, #7
 8019d84:	10db      	asrs	r3, r3, #3
 8019d86:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019d88:	7dbb      	ldrb	r3, [r7, #22]
 8019d8a:	68ba      	ldr	r2, [r7, #8]
 8019d8c:	4413      	add	r3, r2
 8019d8e:	781b      	ldrb	r3, [r3, #0]
 8019d90:	461a      	mov	r2, r3
 8019d92:	7dfb      	ldrb	r3, [r7, #23]
 8019d94:	fa42 f303 	asr.w	r3, r2, r3
 8019d98:	b2db      	uxtb	r3, r3
 8019d9a:	f003 0301 	and.w	r3, r3, #1
 8019d9e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019da0:	7ffa      	ldrb	r2, [r7, #31]
 8019da2:	7cfb      	ldrb	r3, [r7, #19]
 8019da4:	4053      	eors	r3, r2
 8019da6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019da8:	7d3b      	ldrb	r3, [r7, #20]
 8019daa:	68fa      	ldr	r2, [r7, #12]
 8019dac:	4413      	add	r3, r2
 8019dae:	781b      	ldrb	r3, [r3, #0]
 8019db0:	b25a      	sxtb	r2, r3
 8019db2:	7ff9      	ldrb	r1, [r7, #31]
 8019db4:	7d7b      	ldrb	r3, [r7, #21]
 8019db6:	fa01 f303 	lsl.w	r3, r1, r3
 8019dba:	b25b      	sxtb	r3, r3
 8019dbc:	4313      	orrs	r3, r2
 8019dbe:	b259      	sxtb	r1, r3
 8019dc0:	7d3b      	ldrb	r3, [r7, #20]
 8019dc2:	68fa      	ldr	r2, [r7, #12]
 8019dc4:	4413      	add	r3, r2
 8019dc6:	b2ca      	uxtb	r2, r1
 8019dc8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019dca:	69bb      	ldr	r3, [r7, #24]
 8019dcc:	3301      	adds	r3, #1
 8019dce:	61bb      	str	r3, [r7, #24]
 8019dd0:	79fb      	ldrb	r3, [r7, #7]
 8019dd2:	00db      	lsls	r3, r3, #3
 8019dd4:	69ba      	ldr	r2, [r7, #24]
 8019dd6:	429a      	cmp	r2, r3
 8019dd8:	dbb0      	blt.n	8019d3c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019dda:	7ffb      	ldrb	r3, [r7, #31]
 8019ddc:	01db      	lsls	r3, r3, #7
 8019dde:	b25a      	sxtb	r2, r3
 8019de0:	7ffb      	ldrb	r3, [r7, #31]
 8019de2:	019b      	lsls	r3, r3, #6
 8019de4:	b25b      	sxtb	r3, r3
 8019de6:	4313      	orrs	r3, r2
 8019de8:	b25b      	sxtb	r3, r3
 8019dea:	7ffa      	ldrb	r2, [r7, #31]
 8019dec:	2a00      	cmp	r2, #0
 8019dee:	d101      	bne.n	8019df4 <payload_integration+0x106>
 8019df0:	2220      	movs	r2, #32
 8019df2:	e000      	b.n	8019df6 <payload_integration+0x108>
 8019df4:	2200      	movs	r2, #0
 8019df6:	4313      	orrs	r3, r2
 8019df8:	b259      	sxtb	r1, r3
 8019dfa:	79fb      	ldrb	r3, [r7, #7]
 8019dfc:	68fa      	ldr	r2, [r7, #12]
 8019dfe:	4413      	add	r3, r2
 8019e00:	b2ca      	uxtb	r2, r1
 8019e02:	701a      	strb	r2, [r3, #0]
}
 8019e04:	bf00      	nop
 8019e06:	3724      	adds	r7, #36	; 0x24
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	bc80      	pop	{r7}
 8019e0c:	4770      	bx	lr
	...

08019e10 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b08c      	sub	sp, #48	; 0x30
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	60b9      	str	r1, [r7, #8]
 8019e18:	607a      	str	r2, [r7, #4]
 8019e1a:	603b      	str	r3, [r7, #0]
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019e20:	2300      	movs	r3, #0
 8019e22:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8019e24:	2300      	movs	r3, #0
 8019e26:	623b      	str	r3, [r7, #32]
 8019e28:	2300      	movs	r3, #0
 8019e2a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019e2c:	f001 fdcd 	bl	801b9ca <RFW_DeInit>

    if( rxContinuous != 0 )
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d001      	beq.n	8019e3a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019e36:	2300      	movs	r3, #0
 8019e38:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	bf14      	ite	ne
 8019e40:	2301      	movne	r3, #1
 8019e42:	2300      	moveq	r3, #0
 8019e44:	b2da      	uxtb	r2, r3
 8019e46:	4ba3      	ldr	r3, [pc, #652]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019e48:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019e4a:	7bfb      	ldrb	r3, [r7, #15]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d003      	beq.n	8019e58 <RadioSetRxGenericConfig+0x48>
 8019e50:	2b01      	cmp	r3, #1
 8019e52:	f000 80dc 	beq.w	801a00e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019e56:	e194      	b.n	801a182 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	689b      	ldr	r3, [r3, #8]
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d003      	beq.n	8019e68 <RadioSetRxGenericConfig+0x58>
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	68db      	ldr	r3, [r3, #12]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d102      	bne.n	8019e6e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019e68:	f04f 33ff 	mov.w	r3, #4294967295
 8019e6c:	e18a      	b.n	801a184 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019e6e:	68bb      	ldr	r3, [r7, #8]
 8019e70:	7f9b      	ldrb	r3, [r3, #30]
 8019e72:	2b08      	cmp	r3, #8
 8019e74:	d902      	bls.n	8019e7c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8019e76:	f04f 33ff 	mov.w	r3, #4294967295
 8019e7a:	e183      	b.n	801a184 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019e7c:	68bb      	ldr	r3, [r7, #8]
 8019e7e:	6919      	ldr	r1, [r3, #16]
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	7f9b      	ldrb	r3, [r3, #30]
 8019e84:	b29a      	uxth	r2, r3
 8019e86:	f107 0320 	add.w	r3, r7, #32
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	f001 fe90 	bl	801bbb0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	bf14      	ite	ne
 8019e98:	2301      	movne	r3, #1
 8019e9a:	2300      	moveq	r3, #0
 8019e9c:	b2db      	uxtb	r3, r3
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f000 fe08 	bl	801aab4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019ea4:	4b8b      	ldr	r3, [pc, #556]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019eac:	68bb      	ldr	r3, [r7, #8]
 8019eae:	689b      	ldr	r3, [r3, #8]
 8019eb0:	4a88      	ldr	r2, [pc, #544]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019eb2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019eba:	4b86      	ldr	r3, [pc, #536]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	685b      	ldr	r3, [r3, #4]
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f001 fcb3 	bl	801b830 <SUBGRF_GetFskBandwidthRegValue>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	461a      	mov	r2, r3
 8019ece:	4b81      	ldr	r3, [pc, #516]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019ed4:	4b7f      	ldr	r3, [pc, #508]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	68db      	ldr	r3, [r3, #12]
 8019ede:	b29b      	uxth	r3, r3
 8019ee0:	00db      	lsls	r3, r3, #3
 8019ee2:	b29a      	uxth	r2, r3
 8019ee4:	4b7b      	ldr	r3, [pc, #492]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019ee6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	7fda      	ldrb	r2, [r3, #31]
 8019eec:	4b79      	ldr	r3, [pc, #484]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019eee:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	7f9b      	ldrb	r3, [r3, #30]
 8019ef4:	00db      	lsls	r3, r3, #3
 8019ef6:	b2da      	uxtb	r2, r3
 8019ef8:	4b76      	ldr	r3, [pc, #472]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019efa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8019f02:	4b74      	ldr	r3, [pc, #464]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019f04:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019f06:	68bb      	ldr	r3, [r7, #8]
 8019f08:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d105      	bne.n	8019f1c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	695b      	ldr	r3, [r3, #20]
 8019f14:	b2da      	uxtb	r2, r3
 8019f16:	4b6f      	ldr	r3, [pc, #444]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019f18:	759a      	strb	r2, [r3, #22]
 8019f1a:	e00b      	b.n	8019f34 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019f22:	2b02      	cmp	r3, #2
 8019f24:	d103      	bne.n	8019f2e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019f26:	4b6b      	ldr	r3, [pc, #428]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019f28:	22ff      	movs	r2, #255	; 0xff
 8019f2a:	759a      	strb	r2, [r3, #22]
 8019f2c:	e002      	b.n	8019f34 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019f2e:	4b69      	ldr	r3, [pc, #420]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019f30:	22ff      	movs	r2, #255	; 0xff
 8019f32:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019f3a:	2b02      	cmp	r3, #2
 8019f3c:	d004      	beq.n	8019f48 <RadioSetRxGenericConfig+0x138>
 8019f3e:	68bb      	ldr	r3, [r7, #8]
 8019f40:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019f44:	2b02      	cmp	r3, #2
 8019f46:	d12d      	bne.n	8019fa4 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019f48:	68bb      	ldr	r3, [r7, #8]
 8019f4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019f4e:	2bf1      	cmp	r3, #241	; 0xf1
 8019f50:	d00c      	beq.n	8019f6c <RadioSetRxGenericConfig+0x15c>
 8019f52:	68bb      	ldr	r3, [r7, #8]
 8019f54:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019f58:	2bf2      	cmp	r3, #242	; 0xf2
 8019f5a:	d007      	beq.n	8019f6c <RadioSetRxGenericConfig+0x15c>
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019f62:	2b01      	cmp	r3, #1
 8019f64:	d002      	beq.n	8019f6c <RadioSetRxGenericConfig+0x15c>
            return -1;
 8019f66:	f04f 33ff 	mov.w	r3, #4294967295
 8019f6a:	e10b      	b.n	801a184 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019f74:	4b58      	ldr	r3, [pc, #352]	; (801a0d8 <RadioSetRxGenericConfig+0x2c8>)
 8019f76:	6819      	ldr	r1, [r3, #0]
 8019f78:	f107 0314 	add.w	r3, r7, #20
 8019f7c:	4a57      	ldr	r2, [pc, #348]	; (801a0dc <RadioSetRxGenericConfig+0x2cc>)
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f001 fd16 	bl	801b9b0 <RFW_Init>
 8019f84:	4603      	mov	r3, r0
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d002      	beq.n	8019f90 <RadioSetRxGenericConfig+0x180>
            return -1;
 8019f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8019f8e:	e0f9      	b.n	801a184 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019f90:	4b50      	ldr	r3, [pc, #320]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019f92:	2200      	movs	r2, #0
 8019f94:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019f96:	4b4f      	ldr	r3, [pc, #316]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019f98:	2201      	movs	r2, #1
 8019f9a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019f9c:	4b4d      	ldr	r3, [pc, #308]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	755a      	strb	r2, [r3, #21]
        {
 8019fa2:	e00e      	b.n	8019fc2 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019fa4:	68bb      	ldr	r3, [r7, #8]
 8019fa6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019faa:	4b4a      	ldr	r3, [pc, #296]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019fac:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019fae:	68bb      	ldr	r3, [r7, #8]
 8019fb0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019fb4:	4b47      	ldr	r3, [pc, #284]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019fb6:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8019fbe:	4b45      	ldr	r3, [pc, #276]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 8019fc0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019fc2:	f7ff fa48 	bl	8019456 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019fc6:	2000      	movs	r0, #0
 8019fc8:	f7fe fbf2 	bl	80187b0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019fcc:	4844      	ldr	r0, [pc, #272]	; (801a0e0 <RadioSetRxGenericConfig+0x2d0>)
 8019fce:	f001 f80b 	bl	801afe8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fd2:	4844      	ldr	r0, [pc, #272]	; (801a0e4 <RadioSetRxGenericConfig+0x2d4>)
 8019fd4:	f001 f8da 	bl	801b18c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019fd8:	f107 0320 	add.w	r3, r7, #32
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f000 fba2 	bl	801a726 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019fe2:	68bb      	ldr	r3, [r7, #8]
 8019fe4:	8b9b      	ldrh	r3, [r3, #28]
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f000 fbec 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	8b1b      	ldrh	r3, [r3, #24]
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f000 fbc7 	bl	801a784 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019ff6:	683b      	ldr	r3, [r7, #0]
 8019ff8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019ffc:	fb03 f202 	mul.w	r2, r3, r2
 801a000:	68bb      	ldr	r3, [r7, #8]
 801a002:	689b      	ldr	r3, [r3, #8]
 801a004:	fbb2 f3f3 	udiv	r3, r2, r3
 801a008:	4a32      	ldr	r2, [pc, #200]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a00a:	6093      	str	r3, [r2, #8]
        break;
 801a00c:	e0b9      	b.n	801a182 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a012:	2b00      	cmp	r3, #0
 801a014:	d102      	bne.n	801a01c <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a016:	f04f 33ff 	mov.w	r3, #4294967295
 801a01a:	e0b3      	b.n	801a184 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801a022:	2b01      	cmp	r3, #1
 801a024:	d104      	bne.n	801a030 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	695b      	ldr	r3, [r3, #20]
 801a02a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a02e:	e002      	b.n	801a036 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a030:	23ff      	movs	r3, #255	; 0xff
 801a032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	bf14      	ite	ne
 801a03e:	2301      	movne	r3, #1
 801a040:	2300      	moveq	r3, #0
 801a042:	b2db      	uxtb	r3, r3
 801a044:	4618      	mov	r0, r3
 801a046:	f000 fd35 	bl	801aab4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	b2db      	uxtb	r3, r3
 801a04e:	4618      	mov	r0, r3
 801a050:	f000 fd3f 	bl	801aad2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a054:	4b1f      	ldr	r3, [pc, #124]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a056:	2201      	movs	r2, #1
 801a058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a062:	4b1c      	ldr	r3, [pc, #112]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a06e:	4b19      	ldr	r3, [pc, #100]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a074:	68bb      	ldr	r3, [r7, #8]
 801a076:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a07a:	4b16      	ldr	r3, [pc, #88]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a07c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a080:	68bb      	ldr	r3, [r7, #8]
 801a082:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a086:	2b02      	cmp	r3, #2
 801a088:	d010      	beq.n	801a0ac <RadioSetRxGenericConfig+0x29c>
 801a08a:	2b02      	cmp	r3, #2
 801a08c:	dc2c      	bgt.n	801a0e8 <RadioSetRxGenericConfig+0x2d8>
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d002      	beq.n	801a098 <RadioSetRxGenericConfig+0x288>
 801a092:	2b01      	cmp	r3, #1
 801a094:	d005      	beq.n	801a0a2 <RadioSetRxGenericConfig+0x292>
            break;
 801a096:	e027      	b.n	801a0e8 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a098:	4b0e      	ldr	r3, [pc, #56]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a09a:	2200      	movs	r2, #0
 801a09c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a0a0:	e023      	b.n	801a0ea <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a0a2:	4b0c      	ldr	r3, [pc, #48]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a0a4:	2201      	movs	r2, #1
 801a0a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a0aa:	e01e      	b.n	801a0ea <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a0ac:	68bb      	ldr	r3, [r7, #8]
 801a0ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a0b2:	2b0b      	cmp	r3, #11
 801a0b4:	d004      	beq.n	801a0c0 <RadioSetRxGenericConfig+0x2b0>
 801a0b6:	68bb      	ldr	r3, [r7, #8]
 801a0b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a0bc:	2b0c      	cmp	r3, #12
 801a0be:	d104      	bne.n	801a0ca <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a0c0:	4b04      	ldr	r3, [pc, #16]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a0c2:	2201      	movs	r2, #1
 801a0c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a0c8:	e00f      	b.n	801a0ea <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a0ca:	4b02      	ldr	r3, [pc, #8]	; (801a0d4 <RadioSetRxGenericConfig+0x2c4>)
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a0d2:	e00a      	b.n	801a0ea <RadioSetRxGenericConfig+0x2da>
 801a0d4:	20001b44 	.word	0x20001b44
 801a0d8:	20001b40 	.word	0x20001b40
 801a0dc:	20001bb8 	.word	0x20001bb8
 801a0e0:	20001b7c 	.word	0x20001b7c
 801a0e4:	20001b52 	.word	0x20001b52
            break;
 801a0e8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a0ea:	4b28      	ldr	r3, [pc, #160]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a0ec:	2201      	movs	r2, #1
 801a0ee:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a0f0:	68bb      	ldr	r3, [r7, #8]
 801a0f2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801a0f4:	4b25      	ldr	r3, [pc, #148]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a0f6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a0fe:	4b23      	ldr	r3, [pc, #140]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a100:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a102:	4a22      	ldr	r2, [pc, #136]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a108:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801a110:	4b1e      	ldr	r3, [pc, #120]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a112:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801a11c:	4b1b      	ldr	r3, [pc, #108]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a11e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a122:	f7ff f998 	bl	8019456 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a126:	2001      	movs	r0, #1
 801a128:	f7fe fb42 	bl	80187b0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a12c:	4818      	ldr	r0, [pc, #96]	; (801a190 <RadioSetRxGenericConfig+0x380>)
 801a12e:	f000 ff5b 	bl	801afe8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a132:	4818      	ldr	r0, [pc, #96]	; (801a194 <RadioSetRxGenericConfig+0x384>)
 801a134:	f001 f82a 	bl	801b18c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a138:	4b14      	ldr	r3, [pc, #80]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a13a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a13e:	2b01      	cmp	r3, #1
 801a140:	d10d      	bne.n	801a15e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a142:	f240 7036 	movw	r0, #1846	; 0x736
 801a146:	f001 f97d 	bl	801b444 <SUBGRF_ReadRegister>
 801a14a:	4603      	mov	r3, r0
 801a14c:	f023 0304 	bic.w	r3, r3, #4
 801a150:	b2db      	uxtb	r3, r3
 801a152:	4619      	mov	r1, r3
 801a154:	f240 7036 	movw	r0, #1846	; 0x736
 801a158:	f001 f960 	bl	801b41c <SUBGRF_WriteRegister>
 801a15c:	e00c      	b.n	801a178 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a15e:	f240 7036 	movw	r0, #1846	; 0x736
 801a162:	f001 f96f 	bl	801b444 <SUBGRF_ReadRegister>
 801a166:	4603      	mov	r3, r0
 801a168:	f043 0304 	orr.w	r3, r3, #4
 801a16c:	b2db      	uxtb	r3, r3
 801a16e:	4619      	mov	r1, r3
 801a170:	f240 7036 	movw	r0, #1846	; 0x736
 801a174:	f001 f952 	bl	801b41c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a178:	4b04      	ldr	r3, [pc, #16]	; (801a18c <RadioSetRxGenericConfig+0x37c>)
 801a17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a17e:	609a      	str	r2, [r3, #8]
        break;
 801a180:	bf00      	nop
    }
    return status;
 801a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a184:	4618      	mov	r0, r3
 801a186:	3730      	adds	r7, #48	; 0x30
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}
 801a18c:	20001b44 	.word	0x20001b44
 801a190:	20001b7c 	.word	0x20001b7c
 801a194:	20001b52 	.word	0x20001b52

0801a198 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b08e      	sub	sp, #56	; 0x38
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	60b9      	str	r1, [r7, #8]
 801a1a0:	607b      	str	r3, [r7, #4]
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	73fb      	strb	r3, [r7, #15]
 801a1a6:	4613      	mov	r3, r2
 801a1a8:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a1b2:	f001 fc0a 	bl	801b9ca <RFW_DeInit>
    switch( modem )
 801a1b6:	7bfb      	ldrb	r3, [r7, #15]
 801a1b8:	2b03      	cmp	r3, #3
 801a1ba:	f200 8204 	bhi.w	801a5c6 <RadioSetTxGenericConfig+0x42e>
 801a1be:	a201      	add	r2, pc, #4	; (adr r2, 801a1c4 <RadioSetTxGenericConfig+0x2c>)
 801a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1c4:	0801a349 	.word	0x0801a349
 801a1c8:	0801a491 	.word	0x0801a491
 801a1cc:	0801a589 	.word	0x0801a589
 801a1d0:	0801a1d5 	.word	0x0801a1d5
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a1d4:	68bb      	ldr	r3, [r7, #8]
 801a1d6:	7c9b      	ldrb	r3, [r3, #18]
 801a1d8:	2b08      	cmp	r3, #8
 801a1da:	d902      	bls.n	801a1e2 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a1dc:	f04f 33ff 	mov.w	r3, #4294967295
 801a1e0:	e206      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	6899      	ldr	r1, [r3, #8]
 801a1e6:	68bb      	ldr	r3, [r7, #8]
 801a1e8:	7c9b      	ldrb	r3, [r3, #18]
 801a1ea:	b29a      	uxth	r2, r3
 801a1ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f001 fcdd 	bl	801bbb0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a1f6:	68bb      	ldr	r3, [r7, #8]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d102      	bne.n	801a204 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a1fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a202:	e1f5      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801a204:	68bb      	ldr	r3, [r7, #8]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	f242 7210 	movw	r2, #10000	; 0x2710
 801a20c:	4293      	cmp	r3, r2
 801a20e:	d813      	bhi.n	801a238 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801a210:	2302      	movs	r3, #2
 801a212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a216:	4b99      	ldr	r3, [pc, #612]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a218:	2203      	movs	r2, #3
 801a21a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a21c:	4b97      	ldr	r3, [pc, #604]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a21e:	2203      	movs	r2, #3
 801a220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a224:	68bb      	ldr	r3, [r7, #8]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	4a94      	ldr	r2, [pc, #592]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a22a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a22c:	68bb      	ldr	r3, [r7, #8]
 801a22e:	7cda      	ldrb	r2, [r3, #19]
 801a230:	4b92      	ldr	r3, [pc, #584]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a236:	e017      	b.n	801a268 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801a238:	2300      	movs	r3, #0
 801a23a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a23e:	4b8f      	ldr	r3, [pc, #572]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a240:	2200      	movs	r2, #0
 801a242:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a244:	4b8d      	ldr	r3, [pc, #564]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a246:	2200      	movs	r2, #0
 801a248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a24c:	68bb      	ldr	r3, [r7, #8]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	4a8a      	ldr	r2, [pc, #552]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a252:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a254:	68bb      	ldr	r3, [r7, #8]
 801a256:	7cda      	ldrb	r2, [r3, #19]
 801a258:	4b88      	ldr	r3, [pc, #544]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	089b      	lsrs	r3, r3, #2
 801a264:	4a85      	ldr	r2, [pc, #532]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a266:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	685b      	ldr	r3, [r3, #4]
 801a26c:	b29b      	uxth	r3, r3
 801a26e:	00db      	lsls	r3, r3, #3
 801a270:	b29a      	uxth	r2, r3
 801a272:	4b82      	ldr	r3, [pc, #520]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a274:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a276:	4b81      	ldr	r3, [pc, #516]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a278:	2204      	movs	r2, #4
 801a27a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a27c:	68bb      	ldr	r3, [r7, #8]
 801a27e:	7c9b      	ldrb	r3, [r3, #18]
 801a280:	00db      	lsls	r3, r3, #3
 801a282:	b2da      	uxtb	r2, r3
 801a284:	4b7d      	ldr	r3, [pc, #500]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a286:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a288:	4b7c      	ldr	r3, [pc, #496]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a28a:	2200      	movs	r2, #0
 801a28c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a28e:	68bb      	ldr	r3, [r7, #8]
 801a290:	7d9b      	ldrb	r3, [r3, #22]
 801a292:	2b02      	cmp	r3, #2
 801a294:	d003      	beq.n	801a29e <RadioSetTxGenericConfig+0x106>
 801a296:	68bb      	ldr	r3, [r7, #8]
 801a298:	7d1b      	ldrb	r3, [r3, #20]
 801a29a:	2b02      	cmp	r3, #2
 801a29c:	d12b      	bne.n	801a2f6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	7d5b      	ldrb	r3, [r3, #21]
 801a2a2:	2bf1      	cmp	r3, #241	; 0xf1
 801a2a4:	d00a      	beq.n	801a2bc <RadioSetTxGenericConfig+0x124>
 801a2a6:	68bb      	ldr	r3, [r7, #8]
 801a2a8:	7d5b      	ldrb	r3, [r3, #21]
 801a2aa:	2bf2      	cmp	r3, #242	; 0xf2
 801a2ac:	d006      	beq.n	801a2bc <RadioSetTxGenericConfig+0x124>
 801a2ae:	68bb      	ldr	r3, [r7, #8]
 801a2b0:	7d5b      	ldrb	r3, [r3, #21]
 801a2b2:	2b01      	cmp	r3, #1
 801a2b4:	d002      	beq.n	801a2bc <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 801a2ba:	e199      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a2c0:	2301      	movs	r3, #1
 801a2c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a2c6:	4b6e      	ldr	r3, [pc, #440]	; (801a480 <RadioSetTxGenericConfig+0x2e8>)
 801a2c8:	6819      	ldr	r1, [r3, #0]
 801a2ca:	f107 0320 	add.w	r3, r7, #32
 801a2ce:	4a6d      	ldr	r2, [pc, #436]	; (801a484 <RadioSetTxGenericConfig+0x2ec>)
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	f001 fb6d 	bl	801b9b0 <RFW_Init>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d002      	beq.n	801a2e2 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801a2dc:	f04f 33ff 	mov.w	r3, #4294967295
 801a2e0:	e186      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a2e2:	4b66      	ldr	r3, [pc, #408]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a2e8:	4b64      	ldr	r3, [pc, #400]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a2ea:	2201      	movs	r2, #1
 801a2ec:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a2ee:	4b63      	ldr	r3, [pc, #396]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	755a      	strb	r2, [r3, #21]
        {
 801a2f4:	e00b      	b.n	801a30e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	7d5a      	ldrb	r2, [r3, #21]
 801a2fa:	4b60      	ldr	r3, [pc, #384]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a2fc:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a2fe:	68bb      	ldr	r3, [r7, #8]
 801a300:	7d9a      	ldrb	r2, [r3, #22]
 801a302:	4b5e      	ldr	r3, [pc, #376]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a304:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a306:	68bb      	ldr	r3, [r7, #8]
 801a308:	7d1a      	ldrb	r2, [r3, #20]
 801a30a:	4b5c      	ldr	r3, [pc, #368]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a30c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a30e:	f7ff f8a2 	bl	8019456 <RadioStandby>
        RadioSetModem( radio_modem );
 801a312:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801a316:	4618      	mov	r0, r3
 801a318:	f7fe fa4a 	bl	80187b0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a31c:	485a      	ldr	r0, [pc, #360]	; (801a488 <RadioSetTxGenericConfig+0x2f0>)
 801a31e:	f000 fe63 	bl	801afe8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a322:	485a      	ldr	r0, [pc, #360]	; (801a48c <RadioSetTxGenericConfig+0x2f4>)
 801a324:	f000 ff32 	bl	801b18c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a32c:	4618      	mov	r0, r3
 801a32e:	f000 f9fa 	bl	801a726 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a332:	68bb      	ldr	r3, [r7, #8]
 801a334:	8a1b      	ldrh	r3, [r3, #16]
 801a336:	4618      	mov	r0, r3
 801a338:	f000 fa44 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	899b      	ldrh	r3, [r3, #12]
 801a340:	4618      	mov	r0, r3
 801a342:	f000 fa1f 	bl	801a784 <SUBGRF_SetCrcPolynomial>
        break;
 801a346:	e13f      	b.n	801a5c8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a348:	68bb      	ldr	r3, [r7, #8]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d102      	bne.n	801a356 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801a350:	f04f 33ff 	mov.w	r3, #4294967295
 801a354:	e14c      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	7c9b      	ldrb	r3, [r3, #18]
 801a35a:	2b08      	cmp	r3, #8
 801a35c:	d902      	bls.n	801a364 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801a35e:	f04f 33ff 	mov.w	r3, #4294967295
 801a362:	e145      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801a364:	68bb      	ldr	r3, [r7, #8]
 801a366:	6899      	ldr	r1, [r3, #8]
 801a368:	68bb      	ldr	r3, [r7, #8]
 801a36a:	7c9b      	ldrb	r3, [r3, #18]
 801a36c:	b29a      	uxth	r2, r3
 801a36e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a372:	4618      	mov	r0, r3
 801a374:	f001 fc1c 	bl	801bbb0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a378:	4b40      	ldr	r3, [pc, #256]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a37a:	2200      	movs	r2, #0
 801a37c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a380:	68bb      	ldr	r3, [r7, #8]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	4a3d      	ldr	r2, [pc, #244]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a386:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a388:	68bb      	ldr	r3, [r7, #8]
 801a38a:	7cda      	ldrb	r2, [r3, #19]
 801a38c:	4b3b      	ldr	r3, [pc, #236]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a38e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	699b      	ldr	r3, [r3, #24]
 801a396:	4a39      	ldr	r2, [pc, #228]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a398:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a39a:	4b38      	ldr	r3, [pc, #224]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a39c:	2200      	movs	r2, #0
 801a39e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a3a0:	68bb      	ldr	r3, [r7, #8]
 801a3a2:	685b      	ldr	r3, [r3, #4]
 801a3a4:	b29b      	uxth	r3, r3
 801a3a6:	00db      	lsls	r3, r3, #3
 801a3a8:	b29a      	uxth	r2, r3
 801a3aa:	4b34      	ldr	r3, [pc, #208]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a3ac:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a3ae:	4b33      	ldr	r3, [pc, #204]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a3b0:	2204      	movs	r2, #4
 801a3b2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a3b4:	68bb      	ldr	r3, [r7, #8]
 801a3b6:	7c9b      	ldrb	r3, [r3, #18]
 801a3b8:	00db      	lsls	r3, r3, #3
 801a3ba:	b2da      	uxtb	r2, r3
 801a3bc:	4b2f      	ldr	r3, [pc, #188]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a3be:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a3c0:	4b2e      	ldr	r3, [pc, #184]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	7d9b      	ldrb	r3, [r3, #22]
 801a3ca:	2b02      	cmp	r3, #2
 801a3cc:	d003      	beq.n	801a3d6 <RadioSetTxGenericConfig+0x23e>
 801a3ce:	68bb      	ldr	r3, [r7, #8]
 801a3d0:	7d1b      	ldrb	r3, [r3, #20]
 801a3d2:	2b02      	cmp	r3, #2
 801a3d4:	d12a      	bne.n	801a42c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a3d6:	68bb      	ldr	r3, [r7, #8]
 801a3d8:	7d5b      	ldrb	r3, [r3, #21]
 801a3da:	2bf1      	cmp	r3, #241	; 0xf1
 801a3dc:	d00a      	beq.n	801a3f4 <RadioSetTxGenericConfig+0x25c>
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	7d5b      	ldrb	r3, [r3, #21]
 801a3e2:	2bf2      	cmp	r3, #242	; 0xf2
 801a3e4:	d006      	beq.n	801a3f4 <RadioSetTxGenericConfig+0x25c>
 801a3e6:	68bb      	ldr	r3, [r7, #8]
 801a3e8:	7d5b      	ldrb	r3, [r3, #21]
 801a3ea:	2b01      	cmp	r3, #1
 801a3ec:	d002      	beq.n	801a3f4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a3ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f2:	e0fd      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a3f4:	2301      	movs	r3, #1
 801a3f6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a3f8:	68bb      	ldr	r3, [r7, #8]
 801a3fa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a3fc:	4b20      	ldr	r3, [pc, #128]	; (801a480 <RadioSetTxGenericConfig+0x2e8>)
 801a3fe:	6819      	ldr	r1, [r3, #0]
 801a400:	f107 0314 	add.w	r3, r7, #20
 801a404:	4a1f      	ldr	r2, [pc, #124]	; (801a484 <RadioSetTxGenericConfig+0x2ec>)
 801a406:	4618      	mov	r0, r3
 801a408:	f001 fad2 	bl	801b9b0 <RFW_Init>
 801a40c:	4603      	mov	r3, r0
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d002      	beq.n	801a418 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801a412:	f04f 33ff 	mov.w	r3, #4294967295
 801a416:	e0eb      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a418:	4b18      	ldr	r3, [pc, #96]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a41a:	2200      	movs	r2, #0
 801a41c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a41e:	4b17      	ldr	r3, [pc, #92]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a420:	2201      	movs	r2, #1
 801a422:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a424:	4b15      	ldr	r3, [pc, #84]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a426:	2200      	movs	r2, #0
 801a428:	755a      	strb	r2, [r3, #21]
        {
 801a42a:	e00b      	b.n	801a444 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a42c:	68bb      	ldr	r3, [r7, #8]
 801a42e:	7d5a      	ldrb	r2, [r3, #21]
 801a430:	4b12      	ldr	r3, [pc, #72]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a432:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a434:	68bb      	ldr	r3, [r7, #8]
 801a436:	7d9a      	ldrb	r2, [r3, #22]
 801a438:	4b10      	ldr	r3, [pc, #64]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a43a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	7d1a      	ldrb	r2, [r3, #20]
 801a440:	4b0e      	ldr	r3, [pc, #56]	; (801a47c <RadioSetTxGenericConfig+0x2e4>)
 801a442:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a444:	f7ff f807 	bl	8019456 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a448:	2000      	movs	r0, #0
 801a44a:	f7fe f9b1 	bl	80187b0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a44e:	480e      	ldr	r0, [pc, #56]	; (801a488 <RadioSetTxGenericConfig+0x2f0>)
 801a450:	f000 fdca 	bl	801afe8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a454:	480d      	ldr	r0, [pc, #52]	; (801a48c <RadioSetTxGenericConfig+0x2f4>)
 801a456:	f000 fe99 	bl	801b18c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a45a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a45e:	4618      	mov	r0, r3
 801a460:	f000 f961 	bl	801a726 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a464:	68bb      	ldr	r3, [r7, #8]
 801a466:	8a1b      	ldrh	r3, [r3, #16]
 801a468:	4618      	mov	r0, r3
 801a46a:	f000 f9ab 	bl	801a7c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a46e:	68bb      	ldr	r3, [r7, #8]
 801a470:	899b      	ldrh	r3, [r3, #12]
 801a472:	4618      	mov	r0, r3
 801a474:	f000 f986 	bl	801a784 <SUBGRF_SetCrcPolynomial>
        break;
 801a478:	e0a6      	b.n	801a5c8 <RadioSetTxGenericConfig+0x430>
 801a47a:	bf00      	nop
 801a47c:	20001b44 	.word	0x20001b44
 801a480:	20001b40 	.word	0x20001b40
 801a484:	20001ba0 	.word	0x20001ba0
 801a488:	20001b7c 	.word	0x20001b7c
 801a48c:	20001b52 	.word	0x20001b52
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a490:	4b59      	ldr	r3, [pc, #356]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a492:	2201      	movs	r2, #1
 801a494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	781a      	ldrb	r2, [r3, #0]
 801a49c:	4b56      	ldr	r3, [pc, #344]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a49e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a4a2:	68bb      	ldr	r3, [r7, #8]
 801a4a4:	785a      	ldrb	r2, [r3, #1]
 801a4a6:	4b54      	ldr	r3, [pc, #336]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a4a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a4ac:	68bb      	ldr	r3, [r7, #8]
 801a4ae:	789a      	ldrb	r2, [r3, #2]
 801a4b0:	4b51      	ldr	r3, [pc, #324]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a4b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	78db      	ldrb	r3, [r3, #3]
 801a4ba:	2b02      	cmp	r3, #2
 801a4bc:	d010      	beq.n	801a4e0 <RadioSetTxGenericConfig+0x348>
 801a4be:	2b02      	cmp	r3, #2
 801a4c0:	dc20      	bgt.n	801a504 <RadioSetTxGenericConfig+0x36c>
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d002      	beq.n	801a4cc <RadioSetTxGenericConfig+0x334>
 801a4c6:	2b01      	cmp	r3, #1
 801a4c8:	d005      	beq.n	801a4d6 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a4ca:	e01b      	b.n	801a504 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a4cc:	4b4a      	ldr	r3, [pc, #296]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a4d4:	e017      	b.n	801a506 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a4d6:	4b48      	ldr	r3, [pc, #288]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a4d8:	2201      	movs	r2, #1
 801a4da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a4de:	e012      	b.n	801a506 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	781b      	ldrb	r3, [r3, #0]
 801a4e4:	2b0b      	cmp	r3, #11
 801a4e6:	d003      	beq.n	801a4f0 <RadioSetTxGenericConfig+0x358>
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	2b0c      	cmp	r3, #12
 801a4ee:	d104      	bne.n	801a4fa <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a4f0:	4b41      	ldr	r3, [pc, #260]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a4f2:	2201      	movs	r2, #1
 801a4f4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a4f8:	e005      	b.n	801a506 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a4fa:	4b3f      	ldr	r3, [pc, #252]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a502:	e000      	b.n	801a506 <RadioSetTxGenericConfig+0x36e>
            break;
 801a504:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a506:	4b3c      	ldr	r3, [pc, #240]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a508:	2201      	movs	r2, #1
 801a50a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a50c:	68bb      	ldr	r3, [r7, #8]
 801a50e:	889a      	ldrh	r2, [r3, #4]
 801a510:	4b39      	ldr	r3, [pc, #228]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a512:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	799a      	ldrb	r2, [r3, #6]
 801a518:	4b37      	ldr	r3, [pc, #220]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a51a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	79da      	ldrb	r2, [r3, #7]
 801a520:	4b35      	ldr	r3, [pc, #212]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a522:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a526:	68bb      	ldr	r3, [r7, #8]
 801a528:	7a1a      	ldrb	r2, [r3, #8]
 801a52a:	4b33      	ldr	r3, [pc, #204]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a52c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a530:	f7fe ff91 	bl	8019456 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a534:	2001      	movs	r0, #1
 801a536:	f7fe f93b 	bl	80187b0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a53a:	4830      	ldr	r0, [pc, #192]	; (801a5fc <RadioSetTxGenericConfig+0x464>)
 801a53c:	f000 fd54 	bl	801afe8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a540:	482f      	ldr	r0, [pc, #188]	; (801a600 <RadioSetTxGenericConfig+0x468>)
 801a542:	f000 fe23 	bl	801b18c <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a546:	4b2c      	ldr	r3, [pc, #176]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a54c:	2b06      	cmp	r3, #6
 801a54e:	d10d      	bne.n	801a56c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a550:	f640 0089 	movw	r0, #2185	; 0x889
 801a554:	f000 ff76 	bl	801b444 <SUBGRF_ReadRegister>
 801a558:	4603      	mov	r3, r0
 801a55a:	f023 0304 	bic.w	r3, r3, #4
 801a55e:	b2db      	uxtb	r3, r3
 801a560:	4619      	mov	r1, r3
 801a562:	f640 0089 	movw	r0, #2185	; 0x889
 801a566:	f000 ff59 	bl	801b41c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a56a:	e02d      	b.n	801a5c8 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a56c:	f640 0089 	movw	r0, #2185	; 0x889
 801a570:	f000 ff68 	bl	801b444 <SUBGRF_ReadRegister>
 801a574:	4603      	mov	r3, r0
 801a576:	f043 0304 	orr.w	r3, r3, #4
 801a57a:	b2db      	uxtb	r3, r3
 801a57c:	4619      	mov	r1, r3
 801a57e:	f640 0089 	movw	r0, #2185	; 0x889
 801a582:	f000 ff4b 	bl	801b41c <SUBGRF_WriteRegister>
        break;
 801a586:	e01f      	b.n	801a5c8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a588:	68bb      	ldr	r3, [r7, #8]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d004      	beq.n	801a59a <RadioSetTxGenericConfig+0x402>
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a598:	d902      	bls.n	801a5a0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a59a:	f04f 33ff 	mov.w	r3, #4294967295
 801a59e:	e027      	b.n	801a5f0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a5a0:	2003      	movs	r0, #3
 801a5a2:	f7fe f905 	bl	80187b0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a5a6:	4b14      	ldr	r3, [pc, #80]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a5a8:	2202      	movs	r2, #2
 801a5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a5ae:	68bb      	ldr	r3, [r7, #8]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	4a11      	ldr	r2, [pc, #68]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a5b4:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a5b6:	4b10      	ldr	r3, [pc, #64]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a5b8:	2216      	movs	r2, #22
 801a5ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a5be:	480f      	ldr	r0, [pc, #60]	; (801a5fc <RadioSetTxGenericConfig+0x464>)
 801a5c0:	f000 fd12 	bl	801afe8 <SUBGRF_SetModulationParams>
        break;
 801a5c4:	e000      	b.n	801a5c8 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a5c6:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a5c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	f001 f841 	bl	801b654 <SUBGRF_SetRfTxPower>
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	461a      	mov	r2, r3
 801a5d6:	4b08      	ldr	r3, [pc, #32]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a5d8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a5dc:	4b06      	ldr	r3, [pc, #24]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a5de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	f001 fa05 	bl	801b9f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a5e8:	4a03      	ldr	r2, [pc, #12]	; (801a5f8 <RadioSetTxGenericConfig+0x460>)
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6053      	str	r3, [r2, #4]
    return 0;
 801a5ee:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3738      	adds	r7, #56	; 0x38
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}
 801a5f8:	20001b44 	.word	0x20001b44
 801a5fc:	20001b7c 	.word	0x20001b7c
 801a600:	20001b52 	.word	0x20001b52

0801a604 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b084      	sub	sp, #16
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d002      	beq.n	801a618 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a612:	4a1a      	ldr	r2, [pc, #104]	; (801a67c <SUBGRF_Init+0x78>)
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a618:	f7e7 f9cc 	bl	80019b4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a61c:	2002      	movs	r0, #2
 801a61e:	f001 f8e5 	bl	801b7ec <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a622:	4b17      	ldr	r3, [pc, #92]	; (801a680 <SUBGRF_Init+0x7c>)
 801a624:	2200      	movs	r2, #0
 801a626:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a628:	2000      	movs	r0, #0
 801a62a:	f000 f977 	bl	801a91c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a62e:	f7f0 fa2b 	bl	800aa88 <RBI_IsTCXO>
 801a632:	4603      	mov	r3, r0
 801a634:	2b01      	cmp	r3, #1
 801a636:	d10e      	bne.n	801a656 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a638:	2140      	movs	r1, #64	; 0x40
 801a63a:	2001      	movs	r0, #1
 801a63c:	f000 fb78 	bl	801ad30 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a640:	2100      	movs	r1, #0
 801a642:	f640 1011 	movw	r0, #2321	; 0x911
 801a646:	f000 fee9 	bl	801b41c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a64a:	237f      	movs	r3, #127	; 0x7f
 801a64c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a64e:	7b38      	ldrb	r0, [r7, #12]
 801a650:	f000 fa85 	bl	801ab5e <SUBGRF_Calibrate>
 801a654:	e009      	b.n	801a66a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a656:	2120      	movs	r1, #32
 801a658:	f640 1011 	movw	r0, #2321	; 0x911
 801a65c:	f000 fede 	bl	801b41c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a660:	2120      	movs	r1, #32
 801a662:	f640 1012 	movw	r0, #2322	; 0x912
 801a666:	f000 fed9 	bl	801b41c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a66a:	f7f0 f9f1 	bl	800aa50 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a66e:	4b05      	ldr	r3, [pc, #20]	; (801a684 <SUBGRF_Init+0x80>)
 801a670:	2201      	movs	r2, #1
 801a672:	701a      	strb	r2, [r3, #0]
}
 801a674:	bf00      	nop
 801a676:	3710      	adds	r7, #16
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd80      	pop	{r7, pc}
 801a67c:	20001bdc 	.word	0x20001bdc
 801a680:	20001bd8 	.word	0x20001bd8
 801a684:	20001bd0 	.word	0x20001bd0

0801a688 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a688:	b480      	push	{r7}
 801a68a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a68c:	4b02      	ldr	r3, [pc, #8]	; (801a698 <SUBGRF_GetOperatingMode+0x10>)
 801a68e:	781b      	ldrb	r3, [r3, #0]
}
 801a690:	4618      	mov	r0, r3
 801a692:	46bd      	mov	sp, r7
 801a694:	bc80      	pop	{r7}
 801a696:	4770      	bx	lr
 801a698:	20001bd0 	.word	0x20001bd0

0801a69c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b082      	sub	sp, #8
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
 801a6a4:	460b      	mov	r3, r1
 801a6a6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a6a8:	78fb      	ldrb	r3, [r7, #3]
 801a6aa:	461a      	mov	r2, r3
 801a6ac:	6879      	ldr	r1, [r7, #4]
 801a6ae:	2000      	movs	r0, #0
 801a6b0:	f000 ff20 	bl	801b4f4 <SUBGRF_WriteBuffer>
}
 801a6b4:	bf00      	nop
 801a6b6:	3708      	adds	r7, #8
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b086      	sub	sp, #24
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	60f8      	str	r0, [r7, #12]
 801a6c4:	60b9      	str	r1, [r7, #8]
 801a6c6:	4613      	mov	r3, r2
 801a6c8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a6ce:	f107 0317 	add.w	r3, r7, #23
 801a6d2:	4619      	mov	r1, r3
 801a6d4:	68b8      	ldr	r0, [r7, #8]
 801a6d6:	f000 fe23 	bl	801b320 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	781b      	ldrb	r3, [r3, #0]
 801a6de:	79fa      	ldrb	r2, [r7, #7]
 801a6e0:	429a      	cmp	r2, r3
 801a6e2:	d201      	bcs.n	801a6e8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a6e4:	2301      	movs	r3, #1
 801a6e6:	e007      	b.n	801a6f8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a6e8:	7df8      	ldrb	r0, [r7, #23]
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	781b      	ldrb	r3, [r3, #0]
 801a6ee:	461a      	mov	r2, r3
 801a6f0:	68f9      	ldr	r1, [r7, #12]
 801a6f2:	f000 ff21 	bl	801b538 <SUBGRF_ReadBuffer>

    return 0;
 801a6f6:	2300      	movs	r3, #0
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	3718      	adds	r7, #24
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}

0801a700 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b084      	sub	sp, #16
 801a704:	af00      	add	r7, sp, #0
 801a706:	60f8      	str	r0, [r7, #12]
 801a708:	460b      	mov	r3, r1
 801a70a:	607a      	str	r2, [r7, #4]
 801a70c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a70e:	7afb      	ldrb	r3, [r7, #11]
 801a710:	4619      	mov	r1, r3
 801a712:	68f8      	ldr	r0, [r7, #12]
 801a714:	f7ff ffc2 	bl	801a69c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f000 f91b 	bl	801a954 <SUBGRF_SetTx>
}
 801a71e:	bf00      	nop
 801a720:	3710      	adds	r7, #16
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}

0801a726 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a726:	b580      	push	{r7, lr}
 801a728:	b082      	sub	sp, #8
 801a72a:	af00      	add	r7, sp, #0
 801a72c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a72e:	2208      	movs	r2, #8
 801a730:	6879      	ldr	r1, [r7, #4]
 801a732:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801a736:	f000 fe99 	bl	801b46c <SUBGRF_WriteRegisters>
    return 0;
 801a73a:	2300      	movs	r3, #0
}
 801a73c:	4618      	mov	r0, r3
 801a73e:	3708      	adds	r7, #8
 801a740:	46bd      	mov	sp, r7
 801a742:	bd80      	pop	{r7, pc}

0801a744 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b084      	sub	sp, #16
 801a748:	af00      	add	r7, sp, #0
 801a74a:	4603      	mov	r3, r0
 801a74c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a74e:	88fb      	ldrh	r3, [r7, #6]
 801a750:	0a1b      	lsrs	r3, r3, #8
 801a752:	b29b      	uxth	r3, r3
 801a754:	b2db      	uxtb	r3, r3
 801a756:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a758:	88fb      	ldrh	r3, [r7, #6]
 801a75a:	b2db      	uxtb	r3, r3
 801a75c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a75e:	f000 fb6b 	bl	801ae38 <SUBGRF_GetPacketType>
 801a762:	4603      	mov	r3, r0
 801a764:	2b00      	cmp	r3, #0
 801a766:	d108      	bne.n	801a77a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a768:	f107 030c 	add.w	r3, r7, #12
 801a76c:	2202      	movs	r2, #2
 801a76e:	4619      	mov	r1, r3
 801a770:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801a774:	f000 fe7a 	bl	801b46c <SUBGRF_WriteRegisters>
            break;
 801a778:	e000      	b.n	801a77c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a77a:	bf00      	nop
    }
}
 801a77c:	bf00      	nop
 801a77e:	3710      	adds	r7, #16
 801a780:	46bd      	mov	sp, r7
 801a782:	bd80      	pop	{r7, pc}

0801a784 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b084      	sub	sp, #16
 801a788:	af00      	add	r7, sp, #0
 801a78a:	4603      	mov	r3, r0
 801a78c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a78e:	88fb      	ldrh	r3, [r7, #6]
 801a790:	0a1b      	lsrs	r3, r3, #8
 801a792:	b29b      	uxth	r3, r3
 801a794:	b2db      	uxtb	r3, r3
 801a796:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a798:	88fb      	ldrh	r3, [r7, #6]
 801a79a:	b2db      	uxtb	r3, r3
 801a79c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a79e:	f000 fb4b 	bl	801ae38 <SUBGRF_GetPacketType>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d108      	bne.n	801a7ba <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a7a8:	f107 030c 	add.w	r3, r7, #12
 801a7ac:	2202      	movs	r2, #2
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	f240 60be 	movw	r0, #1726	; 0x6be
 801a7b4:	f000 fe5a 	bl	801b46c <SUBGRF_WriteRegisters>
            break;
 801a7b8:	e000      	b.n	801a7bc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a7ba:	bf00      	nop
    }
}
 801a7bc:	bf00      	nop
 801a7be:	3710      	adds	r7, #16
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	bd80      	pop	{r7, pc}

0801a7c4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b084      	sub	sp, #16
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a7d2:	f000 fb31 	bl	801ae38 <SUBGRF_GetPacketType>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d121      	bne.n	801a820 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a7dc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a7e0:	f000 fe30 	bl	801b444 <SUBGRF_ReadRegister>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	f023 0301 	bic.w	r3, r3, #1
 801a7ea:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a7ec:	88fb      	ldrh	r3, [r7, #6]
 801a7ee:	0a1b      	lsrs	r3, r3, #8
 801a7f0:	b29b      	uxth	r3, r3
 801a7f2:	b25b      	sxtb	r3, r3
 801a7f4:	f003 0301 	and.w	r3, r3, #1
 801a7f8:	b25a      	sxtb	r2, r3
 801a7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a7fe:	4313      	orrs	r3, r2
 801a800:	b25b      	sxtb	r3, r3
 801a802:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a804:	7bfb      	ldrb	r3, [r7, #15]
 801a806:	4619      	mov	r1, r3
 801a808:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a80c:	f000 fe06 	bl	801b41c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a810:	88fb      	ldrh	r3, [r7, #6]
 801a812:	b2db      	uxtb	r3, r3
 801a814:	4619      	mov	r1, r3
 801a816:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801a81a:	f000 fdff 	bl	801b41c <SUBGRF_WriteRegister>
            break;
 801a81e:	e000      	b.n	801a822 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a820:	bf00      	nop
    }
}
 801a822:	bf00      	nop
 801a824:	3710      	adds	r7, #16
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}

0801a82a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a82a:	b580      	push	{r7, lr}
 801a82c:	b082      	sub	sp, #8
 801a82e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a830:	2300      	movs	r3, #0
 801a832:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a834:	2300      	movs	r3, #0
 801a836:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a838:	2300      	movs	r3, #0
 801a83a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a83c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a840:	f000 fe00 	bl	801b444 <SUBGRF_ReadRegister>
 801a844:	4603      	mov	r3, r0
 801a846:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a848:	79fb      	ldrb	r3, [r7, #7]
 801a84a:	f023 0301 	bic.w	r3, r3, #1
 801a84e:	b2db      	uxtb	r3, r3
 801a850:	4619      	mov	r1, r3
 801a852:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a856:	f000 fde1 	bl	801b41c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a85a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a85e:	f000 fdf1 	bl	801b444 <SUBGRF_ReadRegister>
 801a862:	4603      	mov	r3, r0
 801a864:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a866:	79bb      	ldrb	r3, [r7, #6]
 801a868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a86c:	b2db      	uxtb	r3, r3
 801a86e:	4619      	mov	r1, r3
 801a870:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a874:	f000 fdd2 	bl	801b41c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a878:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a87c:	f000 f88a 	bl	801a994 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a880:	463b      	mov	r3, r7
 801a882:	2204      	movs	r2, #4
 801a884:	4619      	mov	r1, r3
 801a886:	f640 0019 	movw	r0, #2073	; 0x819
 801a88a:	f000 fe11 	bl	801b4b0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a88e:	2000      	movs	r0, #0
 801a890:	f000 f844 	bl	801a91c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a894:	79fb      	ldrb	r3, [r7, #7]
 801a896:	4619      	mov	r1, r3
 801a898:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a89c:	f000 fdbe 	bl	801b41c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a8a0:	79bb      	ldrb	r3, [r7, #6]
 801a8a2:	4619      	mov	r1, r3
 801a8a4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a8a8:	f000 fdb8 	bl	801b41c <SUBGRF_WriteRegister>

    return number;
 801a8ac:	683b      	ldr	r3, [r7, #0]
}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	3708      	adds	r7, #8
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
	...

0801a8b8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b084      	sub	sp, #16
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a8c0:	2000      	movs	r0, #0
 801a8c2:	f7f0 f8cc 	bl	800aa5e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a8c6:	2002      	movs	r0, #2
 801a8c8:	f000 ff90 	bl	801b7ec <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8cc:	793b      	ldrb	r3, [r7, #4]
 801a8ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a8d2:	b2db      	uxtb	r3, r3
 801a8d4:	009b      	lsls	r3, r3, #2
 801a8d6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8d8:	793b      	ldrb	r3, [r7, #4]
 801a8da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a8de:	b2db      	uxtb	r3, r3
 801a8e0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8e2:	b25b      	sxtb	r3, r3
 801a8e4:	4313      	orrs	r3, r2
 801a8e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a8e8:	793b      	ldrb	r3, [r7, #4]
 801a8ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a8ee:	b2db      	uxtb	r3, r3
 801a8f0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8f2:	4313      	orrs	r3, r2
 801a8f4:	b25b      	sxtb	r3, r3
 801a8f6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8f8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a8fa:	f107 030f 	add.w	r3, r7, #15
 801a8fe:	2201      	movs	r2, #1
 801a900:	4619      	mov	r1, r3
 801a902:	2084      	movs	r0, #132	; 0x84
 801a904:	f000 fe3a 	bl	801b57c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a908:	4b03      	ldr	r3, [pc, #12]	; (801a918 <SUBGRF_SetSleep+0x60>)
 801a90a:	2200      	movs	r2, #0
 801a90c:	701a      	strb	r2, [r3, #0]
}
 801a90e:	bf00      	nop
 801a910:	3710      	adds	r7, #16
 801a912:	46bd      	mov	sp, r7
 801a914:	bd80      	pop	{r7, pc}
 801a916:	bf00      	nop
 801a918:	20001bd0 	.word	0x20001bd0

0801a91c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b082      	sub	sp, #8
 801a920:	af00      	add	r7, sp, #0
 801a922:	4603      	mov	r3, r0
 801a924:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a926:	1dfb      	adds	r3, r7, #7
 801a928:	2201      	movs	r2, #1
 801a92a:	4619      	mov	r1, r3
 801a92c:	2080      	movs	r0, #128	; 0x80
 801a92e:	f000 fe25 	bl	801b57c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a932:	79fb      	ldrb	r3, [r7, #7]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d103      	bne.n	801a940 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a938:	4b05      	ldr	r3, [pc, #20]	; (801a950 <SUBGRF_SetStandby+0x34>)
 801a93a:	2201      	movs	r2, #1
 801a93c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a93e:	e002      	b.n	801a946 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a940:	4b03      	ldr	r3, [pc, #12]	; (801a950 <SUBGRF_SetStandby+0x34>)
 801a942:	2202      	movs	r2, #2
 801a944:	701a      	strb	r2, [r3, #0]
}
 801a946:	bf00      	nop
 801a948:	3708      	adds	r7, #8
 801a94a:	46bd      	mov	sp, r7
 801a94c:	bd80      	pop	{r7, pc}
 801a94e:	bf00      	nop
 801a950:	20001bd0 	.word	0x20001bd0

0801a954 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b084      	sub	sp, #16
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a95c:	4b0c      	ldr	r3, [pc, #48]	; (801a990 <SUBGRF_SetTx+0x3c>)
 801a95e:	2204      	movs	r2, #4
 801a960:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	0c1b      	lsrs	r3, r3, #16
 801a966:	b2db      	uxtb	r3, r3
 801a968:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	0a1b      	lsrs	r3, r3, #8
 801a96e:	b2db      	uxtb	r3, r3
 801a970:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	b2db      	uxtb	r3, r3
 801a976:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a978:	f107 030c 	add.w	r3, r7, #12
 801a97c:	2203      	movs	r2, #3
 801a97e:	4619      	mov	r1, r3
 801a980:	2083      	movs	r0, #131	; 0x83
 801a982:	f000 fdfb 	bl	801b57c <SUBGRF_WriteCommand>
}
 801a986:	bf00      	nop
 801a988:	3710      	adds	r7, #16
 801a98a:	46bd      	mov	sp, r7
 801a98c:	bd80      	pop	{r7, pc}
 801a98e:	bf00      	nop
 801a990:	20001bd0 	.word	0x20001bd0

0801a994 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b084      	sub	sp, #16
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a99c:	4b0c      	ldr	r3, [pc, #48]	; (801a9d0 <SUBGRF_SetRx+0x3c>)
 801a99e:	2205      	movs	r2, #5
 801a9a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	0c1b      	lsrs	r3, r3, #16
 801a9a6:	b2db      	uxtb	r3, r3
 801a9a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	0a1b      	lsrs	r3, r3, #8
 801a9ae:	b2db      	uxtb	r3, r3
 801a9b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	b2db      	uxtb	r3, r3
 801a9b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a9b8:	f107 030c 	add.w	r3, r7, #12
 801a9bc:	2203      	movs	r2, #3
 801a9be:	4619      	mov	r1, r3
 801a9c0:	2082      	movs	r0, #130	; 0x82
 801a9c2:	f000 fddb 	bl	801b57c <SUBGRF_WriteCommand>
}
 801a9c6:	bf00      	nop
 801a9c8:	3710      	adds	r7, #16
 801a9ca:	46bd      	mov	sp, r7
 801a9cc:	bd80      	pop	{r7, pc}
 801a9ce:	bf00      	nop
 801a9d0:	20001bd0 	.word	0x20001bd0

0801a9d4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b084      	sub	sp, #16
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a9dc:	4b0e      	ldr	r3, [pc, #56]	; (801aa18 <SUBGRF_SetRxBoosted+0x44>)
 801a9de:	2205      	movs	r2, #5
 801a9e0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a9e2:	2197      	movs	r1, #151	; 0x97
 801a9e4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801a9e8:	f000 fd18 	bl	801b41c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	0c1b      	lsrs	r3, r3, #16
 801a9f0:	b2db      	uxtb	r3, r3
 801a9f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	0a1b      	lsrs	r3, r3, #8
 801a9f8:	b2db      	uxtb	r3, r3
 801a9fa:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	b2db      	uxtb	r3, r3
 801aa00:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801aa02:	f107 030c 	add.w	r3, r7, #12
 801aa06:	2203      	movs	r2, #3
 801aa08:	4619      	mov	r1, r3
 801aa0a:	2082      	movs	r0, #130	; 0x82
 801aa0c:	f000 fdb6 	bl	801b57c <SUBGRF_WriteCommand>
}
 801aa10:	bf00      	nop
 801aa12:	3710      	adds	r7, #16
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bd80      	pop	{r7, pc}
 801aa18:	20001bd0 	.word	0x20001bd0

0801aa1c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b084      	sub	sp, #16
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
 801aa24:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	0c1b      	lsrs	r3, r3, #16
 801aa2a:	b2db      	uxtb	r3, r3
 801aa2c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	0a1b      	lsrs	r3, r3, #8
 801aa32:	b2db      	uxtb	r3, r3
 801aa34:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	b2db      	uxtb	r3, r3
 801aa3a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	0c1b      	lsrs	r3, r3, #16
 801aa40:	b2db      	uxtb	r3, r3
 801aa42:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	0a1b      	lsrs	r3, r3, #8
 801aa48:	b2db      	uxtb	r3, r3
 801aa4a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	b2db      	uxtb	r3, r3
 801aa50:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801aa52:	f107 0308 	add.w	r3, r7, #8
 801aa56:	2206      	movs	r2, #6
 801aa58:	4619      	mov	r1, r3
 801aa5a:	2094      	movs	r0, #148	; 0x94
 801aa5c:	f000 fd8e 	bl	801b57c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801aa60:	4b03      	ldr	r3, [pc, #12]	; (801aa70 <SUBGRF_SetRxDutyCycle+0x54>)
 801aa62:	2206      	movs	r2, #6
 801aa64:	701a      	strb	r2, [r3, #0]
}
 801aa66:	bf00      	nop
 801aa68:	3710      	adds	r7, #16
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	bf00      	nop
 801aa70:	20001bd0 	.word	0x20001bd0

0801aa74 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801aa78:	2200      	movs	r2, #0
 801aa7a:	2100      	movs	r1, #0
 801aa7c:	20c5      	movs	r0, #197	; 0xc5
 801aa7e:	f000 fd7d 	bl	801b57c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801aa82:	4b02      	ldr	r3, [pc, #8]	; (801aa8c <SUBGRF_SetCad+0x18>)
 801aa84:	2207      	movs	r2, #7
 801aa86:	701a      	strb	r2, [r3, #0]
}
 801aa88:	bf00      	nop
 801aa8a:	bd80      	pop	{r7, pc}
 801aa8c:	20001bd0 	.word	0x20001bd0

0801aa90 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801aa94:	2200      	movs	r2, #0
 801aa96:	2100      	movs	r1, #0
 801aa98:	20d1      	movs	r0, #209	; 0xd1
 801aa9a:	f000 fd6f 	bl	801b57c <SUBGRF_WriteCommand>
}
 801aa9e:	bf00      	nop
 801aaa0:	bd80      	pop	{r7, pc}

0801aaa2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801aaa2:	b580      	push	{r7, lr}
 801aaa4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	2100      	movs	r1, #0
 801aaaa:	20d2      	movs	r0, #210	; 0xd2
 801aaac:	f000 fd66 	bl	801b57c <SUBGRF_WriteCommand>
}
 801aab0:	bf00      	nop
 801aab2:	bd80      	pop	{r7, pc}

0801aab4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801aab4:	b580      	push	{r7, lr}
 801aab6:	b082      	sub	sp, #8
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	4603      	mov	r3, r0
 801aabc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801aabe:	1dfb      	adds	r3, r7, #7
 801aac0:	2201      	movs	r2, #1
 801aac2:	4619      	mov	r1, r3
 801aac4:	209f      	movs	r0, #159	; 0x9f
 801aac6:	f000 fd59 	bl	801b57c <SUBGRF_WriteCommand>
}
 801aaca:	bf00      	nop
 801aacc:	3708      	adds	r7, #8
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}

0801aad2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801aad2:	b580      	push	{r7, lr}
 801aad4:	b084      	sub	sp, #16
 801aad6:	af00      	add	r7, sp, #0
 801aad8:	4603      	mov	r3, r0
 801aada:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801aadc:	1dfb      	adds	r3, r7, #7
 801aade:	2201      	movs	r2, #1
 801aae0:	4619      	mov	r1, r3
 801aae2:	20a0      	movs	r0, #160	; 0xa0
 801aae4:	f000 fd4a 	bl	801b57c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801aae8:	79fb      	ldrb	r3, [r7, #7]
 801aaea:	2b3f      	cmp	r3, #63	; 0x3f
 801aaec:	d91c      	bls.n	801ab28 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801aaee:	79fb      	ldrb	r3, [r7, #7]
 801aaf0:	085b      	lsrs	r3, r3, #1
 801aaf2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801aaf8:	2300      	movs	r3, #0
 801aafa:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801aafc:	e005      	b.n	801ab0a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801aafe:	7bfb      	ldrb	r3, [r7, #15]
 801ab00:	089b      	lsrs	r3, r3, #2
 801ab02:	73fb      	strb	r3, [r7, #15]
            exp++;
 801ab04:	7bbb      	ldrb	r3, [r7, #14]
 801ab06:	3301      	adds	r3, #1
 801ab08:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801ab0a:	7bfb      	ldrb	r3, [r7, #15]
 801ab0c:	2b1f      	cmp	r3, #31
 801ab0e:	d8f6      	bhi.n	801aafe <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801ab10:	7bfb      	ldrb	r3, [r7, #15]
 801ab12:	00db      	lsls	r3, r3, #3
 801ab14:	b2da      	uxtb	r2, r3
 801ab16:	7bbb      	ldrb	r3, [r7, #14]
 801ab18:	4413      	add	r3, r2
 801ab1a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801ab1c:	7b7b      	ldrb	r3, [r7, #13]
 801ab1e:	4619      	mov	r1, r3
 801ab20:	f240 7006 	movw	r0, #1798	; 0x706
 801ab24:	f000 fc7a 	bl	801b41c <SUBGRF_WriteRegister>
    }
}
 801ab28:	bf00      	nop
 801ab2a:	3710      	adds	r7, #16
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	bd80      	pop	{r7, pc}

0801ab30 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801ab36:	f7ef ffae 	bl	800aa96 <RBI_IsDCDC>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	2b01      	cmp	r3, #1
 801ab3e:	d102      	bne.n	801ab46 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801ab40:	2301      	movs	r3, #1
 801ab42:	71fb      	strb	r3, [r7, #7]
 801ab44:	e001      	b.n	801ab4a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801ab46:	2300      	movs	r3, #0
 801ab48:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ab4a:	1dfb      	adds	r3, r7, #7
 801ab4c:	2201      	movs	r2, #1
 801ab4e:	4619      	mov	r1, r3
 801ab50:	2096      	movs	r0, #150	; 0x96
 801ab52:	f000 fd13 	bl	801b57c <SUBGRF_WriteCommand>
}
 801ab56:	bf00      	nop
 801ab58:	3708      	adds	r7, #8
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd80      	pop	{r7, pc}

0801ab5e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ab5e:	b580      	push	{r7, lr}
 801ab60:	b084      	sub	sp, #16
 801ab62:	af00      	add	r7, sp, #0
 801ab64:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab66:	793b      	ldrb	r3, [r7, #4]
 801ab68:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ab6c:	b2db      	uxtb	r3, r3
 801ab6e:	019b      	lsls	r3, r3, #6
 801ab70:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab72:	793b      	ldrb	r3, [r7, #4]
 801ab74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ab78:	b2db      	uxtb	r3, r3
 801ab7a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab7c:	b25b      	sxtb	r3, r3
 801ab7e:	4313      	orrs	r3, r2
 801ab80:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ab82:	793b      	ldrb	r3, [r7, #4]
 801ab84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ab88:	b2db      	uxtb	r3, r3
 801ab8a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab8c:	b25b      	sxtb	r3, r3
 801ab8e:	4313      	orrs	r3, r2
 801ab90:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ab92:	793b      	ldrb	r3, [r7, #4]
 801ab94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ab98:	b2db      	uxtb	r3, r3
 801ab9a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ab9c:	b25b      	sxtb	r3, r3
 801ab9e:	4313      	orrs	r3, r2
 801aba0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801aba2:	793b      	ldrb	r3, [r7, #4]
 801aba4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801aba8:	b2db      	uxtb	r3, r3
 801abaa:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801abac:	b25b      	sxtb	r3, r3
 801abae:	4313      	orrs	r3, r2
 801abb0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801abb2:	793b      	ldrb	r3, [r7, #4]
 801abb4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801abb8:	b2db      	uxtb	r3, r3
 801abba:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801abbc:	b25b      	sxtb	r3, r3
 801abbe:	4313      	orrs	r3, r2
 801abc0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801abc2:	793b      	ldrb	r3, [r7, #4]
 801abc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801abc8:	b2db      	uxtb	r3, r3
 801abca:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801abcc:	4313      	orrs	r3, r2
 801abce:	b25b      	sxtb	r3, r3
 801abd0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801abd2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801abd4:	f107 030f 	add.w	r3, r7, #15
 801abd8:	2201      	movs	r2, #1
 801abda:	4619      	mov	r1, r3
 801abdc:	2089      	movs	r0, #137	; 0x89
 801abde:	f000 fccd 	bl	801b57c <SUBGRF_WriteCommand>
}
 801abe2:	bf00      	nop
 801abe4:	3710      	adds	r7, #16
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
	...

0801abec <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b084      	sub	sp, #16
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	4a1b      	ldr	r2, [pc, #108]	; (801ac64 <SUBGRF_CalibrateImage+0x78>)
 801abf8:	4293      	cmp	r3, r2
 801abfa:	d904      	bls.n	801ac06 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801abfc:	23e1      	movs	r3, #225	; 0xe1
 801abfe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801ac00:	23e9      	movs	r3, #233	; 0xe9
 801ac02:	737b      	strb	r3, [r7, #13]
 801ac04:	e022      	b.n	801ac4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	4a17      	ldr	r2, [pc, #92]	; (801ac68 <SUBGRF_CalibrateImage+0x7c>)
 801ac0a:	4293      	cmp	r3, r2
 801ac0c:	d904      	bls.n	801ac18 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801ac0e:	23d7      	movs	r3, #215	; 0xd7
 801ac10:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801ac12:	23db      	movs	r3, #219	; 0xdb
 801ac14:	737b      	strb	r3, [r7, #13]
 801ac16:	e019      	b.n	801ac4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	4a14      	ldr	r2, [pc, #80]	; (801ac6c <SUBGRF_CalibrateImage+0x80>)
 801ac1c:	4293      	cmp	r3, r2
 801ac1e:	d904      	bls.n	801ac2a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801ac20:	23c1      	movs	r3, #193	; 0xc1
 801ac22:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801ac24:	23c5      	movs	r3, #197	; 0xc5
 801ac26:	737b      	strb	r3, [r7, #13]
 801ac28:	e010      	b.n	801ac4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	4a10      	ldr	r2, [pc, #64]	; (801ac70 <SUBGRF_CalibrateImage+0x84>)
 801ac2e:	4293      	cmp	r3, r2
 801ac30:	d904      	bls.n	801ac3c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801ac32:	2375      	movs	r3, #117	; 0x75
 801ac34:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801ac36:	2381      	movs	r3, #129	; 0x81
 801ac38:	737b      	strb	r3, [r7, #13]
 801ac3a:	e007      	b.n	801ac4c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	4a0d      	ldr	r2, [pc, #52]	; (801ac74 <SUBGRF_CalibrateImage+0x88>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d903      	bls.n	801ac4c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801ac44:	236b      	movs	r3, #107	; 0x6b
 801ac46:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ac48:	236f      	movs	r3, #111	; 0x6f
 801ac4a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ac4c:	f107 030c 	add.w	r3, r7, #12
 801ac50:	2202      	movs	r2, #2
 801ac52:	4619      	mov	r1, r3
 801ac54:	2098      	movs	r0, #152	; 0x98
 801ac56:	f000 fc91 	bl	801b57c <SUBGRF_WriteCommand>
}
 801ac5a:	bf00      	nop
 801ac5c:	3710      	adds	r7, #16
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
 801ac62:	bf00      	nop
 801ac64:	35a4e900 	.word	0x35a4e900
 801ac68:	32a9f880 	.word	0x32a9f880
 801ac6c:	2de54480 	.word	0x2de54480
 801ac70:	1b6b0b00 	.word	0x1b6b0b00
 801ac74:	1954fc40 	.word	0x1954fc40

0801ac78 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ac78:	b590      	push	{r4, r7, lr}
 801ac7a:	b085      	sub	sp, #20
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	4604      	mov	r4, r0
 801ac80:	4608      	mov	r0, r1
 801ac82:	4611      	mov	r1, r2
 801ac84:	461a      	mov	r2, r3
 801ac86:	4623      	mov	r3, r4
 801ac88:	71fb      	strb	r3, [r7, #7]
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	71bb      	strb	r3, [r7, #6]
 801ac8e:	460b      	mov	r3, r1
 801ac90:	717b      	strb	r3, [r7, #5]
 801ac92:	4613      	mov	r3, r2
 801ac94:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801ac96:	79fb      	ldrb	r3, [r7, #7]
 801ac98:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801ac9a:	79bb      	ldrb	r3, [r7, #6]
 801ac9c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801ac9e:	797b      	ldrb	r3, [r7, #5]
 801aca0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801aca2:	793b      	ldrb	r3, [r7, #4]
 801aca4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801aca6:	f107 030c 	add.w	r3, r7, #12
 801acaa:	2204      	movs	r2, #4
 801acac:	4619      	mov	r1, r3
 801acae:	2095      	movs	r0, #149	; 0x95
 801acb0:	f000 fc64 	bl	801b57c <SUBGRF_WriteCommand>
}
 801acb4:	bf00      	nop
 801acb6:	3714      	adds	r7, #20
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd90      	pop	{r4, r7, pc}

0801acbc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801acbc:	b590      	push	{r4, r7, lr}
 801acbe:	b085      	sub	sp, #20
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	4604      	mov	r4, r0
 801acc4:	4608      	mov	r0, r1
 801acc6:	4611      	mov	r1, r2
 801acc8:	461a      	mov	r2, r3
 801acca:	4623      	mov	r3, r4
 801accc:	80fb      	strh	r3, [r7, #6]
 801acce:	4603      	mov	r3, r0
 801acd0:	80bb      	strh	r3, [r7, #4]
 801acd2:	460b      	mov	r3, r1
 801acd4:	807b      	strh	r3, [r7, #2]
 801acd6:	4613      	mov	r3, r2
 801acd8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801acda:	88fb      	ldrh	r3, [r7, #6]
 801acdc:	0a1b      	lsrs	r3, r3, #8
 801acde:	b29b      	uxth	r3, r3
 801ace0:	b2db      	uxtb	r3, r3
 801ace2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801ace4:	88fb      	ldrh	r3, [r7, #6]
 801ace6:	b2db      	uxtb	r3, r3
 801ace8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801acea:	88bb      	ldrh	r3, [r7, #4]
 801acec:	0a1b      	lsrs	r3, r3, #8
 801acee:	b29b      	uxth	r3, r3
 801acf0:	b2db      	uxtb	r3, r3
 801acf2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801acf4:	88bb      	ldrh	r3, [r7, #4]
 801acf6:	b2db      	uxtb	r3, r3
 801acf8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801acfa:	887b      	ldrh	r3, [r7, #2]
 801acfc:	0a1b      	lsrs	r3, r3, #8
 801acfe:	b29b      	uxth	r3, r3
 801ad00:	b2db      	uxtb	r3, r3
 801ad02:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801ad04:	887b      	ldrh	r3, [r7, #2]
 801ad06:	b2db      	uxtb	r3, r3
 801ad08:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801ad0a:	883b      	ldrh	r3, [r7, #0]
 801ad0c:	0a1b      	lsrs	r3, r3, #8
 801ad0e:	b29b      	uxth	r3, r3
 801ad10:	b2db      	uxtb	r3, r3
 801ad12:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801ad14:	883b      	ldrh	r3, [r7, #0]
 801ad16:	b2db      	uxtb	r3, r3
 801ad18:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801ad1a:	f107 0308 	add.w	r3, r7, #8
 801ad1e:	2208      	movs	r2, #8
 801ad20:	4619      	mov	r1, r3
 801ad22:	2008      	movs	r0, #8
 801ad24:	f000 fc2a 	bl	801b57c <SUBGRF_WriteCommand>
}
 801ad28:	bf00      	nop
 801ad2a:	3714      	adds	r7, #20
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	bd90      	pop	{r4, r7, pc}

0801ad30 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b084      	sub	sp, #16
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	4603      	mov	r3, r0
 801ad38:	6039      	str	r1, [r7, #0]
 801ad3a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801ad3c:	79fb      	ldrb	r3, [r7, #7]
 801ad3e:	f003 0307 	and.w	r3, r3, #7
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	0c1b      	lsrs	r3, r3, #16
 801ad4a:	b2db      	uxtb	r3, r3
 801ad4c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	0a1b      	lsrs	r3, r3, #8
 801ad52:	b2db      	uxtb	r3, r3
 801ad54:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	b2db      	uxtb	r3, r3
 801ad5a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801ad5c:	f107 030c 	add.w	r3, r7, #12
 801ad60:	2204      	movs	r2, #4
 801ad62:	4619      	mov	r1, r3
 801ad64:	2097      	movs	r0, #151	; 0x97
 801ad66:	f000 fc09 	bl	801b57c <SUBGRF_WriteCommand>
}
 801ad6a:	bf00      	nop
 801ad6c:	3710      	adds	r7, #16
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}
	...

0801ad74 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801ad74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ad78:	b084      	sub	sp, #16
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801ad82:	4b1d      	ldr	r3, [pc, #116]	; (801adf8 <SUBGRF_SetRfFrequency+0x84>)
 801ad84:	781b      	ldrb	r3, [r3, #0]
 801ad86:	f083 0301 	eor.w	r3, r3, #1
 801ad8a:	b2db      	uxtb	r3, r3
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d005      	beq.n	801ad9c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801ad90:	6878      	ldr	r0, [r7, #4]
 801ad92:	f7ff ff2b 	bl	801abec <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801ad96:	4b18      	ldr	r3, [pc, #96]	; (801adf8 <SUBGRF_SetRfFrequency+0x84>)
 801ad98:	2201      	movs	r2, #1
 801ad9a:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	2200      	movs	r2, #0
 801ada0:	461c      	mov	r4, r3
 801ada2:	4615      	mov	r5, r2
 801ada4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ada8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801adac:	4a13      	ldr	r2, [pc, #76]	; (801adfc <SUBGRF_SetRfFrequency+0x88>)
 801adae:	f04f 0300 	mov.w	r3, #0
 801adb2:	4640      	mov	r0, r8
 801adb4:	4649      	mov	r1, r9
 801adb6:	f7e5 fef7 	bl	8000ba8 <__aeabi_uldivmod>
 801adba:	4602      	mov	r2, r0
 801adbc:	460b      	mov	r3, r1
 801adbe:	4613      	mov	r3, r2
 801adc0:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	0e1b      	lsrs	r3, r3, #24
 801adc6:	b2db      	uxtb	r3, r3
 801adc8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	0c1b      	lsrs	r3, r3, #16
 801adce:	b2db      	uxtb	r3, r3
 801add0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	0a1b      	lsrs	r3, r3, #8
 801add6:	b2db      	uxtb	r3, r3
 801add8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	b2db      	uxtb	r3, r3
 801adde:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801ade0:	f107 0308 	add.w	r3, r7, #8
 801ade4:	2204      	movs	r2, #4
 801ade6:	4619      	mov	r1, r3
 801ade8:	2086      	movs	r0, #134	; 0x86
 801adea:	f000 fbc7 	bl	801b57c <SUBGRF_WriteCommand>
}
 801adee:	bf00      	nop
 801adf0:	3710      	adds	r7, #16
 801adf2:	46bd      	mov	sp, r7
 801adf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801adf8:	20001bd8 	.word	0x20001bd8
 801adfc:	01e84800 	.word	0x01e84800

0801ae00 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b082      	sub	sp, #8
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	4603      	mov	r3, r0
 801ae08:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801ae0a:	79fa      	ldrb	r2, [r7, #7]
 801ae0c:	4b09      	ldr	r3, [pc, #36]	; (801ae34 <SUBGRF_SetPacketType+0x34>)
 801ae0e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801ae10:	79fb      	ldrb	r3, [r7, #7]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d104      	bne.n	801ae20 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801ae16:	2100      	movs	r1, #0
 801ae18:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801ae1c:	f000 fafe 	bl	801b41c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801ae20:	1dfb      	adds	r3, r7, #7
 801ae22:	2201      	movs	r2, #1
 801ae24:	4619      	mov	r1, r3
 801ae26:	208a      	movs	r0, #138	; 0x8a
 801ae28:	f000 fba8 	bl	801b57c <SUBGRF_WriteCommand>
}
 801ae2c:	bf00      	nop
 801ae2e:	3708      	adds	r7, #8
 801ae30:	46bd      	mov	sp, r7
 801ae32:	bd80      	pop	{r7, pc}
 801ae34:	20001bd1 	.word	0x20001bd1

0801ae38 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801ae38:	b480      	push	{r7}
 801ae3a:	af00      	add	r7, sp, #0
    return PacketType;
 801ae3c:	4b02      	ldr	r3, [pc, #8]	; (801ae48 <SUBGRF_GetPacketType+0x10>)
 801ae3e:	781b      	ldrb	r3, [r3, #0]
}
 801ae40:	4618      	mov	r0, r3
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bc80      	pop	{r7}
 801ae46:	4770      	bx	lr
 801ae48:	20001bd1 	.word	0x20001bd1

0801ae4c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b084      	sub	sp, #16
 801ae50:	af00      	add	r7, sp, #0
 801ae52:	4603      	mov	r3, r0
 801ae54:	71fb      	strb	r3, [r7, #7]
 801ae56:	460b      	mov	r3, r1
 801ae58:	71bb      	strb	r3, [r7, #6]
 801ae5a:	4613      	mov	r3, r2
 801ae5c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801ae5e:	79fb      	ldrb	r3, [r7, #7]
 801ae60:	2b01      	cmp	r3, #1
 801ae62:	d149      	bne.n	801aef8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ae64:	2000      	movs	r0, #0
 801ae66:	f7ef fe1d 	bl	800aaa4 <RBI_GetRFOMaxPowerConfig>
 801ae6a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801ae6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ae70:	68fa      	ldr	r2, [r7, #12]
 801ae72:	429a      	cmp	r2, r3
 801ae74:	da01      	bge.n	801ae7a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	2b0e      	cmp	r3, #14
 801ae7e:	d10e      	bne.n	801ae9e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ae80:	2301      	movs	r3, #1
 801ae82:	2201      	movs	r2, #1
 801ae84:	2100      	movs	r1, #0
 801ae86:	2004      	movs	r0, #4
 801ae88:	f7ff fef6 	bl	801ac78 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ae8c:	79ba      	ldrb	r2, [r7, #6]
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	b2db      	uxtb	r3, r3
 801ae92:	1ad3      	subs	r3, r2, r3
 801ae94:	b2db      	uxtb	r3, r3
 801ae96:	330e      	adds	r3, #14
 801ae98:	b2db      	uxtb	r3, r3
 801ae9a:	71bb      	strb	r3, [r7, #6]
 801ae9c:	e01f      	b.n	801aede <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	2b0a      	cmp	r3, #10
 801aea2:	d10e      	bne.n	801aec2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801aea4:	2301      	movs	r3, #1
 801aea6:	2201      	movs	r2, #1
 801aea8:	2100      	movs	r1, #0
 801aeaa:	2001      	movs	r0, #1
 801aeac:	f7ff fee4 	bl	801ac78 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801aeb0:	79ba      	ldrb	r2, [r7, #6]
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	b2db      	uxtb	r3, r3
 801aeb6:	1ad3      	subs	r3, r2, r3
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	330d      	adds	r3, #13
 801aebc:	b2db      	uxtb	r3, r3
 801aebe:	71bb      	strb	r3, [r7, #6]
 801aec0:	e00d      	b.n	801aede <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801aec2:	2301      	movs	r3, #1
 801aec4:	2201      	movs	r2, #1
 801aec6:	2100      	movs	r1, #0
 801aec8:	2006      	movs	r0, #6
 801aeca:	f7ff fed5 	bl	801ac78 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aece:	79ba      	ldrb	r2, [r7, #6]
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	b2db      	uxtb	r3, r3
 801aed4:	1ad3      	subs	r3, r2, r3
 801aed6:	b2db      	uxtb	r3, r3
 801aed8:	330e      	adds	r3, #14
 801aeda:	b2db      	uxtb	r3, r3
 801aedc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801aede:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aee2:	f113 0f11 	cmn.w	r3, #17
 801aee6:	da01      	bge.n	801aeec <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801aee8:	23ef      	movs	r3, #239	; 0xef
 801aeea:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801aeec:	2118      	movs	r1, #24
 801aeee:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801aef2:	f000 fa93 	bl	801b41c <SUBGRF_WriteRegister>
 801aef6:	e067      	b.n	801afc8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801aef8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801aefc:	f000 faa2 	bl	801b444 <SUBGRF_ReadRegister>
 801af00:	4603      	mov	r3, r0
 801af02:	f043 031e 	orr.w	r3, r3, #30
 801af06:	b2db      	uxtb	r3, r3
 801af08:	4619      	mov	r1, r3
 801af0a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801af0e:	f000 fa85 	bl	801b41c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801af12:	2001      	movs	r0, #1
 801af14:	f7ef fdc6 	bl	800aaa4 <RBI_GetRFOMaxPowerConfig>
 801af18:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801af1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801af1e:	68fa      	ldr	r2, [r7, #12]
 801af20:	429a      	cmp	r2, r3
 801af22:	da01      	bge.n	801af28 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	2b14      	cmp	r3, #20
 801af2c:	d10e      	bne.n	801af4c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801af2e:	2301      	movs	r3, #1
 801af30:	2200      	movs	r2, #0
 801af32:	2105      	movs	r1, #5
 801af34:	2003      	movs	r0, #3
 801af36:	f7ff fe9f 	bl	801ac78 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af3a:	79ba      	ldrb	r2, [r7, #6]
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	b2db      	uxtb	r3, r3
 801af40:	1ad3      	subs	r3, r2, r3
 801af42:	b2db      	uxtb	r3, r3
 801af44:	3316      	adds	r3, #22
 801af46:	b2db      	uxtb	r3, r3
 801af48:	71bb      	strb	r3, [r7, #6]
 801af4a:	e031      	b.n	801afb0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	2b11      	cmp	r3, #17
 801af50:	d10e      	bne.n	801af70 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801af52:	2301      	movs	r3, #1
 801af54:	2200      	movs	r2, #0
 801af56:	2103      	movs	r1, #3
 801af58:	2002      	movs	r0, #2
 801af5a:	f7ff fe8d 	bl	801ac78 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af5e:	79ba      	ldrb	r2, [r7, #6]
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	b2db      	uxtb	r3, r3
 801af64:	1ad3      	subs	r3, r2, r3
 801af66:	b2db      	uxtb	r3, r3
 801af68:	3316      	adds	r3, #22
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	71bb      	strb	r3, [r7, #6]
 801af6e:	e01f      	b.n	801afb0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	2b0e      	cmp	r3, #14
 801af74:	d10e      	bne.n	801af94 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801af76:	2301      	movs	r3, #1
 801af78:	2200      	movs	r2, #0
 801af7a:	2102      	movs	r1, #2
 801af7c:	2002      	movs	r0, #2
 801af7e:	f7ff fe7b 	bl	801ac78 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801af82:	79ba      	ldrb	r2, [r7, #6]
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	b2db      	uxtb	r3, r3
 801af88:	1ad3      	subs	r3, r2, r3
 801af8a:	b2db      	uxtb	r3, r3
 801af8c:	330e      	adds	r3, #14
 801af8e:	b2db      	uxtb	r3, r3
 801af90:	71bb      	strb	r3, [r7, #6]
 801af92:	e00d      	b.n	801afb0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801af94:	2301      	movs	r3, #1
 801af96:	2200      	movs	r2, #0
 801af98:	2107      	movs	r1, #7
 801af9a:	2004      	movs	r0, #4
 801af9c:	f7ff fe6c 	bl	801ac78 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801afa0:	79ba      	ldrb	r2, [r7, #6]
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	b2db      	uxtb	r3, r3
 801afa6:	1ad3      	subs	r3, r2, r3
 801afa8:	b2db      	uxtb	r3, r3
 801afaa:	3316      	adds	r3, #22
 801afac:	b2db      	uxtb	r3, r3
 801afae:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801afb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801afb4:	f113 0f09 	cmn.w	r3, #9
 801afb8:	da01      	bge.n	801afbe <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801afba:	23f7      	movs	r3, #247	; 0xf7
 801afbc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801afbe:	2138      	movs	r1, #56	; 0x38
 801afc0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801afc4:	f000 fa2a 	bl	801b41c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801afc8:	79bb      	ldrb	r3, [r7, #6]
 801afca:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801afcc:	797b      	ldrb	r3, [r7, #5]
 801afce:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801afd0:	f107 0308 	add.w	r3, r7, #8
 801afd4:	2202      	movs	r2, #2
 801afd6:	4619      	mov	r1, r3
 801afd8:	208e      	movs	r0, #142	; 0x8e
 801afda:	f000 facf 	bl	801b57c <SUBGRF_WriteCommand>
}
 801afde:	bf00      	nop
 801afe0:	3710      	adds	r7, #16
 801afe2:	46bd      	mov	sp, r7
 801afe4:	bd80      	pop	{r7, pc}
	...

0801afe8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801afe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801afec:	b086      	sub	sp, #24
 801afee:	af00      	add	r7, sp, #0
 801aff0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801aff2:	2300      	movs	r3, #0
 801aff4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801aff6:	4a61      	ldr	r2, [pc, #388]	; (801b17c <SUBGRF_SetModulationParams+0x194>)
 801aff8:	f107 0308 	add.w	r3, r7, #8
 801affc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b000:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	781a      	ldrb	r2, [r3, #0]
 801b008:	4b5d      	ldr	r3, [pc, #372]	; (801b180 <SUBGRF_SetModulationParams+0x198>)
 801b00a:	781b      	ldrb	r3, [r3, #0]
 801b00c:	429a      	cmp	r2, r3
 801b00e:	d004      	beq.n	801b01a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	781b      	ldrb	r3, [r3, #0]
 801b014:	4618      	mov	r0, r3
 801b016:	f7ff fef3 	bl	801ae00 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	781b      	ldrb	r3, [r3, #0]
 801b01e:	2b03      	cmp	r3, #3
 801b020:	f200 80a5 	bhi.w	801b16e <SUBGRF_SetModulationParams+0x186>
 801b024:	a201      	add	r2, pc, #4	; (adr r2, 801b02c <SUBGRF_SetModulationParams+0x44>)
 801b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b02a:	bf00      	nop
 801b02c:	0801b03d 	.word	0x0801b03d
 801b030:	0801b0fd 	.word	0x0801b0fd
 801b034:	0801b0bf 	.word	0x0801b0bf
 801b038:	0801b12b 	.word	0x0801b12b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b03c:	2308      	movs	r3, #8
 801b03e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	4a4f      	ldr	r2, [pc, #316]	; (801b184 <SUBGRF_SetModulationParams+0x19c>)
 801b046:	fbb2 f3f3 	udiv	r3, r2, r3
 801b04a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b04c:	697b      	ldr	r3, [r7, #20]
 801b04e:	0c1b      	lsrs	r3, r3, #16
 801b050:	b2db      	uxtb	r3, r3
 801b052:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b054:	697b      	ldr	r3, [r7, #20]
 801b056:	0a1b      	lsrs	r3, r3, #8
 801b058:	b2db      	uxtb	r3, r3
 801b05a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	b2db      	uxtb	r3, r3
 801b060:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	7b1b      	ldrb	r3, [r3, #12]
 801b066:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	7b5b      	ldrb	r3, [r3, #13]
 801b06c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	689b      	ldr	r3, [r3, #8]
 801b072:	2200      	movs	r2, #0
 801b074:	461c      	mov	r4, r3
 801b076:	4615      	mov	r5, r2
 801b078:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b07c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b080:	4a41      	ldr	r2, [pc, #260]	; (801b188 <SUBGRF_SetModulationParams+0x1a0>)
 801b082:	f04f 0300 	mov.w	r3, #0
 801b086:	4640      	mov	r0, r8
 801b088:	4649      	mov	r1, r9
 801b08a:	f7e5 fd8d 	bl	8000ba8 <__aeabi_uldivmod>
 801b08e:	4602      	mov	r2, r0
 801b090:	460b      	mov	r3, r1
 801b092:	4613      	mov	r3, r2
 801b094:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b096:	697b      	ldr	r3, [r7, #20]
 801b098:	0c1b      	lsrs	r3, r3, #16
 801b09a:	b2db      	uxtb	r3, r3
 801b09c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b09e:	697b      	ldr	r3, [r7, #20]
 801b0a0:	0a1b      	lsrs	r3, r3, #8
 801b0a2:	b2db      	uxtb	r3, r3
 801b0a4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b0a6:	697b      	ldr	r3, [r7, #20]
 801b0a8:	b2db      	uxtb	r3, r3
 801b0aa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0ac:	7cfb      	ldrb	r3, [r7, #19]
 801b0ae:	b29a      	uxth	r2, r3
 801b0b0:	f107 0308 	add.w	r3, r7, #8
 801b0b4:	4619      	mov	r1, r3
 801b0b6:	208b      	movs	r0, #139	; 0x8b
 801b0b8:	f000 fa60 	bl	801b57c <SUBGRF_WriteCommand>
        break;
 801b0bc:	e058      	b.n	801b170 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b0be:	2304      	movs	r3, #4
 801b0c0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	691b      	ldr	r3, [r3, #16]
 801b0c6:	4a2f      	ldr	r2, [pc, #188]	; (801b184 <SUBGRF_SetModulationParams+0x19c>)
 801b0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b0cc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b0ce:	697b      	ldr	r3, [r7, #20]
 801b0d0:	0c1b      	lsrs	r3, r3, #16
 801b0d2:	b2db      	uxtb	r3, r3
 801b0d4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b0d6:	697b      	ldr	r3, [r7, #20]
 801b0d8:	0a1b      	lsrs	r3, r3, #8
 801b0da:	b2db      	uxtb	r3, r3
 801b0dc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b0de:	697b      	ldr	r3, [r7, #20]
 801b0e0:	b2db      	uxtb	r3, r3
 801b0e2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	7d1b      	ldrb	r3, [r3, #20]
 801b0e8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0ea:	7cfb      	ldrb	r3, [r7, #19]
 801b0ec:	b29a      	uxth	r2, r3
 801b0ee:	f107 0308 	add.w	r3, r7, #8
 801b0f2:	4619      	mov	r1, r3
 801b0f4:	208b      	movs	r0, #139	; 0x8b
 801b0f6:	f000 fa41 	bl	801b57c <SUBGRF_WriteCommand>
        break;
 801b0fa:	e039      	b.n	801b170 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b0fc:	2304      	movs	r3, #4
 801b0fe:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	7e1b      	ldrb	r3, [r3, #24]
 801b104:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	7e5b      	ldrb	r3, [r3, #25]
 801b10a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	7e9b      	ldrb	r3, [r3, #26]
 801b110:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	7edb      	ldrb	r3, [r3, #27]
 801b116:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b118:	7cfb      	ldrb	r3, [r7, #19]
 801b11a:	b29a      	uxth	r2, r3
 801b11c:	f107 0308 	add.w	r3, r7, #8
 801b120:	4619      	mov	r1, r3
 801b122:	208b      	movs	r0, #139	; 0x8b
 801b124:	f000 fa2a 	bl	801b57c <SUBGRF_WriteCommand>

        break;
 801b128:	e022      	b.n	801b170 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b12a:	2305      	movs	r3, #5
 801b12c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	685b      	ldr	r3, [r3, #4]
 801b132:	4a14      	ldr	r2, [pc, #80]	; (801b184 <SUBGRF_SetModulationParams+0x19c>)
 801b134:	fbb2 f3f3 	udiv	r3, r2, r3
 801b138:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b13a:	697b      	ldr	r3, [r7, #20]
 801b13c:	0c1b      	lsrs	r3, r3, #16
 801b13e:	b2db      	uxtb	r3, r3
 801b140:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b142:	697b      	ldr	r3, [r7, #20]
 801b144:	0a1b      	lsrs	r3, r3, #8
 801b146:	b2db      	uxtb	r3, r3
 801b148:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	b2db      	uxtb	r3, r3
 801b14e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	7b1b      	ldrb	r3, [r3, #12]
 801b154:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	7b5b      	ldrb	r3, [r3, #13]
 801b15a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b15c:	7cfb      	ldrb	r3, [r7, #19]
 801b15e:	b29a      	uxth	r2, r3
 801b160:	f107 0308 	add.w	r3, r7, #8
 801b164:	4619      	mov	r1, r3
 801b166:	208b      	movs	r0, #139	; 0x8b
 801b168:	f000 fa08 	bl	801b57c <SUBGRF_WriteCommand>
        break;
 801b16c:	e000      	b.n	801b170 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b16e:	bf00      	nop
    }
}
 801b170:	bf00      	nop
 801b172:	3718      	adds	r7, #24
 801b174:	46bd      	mov	sp, r7
 801b176:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b17a:	bf00      	nop
 801b17c:	0801db6c 	.word	0x0801db6c
 801b180:	20001bd1 	.word	0x20001bd1
 801b184:	3d090000 	.word	0x3d090000
 801b188:	01e84800 	.word	0x01e84800

0801b18c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b086      	sub	sp, #24
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b194:	2300      	movs	r3, #0
 801b196:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b198:	4a48      	ldr	r2, [pc, #288]	; (801b2bc <SUBGRF_SetPacketParams+0x130>)
 801b19a:	f107 030c 	add.w	r3, r7, #12
 801b19e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b1a0:	c303      	stmia	r3!, {r0, r1}
 801b1a2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	781a      	ldrb	r2, [r3, #0]
 801b1a8:	4b45      	ldr	r3, [pc, #276]	; (801b2c0 <SUBGRF_SetPacketParams+0x134>)
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	429a      	cmp	r2, r3
 801b1ae:	d004      	beq.n	801b1ba <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	781b      	ldrb	r3, [r3, #0]
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	f7ff fe23 	bl	801ae00 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	781b      	ldrb	r3, [r3, #0]
 801b1be:	2b03      	cmp	r3, #3
 801b1c0:	d878      	bhi.n	801b2b4 <SUBGRF_SetPacketParams+0x128>
 801b1c2:	a201      	add	r2, pc, #4	; (adr r2, 801b1c8 <SUBGRF_SetPacketParams+0x3c>)
 801b1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1c8:	0801b1d9 	.word	0x0801b1d9
 801b1cc:	0801b269 	.word	0x0801b269
 801b1d0:	0801b25d 	.word	0x0801b25d
 801b1d4:	0801b1d9 	.word	0x0801b1d9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	7a5b      	ldrb	r3, [r3, #9]
 801b1dc:	2bf1      	cmp	r3, #241	; 0xf1
 801b1de:	d10a      	bne.n	801b1f6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b1e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b1e4:	f7ff faae 	bl	801a744 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b1e8:	f248 0005 	movw	r0, #32773	; 0x8005
 801b1ec:	f7ff faca 	bl	801a784 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b1f0:	2302      	movs	r3, #2
 801b1f2:	75bb      	strb	r3, [r7, #22]
 801b1f4:	e011      	b.n	801b21a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	7a5b      	ldrb	r3, [r3, #9]
 801b1fa:	2bf2      	cmp	r3, #242	; 0xf2
 801b1fc:	d10a      	bne.n	801b214 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b1fe:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b202:	f7ff fa9f 	bl	801a744 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b206:	f241 0021 	movw	r0, #4129	; 0x1021
 801b20a:	f7ff fabb 	bl	801a784 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b20e:	2306      	movs	r3, #6
 801b210:	75bb      	strb	r3, [r7, #22]
 801b212:	e002      	b.n	801b21a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	7a5b      	ldrb	r3, [r3, #9]
 801b218:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b21a:	2309      	movs	r3, #9
 801b21c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	885b      	ldrh	r3, [r3, #2]
 801b222:	0a1b      	lsrs	r3, r3, #8
 801b224:	b29b      	uxth	r3, r3
 801b226:	b2db      	uxtb	r3, r3
 801b228:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	885b      	ldrh	r3, [r3, #2]
 801b22e:	b2db      	uxtb	r3, r3
 801b230:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	791b      	ldrb	r3, [r3, #4]
 801b236:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	795b      	ldrb	r3, [r3, #5]
 801b23c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	799b      	ldrb	r3, [r3, #6]
 801b242:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	79db      	ldrb	r3, [r3, #7]
 801b248:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	7a1b      	ldrb	r3, [r3, #8]
 801b24e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b250:	7dbb      	ldrb	r3, [r7, #22]
 801b252:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	7a9b      	ldrb	r3, [r3, #10]
 801b258:	753b      	strb	r3, [r7, #20]
        break;
 801b25a:	e022      	b.n	801b2a2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b25c:	2301      	movs	r3, #1
 801b25e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	7b1b      	ldrb	r3, [r3, #12]
 801b264:	733b      	strb	r3, [r7, #12]
        break;
 801b266:	e01c      	b.n	801b2a2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b268:	2306      	movs	r3, #6
 801b26a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	89db      	ldrh	r3, [r3, #14]
 801b270:	0a1b      	lsrs	r3, r3, #8
 801b272:	b29b      	uxth	r3, r3
 801b274:	b2db      	uxtb	r3, r3
 801b276:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	89db      	ldrh	r3, [r3, #14]
 801b27c:	b2db      	uxtb	r3, r3
 801b27e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	7c1a      	ldrb	r2, [r3, #16]
 801b284:	4b0f      	ldr	r3, [pc, #60]	; (801b2c4 <SUBGRF_SetPacketParams+0x138>)
 801b286:	4611      	mov	r1, r2
 801b288:	7019      	strb	r1, [r3, #0]
 801b28a:	4613      	mov	r3, r2
 801b28c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	7c5b      	ldrb	r3, [r3, #17]
 801b292:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	7c9b      	ldrb	r3, [r3, #18]
 801b298:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	7cdb      	ldrb	r3, [r3, #19]
 801b29e:	747b      	strb	r3, [r7, #17]
        break;
 801b2a0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b2a2:	7dfb      	ldrb	r3, [r7, #23]
 801b2a4:	b29a      	uxth	r2, r3
 801b2a6:	f107 030c 	add.w	r3, r7, #12
 801b2aa:	4619      	mov	r1, r3
 801b2ac:	208c      	movs	r0, #140	; 0x8c
 801b2ae:	f000 f965 	bl	801b57c <SUBGRF_WriteCommand>
 801b2b2:	e000      	b.n	801b2b6 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b2b4:	bf00      	nop
}
 801b2b6:	3718      	adds	r7, #24
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd80      	pop	{r7, pc}
 801b2bc:	0801db74 	.word	0x0801db74
 801b2c0:	20001bd1 	.word	0x20001bd1
 801b2c4:	20001bd2 	.word	0x20001bd2

0801b2c8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b084      	sub	sp, #16
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	460a      	mov	r2, r1
 801b2d2:	71fb      	strb	r3, [r7, #7]
 801b2d4:	4613      	mov	r3, r2
 801b2d6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b2d8:	79fb      	ldrb	r3, [r7, #7]
 801b2da:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b2dc:	79bb      	ldrb	r3, [r7, #6]
 801b2de:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b2e0:	f107 030c 	add.w	r3, r7, #12
 801b2e4:	2202      	movs	r2, #2
 801b2e6:	4619      	mov	r1, r3
 801b2e8:	208f      	movs	r0, #143	; 0x8f
 801b2ea:	f000 f947 	bl	801b57c <SUBGRF_WriteCommand>
}
 801b2ee:	bf00      	nop
 801b2f0:	3710      	adds	r7, #16
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd80      	pop	{r7, pc}

0801b2f6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b2f6:	b580      	push	{r7, lr}
 801b2f8:	b082      	sub	sp, #8
 801b2fa:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b300:	1d3b      	adds	r3, r7, #4
 801b302:	2201      	movs	r2, #1
 801b304:	4619      	mov	r1, r3
 801b306:	2015      	movs	r0, #21
 801b308:	f000 f95a 	bl	801b5c0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b30c:	793b      	ldrb	r3, [r7, #4]
 801b30e:	425b      	negs	r3, r3
 801b310:	105b      	asrs	r3, r3, #1
 801b312:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b314:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b318:	4618      	mov	r0, r3
 801b31a:	3708      	adds	r7, #8
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bd80      	pop	{r7, pc}

0801b320 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b084      	sub	sp, #16
 801b324:	af00      	add	r7, sp, #0
 801b326:	6078      	str	r0, [r7, #4]
 801b328:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b32a:	f107 030c 	add.w	r3, r7, #12
 801b32e:	2202      	movs	r2, #2
 801b330:	4619      	mov	r1, r3
 801b332:	2013      	movs	r0, #19
 801b334:	f000 f944 	bl	801b5c0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b338:	f7ff fd7e 	bl	801ae38 <SUBGRF_GetPacketType>
 801b33c:	4603      	mov	r3, r0
 801b33e:	2b01      	cmp	r3, #1
 801b340:	d10d      	bne.n	801b35e <SUBGRF_GetRxBufferStatus+0x3e>
 801b342:	4b0c      	ldr	r3, [pc, #48]	; (801b374 <SUBGRF_GetRxBufferStatus+0x54>)
 801b344:	781b      	ldrb	r3, [r3, #0]
 801b346:	b2db      	uxtb	r3, r3
 801b348:	2b01      	cmp	r3, #1
 801b34a:	d108      	bne.n	801b35e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b34c:	f240 7002 	movw	r0, #1794	; 0x702
 801b350:	f000 f878 	bl	801b444 <SUBGRF_ReadRegister>
 801b354:	4603      	mov	r3, r0
 801b356:	461a      	mov	r2, r3
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	701a      	strb	r2, [r3, #0]
 801b35c:	e002      	b.n	801b364 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b35e:	7b3a      	ldrb	r2, [r7, #12]
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b364:	7b7a      	ldrb	r2, [r7, #13]
 801b366:	683b      	ldr	r3, [r7, #0]
 801b368:	701a      	strb	r2, [r3, #0]
}
 801b36a:	bf00      	nop
 801b36c:	3710      	adds	r7, #16
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}
 801b372:	bf00      	nop
 801b374:	20001bd2 	.word	0x20001bd2

0801b378 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b084      	sub	sp, #16
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b380:	f107 030c 	add.w	r3, r7, #12
 801b384:	2203      	movs	r2, #3
 801b386:	4619      	mov	r1, r3
 801b388:	2014      	movs	r0, #20
 801b38a:	f000 f919 	bl	801b5c0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b38e:	f7ff fd53 	bl	801ae38 <SUBGRF_GetPacketType>
 801b392:	4603      	mov	r3, r0
 801b394:	461a      	mov	r2, r3
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	781b      	ldrb	r3, [r3, #0]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d002      	beq.n	801b3a8 <SUBGRF_GetPacketStatus+0x30>
 801b3a2:	2b01      	cmp	r3, #1
 801b3a4:	d013      	beq.n	801b3ce <SUBGRF_GetPacketStatus+0x56>
 801b3a6:	e02a      	b.n	801b3fe <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b3a8:	7b3a      	ldrb	r2, [r7, #12]
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b3ae:	7b7b      	ldrb	r3, [r7, #13]
 801b3b0:	425b      	negs	r3, r3
 801b3b2:	105b      	asrs	r3, r3, #1
 801b3b4:	b25a      	sxtb	r2, r3
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b3ba:	7bbb      	ldrb	r3, [r7, #14]
 801b3bc:	425b      	negs	r3, r3
 801b3be:	105b      	asrs	r3, r3, #1
 801b3c0:	b25a      	sxtb	r2, r3
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	609a      	str	r2, [r3, #8]
            break;
 801b3cc:	e020      	b.n	801b410 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b3ce:	7b3b      	ldrb	r3, [r7, #12]
 801b3d0:	425b      	negs	r3, r3
 801b3d2:	105b      	asrs	r3, r3, #1
 801b3d4:	b25a      	sxtb	r2, r3
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b3da:	7b7b      	ldrb	r3, [r7, #13]
 801b3dc:	b25b      	sxtb	r3, r3
 801b3de:	3302      	adds	r3, #2
 801b3e0:	109b      	asrs	r3, r3, #2
 801b3e2:	b25a      	sxtb	r2, r3
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b3e8:	7bbb      	ldrb	r3, [r7, #14]
 801b3ea:	425b      	negs	r3, r3
 801b3ec:	105b      	asrs	r3, r3, #1
 801b3ee:	b25a      	sxtb	r2, r3
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b3f4:	4b08      	ldr	r3, [pc, #32]	; (801b418 <SUBGRF_GetPacketStatus+0xa0>)
 801b3f6:	681a      	ldr	r2, [r3, #0]
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	611a      	str	r2, [r3, #16]
            break;
 801b3fc:	e008      	b.n	801b410 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b3fe:	2214      	movs	r2, #20
 801b400:	2100      	movs	r1, #0
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f000 fbf3 	bl	801bbee <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	220f      	movs	r2, #15
 801b40c:	701a      	strb	r2, [r3, #0]
            break;
 801b40e:	bf00      	nop
    }
}
 801b410:	bf00      	nop
 801b412:	3710      	adds	r7, #16
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}
 801b418:	20001bd4 	.word	0x20001bd4

0801b41c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	b082      	sub	sp, #8
 801b420:	af00      	add	r7, sp, #0
 801b422:	4603      	mov	r3, r0
 801b424:	460a      	mov	r2, r1
 801b426:	80fb      	strh	r3, [r7, #6]
 801b428:	4613      	mov	r3, r2
 801b42a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b42c:	1d7a      	adds	r2, r7, #5
 801b42e:	88f9      	ldrh	r1, [r7, #6]
 801b430:	2301      	movs	r3, #1
 801b432:	4803      	ldr	r0, [pc, #12]	; (801b440 <SUBGRF_WriteRegister+0x24>)
 801b434:	f7eb ff8c 	bl	8007350 <HAL_SUBGHZ_WriteRegisters>
}
 801b438:	bf00      	nop
 801b43a:	3708      	adds	r7, #8
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	20000210 	.word	0x20000210

0801b444 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b084      	sub	sp, #16
 801b448:	af00      	add	r7, sp, #0
 801b44a:	4603      	mov	r3, r0
 801b44c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b44e:	f107 020f 	add.w	r2, r7, #15
 801b452:	88f9      	ldrh	r1, [r7, #6]
 801b454:	2301      	movs	r3, #1
 801b456:	4804      	ldr	r0, [pc, #16]	; (801b468 <SUBGRF_ReadRegister+0x24>)
 801b458:	f7eb ffd9 	bl	800740e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b45c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b45e:	4618      	mov	r0, r3
 801b460:	3710      	adds	r7, #16
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}
 801b466:	bf00      	nop
 801b468:	20000210 	.word	0x20000210

0801b46c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b086      	sub	sp, #24
 801b470:	af00      	add	r7, sp, #0
 801b472:	4603      	mov	r3, r0
 801b474:	6039      	str	r1, [r7, #0]
 801b476:	80fb      	strh	r3, [r7, #6]
 801b478:	4613      	mov	r3, r2
 801b47a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b47c:	f3ef 8310 	mrs	r3, PRIMASK
 801b480:	60fb      	str	r3, [r7, #12]
  return(result);
 801b482:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b484:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b486:	b672      	cpsid	i
}
 801b488:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b48a:	88bb      	ldrh	r3, [r7, #4]
 801b48c:	88f9      	ldrh	r1, [r7, #6]
 801b48e:	683a      	ldr	r2, [r7, #0]
 801b490:	4806      	ldr	r0, [pc, #24]	; (801b4ac <SUBGRF_WriteRegisters+0x40>)
 801b492:	f7eb ff5d 	bl	8007350 <HAL_SUBGHZ_WriteRegisters>
 801b496:	697b      	ldr	r3, [r7, #20]
 801b498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	f383 8810 	msr	PRIMASK, r3
}
 801b4a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b4a2:	bf00      	nop
 801b4a4:	3718      	adds	r7, #24
 801b4a6:	46bd      	mov	sp, r7
 801b4a8:	bd80      	pop	{r7, pc}
 801b4aa:	bf00      	nop
 801b4ac:	20000210 	.word	0x20000210

0801b4b0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	b086      	sub	sp, #24
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	6039      	str	r1, [r7, #0]
 801b4ba:	80fb      	strh	r3, [r7, #6]
 801b4bc:	4613      	mov	r3, r2
 801b4be:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4c0:	f3ef 8310 	mrs	r3, PRIMASK
 801b4c4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b4c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4ca:	b672      	cpsid	i
}
 801b4cc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b4ce:	88bb      	ldrh	r3, [r7, #4]
 801b4d0:	88f9      	ldrh	r1, [r7, #6]
 801b4d2:	683a      	ldr	r2, [r7, #0]
 801b4d4:	4806      	ldr	r0, [pc, #24]	; (801b4f0 <SUBGRF_ReadRegisters+0x40>)
 801b4d6:	f7eb ff9a 	bl	800740e <HAL_SUBGHZ_ReadRegisters>
 801b4da:	697b      	ldr	r3, [r7, #20]
 801b4dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4de:	693b      	ldr	r3, [r7, #16]
 801b4e0:	f383 8810 	msr	PRIMASK, r3
}
 801b4e4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b4e6:	bf00      	nop
 801b4e8:	3718      	adds	r7, #24
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	bd80      	pop	{r7, pc}
 801b4ee:	bf00      	nop
 801b4f0:	20000210 	.word	0x20000210

0801b4f4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b086      	sub	sp, #24
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	6039      	str	r1, [r7, #0]
 801b4fe:	71fb      	strb	r3, [r7, #7]
 801b500:	4613      	mov	r3, r2
 801b502:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b504:	f3ef 8310 	mrs	r3, PRIMASK
 801b508:	60fb      	str	r3, [r7, #12]
  return(result);
 801b50a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b50c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b50e:	b672      	cpsid	i
}
 801b510:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b512:	79bb      	ldrb	r3, [r7, #6]
 801b514:	b29b      	uxth	r3, r3
 801b516:	79f9      	ldrb	r1, [r7, #7]
 801b518:	683a      	ldr	r2, [r7, #0]
 801b51a:	4806      	ldr	r0, [pc, #24]	; (801b534 <SUBGRF_WriteBuffer+0x40>)
 801b51c:	f7ec f88b 	bl	8007636 <HAL_SUBGHZ_WriteBuffer>
 801b520:	697b      	ldr	r3, [r7, #20]
 801b522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b524:	693b      	ldr	r3, [r7, #16]
 801b526:	f383 8810 	msr	PRIMASK, r3
}
 801b52a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b52c:	bf00      	nop
 801b52e:	3718      	adds	r7, #24
 801b530:	46bd      	mov	sp, r7
 801b532:	bd80      	pop	{r7, pc}
 801b534:	20000210 	.word	0x20000210

0801b538 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b086      	sub	sp, #24
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	4603      	mov	r3, r0
 801b540:	6039      	str	r1, [r7, #0]
 801b542:	71fb      	strb	r3, [r7, #7]
 801b544:	4613      	mov	r3, r2
 801b546:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b548:	f3ef 8310 	mrs	r3, PRIMASK
 801b54c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b54e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b552:	b672      	cpsid	i
}
 801b554:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b556:	79bb      	ldrb	r3, [r7, #6]
 801b558:	b29b      	uxth	r3, r3
 801b55a:	79f9      	ldrb	r1, [r7, #7]
 801b55c:	683a      	ldr	r2, [r7, #0]
 801b55e:	4806      	ldr	r0, [pc, #24]	; (801b578 <SUBGRF_ReadBuffer+0x40>)
 801b560:	f7ec f8bc 	bl	80076dc <HAL_SUBGHZ_ReadBuffer>
 801b564:	697b      	ldr	r3, [r7, #20]
 801b566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b568:	693b      	ldr	r3, [r7, #16]
 801b56a:	f383 8810 	msr	PRIMASK, r3
}
 801b56e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b570:	bf00      	nop
 801b572:	3718      	adds	r7, #24
 801b574:	46bd      	mov	sp, r7
 801b576:	bd80      	pop	{r7, pc}
 801b578:	20000210 	.word	0x20000210

0801b57c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b57c:	b580      	push	{r7, lr}
 801b57e:	b086      	sub	sp, #24
 801b580:	af00      	add	r7, sp, #0
 801b582:	4603      	mov	r3, r0
 801b584:	6039      	str	r1, [r7, #0]
 801b586:	71fb      	strb	r3, [r7, #7]
 801b588:	4613      	mov	r3, r2
 801b58a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b58c:	f3ef 8310 	mrs	r3, PRIMASK
 801b590:	60fb      	str	r3, [r7, #12]
  return(result);
 801b592:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b596:	b672      	cpsid	i
}
 801b598:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b59a:	88bb      	ldrh	r3, [r7, #4]
 801b59c:	79f9      	ldrb	r1, [r7, #7]
 801b59e:	683a      	ldr	r2, [r7, #0]
 801b5a0:	4806      	ldr	r0, [pc, #24]	; (801b5bc <SUBGRF_WriteCommand+0x40>)
 801b5a2:	f7eb ff95 	bl	80074d0 <HAL_SUBGHZ_ExecSetCmd>
 801b5a6:	697b      	ldr	r3, [r7, #20]
 801b5a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5aa:	693b      	ldr	r3, [r7, #16]
 801b5ac:	f383 8810 	msr	PRIMASK, r3
}
 801b5b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5b2:	bf00      	nop
 801b5b4:	3718      	adds	r7, #24
 801b5b6:	46bd      	mov	sp, r7
 801b5b8:	bd80      	pop	{r7, pc}
 801b5ba:	bf00      	nop
 801b5bc:	20000210 	.word	0x20000210

0801b5c0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b086      	sub	sp, #24
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	6039      	str	r1, [r7, #0]
 801b5ca:	71fb      	strb	r3, [r7, #7]
 801b5cc:	4613      	mov	r3, r2
 801b5ce:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5d0:	f3ef 8310 	mrs	r3, PRIMASK
 801b5d4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b5d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b5d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5da:	b672      	cpsid	i
}
 801b5dc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b5de:	88bb      	ldrh	r3, [r7, #4]
 801b5e0:	79f9      	ldrb	r1, [r7, #7]
 801b5e2:	683a      	ldr	r2, [r7, #0]
 801b5e4:	4806      	ldr	r0, [pc, #24]	; (801b600 <SUBGRF_ReadCommand+0x40>)
 801b5e6:	f7eb ffd2 	bl	800758e <HAL_SUBGHZ_ExecGetCmd>
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5ee:	693b      	ldr	r3, [r7, #16]
 801b5f0:	f383 8810 	msr	PRIMASK, r3
}
 801b5f4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5f6:	bf00      	nop
 801b5f8:	3718      	adds	r7, #24
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	bf00      	nop
 801b600:	20000210 	.word	0x20000210

0801b604 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b604:	b580      	push	{r7, lr}
 801b606:	b084      	sub	sp, #16
 801b608:	af00      	add	r7, sp, #0
 801b60a:	4603      	mov	r3, r0
 801b60c:	460a      	mov	r2, r1
 801b60e:	71fb      	strb	r3, [r7, #7]
 801b610:	4613      	mov	r3, r2
 801b612:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b614:	2301      	movs	r3, #1
 801b616:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b618:	79bb      	ldrb	r3, [r7, #6]
 801b61a:	2b01      	cmp	r3, #1
 801b61c:	d10d      	bne.n	801b63a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b61e:	79fb      	ldrb	r3, [r7, #7]
 801b620:	2b01      	cmp	r3, #1
 801b622:	d104      	bne.n	801b62e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b624:	2302      	movs	r3, #2
 801b626:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b628:	2004      	movs	r0, #4
 801b62a:	f000 f8df 	bl	801b7ec <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b62e:	79fb      	ldrb	r3, [r7, #7]
 801b630:	2b02      	cmp	r3, #2
 801b632:	d107      	bne.n	801b644 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b634:	2303      	movs	r3, #3
 801b636:	73fb      	strb	r3, [r7, #15]
 801b638:	e004      	b.n	801b644 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b63a:	79bb      	ldrb	r3, [r7, #6]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d101      	bne.n	801b644 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b640:	2301      	movs	r3, #1
 801b642:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b644:	7bfb      	ldrb	r3, [r7, #15]
 801b646:	4618      	mov	r0, r3
 801b648:	f7ef fa09 	bl	800aa5e <RBI_ConfigRFSwitch>
}
 801b64c:	bf00      	nop
 801b64e:	3710      	adds	r7, #16
 801b650:	46bd      	mov	sp, r7
 801b652:	bd80      	pop	{r7, pc}

0801b654 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b084      	sub	sp, #16
 801b658:	af00      	add	r7, sp, #0
 801b65a:	4603      	mov	r3, r0
 801b65c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b65e:	2301      	movs	r3, #1
 801b660:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b662:	f7ef fa0a 	bl	800aa7a <RBI_GetTxConfig>
 801b666:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	2b02      	cmp	r3, #2
 801b66c:	d016      	beq.n	801b69c <SUBGRF_SetRfTxPower+0x48>
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	2b02      	cmp	r3, #2
 801b672:	dc16      	bgt.n	801b6a2 <SUBGRF_SetRfTxPower+0x4e>
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d003      	beq.n	801b682 <SUBGRF_SetRfTxPower+0x2e>
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	2b01      	cmp	r3, #1
 801b67e:	d00a      	beq.n	801b696 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b680:	e00f      	b.n	801b6a2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b686:	2b0f      	cmp	r3, #15
 801b688:	dd02      	ble.n	801b690 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b68a:	2302      	movs	r3, #2
 801b68c:	73fb      	strb	r3, [r7, #15]
            break;
 801b68e:	e009      	b.n	801b6a4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b690:	2301      	movs	r3, #1
 801b692:	73fb      	strb	r3, [r7, #15]
            break;
 801b694:	e006      	b.n	801b6a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b696:	2301      	movs	r3, #1
 801b698:	73fb      	strb	r3, [r7, #15]
            break;
 801b69a:	e003      	b.n	801b6a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b69c:	2302      	movs	r3, #2
 801b69e:	73fb      	strb	r3, [r7, #15]
            break;
 801b6a0:	e000      	b.n	801b6a4 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b6a2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b6a4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b6a8:	7bfb      	ldrb	r3, [r7, #15]
 801b6aa:	2202      	movs	r2, #2
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7ff fbcd 	bl	801ae4c <SUBGRF_SetTxParams>

    return paSelect;
 801b6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	3710      	adds	r7, #16
 801b6b8:	46bd      	mov	sp, r7
 801b6ba:	bd80      	pop	{r7, pc}

0801b6bc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b6bc:	b480      	push	{r7}
 801b6be:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b6c0:	2301      	movs	r3, #1
}
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bc80      	pop	{r7}
 801b6c8:	4770      	bx	lr
	...

0801b6cc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6cc:	b580      	push	{r7, lr}
 801b6ce:	b082      	sub	sp, #8
 801b6d0:	af00      	add	r7, sp, #0
 801b6d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b6d4:	4b03      	ldr	r3, [pc, #12]	; (801b6e4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	2001      	movs	r0, #1
 801b6da:	4798      	blx	r3
}
 801b6dc:	bf00      	nop
 801b6de:	3708      	adds	r7, #8
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd80      	pop	{r7, pc}
 801b6e4:	20001bdc 	.word	0x20001bdc

0801b6e8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b082      	sub	sp, #8
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b6f0:	4b03      	ldr	r3, [pc, #12]	; (801b700 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	2002      	movs	r0, #2
 801b6f6:	4798      	blx	r3
}
 801b6f8:	bf00      	nop
 801b6fa:	3708      	adds	r7, #8
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}
 801b700:	20001bdc 	.word	0x20001bdc

0801b704 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b082      	sub	sp, #8
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b70c:	4b03      	ldr	r3, [pc, #12]	; (801b71c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	2040      	movs	r0, #64	; 0x40
 801b712:	4798      	blx	r3
}
 801b714:	bf00      	nop
 801b716:	3708      	adds	r7, #8
 801b718:	46bd      	mov	sp, r7
 801b71a:	bd80      	pop	{r7, pc}
 801b71c:	20001bdc 	.word	0x20001bdc

0801b720 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b720:	b580      	push	{r7, lr}
 801b722:	b082      	sub	sp, #8
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
 801b728:	460b      	mov	r3, r1
 801b72a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b72c:	78fb      	ldrb	r3, [r7, #3]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d002      	beq.n	801b738 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b732:	2b01      	cmp	r3, #1
 801b734:	d005      	beq.n	801b742 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b736:	e00a      	b.n	801b74e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b738:	4b07      	ldr	r3, [pc, #28]	; (801b758 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	2080      	movs	r0, #128	; 0x80
 801b73e:	4798      	blx	r3
            break;
 801b740:	e005      	b.n	801b74e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b742:	4b05      	ldr	r3, [pc, #20]	; (801b758 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b74a:	4798      	blx	r3
            break;
 801b74c:	bf00      	nop
    }
}
 801b74e:	bf00      	nop
 801b750:	3708      	adds	r7, #8
 801b752:	46bd      	mov	sp, r7
 801b754:	bd80      	pop	{r7, pc}
 801b756:	bf00      	nop
 801b758:	20001bdc 	.word	0x20001bdc

0801b75c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b082      	sub	sp, #8
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b764:	4b04      	ldr	r3, [pc, #16]	; (801b778 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b76c:	4798      	blx	r3
}
 801b76e:	bf00      	nop
 801b770:	3708      	adds	r7, #8
 801b772:	46bd      	mov	sp, r7
 801b774:	bd80      	pop	{r7, pc}
 801b776:	bf00      	nop
 801b778:	20001bdc 	.word	0x20001bdc

0801b77c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b082      	sub	sp, #8
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b784:	4b03      	ldr	r3, [pc, #12]	; (801b794 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	2020      	movs	r0, #32
 801b78a:	4798      	blx	r3
}
 801b78c:	bf00      	nop
 801b78e:	3708      	adds	r7, #8
 801b790:	46bd      	mov	sp, r7
 801b792:	bd80      	pop	{r7, pc}
 801b794:	20001bdc 	.word	0x20001bdc

0801b798 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b082      	sub	sp, #8
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b7a0:	4b03      	ldr	r3, [pc, #12]	; (801b7b0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	2004      	movs	r0, #4
 801b7a6:	4798      	blx	r3
}
 801b7a8:	bf00      	nop
 801b7aa:	3708      	adds	r7, #8
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	bd80      	pop	{r7, pc}
 801b7b0:	20001bdc 	.word	0x20001bdc

0801b7b4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b082      	sub	sp, #8
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b7bc:	4b03      	ldr	r3, [pc, #12]	; (801b7cc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	2008      	movs	r0, #8
 801b7c2:	4798      	blx	r3
}
 801b7c4:	bf00      	nop
 801b7c6:	3708      	adds	r7, #8
 801b7c8:	46bd      	mov	sp, r7
 801b7ca:	bd80      	pop	{r7, pc}
 801b7cc:	20001bdc 	.word	0x20001bdc

0801b7d0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7d0:	b580      	push	{r7, lr}
 801b7d2:	b082      	sub	sp, #8
 801b7d4:	af00      	add	r7, sp, #0
 801b7d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b7d8:	4b03      	ldr	r3, [pc, #12]	; (801b7e8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	2010      	movs	r0, #16
 801b7de:	4798      	blx	r3
}
 801b7e0:	bf00      	nop
 801b7e2:	3708      	adds	r7, #8
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd80      	pop	{r7, pc}
 801b7e8:	20001bdc 	.word	0x20001bdc

0801b7ec <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b084      	sub	sp, #16
 801b7f0:	af00      	add	r7, sp, #0
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b7f6:	f7ef f94e 	bl	800aa96 <RBI_IsDCDC>
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	2b01      	cmp	r3, #1
 801b7fe:	d112      	bne.n	801b826 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b800:	f640 1023 	movw	r0, #2339	; 0x923
 801b804:	f7ff fe1e 	bl	801b444 <SUBGRF_ReadRegister>
 801b808:	4603      	mov	r3, r0
 801b80a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b80c:	7bfb      	ldrb	r3, [r7, #15]
 801b80e:	f023 0306 	bic.w	r3, r3, #6
 801b812:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b814:	7bfa      	ldrb	r2, [r7, #15]
 801b816:	79fb      	ldrb	r3, [r7, #7]
 801b818:	4313      	orrs	r3, r2
 801b81a:	b2db      	uxtb	r3, r3
 801b81c:	4619      	mov	r1, r3
 801b81e:	f640 1023 	movw	r0, #2339	; 0x923
 801b822:	f7ff fdfb 	bl	801b41c <SUBGRF_WriteRegister>
  }
}
 801b826:	bf00      	nop
 801b828:	3710      	adds	r7, #16
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bd80      	pop	{r7, pc}
	...

0801b830 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b830:	b480      	push	{r7}
 801b832:	b085      	sub	sp, #20
 801b834:	af00      	add	r7, sp, #0
 801b836:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d101      	bne.n	801b842 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b83e:	231f      	movs	r3, #31
 801b840:	e016      	b.n	801b870 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b842:	2300      	movs	r3, #0
 801b844:	73fb      	strb	r3, [r7, #15]
 801b846:	e00f      	b.n	801b868 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b848:	7bfb      	ldrb	r3, [r7, #15]
 801b84a:	4a0c      	ldr	r2, [pc, #48]	; (801b87c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b84c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b850:	687a      	ldr	r2, [r7, #4]
 801b852:	429a      	cmp	r2, r3
 801b854:	d205      	bcs.n	801b862 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b856:	7bfb      	ldrb	r3, [r7, #15]
 801b858:	4a08      	ldr	r2, [pc, #32]	; (801b87c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b85a:	00db      	lsls	r3, r3, #3
 801b85c:	4413      	add	r3, r2
 801b85e:	791b      	ldrb	r3, [r3, #4]
 801b860:	e006      	b.n	801b870 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b862:	7bfb      	ldrb	r3, [r7, #15]
 801b864:	3301      	adds	r3, #1
 801b866:	73fb      	strb	r3, [r7, #15]
 801b868:	7bfb      	ldrb	r3, [r7, #15]
 801b86a:	2b15      	cmp	r3, #21
 801b86c:	d9ec      	bls.n	801b848 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b86e:	e7fe      	b.n	801b86e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b870:	4618      	mov	r0, r3
 801b872:	3714      	adds	r7, #20
 801b874:	46bd      	mov	sp, r7
 801b876:	bc80      	pop	{r7}
 801b878:	4770      	bx	lr
 801b87a:	bf00      	nop
 801b87c:	0801e15c 	.word	0x0801e15c

0801b880 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b880:	b580      	push	{r7, lr}
 801b882:	b08a      	sub	sp, #40	; 0x28
 801b884:	af00      	add	r7, sp, #0
 801b886:	6078      	str	r0, [r7, #4]
 801b888:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b88a:	4b35      	ldr	r3, [pc, #212]	; (801b960 <SUBGRF_GetCFO+0xe0>)
 801b88c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b88e:	f640 0007 	movw	r0, #2055	; 0x807
 801b892:	f7ff fdd7 	bl	801b444 <SUBGRF_ReadRegister>
 801b896:	4603      	mov	r3, r0
 801b898:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b89a:	7ffb      	ldrb	r3, [r7, #31]
 801b89c:	08db      	lsrs	r3, r3, #3
 801b89e:	b2db      	uxtb	r3, r3
 801b8a0:	f003 0303 	and.w	r3, r3, #3
 801b8a4:	3328      	adds	r3, #40	; 0x28
 801b8a6:	443b      	add	r3, r7
 801b8a8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b8ac:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b8ae:	7ffb      	ldrb	r3, [r7, #31]
 801b8b0:	f003 0307 	and.w	r3, r3, #7
 801b8b4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b8b6:	7fba      	ldrb	r2, [r7, #30]
 801b8b8:	7f7b      	ldrb	r3, [r7, #29]
 801b8ba:	3b01      	subs	r3, #1
 801b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 801b8c0:	461a      	mov	r2, r3
 801b8c2:	4b28      	ldr	r3, [pc, #160]	; (801b964 <SUBGRF_GetCFO+0xe4>)
 801b8c4:	fbb3 f3f2 	udiv	r3, r3, r2
 801b8c8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b8ca:	69ba      	ldr	r2, [r7, #24]
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8d2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b8d4:	2301      	movs	r3, #1
 801b8d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b8da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8de:	697a      	ldr	r2, [r7, #20]
 801b8e0:	fb02 f303 	mul.w	r3, r2, r3
 801b8e4:	2b07      	cmp	r3, #7
 801b8e6:	d802      	bhi.n	801b8ee <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b8e8:	2302      	movs	r3, #2
 801b8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801b8ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8f2:	697a      	ldr	r2, [r7, #20]
 801b8f4:	fb02 f303 	mul.w	r3, r2, r3
 801b8f8:	2b03      	cmp	r3, #3
 801b8fa:	d802      	bhi.n	801b902 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b8fc:	2304      	movs	r3, #4
 801b8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b902:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b906:	69bb      	ldr	r3, [r7, #24]
 801b908:	fb02 f303 	mul.w	r3, r2, r3
 801b90c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b90e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801b912:	f7ff fd97 	bl	801b444 <SUBGRF_ReadRegister>
 801b916:	4603      	mov	r3, r0
 801b918:	021b      	lsls	r3, r3, #8
 801b91a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801b91e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b920:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801b924:	f7ff fd8e 	bl	801b444 <SUBGRF_ReadRegister>
 801b928:	4603      	mov	r3, r0
 801b92a:	461a      	mov	r2, r3
 801b92c:	6a3b      	ldr	r3, [r7, #32]
 801b92e:	4313      	orrs	r3, r2
 801b930:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b932:	6a3b      	ldr	r3, [r7, #32]
 801b934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d005      	beq.n	801b948 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b93c:	6a3b      	ldr	r3, [r7, #32]
 801b93e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b942:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b946:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b948:	693b      	ldr	r3, [r7, #16]
 801b94a:	095b      	lsrs	r3, r3, #5
 801b94c:	6a3a      	ldr	r2, [r7, #32]
 801b94e:	fb02 f303 	mul.w	r3, r2, r3
 801b952:	11da      	asrs	r2, r3, #7
 801b954:	683b      	ldr	r3, [r7, #0]
 801b956:	601a      	str	r2, [r3, #0]
}
 801b958:	bf00      	nop
 801b95a:	3728      	adds	r7, #40	; 0x28
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bd80      	pop	{r7, pc}
 801b960:	0c0a0804 	.word	0x0c0a0804
 801b964:	01e84800 	.word	0x01e84800

0801b968 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b968:	b480      	push	{r7}
 801b96a:	b087      	sub	sp, #28
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	4603      	mov	r3, r0
 801b970:	60b9      	str	r1, [r7, #8]
 801b972:	607a      	str	r2, [r7, #4]
 801b974:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b976:	2300      	movs	r3, #0
 801b978:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b97a:	f04f 33ff 	mov.w	r3, #4294967295
 801b97e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b980:	697b      	ldr	r3, [r7, #20]
}
 801b982:	4618      	mov	r0, r3
 801b984:	371c      	adds	r7, #28
 801b986:	46bd      	mov	sp, r7
 801b988:	bc80      	pop	{r7}
 801b98a:	4770      	bx	lr

0801b98c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b98c:	b480      	push	{r7}
 801b98e:	b087      	sub	sp, #28
 801b990:	af00      	add	r7, sp, #0
 801b992:	4603      	mov	r3, r0
 801b994:	60b9      	str	r1, [r7, #8]
 801b996:	607a      	str	r2, [r7, #4]
 801b998:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b99a:	2300      	movs	r3, #0
 801b99c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b99e:	f04f 33ff 	mov.w	r3, #4294967295
 801b9a2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b9a4:	697b      	ldr	r3, [r7, #20]
}
 801b9a6:	4618      	mov	r0, r3
 801b9a8:	371c      	adds	r7, #28
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bc80      	pop	{r7}
 801b9ae:	4770      	bx	lr

0801b9b0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b9b0:	b480      	push	{r7}
 801b9b2:	b085      	sub	sp, #20
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	60f8      	str	r0, [r7, #12]
 801b9b8:	60b9      	str	r1, [r7, #8]
 801b9ba:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b9bc:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	3714      	adds	r7, #20
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bc80      	pop	{r7}
 801b9c8:	4770      	bx	lr

0801b9ca <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b9ca:	b480      	push	{r7}
 801b9cc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b9ce:	bf00      	nop
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bc80      	pop	{r7}
 801b9d4:	4770      	bx	lr

0801b9d6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b9d6:	b480      	push	{r7}
 801b9d8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b9da:	2300      	movs	r3, #0
#endif
}
 801b9dc:	4618      	mov	r0, r3
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	bc80      	pop	{r7}
 801b9e2:	4770      	bx	lr

0801b9e4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b9e4:	b480      	push	{r7}
 801b9e6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b9e8:	2300      	movs	r3, #0
#endif
}
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bc80      	pop	{r7}
 801b9f0:	4770      	bx	lr

0801b9f2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b9f2:	b480      	push	{r7}
 801b9f4:	b083      	sub	sp, #12
 801b9f6:	af00      	add	r7, sp, #0
 801b9f8:	4603      	mov	r3, r0
 801b9fa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b9fc:	bf00      	nop
 801b9fe:	370c      	adds	r7, #12
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bc80      	pop	{r7}
 801ba04:	4770      	bx	lr

0801ba06 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801ba06:	b480      	push	{r7}
 801ba08:	b087      	sub	sp, #28
 801ba0a:	af00      	add	r7, sp, #0
 801ba0c:	60f8      	str	r0, [r7, #12]
 801ba0e:	460b      	mov	r3, r1
 801ba10:	607a      	str	r2, [r7, #4]
 801ba12:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801ba14:	f04f 33ff 	mov.w	r3, #4294967295
 801ba18:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801ba1a:	697b      	ldr	r3, [r7, #20]
}
 801ba1c:	4618      	mov	r0, r3
 801ba1e:	371c      	adds	r7, #28
 801ba20:	46bd      	mov	sp, r7
 801ba22:	bc80      	pop	{r7}
 801ba24:	4770      	bx	lr

0801ba26 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ba26:	b480      	push	{r7}
 801ba28:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801ba2a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801ba2e:	4618      	mov	r0, r3
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bc80      	pop	{r7}
 801ba34:	4770      	bx	lr

0801ba36 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801ba36:	b480      	push	{r7}
 801ba38:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801ba3a:	bf00      	nop
 801ba3c:	46bd      	mov	sp, r7
 801ba3e:	bc80      	pop	{r7}
 801ba40:	4770      	bx	lr

0801ba42 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ba42:	b480      	push	{r7}
 801ba44:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801ba46:	bf00      	nop
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bc80      	pop	{r7}
 801ba4c:	4770      	bx	lr

0801ba4e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801ba4e:	b480      	push	{r7}
 801ba50:	b083      	sub	sp, #12
 801ba52:	af00      	add	r7, sp, #0
 801ba54:	4603      	mov	r3, r0
 801ba56:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801ba58:	bf00      	nop
 801ba5a:	370c      	adds	r7, #12
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	bc80      	pop	{r7}
 801ba60:	4770      	bx	lr
	...

0801ba64 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ba64:	b480      	push	{r7}
 801ba66:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ba68:	4b04      	ldr	r3, [pc, #16]	; (801ba7c <UTIL_LPM_Init+0x18>)
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ba6e:	4b04      	ldr	r3, [pc, #16]	; (801ba80 <UTIL_LPM_Init+0x1c>)
 801ba70:	2200      	movs	r2, #0
 801ba72:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ba74:	bf00      	nop
 801ba76:	46bd      	mov	sp, r7
 801ba78:	bc80      	pop	{r7}
 801ba7a:	4770      	bx	lr
 801ba7c:	20001be0 	.word	0x20001be0
 801ba80:	20001be4 	.word	0x20001be4

0801ba84 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ba84:	b480      	push	{r7}
 801ba86:	b087      	sub	sp, #28
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
 801ba8c:	460b      	mov	r3, r1
 801ba8e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba90:	f3ef 8310 	mrs	r3, PRIMASK
 801ba94:	613b      	str	r3, [r7, #16]
  return(result);
 801ba96:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ba98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba9a:	b672      	cpsid	i
}
 801ba9c:	bf00      	nop
  
  switch( state )
 801ba9e:	78fb      	ldrb	r3, [r7, #3]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d008      	beq.n	801bab6 <UTIL_LPM_SetStopMode+0x32>
 801baa4:	2b01      	cmp	r3, #1
 801baa6:	d10e      	bne.n	801bac6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801baa8:	4b0d      	ldr	r3, [pc, #52]	; (801bae0 <UTIL_LPM_SetStopMode+0x5c>)
 801baaa:	681a      	ldr	r2, [r3, #0]
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	4313      	orrs	r3, r2
 801bab0:	4a0b      	ldr	r2, [pc, #44]	; (801bae0 <UTIL_LPM_SetStopMode+0x5c>)
 801bab2:	6013      	str	r3, [r2, #0]
      break;
 801bab4:	e008      	b.n	801bac8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	43da      	mvns	r2, r3
 801baba:	4b09      	ldr	r3, [pc, #36]	; (801bae0 <UTIL_LPM_SetStopMode+0x5c>)
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	4013      	ands	r3, r2
 801bac0:	4a07      	ldr	r2, [pc, #28]	; (801bae0 <UTIL_LPM_SetStopMode+0x5c>)
 801bac2:	6013      	str	r3, [r2, #0]
      break;
 801bac4:	e000      	b.n	801bac8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801bac6:	bf00      	nop
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	f383 8810 	msr	PRIMASK, r3
}
 801bad2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bad4:	bf00      	nop
 801bad6:	371c      	adds	r7, #28
 801bad8:	46bd      	mov	sp, r7
 801bada:	bc80      	pop	{r7}
 801badc:	4770      	bx	lr
 801bade:	bf00      	nop
 801bae0:	20001be0 	.word	0x20001be0

0801bae4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bae4:	b480      	push	{r7}
 801bae6:	b087      	sub	sp, #28
 801bae8:	af00      	add	r7, sp, #0
 801baea:	6078      	str	r0, [r7, #4]
 801baec:	460b      	mov	r3, r1
 801baee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801baf0:	f3ef 8310 	mrs	r3, PRIMASK
 801baf4:	613b      	str	r3, [r7, #16]
  return(result);
 801baf6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801baf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bafa:	b672      	cpsid	i
}
 801bafc:	bf00      	nop
  
  switch(state)
 801bafe:	78fb      	ldrb	r3, [r7, #3]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d008      	beq.n	801bb16 <UTIL_LPM_SetOffMode+0x32>
 801bb04:	2b01      	cmp	r3, #1
 801bb06:	d10e      	bne.n	801bb26 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801bb08:	4b0d      	ldr	r3, [pc, #52]	; (801bb40 <UTIL_LPM_SetOffMode+0x5c>)
 801bb0a:	681a      	ldr	r2, [r3, #0]
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	4313      	orrs	r3, r2
 801bb10:	4a0b      	ldr	r2, [pc, #44]	; (801bb40 <UTIL_LPM_SetOffMode+0x5c>)
 801bb12:	6013      	str	r3, [r2, #0]
      break;
 801bb14:	e008      	b.n	801bb28 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	43da      	mvns	r2, r3
 801bb1a:	4b09      	ldr	r3, [pc, #36]	; (801bb40 <UTIL_LPM_SetOffMode+0x5c>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	4013      	ands	r3, r2
 801bb20:	4a07      	ldr	r2, [pc, #28]	; (801bb40 <UTIL_LPM_SetOffMode+0x5c>)
 801bb22:	6013      	str	r3, [r2, #0]
      break;
 801bb24:	e000      	b.n	801bb28 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801bb26:	bf00      	nop
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	f383 8810 	msr	PRIMASK, r3
}
 801bb32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bb34:	bf00      	nop
 801bb36:	371c      	adds	r7, #28
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bc80      	pop	{r7}
 801bb3c:	4770      	bx	lr
 801bb3e:	bf00      	nop
 801bb40:	20001be4 	.word	0x20001be4

0801bb44 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b084      	sub	sp, #16
 801bb48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb4a:	f3ef 8310 	mrs	r3, PRIMASK
 801bb4e:	60bb      	str	r3, [r7, #8]
  return(result);
 801bb50:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801bb52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb54:	b672      	cpsid	i
}
 801bb56:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801bb58:	4b12      	ldr	r3, [pc, #72]	; (801bba4 <UTIL_LPM_EnterLowPower+0x60>)
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d006      	beq.n	801bb6e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801bb60:	4b11      	ldr	r3, [pc, #68]	; (801bba8 <UTIL_LPM_EnterLowPower+0x64>)
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801bb66:	4b10      	ldr	r3, [pc, #64]	; (801bba8 <UTIL_LPM_EnterLowPower+0x64>)
 801bb68:	685b      	ldr	r3, [r3, #4]
 801bb6a:	4798      	blx	r3
 801bb6c:	e010      	b.n	801bb90 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801bb6e:	4b0f      	ldr	r3, [pc, #60]	; (801bbac <UTIL_LPM_EnterLowPower+0x68>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d006      	beq.n	801bb84 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801bb76:	4b0c      	ldr	r3, [pc, #48]	; (801bba8 <UTIL_LPM_EnterLowPower+0x64>)
 801bb78:	689b      	ldr	r3, [r3, #8]
 801bb7a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801bb7c:	4b0a      	ldr	r3, [pc, #40]	; (801bba8 <UTIL_LPM_EnterLowPower+0x64>)
 801bb7e:	68db      	ldr	r3, [r3, #12]
 801bb80:	4798      	blx	r3
 801bb82:	e005      	b.n	801bb90 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801bb84:	4b08      	ldr	r3, [pc, #32]	; (801bba8 <UTIL_LPM_EnterLowPower+0x64>)
 801bb86:	691b      	ldr	r3, [r3, #16]
 801bb88:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801bb8a:	4b07      	ldr	r3, [pc, #28]	; (801bba8 <UTIL_LPM_EnterLowPower+0x64>)
 801bb8c:	695b      	ldr	r3, [r3, #20]
 801bb8e:	4798      	blx	r3
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	f383 8810 	msr	PRIMASK, r3
}
 801bb9a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801bb9c:	bf00      	nop
 801bb9e:	3710      	adds	r7, #16
 801bba0:	46bd      	mov	sp, r7
 801bba2:	bd80      	pop	{r7, pc}
 801bba4:	20001be0 	.word	0x20001be0
 801bba8:	0801dbd8 	.word	0x0801dbd8
 801bbac:	20001be4 	.word	0x20001be4

0801bbb0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801bbb0:	b480      	push	{r7}
 801bbb2:	b087      	sub	sp, #28
 801bbb4:	af00      	add	r7, sp, #0
 801bbb6:	60f8      	str	r0, [r7, #12]
 801bbb8:	60b9      	str	r1, [r7, #8]
 801bbba:	4613      	mov	r3, r2
 801bbbc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801bbc2:	68bb      	ldr	r3, [r7, #8]
 801bbc4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801bbc6:	e007      	b.n	801bbd8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801bbc8:	693a      	ldr	r2, [r7, #16]
 801bbca:	1c53      	adds	r3, r2, #1
 801bbcc:	613b      	str	r3, [r7, #16]
 801bbce:	697b      	ldr	r3, [r7, #20]
 801bbd0:	1c59      	adds	r1, r3, #1
 801bbd2:	6179      	str	r1, [r7, #20]
 801bbd4:	7812      	ldrb	r2, [r2, #0]
 801bbd6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bbd8:	88fb      	ldrh	r3, [r7, #6]
 801bbda:	1e5a      	subs	r2, r3, #1
 801bbdc:	80fa      	strh	r2, [r7, #6]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d1f2      	bne.n	801bbc8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801bbe2:	bf00      	nop
 801bbe4:	bf00      	nop
 801bbe6:	371c      	adds	r7, #28
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	bc80      	pop	{r7}
 801bbec:	4770      	bx	lr

0801bbee <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bbee:	b480      	push	{r7}
 801bbf0:	b085      	sub	sp, #20
 801bbf2:	af00      	add	r7, sp, #0
 801bbf4:	6078      	str	r0, [r7, #4]
 801bbf6:	460b      	mov	r3, r1
 801bbf8:	70fb      	strb	r3, [r7, #3]
 801bbfa:	4613      	mov	r3, r2
 801bbfc:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bc02:	e004      	b.n	801bc0e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	1c5a      	adds	r2, r3, #1
 801bc08:	60fa      	str	r2, [r7, #12]
 801bc0a:	78fa      	ldrb	r2, [r7, #3]
 801bc0c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bc0e:	883b      	ldrh	r3, [r7, #0]
 801bc10:	1e5a      	subs	r2, r3, #1
 801bc12:	803a      	strh	r2, [r7, #0]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d1f5      	bne.n	801bc04 <UTIL_MEM_set_8+0x16>
  }
}
 801bc18:	bf00      	nop
 801bc1a:	bf00      	nop
 801bc1c:	3714      	adds	r7, #20
 801bc1e:	46bd      	mov	sp, r7
 801bc20:	bc80      	pop	{r7}
 801bc22:	4770      	bx	lr

0801bc24 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bc24:	b082      	sub	sp, #8
 801bc26:	b480      	push	{r7}
 801bc28:	b087      	sub	sp, #28
 801bc2a:	af00      	add	r7, sp, #0
 801bc2c:	60f8      	str	r0, [r7, #12]
 801bc2e:	1d38      	adds	r0, r7, #4
 801bc30:	e880 0006 	stmia.w	r0, {r1, r2}
 801bc34:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bc36:	2300      	movs	r3, #0
 801bc38:	613b      	str	r3, [r7, #16]
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801bc3e:	687a      	ldr	r2, [r7, #4]
 801bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc42:	4413      	add	r3, r2
 801bc44:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bc46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bc4a:	b29a      	uxth	r2, r3
 801bc4c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801bc50:	b29b      	uxth	r3, r3
 801bc52:	4413      	add	r3, r2
 801bc54:	b29b      	uxth	r3, r3
 801bc56:	b21b      	sxth	r3, r3
 801bc58:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801bc5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bc5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801bc62:	db0a      	blt.n	801bc7a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801bc64:	693b      	ldr	r3, [r7, #16]
 801bc66:	3301      	adds	r3, #1
 801bc68:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801bc6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bc6e:	b29b      	uxth	r3, r3
 801bc70:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801bc74:	b29b      	uxth	r3, r3
 801bc76:	b21b      	sxth	r3, r3
 801bc78:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	461a      	mov	r2, r3
 801bc7e:	f107 0310 	add.w	r3, r7, #16
 801bc82:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bc86:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bc8a:	68f8      	ldr	r0, [r7, #12]
 801bc8c:	371c      	adds	r7, #28
 801bc8e:	46bd      	mov	sp, r7
 801bc90:	bc80      	pop	{r7}
 801bc92:	b002      	add	sp, #8
 801bc94:	4770      	bx	lr

0801bc96 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801bc96:	b082      	sub	sp, #8
 801bc98:	b480      	push	{r7}
 801bc9a:	b087      	sub	sp, #28
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	60f8      	str	r0, [r7, #12]
 801bca0:	1d38      	adds	r0, r7, #4
 801bca2:	e880 0006 	stmia.w	r0, {r1, r2}
 801bca6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801bca8:	2300      	movs	r3, #0
 801bcaa:	613b      	str	r3, [r7, #16]
 801bcac:	2300      	movs	r3, #0
 801bcae:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801bcb0:	687a      	ldr	r2, [r7, #4]
 801bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcb4:	1ad3      	subs	r3, r2, r3
 801bcb6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801bcb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bcbc:	b29a      	uxth	r2, r3
 801bcbe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	1ad3      	subs	r3, r2, r3
 801bcc6:	b29b      	uxth	r3, r3
 801bcc8:	b21b      	sxth	r3, r3
 801bcca:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801bccc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	da0a      	bge.n	801bcea <SysTimeSub+0x54>
  {
    c.Seconds--;
 801bcd4:	693b      	ldr	r3, [r7, #16]
 801bcd6:	3b01      	subs	r3, #1
 801bcd8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801bcda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bcde:	b29b      	uxth	r3, r3
 801bce0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801bce4:	b29b      	uxth	r3, r3
 801bce6:	b21b      	sxth	r3, r3
 801bce8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	461a      	mov	r2, r3
 801bcee:	f107 0310 	add.w	r3, r7, #16
 801bcf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bcf6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bcfa:	68f8      	ldr	r0, [r7, #12]
 801bcfc:	371c      	adds	r7, #28
 801bcfe:	46bd      	mov	sp, r7
 801bd00:	bc80      	pop	{r7}
 801bd02:	b002      	add	sp, #8
 801bd04:	4770      	bx	lr
	...

0801bd08 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b088      	sub	sp, #32
 801bd0c:	af02      	add	r7, sp, #8
 801bd0e:	463b      	mov	r3, r7
 801bd10:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd14:	2300      	movs	r3, #0
 801bd16:	60bb      	str	r3, [r7, #8]
 801bd18:	2300      	movs	r3, #0
 801bd1a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd1c:	4b10      	ldr	r3, [pc, #64]	; (801bd60 <SysTimeSet+0x58>)
 801bd1e:	691b      	ldr	r3, [r3, #16]
 801bd20:	f107 0208 	add.w	r2, r7, #8
 801bd24:	3204      	adds	r2, #4
 801bd26:	4610      	mov	r0, r2
 801bd28:	4798      	blx	r3
 801bd2a:	4603      	mov	r3, r0
 801bd2c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bd2e:	f107 0010 	add.w	r0, r7, #16
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	9300      	str	r3, [sp, #0]
 801bd36:	68bb      	ldr	r3, [r7, #8]
 801bd38:	463a      	mov	r2, r7
 801bd3a:	ca06      	ldmia	r2, {r1, r2}
 801bd3c:	f7ff ffab 	bl	801bc96 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bd40:	4b07      	ldr	r3, [pc, #28]	; (801bd60 <SysTimeSet+0x58>)
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	693a      	ldr	r2, [r7, #16]
 801bd46:	4610      	mov	r0, r2
 801bd48:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bd4a:	4b05      	ldr	r3, [pc, #20]	; (801bd60 <SysTimeSet+0x58>)
 801bd4c:	689b      	ldr	r3, [r3, #8]
 801bd4e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bd52:	4610      	mov	r0, r2
 801bd54:	4798      	blx	r3
}
 801bd56:	bf00      	nop
 801bd58:	3718      	adds	r7, #24
 801bd5a:	46bd      	mov	sp, r7
 801bd5c:	bd80      	pop	{r7, pc}
 801bd5e:	bf00      	nop
 801bd60:	0801dcbc 	.word	0x0801dcbc

0801bd64 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b08a      	sub	sp, #40	; 0x28
 801bd68:	af02      	add	r7, sp, #8
 801bd6a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd6c:	2300      	movs	r3, #0
 801bd6e:	61bb      	str	r3, [r7, #24]
 801bd70:	2300      	movs	r3, #0
 801bd72:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd74:	2300      	movs	r3, #0
 801bd76:	613b      	str	r3, [r7, #16]
 801bd78:	2300      	movs	r3, #0
 801bd7a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd7c:	4b14      	ldr	r3, [pc, #80]	; (801bdd0 <SysTimeGet+0x6c>)
 801bd7e:	691b      	ldr	r3, [r3, #16]
 801bd80:	f107 0218 	add.w	r2, r7, #24
 801bd84:	3204      	adds	r2, #4
 801bd86:	4610      	mov	r0, r2
 801bd88:	4798      	blx	r3
 801bd8a:	4603      	mov	r3, r0
 801bd8c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bd8e:	4b10      	ldr	r3, [pc, #64]	; (801bdd0 <SysTimeGet+0x6c>)
 801bd90:	68db      	ldr	r3, [r3, #12]
 801bd92:	4798      	blx	r3
 801bd94:	4603      	mov	r3, r0
 801bd96:	b21b      	sxth	r3, r3
 801bd98:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bd9a:	4b0d      	ldr	r3, [pc, #52]	; (801bdd0 <SysTimeGet+0x6c>)
 801bd9c:	685b      	ldr	r3, [r3, #4]
 801bd9e:	4798      	blx	r3
 801bda0:	4603      	mov	r3, r0
 801bda2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801bda4:	f107 0010 	add.w	r0, r7, #16
 801bda8:	69fb      	ldr	r3, [r7, #28]
 801bdaa:	9300      	str	r3, [sp, #0]
 801bdac:	69bb      	ldr	r3, [r7, #24]
 801bdae:	f107 0208 	add.w	r2, r7, #8
 801bdb2:	ca06      	ldmia	r2, {r1, r2}
 801bdb4:	f7ff ff36 	bl	801bc24 <SysTimeAdd>

  return sysTime;
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	461a      	mov	r2, r3
 801bdbc:	f107 0310 	add.w	r3, r7, #16
 801bdc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bdc4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bdc8:	6878      	ldr	r0, [r7, #4]
 801bdca:	3720      	adds	r7, #32
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}
 801bdd0:	0801dcbc 	.word	0x0801dcbc

0801bdd4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b084      	sub	sp, #16
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bddc:	2300      	movs	r3, #0
 801bdde:	60bb      	str	r3, [r7, #8]
 801bde0:	2300      	movs	r3, #0
 801bde2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bde4:	4b0a      	ldr	r3, [pc, #40]	; (801be10 <SysTimeGetMcuTime+0x3c>)
 801bde6:	691b      	ldr	r3, [r3, #16]
 801bde8:	f107 0208 	add.w	r2, r7, #8
 801bdec:	3204      	adds	r2, #4
 801bdee:	4610      	mov	r0, r2
 801bdf0:	4798      	blx	r3
 801bdf2:	4603      	mov	r3, r0
 801bdf4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	461a      	mov	r2, r3
 801bdfa:	f107 0308 	add.w	r3, r7, #8
 801bdfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be02:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801be06:	6878      	ldr	r0, [r7, #4]
 801be08:	3710      	adds	r7, #16
 801be0a:	46bd      	mov	sp, r7
 801be0c:	bd80      	pop	{r7, pc}
 801be0e:	bf00      	nop
 801be10:	0801dcbc 	.word	0x0801dcbc

0801be14 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b088      	sub	sp, #32
 801be18:	af02      	add	r7, sp, #8
 801be1a:	463b      	mov	r3, r7
 801be1c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801be20:	4b0f      	ldr	r3, [pc, #60]	; (801be60 <SysTimeToMs+0x4c>)
 801be22:	68db      	ldr	r3, [r3, #12]
 801be24:	4798      	blx	r3
 801be26:	4603      	mov	r3, r0
 801be28:	b21b      	sxth	r3, r3
 801be2a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801be2c:	4b0c      	ldr	r3, [pc, #48]	; (801be60 <SysTimeToMs+0x4c>)
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	4798      	blx	r3
 801be32:	4603      	mov	r3, r0
 801be34:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801be36:	f107 0008 	add.w	r0, r7, #8
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	9300      	str	r3, [sp, #0]
 801be3e:	693b      	ldr	r3, [r7, #16]
 801be40:	463a      	mov	r2, r7
 801be42:	ca06      	ldmia	r2, {r1, r2}
 801be44:	f7ff ff27 	bl	801bc96 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801be4e:	fb02 f303 	mul.w	r3, r2, r3
 801be52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801be56:	4413      	add	r3, r2
}
 801be58:	4618      	mov	r0, r3
 801be5a:	3718      	adds	r7, #24
 801be5c:	46bd      	mov	sp, r7
 801be5e:	bd80      	pop	{r7, pc}
 801be60:	0801dcbc 	.word	0x0801dcbc

0801be64 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801be64:	b580      	push	{r7, lr}
 801be66:	b08a      	sub	sp, #40	; 0x28
 801be68:	af02      	add	r7, sp, #8
 801be6a:	6078      	str	r0, [r7, #4]
 801be6c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	4a19      	ldr	r2, [pc, #100]	; (801bed8 <SysTimeFromMs+0x74>)
 801be72:	fba2 2303 	umull	r2, r3, r2, r3
 801be76:	099b      	lsrs	r3, r3, #6
 801be78:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801be7a:	69fb      	ldr	r3, [r7, #28]
 801be7c:	617b      	str	r3, [r7, #20]
 801be7e:	683b      	ldr	r3, [r7, #0]
 801be80:	b29a      	uxth	r2, r3
 801be82:	69fb      	ldr	r3, [r7, #28]
 801be84:	b29b      	uxth	r3, r3
 801be86:	4619      	mov	r1, r3
 801be88:	0149      	lsls	r1, r1, #5
 801be8a:	1ac9      	subs	r1, r1, r3
 801be8c:	0089      	lsls	r1, r1, #2
 801be8e:	440b      	add	r3, r1
 801be90:	00db      	lsls	r3, r3, #3
 801be92:	b29b      	uxth	r3, r3
 801be94:	1ad3      	subs	r3, r2, r3
 801be96:	b29b      	uxth	r3, r3
 801be98:	b21b      	sxth	r3, r3
 801be9a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801be9c:	f107 030c 	add.w	r3, r7, #12
 801bea0:	2200      	movs	r2, #0
 801bea2:	601a      	str	r2, [r3, #0]
 801bea4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bea6:	4b0d      	ldr	r3, [pc, #52]	; (801bedc <SysTimeFromMs+0x78>)
 801bea8:	68db      	ldr	r3, [r3, #12]
 801beaa:	4798      	blx	r3
 801beac:	4603      	mov	r3, r0
 801beae:	b21b      	sxth	r3, r3
 801beb0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801beb2:	4b0a      	ldr	r3, [pc, #40]	; (801bedc <SysTimeFromMs+0x78>)
 801beb4:	685b      	ldr	r3, [r3, #4]
 801beb6:	4798      	blx	r3
 801beb8:	4603      	mov	r3, r0
 801beba:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801bebc:	6878      	ldr	r0, [r7, #4]
 801bebe:	693b      	ldr	r3, [r7, #16]
 801bec0:	9300      	str	r3, [sp, #0]
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	f107 0214 	add.w	r2, r7, #20
 801bec8:	ca06      	ldmia	r2, {r1, r2}
 801beca:	f7ff feab 	bl	801bc24 <SysTimeAdd>
}
 801bece:	6878      	ldr	r0, [r7, #4]
 801bed0:	3720      	adds	r7, #32
 801bed2:	46bd      	mov	sp, r7
 801bed4:	bd80      	pop	{r7, pc}
 801bed6:	bf00      	nop
 801bed8:	10624dd3 	.word	0x10624dd3
 801bedc:	0801dcbc 	.word	0x0801dcbc

0801bee0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801bee0:	b480      	push	{r7}
 801bee2:	b085      	sub	sp, #20
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801bee8:	2300      	movs	r3, #0
 801beea:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801beec:	e00e      	b.n	801bf0c <ee_skip_atoi+0x2c>
 801beee:	68fa      	ldr	r2, [r7, #12]
 801bef0:	4613      	mov	r3, r2
 801bef2:	009b      	lsls	r3, r3, #2
 801bef4:	4413      	add	r3, r2
 801bef6:	005b      	lsls	r3, r3, #1
 801bef8:	4618      	mov	r0, r3
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	1c59      	adds	r1, r3, #1
 801bf00:	687a      	ldr	r2, [r7, #4]
 801bf02:	6011      	str	r1, [r2, #0]
 801bf04:	781b      	ldrb	r3, [r3, #0]
 801bf06:	4403      	add	r3, r0
 801bf08:	3b30      	subs	r3, #48	; 0x30
 801bf0a:	60fb      	str	r3, [r7, #12]
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	781b      	ldrb	r3, [r3, #0]
 801bf12:	2b2f      	cmp	r3, #47	; 0x2f
 801bf14:	d904      	bls.n	801bf20 <ee_skip_atoi+0x40>
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	781b      	ldrb	r3, [r3, #0]
 801bf1c:	2b39      	cmp	r3, #57	; 0x39
 801bf1e:	d9e6      	bls.n	801beee <ee_skip_atoi+0xe>
  return i;
 801bf20:	68fb      	ldr	r3, [r7, #12]
}
 801bf22:	4618      	mov	r0, r3
 801bf24:	3714      	adds	r7, #20
 801bf26:	46bd      	mov	sp, r7
 801bf28:	bc80      	pop	{r7}
 801bf2a:	4770      	bx	lr

0801bf2c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bf2c:	b480      	push	{r7}
 801bf2e:	b099      	sub	sp, #100	; 0x64
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	60f8      	str	r0, [r7, #12]
 801bf34:	60b9      	str	r1, [r7, #8]
 801bf36:	607a      	str	r2, [r7, #4]
 801bf38:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bf3a:	4b71      	ldr	r3, [pc, #452]	; (801c100 <ee_number+0x1d4>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bf40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bf42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d002      	beq.n	801bf50 <ee_number+0x24>
 801bf4a:	4b6e      	ldr	r3, [pc, #440]	; (801c104 <ee_number+0x1d8>)
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bf50:	683b      	ldr	r3, [r7, #0]
 801bf52:	2b01      	cmp	r3, #1
 801bf54:	dd02      	ble.n	801bf5c <ee_number+0x30>
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	2b24      	cmp	r3, #36	; 0x24
 801bf5a:	dd01      	ble.n	801bf60 <ee_number+0x34>
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	e0ca      	b.n	801c0f6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bf60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bf62:	f003 0301 	and.w	r3, r3, #1
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d001      	beq.n	801bf6e <ee_number+0x42>
 801bf6a:	2330      	movs	r3, #48	; 0x30
 801bf6c:	e000      	b.n	801bf70 <ee_number+0x44>
 801bf6e:	2320      	movs	r3, #32
 801bf70:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801bf74:	2300      	movs	r3, #0
 801bf76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801bf7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bf7c:	f003 0302 	and.w	r3, r3, #2
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d00b      	beq.n	801bf9c <ee_number+0x70>
  {
    if (num < 0)
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	da08      	bge.n	801bf9c <ee_number+0x70>
    {
      sign = '-';
 801bf8a:	232d      	movs	r3, #45	; 0x2d
 801bf8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	425b      	negs	r3, r3
 801bf94:	607b      	str	r3, [r7, #4]
      size--;
 801bf96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bf98:	3b01      	subs	r3, #1
 801bf9a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d11e      	bne.n	801bfe4 <ee_number+0xb8>
    tmp[i++] = '0';
 801bfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bfa8:	1c5a      	adds	r2, r3, #1
 801bfaa:	657a      	str	r2, [r7, #84]	; 0x54
 801bfac:	3360      	adds	r3, #96	; 0x60
 801bfae:	443b      	add	r3, r7
 801bfb0:	2230      	movs	r2, #48	; 0x30
 801bfb2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bfb6:	e018      	b.n	801bfea <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	683a      	ldr	r2, [r7, #0]
 801bfbc:	fbb3 f1f2 	udiv	r1, r3, r2
 801bfc0:	fb01 f202 	mul.w	r2, r1, r2
 801bfc4:	1a9b      	subs	r3, r3, r2
 801bfc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bfc8:	441a      	add	r2, r3
 801bfca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bfcc:	1c59      	adds	r1, r3, #1
 801bfce:	6579      	str	r1, [r7, #84]	; 0x54
 801bfd0:	7812      	ldrb	r2, [r2, #0]
 801bfd2:	3360      	adds	r3, #96	; 0x60
 801bfd4:	443b      	add	r3, r7
 801bfd6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bfda:	687a      	ldr	r2, [r7, #4]
 801bfdc:	683b      	ldr	r3, [r7, #0]
 801bfde:	fbb2 f3f3 	udiv	r3, r2, r3
 801bfe2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d1e6      	bne.n	801bfb8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bfea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bfec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfee:	429a      	cmp	r2, r3
 801bff0:	dd01      	ble.n	801bff6 <ee_number+0xca>
 801bff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bff4:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801bff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bffa:	1ad3      	subs	r3, r2, r3
 801bffc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c000:	f003 0301 	and.w	r3, r3, #1
 801c004:	2b00      	cmp	r3, #0
 801c006:	d112      	bne.n	801c02e <ee_number+0x102>
 801c008:	e00c      	b.n	801c024 <ee_number+0xf8>
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	1c5a      	adds	r2, r3, #1
 801c00e:	60fa      	str	r2, [r7, #12]
 801c010:	2220      	movs	r2, #32
 801c012:	701a      	strb	r2, [r3, #0]
 801c014:	68bb      	ldr	r3, [r7, #8]
 801c016:	3b01      	subs	r3, #1
 801c018:	60bb      	str	r3, [r7, #8]
 801c01a:	68bb      	ldr	r3, [r7, #8]
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d101      	bne.n	801c024 <ee_number+0xf8>
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	e068      	b.n	801c0f6 <ee_number+0x1ca>
 801c024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c026:	1e5a      	subs	r2, r3, #1
 801c028:	66ba      	str	r2, [r7, #104]	; 0x68
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	dced      	bgt.n	801c00a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c02e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c032:	2b00      	cmp	r3, #0
 801c034:	d01b      	beq.n	801c06e <ee_number+0x142>
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	1c5a      	adds	r2, r3, #1
 801c03a:	60fa      	str	r2, [r7, #12]
 801c03c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c040:	701a      	strb	r2, [r3, #0]
 801c042:	68bb      	ldr	r3, [r7, #8]
 801c044:	3b01      	subs	r3, #1
 801c046:	60bb      	str	r3, [r7, #8]
 801c048:	68bb      	ldr	r3, [r7, #8]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d10f      	bne.n	801c06e <ee_number+0x142>
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	e051      	b.n	801c0f6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	1c5a      	adds	r2, r3, #1
 801c056:	60fa      	str	r2, [r7, #12]
 801c058:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c05c:	701a      	strb	r2, [r3, #0]
 801c05e:	68bb      	ldr	r3, [r7, #8]
 801c060:	3b01      	subs	r3, #1
 801c062:	60bb      	str	r3, [r7, #8]
 801c064:	68bb      	ldr	r3, [r7, #8]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d101      	bne.n	801c06e <ee_number+0x142>
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	e043      	b.n	801c0f6 <ee_number+0x1ca>
 801c06e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c070:	1e5a      	subs	r2, r3, #1
 801c072:	66ba      	str	r2, [r7, #104]	; 0x68
 801c074:	2b00      	cmp	r3, #0
 801c076:	dcec      	bgt.n	801c052 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c078:	e00c      	b.n	801c094 <ee_number+0x168>
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	1c5a      	adds	r2, r3, #1
 801c07e:	60fa      	str	r2, [r7, #12]
 801c080:	2230      	movs	r2, #48	; 0x30
 801c082:	701a      	strb	r2, [r3, #0]
 801c084:	68bb      	ldr	r3, [r7, #8]
 801c086:	3b01      	subs	r3, #1
 801c088:	60bb      	str	r3, [r7, #8]
 801c08a:	68bb      	ldr	r3, [r7, #8]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d101      	bne.n	801c094 <ee_number+0x168>
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	e030      	b.n	801c0f6 <ee_number+0x1ca>
 801c094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c096:	1e5a      	subs	r2, r3, #1
 801c098:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c09a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c09c:	429a      	cmp	r2, r3
 801c09e:	dbec      	blt.n	801c07a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c0a0:	e010      	b.n	801c0c4 <ee_number+0x198>
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	1c5a      	adds	r2, r3, #1
 801c0a6:	60fa      	str	r2, [r7, #12]
 801c0a8:	f107 0110 	add.w	r1, r7, #16
 801c0ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c0ae:	440a      	add	r2, r1
 801c0b0:	7812      	ldrb	r2, [r2, #0]
 801c0b2:	701a      	strb	r2, [r3, #0]
 801c0b4:	68bb      	ldr	r3, [r7, #8]
 801c0b6:	3b01      	subs	r3, #1
 801c0b8:	60bb      	str	r3, [r7, #8]
 801c0ba:	68bb      	ldr	r3, [r7, #8]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d101      	bne.n	801c0c4 <ee_number+0x198>
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	e018      	b.n	801c0f6 <ee_number+0x1ca>
 801c0c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c0c6:	1e5a      	subs	r2, r3, #1
 801c0c8:	657a      	str	r2, [r7, #84]	; 0x54
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	dce9      	bgt.n	801c0a2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c0ce:	e00c      	b.n	801c0ea <ee_number+0x1be>
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	1c5a      	adds	r2, r3, #1
 801c0d4:	60fa      	str	r2, [r7, #12]
 801c0d6:	2220      	movs	r2, #32
 801c0d8:	701a      	strb	r2, [r3, #0]
 801c0da:	68bb      	ldr	r3, [r7, #8]
 801c0dc:	3b01      	subs	r3, #1
 801c0de:	60bb      	str	r3, [r7, #8]
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d101      	bne.n	801c0ea <ee_number+0x1be>
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	e005      	b.n	801c0f6 <ee_number+0x1ca>
 801c0ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c0ec:	1e5a      	subs	r2, r3, #1
 801c0ee:	66ba      	str	r2, [r7, #104]	; 0x68
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	dced      	bgt.n	801c0d0 <ee_number+0x1a4>

  return str;
 801c0f4:	68fb      	ldr	r3, [r7, #12]
}
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	3764      	adds	r7, #100	; 0x64
 801c0fa:	46bd      	mov	sp, r7
 801c0fc:	bc80      	pop	{r7}
 801c0fe:	4770      	bx	lr
 801c100:	20000148 	.word	0x20000148
 801c104:	2000014c 	.word	0x2000014c

0801c108 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c108:	b580      	push	{r7, lr}
 801c10a:	b092      	sub	sp, #72	; 0x48
 801c10c:	af04      	add	r7, sp, #16
 801c10e:	60f8      	str	r0, [r7, #12]
 801c110:	60b9      	str	r1, [r7, #8]
 801c112:	607a      	str	r2, [r7, #4]
 801c114:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c116:	68bb      	ldr	r3, [r7, #8]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	dc01      	bgt.n	801c120 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c11c:	2300      	movs	r3, #0
 801c11e:	e142      	b.n	801c3a6 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c124:	e12a      	b.n	801c37c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	1ad2      	subs	r2, r2, r3
 801c12c:	68bb      	ldr	r3, [r7, #8]
 801c12e:	3b01      	subs	r3, #1
 801c130:	429a      	cmp	r2, r3
 801c132:	f280 8131 	bge.w	801c398 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	781b      	ldrb	r3, [r3, #0]
 801c13a:	2b25      	cmp	r3, #37	; 0x25
 801c13c:	d006      	beq.n	801c14c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c13e:	687a      	ldr	r2, [r7, #4]
 801c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c142:	1c59      	adds	r1, r3, #1
 801c144:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c146:	7812      	ldrb	r2, [r2, #0]
 801c148:	701a      	strb	r2, [r3, #0]
      continue;
 801c14a:	e114      	b.n	801c376 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801c14c:	2300      	movs	r3, #0
 801c14e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	3301      	adds	r3, #1
 801c154:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	781b      	ldrb	r3, [r3, #0]
 801c15a:	2b30      	cmp	r3, #48	; 0x30
 801c15c:	d103      	bne.n	801c166 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c15e:	6a3b      	ldr	r3, [r7, #32]
 801c160:	f043 0301 	orr.w	r3, r3, #1
 801c164:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c166:	f04f 33ff 	mov.w	r3, #4294967295
 801c16a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	781b      	ldrb	r3, [r3, #0]
 801c170:	2b2f      	cmp	r3, #47	; 0x2f
 801c172:	d908      	bls.n	801c186 <tiny_vsnprintf_like+0x7e>
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	781b      	ldrb	r3, [r3, #0]
 801c178:	2b39      	cmp	r3, #57	; 0x39
 801c17a:	d804      	bhi.n	801c186 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c17c:	1d3b      	adds	r3, r7, #4
 801c17e:	4618      	mov	r0, r3
 801c180:	f7ff feae 	bl	801bee0 <ee_skip_atoi>
 801c184:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c186:	f04f 33ff 	mov.w	r3, #4294967295
 801c18a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c18c:	f04f 33ff 	mov.w	r3, #4294967295
 801c190:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c192:	230a      	movs	r3, #10
 801c194:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	781b      	ldrb	r3, [r3, #0]
 801c19a:	3b58      	subs	r3, #88	; 0x58
 801c19c:	2b20      	cmp	r3, #32
 801c19e:	f200 8094 	bhi.w	801c2ca <tiny_vsnprintf_like+0x1c2>
 801c1a2:	a201      	add	r2, pc, #4	; (adr r2, 801c1a8 <tiny_vsnprintf_like+0xa0>)
 801c1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1a8:	0801c2b3 	.word	0x0801c2b3
 801c1ac:	0801c2cb 	.word	0x0801c2cb
 801c1b0:	0801c2cb 	.word	0x0801c2cb
 801c1b4:	0801c2cb 	.word	0x0801c2cb
 801c1b8:	0801c2cb 	.word	0x0801c2cb
 801c1bc:	0801c2cb 	.word	0x0801c2cb
 801c1c0:	0801c2cb 	.word	0x0801c2cb
 801c1c4:	0801c2cb 	.word	0x0801c2cb
 801c1c8:	0801c2cb 	.word	0x0801c2cb
 801c1cc:	0801c2cb 	.word	0x0801c2cb
 801c1d0:	0801c2cb 	.word	0x0801c2cb
 801c1d4:	0801c237 	.word	0x0801c237
 801c1d8:	0801c2c1 	.word	0x0801c2c1
 801c1dc:	0801c2cb 	.word	0x0801c2cb
 801c1e0:	0801c2cb 	.word	0x0801c2cb
 801c1e4:	0801c2cb 	.word	0x0801c2cb
 801c1e8:	0801c2cb 	.word	0x0801c2cb
 801c1ec:	0801c2c1 	.word	0x0801c2c1
 801c1f0:	0801c2cb 	.word	0x0801c2cb
 801c1f4:	0801c2cb 	.word	0x0801c2cb
 801c1f8:	0801c2cb 	.word	0x0801c2cb
 801c1fc:	0801c2cb 	.word	0x0801c2cb
 801c200:	0801c2cb 	.word	0x0801c2cb
 801c204:	0801c2cb 	.word	0x0801c2cb
 801c208:	0801c2cb 	.word	0x0801c2cb
 801c20c:	0801c2cb 	.word	0x0801c2cb
 801c210:	0801c2cb 	.word	0x0801c2cb
 801c214:	0801c257 	.word	0x0801c257
 801c218:	0801c2cb 	.word	0x0801c2cb
 801c21c:	0801c317 	.word	0x0801c317
 801c220:	0801c2cb 	.word	0x0801c2cb
 801c224:	0801c2cb 	.word	0x0801c2cb
 801c228:	0801c2bb 	.word	0x0801c2bb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c22e:	1c5a      	adds	r2, r3, #1
 801c230:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c232:	2220      	movs	r2, #32
 801c234:	701a      	strb	r2, [r3, #0]
 801c236:	69fb      	ldr	r3, [r7, #28]
 801c238:	3b01      	subs	r3, #1
 801c23a:	61fb      	str	r3, [r7, #28]
 801c23c:	69fb      	ldr	r3, [r7, #28]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	dcf4      	bgt.n	801c22c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	1d1a      	adds	r2, r3, #4
 801c246:	603a      	str	r2, [r7, #0]
 801c248:	6819      	ldr	r1, [r3, #0]
 801c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c24c:	1c5a      	adds	r2, r3, #1
 801c24e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c250:	b2ca      	uxtb	r2, r1
 801c252:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c254:	e08f      	b.n	801c376 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801c256:	683b      	ldr	r3, [r7, #0]
 801c258:	1d1a      	adds	r2, r3, #4
 801c25a:	603a      	str	r2, [r7, #0]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c262:	2b00      	cmp	r3, #0
 801c264:	d101      	bne.n	801c26a <tiny_vsnprintf_like+0x162>
 801c266:	4b52      	ldr	r3, [pc, #328]	; (801c3b0 <tiny_vsnprintf_like+0x2a8>)
 801c268:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c26c:	f7e3 ff84 	bl	8000178 <strlen>
 801c270:	4603      	mov	r3, r0
 801c272:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c274:	e004      	b.n	801c280 <tiny_vsnprintf_like+0x178>
 801c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c278:	1c5a      	adds	r2, r3, #1
 801c27a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c27c:	2220      	movs	r2, #32
 801c27e:	701a      	strb	r2, [r3, #0]
 801c280:	69fb      	ldr	r3, [r7, #28]
 801c282:	1e5a      	subs	r2, r3, #1
 801c284:	61fa      	str	r2, [r7, #28]
 801c286:	693a      	ldr	r2, [r7, #16]
 801c288:	429a      	cmp	r2, r3
 801c28a:	dbf4      	blt.n	801c276 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c28c:	2300      	movs	r3, #0
 801c28e:	62bb      	str	r3, [r7, #40]	; 0x28
 801c290:	e00a      	b.n	801c2a8 <tiny_vsnprintf_like+0x1a0>
 801c292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c294:	1c53      	adds	r3, r2, #1
 801c296:	627b      	str	r3, [r7, #36]	; 0x24
 801c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c29a:	1c59      	adds	r1, r3, #1
 801c29c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c29e:	7812      	ldrb	r2, [r2, #0]
 801c2a0:	701a      	strb	r2, [r3, #0]
 801c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2a4:	3301      	adds	r3, #1
 801c2a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801c2a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c2aa:	693b      	ldr	r3, [r7, #16]
 801c2ac:	429a      	cmp	r2, r3
 801c2ae:	dbf0      	blt.n	801c292 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c2b0:	e061      	b.n	801c376 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c2b2:	6a3b      	ldr	r3, [r7, #32]
 801c2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2b8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c2ba:	2310      	movs	r3, #16
 801c2bc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801c2be:	e02d      	b.n	801c31c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c2c0:	6a3b      	ldr	r3, [r7, #32]
 801c2c2:	f043 0302 	orr.w	r3, r3, #2
 801c2c6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c2c8:	e025      	b.n	801c316 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	781b      	ldrb	r3, [r3, #0]
 801c2ce:	2b25      	cmp	r3, #37	; 0x25
 801c2d0:	d004      	beq.n	801c2dc <tiny_vsnprintf_like+0x1d4>
 801c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2d4:	1c5a      	adds	r2, r3, #1
 801c2d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c2d8:	2225      	movs	r2, #37	; 0x25
 801c2da:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	1ad2      	subs	r2, r2, r3
 801c2e2:	68bb      	ldr	r3, [r7, #8]
 801c2e4:	3b01      	subs	r3, #1
 801c2e6:	429a      	cmp	r2, r3
 801c2e8:	da17      	bge.n	801c31a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	781b      	ldrb	r3, [r3, #0]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d006      	beq.n	801c300 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c2f2:	687a      	ldr	r2, [r7, #4]
 801c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2f6:	1c59      	adds	r1, r3, #1
 801c2f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c2fa:	7812      	ldrb	r2, [r2, #0]
 801c2fc:	701a      	strb	r2, [r3, #0]
 801c2fe:	e002      	b.n	801c306 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	3b01      	subs	r3, #1
 801c304:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	1ad2      	subs	r2, r2, r3
 801c30c:	68bb      	ldr	r3, [r7, #8]
 801c30e:	3b01      	subs	r3, #1
 801c310:	429a      	cmp	r2, r3
 801c312:	db2f      	blt.n	801c374 <tiny_vsnprintf_like+0x26c>
 801c314:	e002      	b.n	801c31c <tiny_vsnprintf_like+0x214>
        break;
 801c316:	bf00      	nop
 801c318:	e000      	b.n	801c31c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801c31a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c31c:	697b      	ldr	r3, [r7, #20]
 801c31e:	2b6c      	cmp	r3, #108	; 0x6c
 801c320:	d105      	bne.n	801c32e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801c322:	683b      	ldr	r3, [r7, #0]
 801c324:	1d1a      	adds	r2, r3, #4
 801c326:	603a      	str	r2, [r7, #0]
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	637b      	str	r3, [r7, #52]	; 0x34
 801c32c:	e00f      	b.n	801c34e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801c32e:	6a3b      	ldr	r3, [r7, #32]
 801c330:	f003 0302 	and.w	r3, r3, #2
 801c334:	2b00      	cmp	r3, #0
 801c336:	d005      	beq.n	801c344 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	1d1a      	adds	r2, r3, #4
 801c33c:	603a      	str	r2, [r7, #0]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	637b      	str	r3, [r7, #52]	; 0x34
 801c342:	e004      	b.n	801c34e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801c344:	683b      	ldr	r3, [r7, #0]
 801c346:	1d1a      	adds	r2, r3, #4
 801c348:	603a      	str	r2, [r7, #0]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c34e:	68bb      	ldr	r3, [r7, #8]
 801c350:	1e5a      	subs	r2, r3, #1
 801c352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	1acb      	subs	r3, r1, r3
 801c358:	1ad1      	subs	r1, r2, r3
 801c35a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c35c:	6a3b      	ldr	r3, [r7, #32]
 801c35e:	9302      	str	r3, [sp, #8]
 801c360:	69bb      	ldr	r3, [r7, #24]
 801c362:	9301      	str	r3, [sp, #4]
 801c364:	69fb      	ldr	r3, [r7, #28]
 801c366:	9300      	str	r3, [sp, #0]
 801c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c36a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c36c:	f7ff fdde 	bl	801bf2c <ee_number>
 801c370:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c372:	e000      	b.n	801c376 <tiny_vsnprintf_like+0x26e>
        continue;
 801c374:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	3301      	adds	r3, #1
 801c37a:	607b      	str	r3, [r7, #4]
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	781b      	ldrb	r3, [r3, #0]
 801c380:	2b00      	cmp	r3, #0
 801c382:	f47f aed0 	bne.w	801c126 <tiny_vsnprintf_like+0x1e>
 801c386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	1ad2      	subs	r2, r2, r3
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	3b01      	subs	r3, #1
 801c390:	429a      	cmp	r2, r3
 801c392:	f6bf aec8 	bge.w	801c126 <tiny_vsnprintf_like+0x1e>
 801c396:	e000      	b.n	801c39a <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801c398:	bf00      	nop
  }

  *str = '\0';
 801c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c39c:	2200      	movs	r2, #0
 801c39e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	1ad3      	subs	r3, r2, r3
}
 801c3a6:	4618      	mov	r0, r3
 801c3a8:	3738      	adds	r7, #56	; 0x38
 801c3aa:	46bd      	mov	sp, r7
 801c3ac:	bd80      	pop	{r7, pc}
 801c3ae:	bf00      	nop
 801c3b0:	0801dbd0 	.word	0x0801dbd0

0801c3b4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b090      	sub	sp, #64	; 0x40
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c3bc:	4b73      	ldr	r3, [pc, #460]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c3c2:	4b72      	ldr	r3, [pc, #456]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c3c4:	681a      	ldr	r2, [r3, #0]
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	4013      	ands	r3, r2
 801c3ca:	4a70      	ldr	r2, [pc, #448]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c3cc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c3ce:	4b70      	ldr	r3, [pc, #448]	; (801c590 <UTIL_SEQ_Run+0x1dc>)
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c3d4:	4b6f      	ldr	r3, [pc, #444]	; (801c594 <UTIL_SEQ_Run+0x1e0>)
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c3da:	4b6f      	ldr	r3, [pc, #444]	; (801c598 <UTIL_SEQ_Run+0x1e4>)
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801c3e0:	4b6e      	ldr	r3, [pc, #440]	; (801c59c <UTIL_SEQ_Run+0x1e8>)
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c3e6:	e08d      	b.n	801c504 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c3ec:	e002      	b.n	801c3f4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3f0:	3301      	adds	r3, #1
 801c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c3f4:	4a6a      	ldr	r2, [pc, #424]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3fe:	401a      	ands	r2, r3
 801c400:	4b62      	ldr	r3, [pc, #392]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	4013      	ands	r3, r2
 801c406:	2b00      	cmp	r3, #0
 801c408:	d0f1      	beq.n	801c3ee <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c40a:	4a65      	ldr	r2, [pc, #404]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c40e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c414:	401a      	ands	r2, r3
 801c416:	4b5d      	ldr	r3, [pc, #372]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	4013      	ands	r3, r2
 801c41c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c41e:	4a60      	ldr	r2, [pc, #384]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c422:	00db      	lsls	r3, r3, #3
 801c424:	4413      	add	r3, r2
 801c426:	685a      	ldr	r2, [r3, #4]
 801c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c42a:	4013      	ands	r3, r2
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d106      	bne.n	801c43e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c430:	4a5b      	ldr	r2, [pc, #364]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c434:	00db      	lsls	r3, r3, #3
 801c436:	4413      	add	r3, r2
 801c438:	f04f 32ff 	mov.w	r2, #4294967295
 801c43c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c43e:	4a58      	ldr	r2, [pc, #352]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c442:	00db      	lsls	r3, r3, #3
 801c444:	4413      	add	r3, r2
 801c446:	685a      	ldr	r2, [r3, #4]
 801c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c44a:	4013      	ands	r3, r2
 801c44c:	4618      	mov	r0, r3
 801c44e:	f000 f907 	bl	801c660 <SEQ_BitPosition>
 801c452:	4603      	mov	r3, r0
 801c454:	461a      	mov	r2, r3
 801c456:	4b53      	ldr	r3, [pc, #332]	; (801c5a4 <UTIL_SEQ_Run+0x1f0>)
 801c458:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c45a:	4a51      	ldr	r2, [pc, #324]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c45e:	00db      	lsls	r3, r3, #3
 801c460:	4413      	add	r3, r2
 801c462:	685a      	ldr	r2, [r3, #4]
 801c464:	4b4f      	ldr	r3, [pc, #316]	; (801c5a4 <UTIL_SEQ_Run+0x1f0>)
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	2101      	movs	r1, #1
 801c46a:	fa01 f303 	lsl.w	r3, r1, r3
 801c46e:	43db      	mvns	r3, r3
 801c470:	401a      	ands	r2, r3
 801c472:	494b      	ldr	r1, [pc, #300]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c476:	00db      	lsls	r3, r3, #3
 801c478:	440b      	add	r3, r1
 801c47a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c47c:	f3ef 8310 	mrs	r3, PRIMASK
 801c480:	61bb      	str	r3, [r7, #24]
  return(result);
 801c482:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c484:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c486:	b672      	cpsid	i
}
 801c488:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c48a:	4b46      	ldr	r3, [pc, #280]	; (801c5a4 <UTIL_SEQ_Run+0x1f0>)
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	2201      	movs	r2, #1
 801c490:	fa02 f303 	lsl.w	r3, r2, r3
 801c494:	43da      	mvns	r2, r3
 801c496:	4b3e      	ldr	r3, [pc, #248]	; (801c590 <UTIL_SEQ_Run+0x1dc>)
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	4013      	ands	r3, r2
 801c49c:	4a3c      	ldr	r2, [pc, #240]	; (801c590 <UTIL_SEQ_Run+0x1dc>)
 801c49e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c4a0:	2301      	movs	r3, #1
 801c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c4a4:	e013      	b.n	801c4ce <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4a8:	3b01      	subs	r3, #1
 801c4aa:	4a3d      	ldr	r2, [pc, #244]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c4ac:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c4b0:	4b3c      	ldr	r3, [pc, #240]	; (801c5a4 <UTIL_SEQ_Run+0x1f0>)
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	2201      	movs	r2, #1
 801c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 801c4ba:	43da      	mvns	r2, r3
 801c4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	400a      	ands	r2, r1
 801c4c2:	4937      	ldr	r1, [pc, #220]	; (801c5a0 <UTIL_SEQ_Run+0x1ec>)
 801c4c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4ca:	3b01      	subs	r3, #1
 801c4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d1e8      	bne.n	801c4a6 <UTIL_SEQ_Run+0xf2>
 801c4d4:	6a3b      	ldr	r3, [r7, #32]
 801c4d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4d8:	697b      	ldr	r3, [r7, #20]
 801c4da:	f383 8810 	msr	PRIMASK, r3
}
 801c4de:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c4e0:	4b30      	ldr	r3, [pc, #192]	; (801c5a4 <UTIL_SEQ_Run+0x1f0>)
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	4a30      	ldr	r2, [pc, #192]	; (801c5a8 <UTIL_SEQ_Run+0x1f4>)
 801c4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c4ea:	4798      	blx	r3

    local_taskset = TaskSet;
 801c4ec:	4b28      	ldr	r3, [pc, #160]	; (801c590 <UTIL_SEQ_Run+0x1dc>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801c4f2:	4b28      	ldr	r3, [pc, #160]	; (801c594 <UTIL_SEQ_Run+0x1e0>)
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801c4f8:	4b27      	ldr	r3, [pc, #156]	; (801c598 <UTIL_SEQ_Run+0x1e4>)
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801c4fe:	4b27      	ldr	r3, [pc, #156]	; (801c59c <UTIL_SEQ_Run+0x1e8>)
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c508:	401a      	ands	r2, r3
 801c50a:	4b20      	ldr	r3, [pc, #128]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	4013      	ands	r3, r2
 801c510:	2b00      	cmp	r3, #0
 801c512:	d005      	beq.n	801c520 <UTIL_SEQ_Run+0x16c>
 801c514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c518:	4013      	ands	r3, r2
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	f43f af64 	beq.w	801c3e8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c520:	4b20      	ldr	r3, [pc, #128]	; (801c5a4 <UTIL_SEQ_Run+0x1f0>)
 801c522:	f04f 32ff 	mov.w	r2, #4294967295
 801c526:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c528:	f000 f88e 	bl	801c648 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c52c:	f3ef 8310 	mrs	r3, PRIMASK
 801c530:	613b      	str	r3, [r7, #16]
  return(result);
 801c532:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c536:	b672      	cpsid	i
}
 801c538:	bf00      	nop
  local_taskset = TaskSet;
 801c53a:	4b15      	ldr	r3, [pc, #84]	; (801c590 <UTIL_SEQ_Run+0x1dc>)
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c540:	4b14      	ldr	r3, [pc, #80]	; (801c594 <UTIL_SEQ_Run+0x1e0>)
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c546:	4b14      	ldr	r3, [pc, #80]	; (801c598 <UTIL_SEQ_Run+0x1e4>)
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c54c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c550:	401a      	ands	r2, r3
 801c552:	4b0e      	ldr	r3, [pc, #56]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	4013      	ands	r3, r2
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d107      	bne.n	801c56c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c55c:	4b0f      	ldr	r3, [pc, #60]	; (801c59c <UTIL_SEQ_Run+0x1e8>)
 801c55e:	681a      	ldr	r2, [r3, #0]
 801c560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c562:	4013      	ands	r3, r2
 801c564:	2b00      	cmp	r3, #0
 801c566:	d101      	bne.n	801c56c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c568:	f7e5 faa8 	bl	8001abc <UTIL_SEQ_Idle>
 801c56c:	69fb      	ldr	r3, [r7, #28]
 801c56e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	f383 8810 	msr	PRIMASK, r3
}
 801c576:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c578:	f000 f86c 	bl	801c654 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c57c:	4a03      	ldr	r2, [pc, #12]	; (801c58c <UTIL_SEQ_Run+0x1d8>)
 801c57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c580:	6013      	str	r3, [r2, #0]

  return;
 801c582:	bf00      	nop
}
 801c584:	3740      	adds	r7, #64	; 0x40
 801c586:	46bd      	mov	sp, r7
 801c588:	bd80      	pop	{r7, pc}
 801c58a:	bf00      	nop
 801c58c:	20000154 	.word	0x20000154
 801c590:	20001be8 	.word	0x20001be8
 801c594:	20001bec 	.word	0x20001bec
 801c598:	20000150 	.word	0x20000150
 801c59c:	20001bf0 	.word	0x20001bf0
 801c5a0:	20001c08 	.word	0x20001c08
 801c5a4:	20001bf4 	.word	0x20001bf4
 801c5a8:	20001bf8 	.word	0x20001bf8

0801c5ac <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b088      	sub	sp, #32
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	60f8      	str	r0, [r7, #12]
 801c5b4:	60b9      	str	r1, [r7, #8]
 801c5b6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5b8:	f3ef 8310 	mrs	r3, PRIMASK
 801c5bc:	617b      	str	r3, [r7, #20]
  return(result);
 801c5be:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c5c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5c2:	b672      	cpsid	i
}
 801c5c4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c5c6:	68f8      	ldr	r0, [r7, #12]
 801c5c8:	f000 f84a 	bl	801c660 <SEQ_BitPosition>
 801c5cc:	4603      	mov	r3, r0
 801c5ce:	4619      	mov	r1, r3
 801c5d0:	4a06      	ldr	r2, [pc, #24]	; (801c5ec <UTIL_SEQ_RegTask+0x40>)
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c5d8:	69fb      	ldr	r3, [r7, #28]
 801c5da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5dc:	69bb      	ldr	r3, [r7, #24]
 801c5de:	f383 8810 	msr	PRIMASK, r3
}
 801c5e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c5e4:	bf00      	nop
}
 801c5e6:	3720      	adds	r7, #32
 801c5e8:	46bd      	mov	sp, r7
 801c5ea:	bd80      	pop	{r7, pc}
 801c5ec:	20001bf8 	.word	0x20001bf8

0801c5f0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c5f0:	b480      	push	{r7}
 801c5f2:	b087      	sub	sp, #28
 801c5f4:	af00      	add	r7, sp, #0
 801c5f6:	6078      	str	r0, [r7, #4]
 801c5f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5fa:	f3ef 8310 	mrs	r3, PRIMASK
 801c5fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801c600:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c604:	b672      	cpsid	i
}
 801c606:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c608:	4b0d      	ldr	r3, [pc, #52]	; (801c640 <UTIL_SEQ_SetTask+0x50>)
 801c60a:	681a      	ldr	r2, [r3, #0]
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	4313      	orrs	r3, r2
 801c610:	4a0b      	ldr	r2, [pc, #44]	; (801c640 <UTIL_SEQ_SetTask+0x50>)
 801c612:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c614:	4a0b      	ldr	r2, [pc, #44]	; (801c644 <UTIL_SEQ_SetTask+0x54>)
 801c616:	683b      	ldr	r3, [r7, #0]
 801c618:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	431a      	orrs	r2, r3
 801c620:	4908      	ldr	r1, [pc, #32]	; (801c644 <UTIL_SEQ_SetTask+0x54>)
 801c622:	683b      	ldr	r3, [r7, #0]
 801c624:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c628:	697b      	ldr	r3, [r7, #20]
 801c62a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c62c:	693b      	ldr	r3, [r7, #16]
 801c62e:	f383 8810 	msr	PRIMASK, r3
}
 801c632:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c634:	bf00      	nop
}
 801c636:	371c      	adds	r7, #28
 801c638:	46bd      	mov	sp, r7
 801c63a:	bc80      	pop	{r7}
 801c63c:	4770      	bx	lr
 801c63e:	bf00      	nop
 801c640:	20001be8 	.word	0x20001be8
 801c644:	20001c08 	.word	0x20001c08

0801c648 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c648:	b480      	push	{r7}
 801c64a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c64c:	bf00      	nop
}
 801c64e:	46bd      	mov	sp, r7
 801c650:	bc80      	pop	{r7}
 801c652:	4770      	bx	lr

0801c654 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c654:	b480      	push	{r7}
 801c656:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c658:	bf00      	nop
}
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bc80      	pop	{r7}
 801c65e:	4770      	bx	lr

0801c660 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c660:	b480      	push	{r7}
 801c662:	b085      	sub	sp, #20
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c668:	2300      	movs	r3, #0
 801c66a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c670:	68bb      	ldr	r3, [r7, #8]
 801c672:	0c1b      	lsrs	r3, r3, #16
 801c674:	041b      	lsls	r3, r3, #16
 801c676:	2b00      	cmp	r3, #0
 801c678:	d104      	bne.n	801c684 <SEQ_BitPosition+0x24>
 801c67a:	2310      	movs	r3, #16
 801c67c:	73fb      	strb	r3, [r7, #15]
 801c67e:	68bb      	ldr	r3, [r7, #8]
 801c680:	041b      	lsls	r3, r3, #16
 801c682:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d105      	bne.n	801c69a <SEQ_BitPosition+0x3a>
 801c68e:	7bfb      	ldrb	r3, [r7, #15]
 801c690:	3308      	adds	r3, #8
 801c692:	73fb      	strb	r3, [r7, #15]
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	021b      	lsls	r3, r3, #8
 801c698:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c69a:	68bb      	ldr	r3, [r7, #8]
 801c69c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d105      	bne.n	801c6b0 <SEQ_BitPosition+0x50>
 801c6a4:	7bfb      	ldrb	r3, [r7, #15]
 801c6a6:	3304      	adds	r3, #4
 801c6a8:	73fb      	strb	r3, [r7, #15]
 801c6aa:	68bb      	ldr	r3, [r7, #8]
 801c6ac:	011b      	lsls	r3, r3, #4
 801c6ae:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c6b0:	68bb      	ldr	r3, [r7, #8]
 801c6b2:	0f1b      	lsrs	r3, r3, #28
 801c6b4:	4a06      	ldr	r2, [pc, #24]	; (801c6d0 <SEQ_BitPosition+0x70>)
 801c6b6:	5cd2      	ldrb	r2, [r2, r3]
 801c6b8:	7bfb      	ldrb	r3, [r7, #15]
 801c6ba:	4413      	add	r3, r2
 801c6bc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c6be:	7bfb      	ldrb	r3, [r7, #15]
 801c6c0:	f1c3 031f 	rsb	r3, r3, #31
 801c6c4:	b2db      	uxtb	r3, r3
}
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	3714      	adds	r7, #20
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bc80      	pop	{r7}
 801c6ce:	4770      	bx	lr
 801c6d0:	0801e20c 	.word	0x0801e20c

0801c6d4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c6d8:	4b04      	ldr	r3, [pc, #16]	; (801c6ec <UTIL_TIMER_Init+0x18>)
 801c6da:	2200      	movs	r2, #0
 801c6dc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c6de:	4b04      	ldr	r3, [pc, #16]	; (801c6f0 <UTIL_TIMER_Init+0x1c>)
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	4798      	blx	r3
 801c6e4:	4603      	mov	r3, r0
}
 801c6e6:	4618      	mov	r0, r3
 801c6e8:	bd80      	pop	{r7, pc}
 801c6ea:	bf00      	nop
 801c6ec:	20001c10 	.word	0x20001c10
 801c6f0:	0801dc90 	.word	0x0801dc90

0801c6f4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b084      	sub	sp, #16
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	60f8      	str	r0, [r7, #12]
 801c6fc:	60b9      	str	r1, [r7, #8]
 801c6fe:	603b      	str	r3, [r7, #0]
 801c700:	4613      	mov	r3, r2
 801c702:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d023      	beq.n	801c752 <UTIL_TIMER_Create+0x5e>
 801c70a:	683b      	ldr	r3, [r7, #0]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d020      	beq.n	801c752 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	2200      	movs	r2, #0
 801c714:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c716:	4b11      	ldr	r3, [pc, #68]	; (801c75c <UTIL_TIMER_Create+0x68>)
 801c718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c71a:	68b8      	ldr	r0, [r7, #8]
 801c71c:	4798      	blx	r3
 801c71e:	4602      	mov	r2, r0
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	2200      	movs	r2, #0
 801c728:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	2200      	movs	r2, #0
 801c72e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	2200      	movs	r2, #0
 801c734:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	683a      	ldr	r2, [r7, #0]
 801c73a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	69ba      	ldr	r2, [r7, #24]
 801c740:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	79fa      	ldrb	r2, [r7, #7]
 801c746:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	2200      	movs	r2, #0
 801c74c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c74e:	2300      	movs	r3, #0
 801c750:	e000      	b.n	801c754 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c752:	2301      	movs	r3, #1
  }
}
 801c754:	4618      	mov	r0, r3
 801c756:	3710      	adds	r7, #16
 801c758:	46bd      	mov	sp, r7
 801c75a:	bd80      	pop	{r7, pc}
 801c75c:	0801dc90 	.word	0x0801dc90

0801c760 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c760:	b580      	push	{r7, lr}
 801c762:	b08a      	sub	sp, #40	; 0x28
 801c764:	af00      	add	r7, sp, #0
 801c766:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c768:	2300      	movs	r3, #0
 801c76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d056      	beq.n	801c822 <UTIL_TIMER_Start+0xc2>
 801c774:	6878      	ldr	r0, [r7, #4]
 801c776:	f000 f9a9 	bl	801cacc <TimerExists>
 801c77a:	4603      	mov	r3, r0
 801c77c:	f083 0301 	eor.w	r3, r3, #1
 801c780:	b2db      	uxtb	r3, r3
 801c782:	2b00      	cmp	r3, #0
 801c784:	d04d      	beq.n	801c822 <UTIL_TIMER_Start+0xc2>
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	7a5b      	ldrb	r3, [r3, #9]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d149      	bne.n	801c822 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c78e:	f3ef 8310 	mrs	r3, PRIMASK
 801c792:	613b      	str	r3, [r7, #16]
  return(result);
 801c794:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c798:	b672      	cpsid	i
}
 801c79a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	685b      	ldr	r3, [r3, #4]
 801c7a0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c7a2:	4b24      	ldr	r3, [pc, #144]	; (801c834 <UTIL_TIMER_Start+0xd4>)
 801c7a4:	6a1b      	ldr	r3, [r3, #32]
 801c7a6:	4798      	blx	r3
 801c7a8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c7aa:	6a3a      	ldr	r2, [r7, #32]
 801c7ac:	69bb      	ldr	r3, [r7, #24]
 801c7ae:	429a      	cmp	r2, r3
 801c7b0:	d201      	bcs.n	801c7b6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c7b2:	69bb      	ldr	r3, [r7, #24]
 801c7b4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	6a3a      	ldr	r2, [r7, #32]
 801c7ba:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	2200      	movs	r2, #0
 801c7c0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	2201      	movs	r2, #1
 801c7c6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c7ce:	4b1a      	ldr	r3, [pc, #104]	; (801c838 <UTIL_TIMER_Start+0xd8>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d106      	bne.n	801c7e4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c7d6:	4b17      	ldr	r3, [pc, #92]	; (801c834 <UTIL_TIMER_Start+0xd4>)
 801c7d8:	691b      	ldr	r3, [r3, #16]
 801c7da:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c7dc:	6878      	ldr	r0, [r7, #4]
 801c7de:	f000 f9eb 	bl	801cbb8 <TimerInsertNewHeadTimer>
 801c7e2:	e017      	b.n	801c814 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c7e4:	4b13      	ldr	r3, [pc, #76]	; (801c834 <UTIL_TIMER_Start+0xd4>)
 801c7e6:	699b      	ldr	r3, [r3, #24]
 801c7e8:	4798      	blx	r3
 801c7ea:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	681a      	ldr	r2, [r3, #0]
 801c7f0:	697b      	ldr	r3, [r7, #20]
 801c7f2:	441a      	add	r2, r3
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	681a      	ldr	r2, [r3, #0]
 801c7fc:	4b0e      	ldr	r3, [pc, #56]	; (801c838 <UTIL_TIMER_Start+0xd8>)
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	429a      	cmp	r2, r3
 801c804:	d203      	bcs.n	801c80e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c806:	6878      	ldr	r0, [r7, #4]
 801c808:	f000 f9d6 	bl	801cbb8 <TimerInsertNewHeadTimer>
 801c80c:	e002      	b.n	801c814 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c80e:	6878      	ldr	r0, [r7, #4]
 801c810:	f000 f9a2 	bl	801cb58 <TimerInsertTimer>
 801c814:	69fb      	ldr	r3, [r7, #28]
 801c816:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	f383 8810 	msr	PRIMASK, r3
}
 801c81e:	bf00      	nop
  {
 801c820:	e002      	b.n	801c828 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c822:	2301      	movs	r3, #1
 801c824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801c828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c82c:	4618      	mov	r0, r3
 801c82e:	3728      	adds	r7, #40	; 0x28
 801c830:	46bd      	mov	sp, r7
 801c832:	bd80      	pop	{r7, pc}
 801c834:	0801dc90 	.word	0x0801dc90
 801c838:	20001c10 	.word	0x20001c10

0801c83c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c83c:	b580      	push	{r7, lr}
 801c83e:	b088      	sub	sp, #32
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c844:	2300      	movs	r3, #0
 801c846:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d05b      	beq.n	801c906 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c84e:	f3ef 8310 	mrs	r3, PRIMASK
 801c852:	60fb      	str	r3, [r7, #12]
  return(result);
 801c854:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c858:	b672      	cpsid	i
}
 801c85a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c85c:	4b2d      	ldr	r3, [pc, #180]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c862:	4b2c      	ldr	r3, [pc, #176]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	2201      	movs	r2, #1
 801c86c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c86e:	4b29      	ldr	r3, [pc, #164]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	2b00      	cmp	r3, #0
 801c874:	d041      	beq.n	801c8fa <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	2200      	movs	r2, #0
 801c87a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c87c:	4b25      	ldr	r3, [pc, #148]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	687a      	ldr	r2, [r7, #4]
 801c882:	429a      	cmp	r2, r3
 801c884:	d134      	bne.n	801c8f0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c886:	4b23      	ldr	r3, [pc, #140]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	2200      	movs	r2, #0
 801c88c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c88e:	4b21      	ldr	r3, [pc, #132]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	695b      	ldr	r3, [r3, #20]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d00a      	beq.n	801c8ae <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c898:	4b1e      	ldr	r3, [pc, #120]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	695b      	ldr	r3, [r3, #20]
 801c89e:	4a1d      	ldr	r2, [pc, #116]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c8a0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c8a2:	4b1c      	ldr	r3, [pc, #112]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f000 f92c 	bl	801cb04 <TimerSetTimeout>
 801c8ac:	e023      	b.n	801c8f6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c8ae:	4b1a      	ldr	r3, [pc, #104]	; (801c918 <UTIL_TIMER_Stop+0xdc>)
 801c8b0:	68db      	ldr	r3, [r3, #12]
 801c8b2:	4798      	blx	r3
            TimerListHead = NULL;
 801c8b4:	4b17      	ldr	r3, [pc, #92]	; (801c914 <UTIL_TIMER_Stop+0xd8>)
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	601a      	str	r2, [r3, #0]
 801c8ba:	e01c      	b.n	801c8f6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c8bc:	697a      	ldr	r2, [r7, #20]
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	429a      	cmp	r2, r3
 801c8c2:	d110      	bne.n	801c8e6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c8c4:	697b      	ldr	r3, [r7, #20]
 801c8c6:	695b      	ldr	r3, [r3, #20]
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d006      	beq.n	801c8da <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c8cc:	697b      	ldr	r3, [r7, #20]
 801c8ce:	695b      	ldr	r3, [r3, #20]
 801c8d0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c8d2:	69bb      	ldr	r3, [r7, #24]
 801c8d4:	697a      	ldr	r2, [r7, #20]
 801c8d6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c8d8:	e00d      	b.n	801c8f6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c8da:	2300      	movs	r3, #0
 801c8dc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c8de:	69bb      	ldr	r3, [r7, #24]
 801c8e0:	697a      	ldr	r2, [r7, #20]
 801c8e2:	615a      	str	r2, [r3, #20]
            break;
 801c8e4:	e007      	b.n	801c8f6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c8e6:	697b      	ldr	r3, [r7, #20]
 801c8e8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c8ea:	697b      	ldr	r3, [r7, #20]
 801c8ec:	695b      	ldr	r3, [r3, #20]
 801c8ee:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c8f0:	697b      	ldr	r3, [r7, #20]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d1e2      	bne.n	801c8bc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	77fb      	strb	r3, [r7, #31]
 801c8fa:	693b      	ldr	r3, [r7, #16]
 801c8fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8fe:	68bb      	ldr	r3, [r7, #8]
 801c900:	f383 8810 	msr	PRIMASK, r3
}
 801c904:	e001      	b.n	801c90a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c906:	2301      	movs	r3, #1
 801c908:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c90a:	7ffb      	ldrb	r3, [r7, #31]
}
 801c90c:	4618      	mov	r0, r3
 801c90e:	3720      	adds	r7, #32
 801c910:	46bd      	mov	sp, r7
 801c912:	bd80      	pop	{r7, pc}
 801c914:	20001c10 	.word	0x20001c10
 801c918:	0801dc90 	.word	0x0801dc90

0801c91c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b084      	sub	sp, #16
 801c920:	af00      	add	r7, sp, #0
 801c922:	6078      	str	r0, [r7, #4]
 801c924:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c926:	2300      	movs	r3, #0
 801c928:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d102      	bne.n	801c936 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c930:	2301      	movs	r3, #1
 801c932:	73fb      	strb	r3, [r7, #15]
 801c934:	e014      	b.n	801c960 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c936:	4b0d      	ldr	r3, [pc, #52]	; (801c96c <UTIL_TIMER_SetPeriod+0x50>)
 801c938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c93a:	6838      	ldr	r0, [r7, #0]
 801c93c:	4798      	blx	r3
 801c93e:	4602      	mov	r2, r0
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c944:	6878      	ldr	r0, [r7, #4]
 801c946:	f000 f8c1 	bl	801cacc <TimerExists>
 801c94a:	4603      	mov	r3, r0
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d007      	beq.n	801c960 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c950:	6878      	ldr	r0, [r7, #4]
 801c952:	f7ff ff73 	bl	801c83c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c956:	6878      	ldr	r0, [r7, #4]
 801c958:	f7ff ff02 	bl	801c760 <UTIL_TIMER_Start>
 801c95c:	4603      	mov	r3, r0
 801c95e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c960:	7bfb      	ldrb	r3, [r7, #15]
}
 801c962:	4618      	mov	r0, r3
 801c964:	3710      	adds	r7, #16
 801c966:	46bd      	mov	sp, r7
 801c968:	bd80      	pop	{r7, pc}
 801c96a:	bf00      	nop
 801c96c:	0801dc90 	.word	0x0801dc90

0801c970 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c970:	b590      	push	{r4, r7, lr}
 801c972:	b089      	sub	sp, #36	; 0x24
 801c974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c976:	f3ef 8310 	mrs	r3, PRIMASK
 801c97a:	60bb      	str	r3, [r7, #8]
  return(result);
 801c97c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c97e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c980:	b672      	cpsid	i
}
 801c982:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c984:	4b38      	ldr	r3, [pc, #224]	; (801ca68 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c986:	695b      	ldr	r3, [r3, #20]
 801c988:	4798      	blx	r3
 801c98a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c98c:	4b36      	ldr	r3, [pc, #216]	; (801ca68 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c98e:	691b      	ldr	r3, [r3, #16]
 801c990:	4798      	blx	r3
 801c992:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c994:	693a      	ldr	r2, [r7, #16]
 801c996:	697b      	ldr	r3, [r7, #20]
 801c998:	1ad3      	subs	r3, r2, r3
 801c99a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c99c:	4b33      	ldr	r3, [pc, #204]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d037      	beq.n	801ca14 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c9a4:	4b31      	ldr	r3, [pc, #196]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c9aa:	69fb      	ldr	r3, [r7, #28]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	68fa      	ldr	r2, [r7, #12]
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	d206      	bcs.n	801c9c2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c9b4:	69fb      	ldr	r3, [r7, #28]
 801c9b6:	681a      	ldr	r2, [r3, #0]
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	1ad2      	subs	r2, r2, r3
 801c9bc:	69fb      	ldr	r3, [r7, #28]
 801c9be:	601a      	str	r2, [r3, #0]
 801c9c0:	e002      	b.n	801c9c8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c9c2:	69fb      	ldr	r3, [r7, #28]
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c9c8:	69fb      	ldr	r3, [r7, #28]
 801c9ca:	695b      	ldr	r3, [r3, #20]
 801c9cc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c9ce:	69fb      	ldr	r3, [r7, #28]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d1ea      	bne.n	801c9aa <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c9d4:	e01e      	b.n	801ca14 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c9d6:	4b25      	ldr	r3, [pc, #148]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c9dc:	4b23      	ldr	r3, [pc, #140]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	695b      	ldr	r3, [r3, #20]
 801c9e2:	4a22      	ldr	r2, [pc, #136]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9e4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c9e6:	69fb      	ldr	r3, [r7, #28]
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c9ec:	69fb      	ldr	r3, [r7, #28]
 801c9ee:	2200      	movs	r2, #0
 801c9f0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c9f2:	69fb      	ldr	r3, [r7, #28]
 801c9f4:	68db      	ldr	r3, [r3, #12]
 801c9f6:	69fa      	ldr	r2, [r7, #28]
 801c9f8:	6912      	ldr	r2, [r2, #16]
 801c9fa:	4610      	mov	r0, r2
 801c9fc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c9fe:	69fb      	ldr	r3, [r7, #28]
 801ca00:	7adb      	ldrb	r3, [r3, #11]
 801ca02:	2b01      	cmp	r3, #1
 801ca04:	d106      	bne.n	801ca14 <UTIL_TIMER_IRQ_Handler+0xa4>
 801ca06:	69fb      	ldr	r3, [r7, #28]
 801ca08:	7a9b      	ldrb	r3, [r3, #10]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d102      	bne.n	801ca14 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801ca0e:	69f8      	ldr	r0, [r7, #28]
 801ca10:	f7ff fea6 	bl	801c760 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ca14:	4b15      	ldr	r3, [pc, #84]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d00d      	beq.n	801ca38 <UTIL_TIMER_IRQ_Handler+0xc8>
 801ca1c:	4b13      	ldr	r3, [pc, #76]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d0d7      	beq.n	801c9d6 <UTIL_TIMER_IRQ_Handler+0x66>
 801ca26:	4b11      	ldr	r3, [pc, #68]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	681c      	ldr	r4, [r3, #0]
 801ca2c:	4b0e      	ldr	r3, [pc, #56]	; (801ca68 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ca2e:	699b      	ldr	r3, [r3, #24]
 801ca30:	4798      	blx	r3
 801ca32:	4603      	mov	r3, r0
 801ca34:	429c      	cmp	r4, r3
 801ca36:	d3ce      	bcc.n	801c9d6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ca38:	4b0c      	ldr	r3, [pc, #48]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d009      	beq.n	801ca54 <UTIL_TIMER_IRQ_Handler+0xe4>
 801ca40:	4b0a      	ldr	r3, [pc, #40]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	7a1b      	ldrb	r3, [r3, #8]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d104      	bne.n	801ca54 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ca4a:	4b08      	ldr	r3, [pc, #32]	; (801ca6c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	4618      	mov	r0, r3
 801ca50:	f000 f858 	bl	801cb04 <TimerSetTimeout>
 801ca54:	69bb      	ldr	r3, [r7, #24]
 801ca56:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	f383 8810 	msr	PRIMASK, r3
}
 801ca5e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ca60:	bf00      	nop
 801ca62:	3724      	adds	r7, #36	; 0x24
 801ca64:	46bd      	mov	sp, r7
 801ca66:	bd90      	pop	{r4, r7, pc}
 801ca68:	0801dc90 	.word	0x0801dc90
 801ca6c:	20001c10 	.word	0x20001c10

0801ca70 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b082      	sub	sp, #8
 801ca74:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ca76:	4b06      	ldr	r3, [pc, #24]	; (801ca90 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca78:	69db      	ldr	r3, [r3, #28]
 801ca7a:	4798      	blx	r3
 801ca7c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ca7e:	4b04      	ldr	r3, [pc, #16]	; (801ca90 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ca82:	6878      	ldr	r0, [r7, #4]
 801ca84:	4798      	blx	r3
 801ca86:	4603      	mov	r3, r0
}
 801ca88:	4618      	mov	r0, r3
 801ca8a:	3708      	adds	r7, #8
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	bd80      	pop	{r7, pc}
 801ca90:	0801dc90 	.word	0x0801dc90

0801ca94 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b084      	sub	sp, #16
 801ca98:	af00      	add	r7, sp, #0
 801ca9a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ca9c:	4b0a      	ldr	r3, [pc, #40]	; (801cac8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca9e:	69db      	ldr	r3, [r3, #28]
 801caa0:	4798      	blx	r3
 801caa2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801caa4:	4b08      	ldr	r3, [pc, #32]	; (801cac8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caa8:	6878      	ldr	r0, [r7, #4]
 801caaa:	4798      	blx	r3
 801caac:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801caae:	4b06      	ldr	r3, [pc, #24]	; (801cac8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cab2:	68f9      	ldr	r1, [r7, #12]
 801cab4:	68ba      	ldr	r2, [r7, #8]
 801cab6:	1a8a      	subs	r2, r1, r2
 801cab8:	4610      	mov	r0, r2
 801caba:	4798      	blx	r3
 801cabc:	4603      	mov	r3, r0
}
 801cabe:	4618      	mov	r0, r3
 801cac0:	3710      	adds	r7, #16
 801cac2:	46bd      	mov	sp, r7
 801cac4:	bd80      	pop	{r7, pc}
 801cac6:	bf00      	nop
 801cac8:	0801dc90 	.word	0x0801dc90

0801cacc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cacc:	b480      	push	{r7}
 801cace:	b085      	sub	sp, #20
 801cad0:	af00      	add	r7, sp, #0
 801cad2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cad4:	4b0a      	ldr	r3, [pc, #40]	; (801cb00 <TimerExists+0x34>)
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cada:	e008      	b.n	801caee <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cadc:	68fa      	ldr	r2, [r7, #12]
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	429a      	cmp	r2, r3
 801cae2:	d101      	bne.n	801cae8 <TimerExists+0x1c>
    {
      return true;
 801cae4:	2301      	movs	r3, #1
 801cae6:	e006      	b.n	801caf6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	695b      	ldr	r3, [r3, #20]
 801caec:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d1f3      	bne.n	801cadc <TimerExists+0x10>
  }
  return false;
 801caf4:	2300      	movs	r3, #0
}
 801caf6:	4618      	mov	r0, r3
 801caf8:	3714      	adds	r7, #20
 801cafa:	46bd      	mov	sp, r7
 801cafc:	bc80      	pop	{r7}
 801cafe:	4770      	bx	lr
 801cb00:	20001c10 	.word	0x20001c10

0801cb04 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cb04:	b590      	push	{r4, r7, lr}
 801cb06:	b085      	sub	sp, #20
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cb0c:	4b11      	ldr	r3, [pc, #68]	; (801cb54 <TimerSetTimeout+0x50>)
 801cb0e:	6a1b      	ldr	r3, [r3, #32]
 801cb10:	4798      	blx	r3
 801cb12:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	2201      	movs	r2, #1
 801cb18:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	681c      	ldr	r4, [r3, #0]
 801cb1e:	4b0d      	ldr	r3, [pc, #52]	; (801cb54 <TimerSetTimeout+0x50>)
 801cb20:	699b      	ldr	r3, [r3, #24]
 801cb22:	4798      	blx	r3
 801cb24:	4602      	mov	r2, r0
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	4413      	add	r3, r2
 801cb2a:	429c      	cmp	r4, r3
 801cb2c:	d207      	bcs.n	801cb3e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cb2e:	4b09      	ldr	r3, [pc, #36]	; (801cb54 <TimerSetTimeout+0x50>)
 801cb30:	699b      	ldr	r3, [r3, #24]
 801cb32:	4798      	blx	r3
 801cb34:	4602      	mov	r2, r0
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	441a      	add	r2, r3
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cb3e:	4b05      	ldr	r3, [pc, #20]	; (801cb54 <TimerSetTimeout+0x50>)
 801cb40:	689b      	ldr	r3, [r3, #8]
 801cb42:	687a      	ldr	r2, [r7, #4]
 801cb44:	6812      	ldr	r2, [r2, #0]
 801cb46:	4610      	mov	r0, r2
 801cb48:	4798      	blx	r3
}
 801cb4a:	bf00      	nop
 801cb4c:	3714      	adds	r7, #20
 801cb4e:	46bd      	mov	sp, r7
 801cb50:	bd90      	pop	{r4, r7, pc}
 801cb52:	bf00      	nop
 801cb54:	0801dc90 	.word	0x0801dc90

0801cb58 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cb58:	b480      	push	{r7}
 801cb5a:	b085      	sub	sp, #20
 801cb5c:	af00      	add	r7, sp, #0
 801cb5e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cb60:	4b14      	ldr	r3, [pc, #80]	; (801cbb4 <TimerInsertTimer+0x5c>)
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cb66:	4b13      	ldr	r3, [pc, #76]	; (801cbb4 <TimerInsertTimer+0x5c>)
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	695b      	ldr	r3, [r3, #20]
 801cb6c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cb6e:	e012      	b.n	801cb96 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	681a      	ldr	r2, [r3, #0]
 801cb74:	68bb      	ldr	r3, [r7, #8]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	429a      	cmp	r2, r3
 801cb7a:	d905      	bls.n	801cb88 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cb7c:	68bb      	ldr	r3, [r7, #8]
 801cb7e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cb80:	68bb      	ldr	r3, [r7, #8]
 801cb82:	695b      	ldr	r3, [r3, #20]
 801cb84:	60bb      	str	r3, [r7, #8]
 801cb86:	e006      	b.n	801cb96 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	687a      	ldr	r2, [r7, #4]
 801cb8c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	68ba      	ldr	r2, [r7, #8]
 801cb92:	615a      	str	r2, [r3, #20]
        return;
 801cb94:	e009      	b.n	801cbaa <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	695b      	ldr	r3, [r3, #20]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d1e8      	bne.n	801cb70 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	687a      	ldr	r2, [r7, #4]
 801cba2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	2200      	movs	r2, #0
 801cba8:	615a      	str	r2, [r3, #20]
}
 801cbaa:	3714      	adds	r7, #20
 801cbac:	46bd      	mov	sp, r7
 801cbae:	bc80      	pop	{r7}
 801cbb0:	4770      	bx	lr
 801cbb2:	bf00      	nop
 801cbb4:	20001c10 	.word	0x20001c10

0801cbb8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b084      	sub	sp, #16
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cbc0:	4b0b      	ldr	r3, [pc, #44]	; (801cbf0 <TimerInsertNewHeadTimer+0x38>)
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d002      	beq.n	801cbd2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	2200      	movs	r2, #0
 801cbd0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	68fa      	ldr	r2, [r7, #12]
 801cbd6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801cbd8:	4a05      	ldr	r2, [pc, #20]	; (801cbf0 <TimerInsertNewHeadTimer+0x38>)
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801cbde:	4b04      	ldr	r3, [pc, #16]	; (801cbf0 <TimerInsertNewHeadTimer+0x38>)
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f7ff ff8e 	bl	801cb04 <TimerSetTimeout>
}
 801cbe8:	bf00      	nop
 801cbea:	3710      	adds	r7, #16
 801cbec:	46bd      	mov	sp, r7
 801cbee:	bd80      	pop	{r7, pc}
 801cbf0:	20001c10 	.word	0x20001c10

0801cbf4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801cbf8:	2218      	movs	r2, #24
 801cbfa:	2100      	movs	r1, #0
 801cbfc:	4807      	ldr	r0, [pc, #28]	; (801cc1c <UTIL_ADV_TRACE_Init+0x28>)
 801cbfe:	f7fe fff6 	bl	801bbee <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801cc02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cc06:	2100      	movs	r1, #0
 801cc08:	4805      	ldr	r0, [pc, #20]	; (801cc20 <UTIL_ADV_TRACE_Init+0x2c>)
 801cc0a:	f7fe fff0 	bl	801bbee <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801cc0e:	4b05      	ldr	r3, [pc, #20]	; (801cc24 <UTIL_ADV_TRACE_Init+0x30>)
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	4805      	ldr	r0, [pc, #20]	; (801cc28 <UTIL_ADV_TRACE_Init+0x34>)
 801cc14:	4798      	blx	r3
 801cc16:	4603      	mov	r3, r0
}
 801cc18:	4618      	mov	r0, r3
 801cc1a:	bd80      	pop	{r7, pc}
 801cc1c:	20001c14 	.word	0x20001c14
 801cc20:	20001c2c 	.word	0x20001c2c
 801cc24:	0801dcd0 	.word	0x0801dcd0
 801cc28:	0801ce95 	.word	0x0801ce95

0801cc2c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801cc2c:	b480      	push	{r7}
 801cc2e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cc30:	4b06      	ldr	r3, [pc, #24]	; (801cc4c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cc32:	8a5a      	ldrh	r2, [r3, #18]
 801cc34:	4b05      	ldr	r3, [pc, #20]	; (801cc4c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cc36:	8a1b      	ldrh	r3, [r3, #16]
 801cc38:	429a      	cmp	r2, r3
 801cc3a:	d101      	bne.n	801cc40 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801cc3c:	2301      	movs	r3, #1
 801cc3e:	e000      	b.n	801cc42 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801cc40:	2300      	movs	r3, #0
}
 801cc42:	4618      	mov	r0, r3
 801cc44:	46bd      	mov	sp, r7
 801cc46:	bc80      	pop	{r7}
 801cc48:	4770      	bx	lr
 801cc4a:	bf00      	nop
 801cc4c:	20001c14 	.word	0x20001c14

0801cc50 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801cc50:	b408      	push	{r3}
 801cc52:	b580      	push	{r7, lr}
 801cc54:	b08d      	sub	sp, #52	; 0x34
 801cc56:	af00      	add	r7, sp, #0
 801cc58:	60f8      	str	r0, [r7, #12]
 801cc5a:	60b9      	str	r1, [r7, #8]
 801cc5c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801cc5e:	2300      	movs	r3, #0
 801cc60:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801cc62:	2300      	movs	r3, #0
 801cc64:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801cc66:	4b37      	ldr	r3, [pc, #220]	; (801cd44 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc68:	7a1b      	ldrb	r3, [r3, #8]
 801cc6a:	461a      	mov	r2, r3
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	4293      	cmp	r3, r2
 801cc70:	d902      	bls.n	801cc78 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801cc72:	f06f 0304 	mvn.w	r3, #4
 801cc76:	e05e      	b.n	801cd36 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801cc78:	4b32      	ldr	r3, [pc, #200]	; (801cd44 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc7a:	68da      	ldr	r2, [r3, #12]
 801cc7c:	68bb      	ldr	r3, [r7, #8]
 801cc7e:	4013      	ands	r3, r2
 801cc80:	68ba      	ldr	r2, [r7, #8]
 801cc82:	429a      	cmp	r2, r3
 801cc84:	d002      	beq.n	801cc8c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801cc86:	f06f 0305 	mvn.w	r3, #5
 801cc8a:	e054      	b.n	801cd36 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801cc8c:	4b2d      	ldr	r3, [pc, #180]	; (801cd44 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc8e:	685b      	ldr	r3, [r3, #4]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d00a      	beq.n	801ccaa <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d007      	beq.n	801ccaa <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801cc9a:	4b2a      	ldr	r3, [pc, #168]	; (801cd44 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc9c:	685b      	ldr	r3, [r3, #4]
 801cc9e:	f107 0116 	add.w	r1, r7, #22
 801cca2:	f107 0218 	add.w	r2, r7, #24
 801cca6:	4610      	mov	r0, r2
 801cca8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801ccaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ccae:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ccb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ccb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ccb8:	4823      	ldr	r0, [pc, #140]	; (801cd48 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ccba:	f7ff fa25 	bl	801c108 <tiny_vsnprintf_like>
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801ccc2:	f000 f9f1 	bl	801d0a8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801ccc6:	8afa      	ldrh	r2, [r7, #22]
 801ccc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ccca:	4413      	add	r3, r2
 801cccc:	b29b      	uxth	r3, r3
 801ccce:	f107 0214 	add.w	r2, r7, #20
 801ccd2:	4611      	mov	r1, r2
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	f000 f969 	bl	801cfac <TRACE_AllocateBufer>
 801ccda:	4603      	mov	r3, r0
 801ccdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cce0:	d025      	beq.n	801cd2e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801cce2:	2300      	movs	r3, #0
 801cce4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801cce6:	e00e      	b.n	801cd06 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801cce8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ccea:	8aba      	ldrh	r2, [r7, #20]
 801ccec:	3330      	adds	r3, #48	; 0x30
 801ccee:	443b      	add	r3, r7
 801ccf0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ccf4:	4b15      	ldr	r3, [pc, #84]	; (801cd4c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ccf6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ccf8:	8abb      	ldrh	r3, [r7, #20]
 801ccfa:	3301      	adds	r3, #1
 801ccfc:	b29b      	uxth	r3, r3
 801ccfe:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801cd00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cd02:	3301      	adds	r3, #1
 801cd04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801cd06:	8afb      	ldrh	r3, [r7, #22]
 801cd08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801cd0a:	429a      	cmp	r2, r3
 801cd0c:	d3ec      	bcc.n	801cce8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cd0e:	8abb      	ldrh	r3, [r7, #20]
 801cd10:	461a      	mov	r2, r3
 801cd12:	4b0e      	ldr	r3, [pc, #56]	; (801cd4c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cd14:	18d0      	adds	r0, r2, r3
 801cd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cd1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801cd1e:	f7ff f9f3 	bl	801c108 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801cd22:	f000 f9df 	bl	801d0e4 <TRACE_UnLock>

    return TRACE_Send();
 801cd26:	f000 f831 	bl	801cd8c <TRACE_Send>
 801cd2a:	4603      	mov	r3, r0
 801cd2c:	e003      	b.n	801cd36 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801cd2e:	f000 f9d9 	bl	801d0e4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801cd32:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801cd36:	4618      	mov	r0, r3
 801cd38:	3734      	adds	r7, #52	; 0x34
 801cd3a:	46bd      	mov	sp, r7
 801cd3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cd40:	b001      	add	sp, #4
 801cd42:	4770      	bx	lr
 801cd44:	20001c14 	.word	0x20001c14
 801cd48:	2000202c 	.word	0x2000202c
 801cd4c:	20001c2c 	.word	0x20001c2c

0801cd50 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801cd50:	b480      	push	{r7}
 801cd52:	b083      	sub	sp, #12
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801cd58:	4a03      	ldr	r2, [pc, #12]	; (801cd68 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	6053      	str	r3, [r2, #4]
}
 801cd5e:	bf00      	nop
 801cd60:	370c      	adds	r7, #12
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bc80      	pop	{r7}
 801cd66:	4770      	bx	lr
 801cd68:	20001c14 	.word	0x20001c14

0801cd6c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801cd6c:	b480      	push	{r7}
 801cd6e:	b083      	sub	sp, #12
 801cd70:	af00      	add	r7, sp, #0
 801cd72:	4603      	mov	r3, r0
 801cd74:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801cd76:	4a04      	ldr	r2, [pc, #16]	; (801cd88 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801cd78:	79fb      	ldrb	r3, [r7, #7]
 801cd7a:	7213      	strb	r3, [r2, #8]
}
 801cd7c:	bf00      	nop
 801cd7e:	370c      	adds	r7, #12
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bc80      	pop	{r7}
 801cd84:	4770      	bx	lr
 801cd86:	bf00      	nop
 801cd88:	20001c14 	.word	0x20001c14

0801cd8c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b088      	sub	sp, #32
 801cd90:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801cd92:	2300      	movs	r3, #0
 801cd94:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801cd96:	2300      	movs	r3, #0
 801cd98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd9a:	f3ef 8310 	mrs	r3, PRIMASK
 801cd9e:	613b      	str	r3, [r7, #16]
  return(result);
 801cda0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cda2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cda4:	b672      	cpsid	i
}
 801cda6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801cda8:	f000 f9ba 	bl	801d120 <TRACE_IsLocked>
 801cdac:	4603      	mov	r3, r0
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d15d      	bne.n	801ce6e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801cdb2:	f000 f979 	bl	801d0a8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801cdb6:	4b34      	ldr	r3, [pc, #208]	; (801ce88 <TRACE_Send+0xfc>)
 801cdb8:	8a1a      	ldrh	r2, [r3, #16]
 801cdba:	4b33      	ldr	r3, [pc, #204]	; (801ce88 <TRACE_Send+0xfc>)
 801cdbc:	8a5b      	ldrh	r3, [r3, #18]
 801cdbe:	429a      	cmp	r2, r3
 801cdc0:	d04d      	beq.n	801ce5e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cdc2:	4b31      	ldr	r3, [pc, #196]	; (801ce88 <TRACE_Send+0xfc>)
 801cdc4:	789b      	ldrb	r3, [r3, #2]
 801cdc6:	2b01      	cmp	r3, #1
 801cdc8:	d117      	bne.n	801cdfa <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801cdca:	4b2f      	ldr	r3, [pc, #188]	; (801ce88 <TRACE_Send+0xfc>)
 801cdcc:	881a      	ldrh	r2, [r3, #0]
 801cdce:	4b2e      	ldr	r3, [pc, #184]	; (801ce88 <TRACE_Send+0xfc>)
 801cdd0:	8a1b      	ldrh	r3, [r3, #16]
 801cdd2:	1ad3      	subs	r3, r2, r3
 801cdd4:	b29a      	uxth	r2, r3
 801cdd6:	4b2c      	ldr	r3, [pc, #176]	; (801ce88 <TRACE_Send+0xfc>)
 801cdd8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cdda:	4b2b      	ldr	r3, [pc, #172]	; (801ce88 <TRACE_Send+0xfc>)
 801cddc:	2202      	movs	r2, #2
 801cdde:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cde0:	4b29      	ldr	r3, [pc, #164]	; (801ce88 <TRACE_Send+0xfc>)
 801cde2:	2200      	movs	r2, #0
 801cde4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cde6:	4b28      	ldr	r3, [pc, #160]	; (801ce88 <TRACE_Send+0xfc>)
 801cde8:	8a9b      	ldrh	r3, [r3, #20]
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d105      	bne.n	801cdfa <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cdee:	4b26      	ldr	r3, [pc, #152]	; (801ce88 <TRACE_Send+0xfc>)
 801cdf0:	2200      	movs	r2, #0
 801cdf2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cdf4:	4b24      	ldr	r3, [pc, #144]	; (801ce88 <TRACE_Send+0xfc>)
 801cdf6:	2200      	movs	r2, #0
 801cdf8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cdfa:	4b23      	ldr	r3, [pc, #140]	; (801ce88 <TRACE_Send+0xfc>)
 801cdfc:	789b      	ldrb	r3, [r3, #2]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d115      	bne.n	801ce2e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ce02:	4b21      	ldr	r3, [pc, #132]	; (801ce88 <TRACE_Send+0xfc>)
 801ce04:	8a5a      	ldrh	r2, [r3, #18]
 801ce06:	4b20      	ldr	r3, [pc, #128]	; (801ce88 <TRACE_Send+0xfc>)
 801ce08:	8a1b      	ldrh	r3, [r3, #16]
 801ce0a:	429a      	cmp	r2, r3
 801ce0c:	d908      	bls.n	801ce20 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ce0e:	4b1e      	ldr	r3, [pc, #120]	; (801ce88 <TRACE_Send+0xfc>)
 801ce10:	8a5a      	ldrh	r2, [r3, #18]
 801ce12:	4b1d      	ldr	r3, [pc, #116]	; (801ce88 <TRACE_Send+0xfc>)
 801ce14:	8a1b      	ldrh	r3, [r3, #16]
 801ce16:	1ad3      	subs	r3, r2, r3
 801ce18:	b29a      	uxth	r2, r3
 801ce1a:	4b1b      	ldr	r3, [pc, #108]	; (801ce88 <TRACE_Send+0xfc>)
 801ce1c:	829a      	strh	r2, [r3, #20]
 801ce1e:	e006      	b.n	801ce2e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ce20:	4b19      	ldr	r3, [pc, #100]	; (801ce88 <TRACE_Send+0xfc>)
 801ce22:	8a1b      	ldrh	r3, [r3, #16]
 801ce24:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ce28:	b29a      	uxth	r2, r3
 801ce2a:	4b17      	ldr	r3, [pc, #92]	; (801ce88 <TRACE_Send+0xfc>)
 801ce2c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ce2e:	4b16      	ldr	r3, [pc, #88]	; (801ce88 <TRACE_Send+0xfc>)
 801ce30:	8a1b      	ldrh	r3, [r3, #16]
 801ce32:	461a      	mov	r2, r3
 801ce34:	4b15      	ldr	r3, [pc, #84]	; (801ce8c <TRACE_Send+0x100>)
 801ce36:	4413      	add	r3, r2
 801ce38:	61bb      	str	r3, [r7, #24]
 801ce3a:	697b      	ldr	r3, [r7, #20]
 801ce3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	f383 8810 	msr	PRIMASK, r3
}
 801ce44:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ce46:	f7e4 ff3b 	bl	8001cc0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ce4a:	4b11      	ldr	r3, [pc, #68]	; (801ce90 <TRACE_Send+0x104>)
 801ce4c:	68db      	ldr	r3, [r3, #12]
 801ce4e:	4a0e      	ldr	r2, [pc, #56]	; (801ce88 <TRACE_Send+0xfc>)
 801ce50:	8a92      	ldrh	r2, [r2, #20]
 801ce52:	4611      	mov	r1, r2
 801ce54:	69b8      	ldr	r0, [r7, #24]
 801ce56:	4798      	blx	r3
 801ce58:	4603      	mov	r3, r0
 801ce5a:	77fb      	strb	r3, [r7, #31]
 801ce5c:	e00d      	b.n	801ce7a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ce5e:	f000 f941 	bl	801d0e4 <TRACE_UnLock>
 801ce62:	697b      	ldr	r3, [r7, #20]
 801ce64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce66:	68bb      	ldr	r3, [r7, #8]
 801ce68:	f383 8810 	msr	PRIMASK, r3
}
 801ce6c:	e005      	b.n	801ce7a <TRACE_Send+0xee>
 801ce6e:	697b      	ldr	r3, [r7, #20]
 801ce70:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	f383 8810 	msr	PRIMASK, r3
}
 801ce78:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ce7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ce7e:	4618      	mov	r0, r3
 801ce80:	3720      	adds	r7, #32
 801ce82:	46bd      	mov	sp, r7
 801ce84:	bd80      	pop	{r7, pc}
 801ce86:	bf00      	nop
 801ce88:	20001c14 	.word	0x20001c14
 801ce8c:	20001c2c 	.word	0x20001c2c
 801ce90:	0801dcd0 	.word	0x0801dcd0

0801ce94 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ce94:	b580      	push	{r7, lr}
 801ce96:	b088      	sub	sp, #32
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ce9c:	2300      	movs	r3, #0
 801ce9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cea0:	f3ef 8310 	mrs	r3, PRIMASK
 801cea4:	617b      	str	r3, [r7, #20]
  return(result);
 801cea6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cea8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceaa:	b672      	cpsid	i
}
 801ceac:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ceae:	4b3c      	ldr	r3, [pc, #240]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801ceb0:	789b      	ldrb	r3, [r3, #2]
 801ceb2:	2b02      	cmp	r3, #2
 801ceb4:	d106      	bne.n	801cec4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ceb6:	4b3a      	ldr	r3, [pc, #232]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801ceb8:	2200      	movs	r2, #0
 801ceba:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cebc:	4b38      	ldr	r3, [pc, #224]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cebe:	2200      	movs	r2, #0
 801cec0:	821a      	strh	r2, [r3, #16]
 801cec2:	e00a      	b.n	801ceda <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cec4:	4b36      	ldr	r3, [pc, #216]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cec6:	8a1a      	ldrh	r2, [r3, #16]
 801cec8:	4b35      	ldr	r3, [pc, #212]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801ceca:	8a9b      	ldrh	r3, [r3, #20]
 801cecc:	4413      	add	r3, r2
 801cece:	b29b      	uxth	r3, r3
 801ced0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ced4:	b29a      	uxth	r2, r3
 801ced6:	4b32      	ldr	r3, [pc, #200]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801ced8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ceda:	4b31      	ldr	r3, [pc, #196]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cedc:	8a1a      	ldrh	r2, [r3, #16]
 801cede:	4b30      	ldr	r3, [pc, #192]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cee0:	8a5b      	ldrh	r3, [r3, #18]
 801cee2:	429a      	cmp	r2, r3
 801cee4:	d04d      	beq.n	801cf82 <TRACE_TxCpltCallback+0xee>
 801cee6:	4b2e      	ldr	r3, [pc, #184]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cee8:	8adb      	ldrh	r3, [r3, #22]
 801ceea:	2b01      	cmp	r3, #1
 801ceec:	d149      	bne.n	801cf82 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ceee:	4b2c      	ldr	r3, [pc, #176]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cef0:	789b      	ldrb	r3, [r3, #2]
 801cef2:	2b01      	cmp	r3, #1
 801cef4:	d117      	bne.n	801cf26 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801cef6:	4b2a      	ldr	r3, [pc, #168]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cef8:	881a      	ldrh	r2, [r3, #0]
 801cefa:	4b29      	ldr	r3, [pc, #164]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cefc:	8a1b      	ldrh	r3, [r3, #16]
 801cefe:	1ad3      	subs	r3, r2, r3
 801cf00:	b29a      	uxth	r2, r3
 801cf02:	4b27      	ldr	r3, [pc, #156]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf04:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cf06:	4b26      	ldr	r3, [pc, #152]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf08:	2202      	movs	r2, #2
 801cf0a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cf0c:	4b24      	ldr	r3, [pc, #144]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf0e:	2200      	movs	r2, #0
 801cf10:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cf12:	4b23      	ldr	r3, [pc, #140]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf14:	8a9b      	ldrh	r3, [r3, #20]
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d105      	bne.n	801cf26 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cf1a:	4b21      	ldr	r3, [pc, #132]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf1c:	2200      	movs	r2, #0
 801cf1e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cf20:	4b1f      	ldr	r3, [pc, #124]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf22:	2200      	movs	r2, #0
 801cf24:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cf26:	4b1e      	ldr	r3, [pc, #120]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf28:	789b      	ldrb	r3, [r3, #2]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d115      	bne.n	801cf5a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cf2e:	4b1c      	ldr	r3, [pc, #112]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf30:	8a5a      	ldrh	r2, [r3, #18]
 801cf32:	4b1b      	ldr	r3, [pc, #108]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf34:	8a1b      	ldrh	r3, [r3, #16]
 801cf36:	429a      	cmp	r2, r3
 801cf38:	d908      	bls.n	801cf4c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cf3a:	4b19      	ldr	r3, [pc, #100]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf3c:	8a5a      	ldrh	r2, [r3, #18]
 801cf3e:	4b18      	ldr	r3, [pc, #96]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf40:	8a1b      	ldrh	r3, [r3, #16]
 801cf42:	1ad3      	subs	r3, r2, r3
 801cf44:	b29a      	uxth	r2, r3
 801cf46:	4b16      	ldr	r3, [pc, #88]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf48:	829a      	strh	r2, [r3, #20]
 801cf4a:	e006      	b.n	801cf5a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cf4c:	4b14      	ldr	r3, [pc, #80]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf4e:	8a1b      	ldrh	r3, [r3, #16]
 801cf50:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cf54:	b29a      	uxth	r2, r3
 801cf56:	4b12      	ldr	r3, [pc, #72]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf58:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cf5a:	4b11      	ldr	r3, [pc, #68]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf5c:	8a1b      	ldrh	r3, [r3, #16]
 801cf5e:	461a      	mov	r2, r3
 801cf60:	4b10      	ldr	r3, [pc, #64]	; (801cfa4 <TRACE_TxCpltCallback+0x110>)
 801cf62:	4413      	add	r3, r2
 801cf64:	61fb      	str	r3, [r7, #28]
 801cf66:	69bb      	ldr	r3, [r7, #24]
 801cf68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf6a:	693b      	ldr	r3, [r7, #16]
 801cf6c:	f383 8810 	msr	PRIMASK, r3
}
 801cf70:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cf72:	4b0d      	ldr	r3, [pc, #52]	; (801cfa8 <TRACE_TxCpltCallback+0x114>)
 801cf74:	68db      	ldr	r3, [r3, #12]
 801cf76:	4a0a      	ldr	r2, [pc, #40]	; (801cfa0 <TRACE_TxCpltCallback+0x10c>)
 801cf78:	8a92      	ldrh	r2, [r2, #20]
 801cf7a:	4611      	mov	r1, r2
 801cf7c:	69f8      	ldr	r0, [r7, #28]
 801cf7e:	4798      	blx	r3
 801cf80:	e00a      	b.n	801cf98 <TRACE_TxCpltCallback+0x104>
 801cf82:	69bb      	ldr	r3, [r7, #24]
 801cf84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	f383 8810 	msr	PRIMASK, r3
}
 801cf8c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cf8e:	f7e4 fe9f 	bl	8001cd0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cf92:	f000 f8a7 	bl	801d0e4 <TRACE_UnLock>
  }
}
 801cf96:	bf00      	nop
 801cf98:	bf00      	nop
 801cf9a:	3720      	adds	r7, #32
 801cf9c:	46bd      	mov	sp, r7
 801cf9e:	bd80      	pop	{r7, pc}
 801cfa0:	20001c14 	.word	0x20001c14
 801cfa4:	20001c2c 	.word	0x20001c2c
 801cfa8:	0801dcd0 	.word	0x0801dcd0

0801cfac <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cfac:	b480      	push	{r7}
 801cfae:	b087      	sub	sp, #28
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	4603      	mov	r3, r0
 801cfb4:	6039      	str	r1, [r7, #0]
 801cfb6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cfb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cfbc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfbe:	f3ef 8310 	mrs	r3, PRIMASK
 801cfc2:	60fb      	str	r3, [r7, #12]
  return(result);
 801cfc4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cfc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cfc8:	b672      	cpsid	i
}
 801cfca:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cfcc:	4b35      	ldr	r3, [pc, #212]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801cfce:	8a5a      	ldrh	r2, [r3, #18]
 801cfd0:	4b34      	ldr	r3, [pc, #208]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801cfd2:	8a1b      	ldrh	r3, [r3, #16]
 801cfd4:	429a      	cmp	r2, r3
 801cfd6:	d11b      	bne.n	801d010 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cfd8:	4b32      	ldr	r3, [pc, #200]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801cfda:	8a5b      	ldrh	r3, [r3, #18]
 801cfdc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cfe0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cfe2:	88fa      	ldrh	r2, [r7, #6]
 801cfe4:	8afb      	ldrh	r3, [r7, #22]
 801cfe6:	429a      	cmp	r2, r3
 801cfe8:	d33a      	bcc.n	801d060 <TRACE_AllocateBufer+0xb4>
 801cfea:	4b2e      	ldr	r3, [pc, #184]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801cfec:	8a1b      	ldrh	r3, [r3, #16]
 801cfee:	88fa      	ldrh	r2, [r7, #6]
 801cff0:	429a      	cmp	r2, r3
 801cff2:	d235      	bcs.n	801d060 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cff4:	4b2b      	ldr	r3, [pc, #172]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801cff6:	2201      	movs	r2, #1
 801cff8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cffa:	4b2a      	ldr	r3, [pc, #168]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801cffc:	8a5a      	ldrh	r2, [r3, #18]
 801cffe:	4b29      	ldr	r3, [pc, #164]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d000:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d002:	4b28      	ldr	r3, [pc, #160]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d004:	8a1b      	ldrh	r3, [r3, #16]
 801d006:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d008:	4b26      	ldr	r3, [pc, #152]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d00a:	2200      	movs	r2, #0
 801d00c:	825a      	strh	r2, [r3, #18]
 801d00e:	e027      	b.n	801d060 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d010:	4b24      	ldr	r3, [pc, #144]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d012:	8a5a      	ldrh	r2, [r3, #18]
 801d014:	4b23      	ldr	r3, [pc, #140]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d016:	8a1b      	ldrh	r3, [r3, #16]
 801d018:	429a      	cmp	r2, r3
 801d01a:	d91b      	bls.n	801d054 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d01c:	4b21      	ldr	r3, [pc, #132]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d01e:	8a5b      	ldrh	r3, [r3, #18]
 801d020:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d024:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d026:	88fa      	ldrh	r2, [r7, #6]
 801d028:	8afb      	ldrh	r3, [r7, #22]
 801d02a:	429a      	cmp	r2, r3
 801d02c:	d318      	bcc.n	801d060 <TRACE_AllocateBufer+0xb4>
 801d02e:	4b1d      	ldr	r3, [pc, #116]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d030:	8a1b      	ldrh	r3, [r3, #16]
 801d032:	88fa      	ldrh	r2, [r7, #6]
 801d034:	429a      	cmp	r2, r3
 801d036:	d213      	bcs.n	801d060 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d038:	4b1a      	ldr	r3, [pc, #104]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d03a:	2201      	movs	r2, #1
 801d03c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d03e:	4b19      	ldr	r3, [pc, #100]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d040:	8a5a      	ldrh	r2, [r3, #18]
 801d042:	4b18      	ldr	r3, [pc, #96]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d044:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d046:	4b17      	ldr	r3, [pc, #92]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d048:	8a1b      	ldrh	r3, [r3, #16]
 801d04a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d04c:	4b15      	ldr	r3, [pc, #84]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d04e:	2200      	movs	r2, #0
 801d050:	825a      	strh	r2, [r3, #18]
 801d052:	e005      	b.n	801d060 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d054:	4b13      	ldr	r3, [pc, #76]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d056:	8a1a      	ldrh	r2, [r3, #16]
 801d058:	4b12      	ldr	r3, [pc, #72]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d05a:	8a5b      	ldrh	r3, [r3, #18]
 801d05c:	1ad3      	subs	r3, r2, r3
 801d05e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d060:	8afa      	ldrh	r2, [r7, #22]
 801d062:	88fb      	ldrh	r3, [r7, #6]
 801d064:	429a      	cmp	r2, r3
 801d066:	d90f      	bls.n	801d088 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d068:	4b0e      	ldr	r3, [pc, #56]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d06a:	8a5a      	ldrh	r2, [r3, #18]
 801d06c:	683b      	ldr	r3, [r7, #0]
 801d06e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d070:	4b0c      	ldr	r3, [pc, #48]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d072:	8a5a      	ldrh	r2, [r3, #18]
 801d074:	88fb      	ldrh	r3, [r7, #6]
 801d076:	4413      	add	r3, r2
 801d078:	b29b      	uxth	r3, r3
 801d07a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d07e:	b29a      	uxth	r2, r3
 801d080:	4b08      	ldr	r3, [pc, #32]	; (801d0a4 <TRACE_AllocateBufer+0xf8>)
 801d082:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d084:	2300      	movs	r3, #0
 801d086:	82bb      	strh	r3, [r7, #20]
 801d088:	693b      	ldr	r3, [r7, #16]
 801d08a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d08c:	68bb      	ldr	r3, [r7, #8]
 801d08e:	f383 8810 	msr	PRIMASK, r3
}
 801d092:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d094:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d098:	4618      	mov	r0, r3
 801d09a:	371c      	adds	r7, #28
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bc80      	pop	{r7}
 801d0a0:	4770      	bx	lr
 801d0a2:	bf00      	nop
 801d0a4:	20001c14 	.word	0x20001c14

0801d0a8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d0a8:	b480      	push	{r7}
 801d0aa:	b085      	sub	sp, #20
 801d0ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0ae:	f3ef 8310 	mrs	r3, PRIMASK
 801d0b2:	607b      	str	r3, [r7, #4]
  return(result);
 801d0b4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d0b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0b8:	b672      	cpsid	i
}
 801d0ba:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d0bc:	4b08      	ldr	r3, [pc, #32]	; (801d0e0 <TRACE_Lock+0x38>)
 801d0be:	8adb      	ldrh	r3, [r3, #22]
 801d0c0:	3301      	adds	r3, #1
 801d0c2:	b29a      	uxth	r2, r3
 801d0c4:	4b06      	ldr	r3, [pc, #24]	; (801d0e0 <TRACE_Lock+0x38>)
 801d0c6:	82da      	strh	r2, [r3, #22]
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0cc:	68bb      	ldr	r3, [r7, #8]
 801d0ce:	f383 8810 	msr	PRIMASK, r3
}
 801d0d2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d0d4:	bf00      	nop
 801d0d6:	3714      	adds	r7, #20
 801d0d8:	46bd      	mov	sp, r7
 801d0da:	bc80      	pop	{r7}
 801d0dc:	4770      	bx	lr
 801d0de:	bf00      	nop
 801d0e0:	20001c14 	.word	0x20001c14

0801d0e4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d0e4:	b480      	push	{r7}
 801d0e6:	b085      	sub	sp, #20
 801d0e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0ea:	f3ef 8310 	mrs	r3, PRIMASK
 801d0ee:	607b      	str	r3, [r7, #4]
  return(result);
 801d0f0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d0f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0f4:	b672      	cpsid	i
}
 801d0f6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d0f8:	4b08      	ldr	r3, [pc, #32]	; (801d11c <TRACE_UnLock+0x38>)
 801d0fa:	8adb      	ldrh	r3, [r3, #22]
 801d0fc:	3b01      	subs	r3, #1
 801d0fe:	b29a      	uxth	r2, r3
 801d100:	4b06      	ldr	r3, [pc, #24]	; (801d11c <TRACE_UnLock+0x38>)
 801d102:	82da      	strh	r2, [r3, #22]
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d108:	68bb      	ldr	r3, [r7, #8]
 801d10a:	f383 8810 	msr	PRIMASK, r3
}
 801d10e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d110:	bf00      	nop
 801d112:	3714      	adds	r7, #20
 801d114:	46bd      	mov	sp, r7
 801d116:	bc80      	pop	{r7}
 801d118:	4770      	bx	lr
 801d11a:	bf00      	nop
 801d11c:	20001c14 	.word	0x20001c14

0801d120 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d120:	b480      	push	{r7}
 801d122:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d124:	4b05      	ldr	r3, [pc, #20]	; (801d13c <TRACE_IsLocked+0x1c>)
 801d126:	8adb      	ldrh	r3, [r3, #22]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	bf14      	ite	ne
 801d12c:	2301      	movne	r3, #1
 801d12e:	2300      	moveq	r3, #0
 801d130:	b2db      	uxtb	r3, r3
}
 801d132:	4618      	mov	r0, r3
 801d134:	46bd      	mov	sp, r7
 801d136:	bc80      	pop	{r7}
 801d138:	4770      	bx	lr
 801d13a:	bf00      	nop
 801d13c:	20001c14 	.word	0x20001c14

0801d140 <__libc_init_array>:
 801d140:	b570      	push	{r4, r5, r6, lr}
 801d142:	4d0d      	ldr	r5, [pc, #52]	; (801d178 <__libc_init_array+0x38>)
 801d144:	4c0d      	ldr	r4, [pc, #52]	; (801d17c <__libc_init_array+0x3c>)
 801d146:	1b64      	subs	r4, r4, r5
 801d148:	10a4      	asrs	r4, r4, #2
 801d14a:	2600      	movs	r6, #0
 801d14c:	42a6      	cmp	r6, r4
 801d14e:	d109      	bne.n	801d164 <__libc_init_array+0x24>
 801d150:	4d0b      	ldr	r5, [pc, #44]	; (801d180 <__libc_init_array+0x40>)
 801d152:	4c0c      	ldr	r4, [pc, #48]	; (801d184 <__libc_init_array+0x44>)
 801d154:	f000 f8a0 	bl	801d298 <_init>
 801d158:	1b64      	subs	r4, r4, r5
 801d15a:	10a4      	asrs	r4, r4, #2
 801d15c:	2600      	movs	r6, #0
 801d15e:	42a6      	cmp	r6, r4
 801d160:	d105      	bne.n	801d16e <__libc_init_array+0x2e>
 801d162:	bd70      	pop	{r4, r5, r6, pc}
 801d164:	f855 3b04 	ldr.w	r3, [r5], #4
 801d168:	4798      	blx	r3
 801d16a:	3601      	adds	r6, #1
 801d16c:	e7ee      	b.n	801d14c <__libc_init_array+0xc>
 801d16e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d172:	4798      	blx	r3
 801d174:	3601      	adds	r6, #1
 801d176:	e7f2      	b.n	801d15e <__libc_init_array+0x1e>
 801d178:	0801e2e4 	.word	0x0801e2e4
 801d17c:	0801e2e4 	.word	0x0801e2e4
 801d180:	0801e2e4 	.word	0x0801e2e4
 801d184:	0801e2e8 	.word	0x0801e2e8

0801d188 <memset>:
 801d188:	4402      	add	r2, r0
 801d18a:	4603      	mov	r3, r0
 801d18c:	4293      	cmp	r3, r2
 801d18e:	d100      	bne.n	801d192 <memset+0xa>
 801d190:	4770      	bx	lr
 801d192:	f803 1b01 	strb.w	r1, [r3], #1
 801d196:	e7f9      	b.n	801d18c <memset+0x4>

0801d198 <floor>:
 801d198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d19c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801d1a0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801d1a4:	2e13      	cmp	r6, #19
 801d1a6:	4602      	mov	r2, r0
 801d1a8:	460b      	mov	r3, r1
 801d1aa:	4607      	mov	r7, r0
 801d1ac:	460c      	mov	r4, r1
 801d1ae:	4605      	mov	r5, r0
 801d1b0:	dc33      	bgt.n	801d21a <floor+0x82>
 801d1b2:	2e00      	cmp	r6, #0
 801d1b4:	da14      	bge.n	801d1e0 <floor+0x48>
 801d1b6:	a334      	add	r3, pc, #208	; (adr r3, 801d288 <floor+0xf0>)
 801d1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1bc:	f7e2 ffea 	bl	8000194 <__adddf3>
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	f7e3 fa1a 	bl	80005fc <__aeabi_dcmpgt>
 801d1c8:	b138      	cbz	r0, 801d1da <floor+0x42>
 801d1ca:	2c00      	cmp	r4, #0
 801d1cc:	da58      	bge.n	801d280 <floor+0xe8>
 801d1ce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d1d2:	431d      	orrs	r5, r3
 801d1d4:	d001      	beq.n	801d1da <floor+0x42>
 801d1d6:	4c2e      	ldr	r4, [pc, #184]	; (801d290 <floor+0xf8>)
 801d1d8:	2500      	movs	r5, #0
 801d1da:	4623      	mov	r3, r4
 801d1dc:	462f      	mov	r7, r5
 801d1de:	e025      	b.n	801d22c <floor+0x94>
 801d1e0:	4a2c      	ldr	r2, [pc, #176]	; (801d294 <floor+0xfc>)
 801d1e2:	fa42 f806 	asr.w	r8, r2, r6
 801d1e6:	ea01 0208 	and.w	r2, r1, r8
 801d1ea:	4302      	orrs	r2, r0
 801d1ec:	d01e      	beq.n	801d22c <floor+0x94>
 801d1ee:	a326      	add	r3, pc, #152	; (adr r3, 801d288 <floor+0xf0>)
 801d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1f4:	f7e2 ffce 	bl	8000194 <__adddf3>
 801d1f8:	2200      	movs	r2, #0
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	f7e3 f9fe 	bl	80005fc <__aeabi_dcmpgt>
 801d200:	2800      	cmp	r0, #0
 801d202:	d0ea      	beq.n	801d1da <floor+0x42>
 801d204:	2c00      	cmp	r4, #0
 801d206:	bfbe      	ittt	lt
 801d208:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d20c:	fa43 f606 	asrlt.w	r6, r3, r6
 801d210:	19a4      	addlt	r4, r4, r6
 801d212:	ea24 0408 	bic.w	r4, r4, r8
 801d216:	2500      	movs	r5, #0
 801d218:	e7df      	b.n	801d1da <floor+0x42>
 801d21a:	2e33      	cmp	r6, #51	; 0x33
 801d21c:	dd0a      	ble.n	801d234 <floor+0x9c>
 801d21e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d222:	d103      	bne.n	801d22c <floor+0x94>
 801d224:	f7e2 ffb6 	bl	8000194 <__adddf3>
 801d228:	4607      	mov	r7, r0
 801d22a:	460b      	mov	r3, r1
 801d22c:	4638      	mov	r0, r7
 801d22e:	4619      	mov	r1, r3
 801d230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d234:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801d238:	f04f 32ff 	mov.w	r2, #4294967295
 801d23c:	fa22 f808 	lsr.w	r8, r2, r8
 801d240:	ea18 0f00 	tst.w	r8, r0
 801d244:	d0f2      	beq.n	801d22c <floor+0x94>
 801d246:	a310      	add	r3, pc, #64	; (adr r3, 801d288 <floor+0xf0>)
 801d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d24c:	f7e2 ffa2 	bl	8000194 <__adddf3>
 801d250:	2200      	movs	r2, #0
 801d252:	2300      	movs	r3, #0
 801d254:	f7e3 f9d2 	bl	80005fc <__aeabi_dcmpgt>
 801d258:	2800      	cmp	r0, #0
 801d25a:	d0be      	beq.n	801d1da <floor+0x42>
 801d25c:	2c00      	cmp	r4, #0
 801d25e:	da02      	bge.n	801d266 <floor+0xce>
 801d260:	2e14      	cmp	r6, #20
 801d262:	d103      	bne.n	801d26c <floor+0xd4>
 801d264:	3401      	adds	r4, #1
 801d266:	ea25 0508 	bic.w	r5, r5, r8
 801d26a:	e7b6      	b.n	801d1da <floor+0x42>
 801d26c:	2301      	movs	r3, #1
 801d26e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d272:	fa03 f606 	lsl.w	r6, r3, r6
 801d276:	4435      	add	r5, r6
 801d278:	42bd      	cmp	r5, r7
 801d27a:	bf38      	it	cc
 801d27c:	18e4      	addcc	r4, r4, r3
 801d27e:	e7f2      	b.n	801d266 <floor+0xce>
 801d280:	2500      	movs	r5, #0
 801d282:	462c      	mov	r4, r5
 801d284:	e7a9      	b.n	801d1da <floor+0x42>
 801d286:	bf00      	nop
 801d288:	8800759c 	.word	0x8800759c
 801d28c:	7e37e43c 	.word	0x7e37e43c
 801d290:	bff00000 	.word	0xbff00000
 801d294:	000fffff 	.word	0x000fffff

0801d298 <_init>:
 801d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d29a:	bf00      	nop
 801d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d29e:	bc08      	pop	{r3}
 801d2a0:	469e      	mov	lr, r3
 801d2a2:	4770      	bx	lr

0801d2a4 <_fini>:
 801d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2a6:	bf00      	nop
 801d2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d2aa:	bc08      	pop	{r3}
 801d2ac:	469e      	mov	lr, r3
 801d2ae:	4770      	bx	lr
